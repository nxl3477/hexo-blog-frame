{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/my_favicon.ico","path":"images/my_favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/my_favicon_small.ico","path":"images/my_favicon_small.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/myavatar.jpg","path":"images/myavatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bai.js","path":"js/src/bai.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/md5.js","path":"js/src/md5.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/baidu_verify_UCp8DVX1mJ.html","hash":"1862349bcebd44d95e04e440c274368ca2c6e938","modified":1552797723647},{"_id":"source/google0e4fe1e51eb21469.html","hash":"4706a06de6dcf15d319375f5a48263abc9ddb693","modified":1552798600346},{"_id":"source/robots.txt","hash":"9ea605c9ceeea0daf677dc5405834a298fca9903","modified":1552707732045},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1552659391732},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1552659391733},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1552659391735},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1552659391747},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1552659391749},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1552659391750},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1552659391752},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1552659391753},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1552659391755},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1552659391758},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1552659391760},{"_id":"themes/next/_config.yml","hash":"7adf80cd29da20eb9b1575681fdcc408ca83073b","modified":1553331930131},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1552659391764},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1552659391765},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1552659391966},{"_id":"source/_posts/CSS如何了解新知识.md","hash":"92c164fa35e2d33f7121c84ec8b0ae07d5655997","modified":1553262472702},{"_id":"source/_posts/CSS插件及工具.md","hash":"db3354e641011a23d974000307b56641e9ae8c2d","modified":1553262477216},{"_id":"source/_posts/Js与CSS变量操作.md","hash":"03c9cb6cc4cd228cb0ab6e8aebda304f3b4b8813","modified":1553262494797},{"_id":"source/_posts/Linux工具-插件.md","hash":"66b6e60769d2cf309eb678b94d0ce4196cde1366","modified":1553093175595},{"_id":"source/_posts/TypeScript手册.md","hash":"79a9815ed30b9487c861fe519935afa6668cd2ce","modified":1553324477275},{"_id":"source/_posts/css分层-命名规范.md","hash":"699026ce9ce684e21484dee745e43d9820e700f4","modified":1553262468923},{"_id":"source/_posts/css预处理与后处理器.md","hash":"339760f450884615404aceff9d39c39e0018fad9","modified":1553262487487},{"_id":"source/_posts/hexo中如何使用本地图片.md","hash":"1c9188b165b00b4ac3008a961ee8193ae41aa452","modified":1553093128787},{"_id":"source/_posts/【AOP】面向切面编程.md","hash":"329c519a06e2f23132dbc1134d0ce1cce3edb037","modified":1553408093857},{"_id":"source/_posts/【PostCss】使用明天的CSS.md","hash":"49e58d072b9c14fd832e2f24a3d13b1299ff8897","modified":1553262572343},{"_id":"source/_posts/【css-doodle】css-web-component入门.md","hash":"ed6aad8837c50af632f6310716971248ebe2597c","modified":1553262565352},{"_id":"source/_posts/使用Jenkins构建前端持续集成.md","hash":"763a993c6935b7612b4d5b9e8ef3e88dcd6fbca5","modified":1553093536270},{"_id":"source/_posts/利用CSS混合模式更改图片颜色.md","hash":"166fc0701077ff9751a4d241c7ad48eb1ee8485f","modified":1553262554147},{"_id":"source/_posts/手摸手AngularJs入门教程.md","hash":"f256e85a3a46eb74565cef22cb791a4c514db10a","modified":1553093714313},{"_id":"source/_posts/算法工具-插件.md","hash":"4509f1a64da7958d1dbc057ec53c28f99ec99279","modified":1552809977867},{"_id":"source/_posts/面向对象设计原则之IOC控制反转.md","hash":"24d085757aaa344add2f4570920647536280b54f","modified":1553407062075},{"_id":"source/_posts/面向对象设计原则之SOLID.md","hash":"592f29cd771c285c65835bd867d5848a3cbe1504","modified":1553407073957},{"_id":"source/categories/index.md","hash":"2de5f843791cc237fc93871d470e69131726404c","modified":1552708635981},{"_id":"source/tags/index.md","hash":"9064f7e5fe91e9cdf9694214e4a62bc1da2d77b9","modified":1552708631233},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1552659391769},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1552659391768},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1552659391771},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1552659391774},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1552659391776},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1552659391778},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1552659391779},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1552659391781},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1552659391782},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1552659391784},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1552659391786},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1552659391787},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1552659391788},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1552666076235},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1552659391793},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1552659391795},{"_id":"themes/next/layout/_layout.swig","hash":"4ecd1406c9ffe4deb1fb98d0da0ba4bc6b0021a8","modified":1553267220882},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1552659391953},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1552659391956},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1552659391958},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1552659391960},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1552659391961},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1552659391963},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1552659391964},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1552659391969},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1552659391971},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1552659392652},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1552659392654},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1552659392657},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392266},{"_id":"source/_posts/md_imgs/2019-03-22-22-06-18.png","hash":"1e1c306172d1b0fc57d6c5215c697d18e7f06c67","modified":1553263579160},{"_id":"source/_posts/md_imgs/2019-03-22-22-06-26.png","hash":"1e1c306172d1b0fc57d6c5215c697d18e7f06c67","modified":1553263586772},{"_id":"source/_posts/md_imgs/2019-03-22-22-19-19.png","hash":"c2c10a7a3bd6981ecd5e9e6b92d51e02a7d3da8d","modified":1553264359949},{"_id":"source/_posts/md_imgs/2019-03-22-22-22-55.png","hash":"6b4e042308ae7ae540d657e7c1db0ef8ca8c51e1","modified":1553264575907},{"_id":"source/_posts/md_imgs/2019-03-23-11-35-24.png","hash":"59abc3aa461bfa6931aca91e891ad97f8e1fa119","modified":1553312125442},{"_id":"source/_posts/md_imgs/2019-03-23-11-35-28.png","hash":"59abc3aa461bfa6931aca91e891ad97f8e1fa119","modified":1553312128892},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1552659391799},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1552659391801},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1552659391805},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1552659391808},{"_id":"themes/next/layout/_macro/post.swig","hash":"ba2a3560fbabbeaa9681dc41d1bb81975ad136ad","modified":1552665952382},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1552659391812},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"80180e4d6382fa690fa4d16b63288bb98b919d35","modified":1552799624607},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1552659391816},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4c044d39b3f3f7c6512db433533cf9e2dd3055fc","modified":1553330582208},{"_id":"themes/next/layout/_partials/footer.swig","hash":"faf71d7f8242911394b49425f2ee61c1b7d64586","modified":1552799535288},{"_id":"themes/next/layout/_partials/head.swig","hash":"297ac38603d60a75aa6a45a197ef0d9d18deec5c","modified":1552798919510},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1552659391830},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1552659391832},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1552659391834},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1552659391835},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1552659391856},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1552659391858},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1552659391870},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1552659391923},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1552659391927},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1552659391925},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1552659391928},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1552659391930},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1552659391932},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1552659391933},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1552659391976},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1552659391974},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1552659391977},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1552659391979},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1552659391981},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1552659391983},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1552659391985},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1552659391986},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1552659391989},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1552659392263},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1552659392270},{"_id":"themes/next/source/images/alipay.jpg","hash":"66b14acbff7c07594ab21624b1671ab49deb355f","modified":1552792130526},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1552659392273},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1552659392275},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1552659392277},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1552659392279},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1552659392281},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1552659392283},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1552659392285},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1552659392286},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1552659392289},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1552659392291},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1552659392293},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552659392294},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1552659392296},{"_id":"themes/next/source/images/my_favicon.ico","hash":"32d7f41cfc03d1a81346691b4803a3124b7b0b8d","modified":1552714719214},{"_id":"themes/next/source/images/my_favicon_small.ico","hash":"677e14b2949bd9d9a38bbeaa538fb26792350c17","modified":1552714838347},{"_id":"themes/next/source/images/myavatar.jpg","hash":"10545caf74010b6169944a4ff35b84f5ee32c6a2","modified":1553268800872},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552659392298},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1552659392299},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1552659392301},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1552659392303},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"6bc7e8c08d39c4f18acc22344f5322727160dfe3","modified":1552792137052},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659391866},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659391867},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392183},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392185},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392191},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392256},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392262},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1552659391827},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1552659391829},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1552659391840},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1552659391841},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1552659391844},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1552659391847},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1552659391849},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1552659391850},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1552659391852},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1552659391862},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1552659391865},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1552659391868},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1552659391876},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1552659391877},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1552659391880},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1552659391882},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1552659391884},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1552659391885},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1552659391887},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1552659391890},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1552659391894},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1552659391891},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1552659391896},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1552659391898},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1552659391900},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1552659391903},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1552659391906},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1552659391909},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e968fbc0c455532a969007e7622b6afd3c853f2","modified":1553270927283},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1552659391911},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1552659391913},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"75d973fc442af673a15b253379a1839df29b1a32","modified":1553267972093},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1552659391917},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1552659391919},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1552659391920},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1552659391944},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1552659391946},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1552659391952},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1552659391948},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1552659392179},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1552659392182},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1552659392187},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1552659392190},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1552659392253},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1552659392254},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1552659392258},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1552659392260},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1552659392311},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1552659392309},{"_id":"themes/next/source/js/src/bai.js","hash":"5b3b5a34da919896acc03a34f63f784dd084e72c","modified":1552800718615},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1552659392313},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1552659392315},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1552659392316},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1552659392318},{"_id":"themes/next/source/js/src/md5.js","hash":"c27927a82941ba972c140abf26ad82e04c32d86a","modified":1553270761828},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1552659392320},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1552659392323},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1552659392329},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1552659392331},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1552659392362},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1552659392371},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1552659392375},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1552659392379},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1552659392330},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1552659392421},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1552659392380},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1552659392424},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1552659392427},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1552659392436},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1552659392437},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1552659392442},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1552659392444},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1552659392425},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1552659392511},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1552659392529},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1552659392440},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1552659392531},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1552659392535},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1552659392538},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1552659392541},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1552659392543},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1552659392548},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1552659392549},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1552659392552},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1552659392556},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1552659392558},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1552659392561},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1552659392563},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1552659392565},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1552659392567},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1552659392570},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1552659392571},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1552659392573},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1552659392575},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1552659392578},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1552659392582},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1552659392584},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1552659392587},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1552659392593},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1552659392595},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1552659392598},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1552659392632},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1552659392634},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1552659392645},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1552659392646},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1552659392649},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1552659392525},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1552659391940},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1552659391942},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1552659392000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1552659392002},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1552659392004},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1552659392007},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1552659392009},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1552659392050},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1552659392111},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1552659392166},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1552659392168},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1552659392170},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1552659392172},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1552659392174},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1552659392176},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1552659392163},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1552659392198},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1552659392201},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1552659392203},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1552659392205},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1552659392208},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1552659392210},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1552659392212},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1552659392213},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1552659392226},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1552659392228},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1552659392229},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1552659392231},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1552659392233},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1552659392240},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1552659392242},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1552659392244},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1552659392246},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1552659392248},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1552659392249},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1552659392327},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1552659392349},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1552659392355},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1552659392358},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1552659392386},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1552659392384},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1552659392388},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1552659392390},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1552659392392},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1552659392395},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1552659392413},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1552659392415},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1552659392418},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1552659392430},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1552659392432},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1552659392448},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1552659392450},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1552659392452},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1552659392625},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1552659392627},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1552659392353},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1552659392494},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1552659392497},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1552659392640},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1552659392013},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1552659392017},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1552659392019},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1552659392023},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1552659392026},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1552659392028},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1552659392032},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1552659392034},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1552659392036},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1552659392041},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1552659392042},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1552659392044},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1552659392046},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1552659392048},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1552659392054},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1552659392057},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1552659392058},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1552659392060},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1552659392062},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1552659392064},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1552659392066},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1552659392068},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1552659392070},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1552659392073},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1552659392075},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1552659392076},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1552659392078},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1552659392080},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1552659392082},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1552659392086},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"b9002196a748365b5c14e4193816c654b9ce5fd6","modified":1553269273709},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1552659392095},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1552659392093},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1552659392097},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1552659392099},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1552659392101},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1552659392103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1552659392106},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1552659392109},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1552659392115},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1552659392117},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1552659392119},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1552659392122},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1552659392125},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1552659392127},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1552659392129},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1552659392131},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1552659392133},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1552659392137},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1552659392141},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1552659392144},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1552659392146},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1552659392148},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1552659392150},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1552659392153},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1552659392155},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1552659392158},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1552659392161},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1552659392217},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1552659392221},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1552659392236},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1552659392340},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1552659392342},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1552659392344},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1552659392346},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1552659392348},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1552659392400},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1552659392398},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1552659392403},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1552659392405},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1552659392408},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1552659392411},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1552659392461},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1552659392466},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1552659392491},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1552659392368},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1552659392618},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1552659392484},{"_id":"source/_posts/md_imgs/2019-03-24-13-49-37.png","hash":"f42fc3758e6c2e40fec4e77423ff0b4c3281e445","modified":1553406578872},{"_id":"source/_posts/md_imgs/2019-03-24-13-25-50.png","hash":"a6e0e7ecc92783e93b719c686000168898035cf9","modified":1553405150960},{"_id":"source/_posts/md_imgs/2019-03-24-09-45-13.png","hash":"026208f3d6607da3a25a12642be22eca5c2068df","modified":1553391915172},{"_id":"source/_posts/md_imgs/2019-03-24-09-45-24.png","hash":"026208f3d6607da3a25a12642be22eca5c2068df","modified":1553391925676},{"_id":"public/baidusitemap.xml","hash":"45b6301fb9500d86b468b7e8d0408bd813b8aa60","modified":1553408142257},{"_id":"public/search.xml","hash":"1dfdbf2e4714f5c0e67759e7ee89cd800ad3cb8f","modified":1553408142257},{"_id":"public/sitemap.xml","hash":"e1592f3b7f2934f52b49ef91d003169793e0610e","modified":1553408142321},{"_id":"public/baidu_verify_UCp8DVX1mJ.html","hash":"c15bbb4265cf4dc321179b4fcdb1597f50167ee1","modified":1553408142350},{"_id":"public/google0e4fe1e51eb21469.html","hash":"da9d92b0a2ca401ca0a519ff6e39f3dc75290aa6","modified":1553408142351},{"_id":"public/categories/index.html","hash":"cba43af0e6ff7db3072253934438377a7875a41f","modified":1553408142351},{"_id":"public/tags/index.html","hash":"00457b478825c31bdc8d21a1b5f83796c2939a43","modified":1553408142351},{"_id":"public/2019/03/24/【AOP】面向切面编程/index.html","hash":"9f89e2791b3640f380ae957c190fbff7e6955345","modified":1553408142351},{"_id":"public/2019/03/24/面向对象设计原则之IOC控制反转/index.html","hash":"6af31b150ee60d46925ebb43ea39227ae7fbd6db","modified":1553408142351},{"_id":"public/2019/03/24/面向对象设计原则之SOLID/index.html","hash":"f6ff937a94fa3ab619e4cfd7d07974eb712fe60c","modified":1553408142352},{"_id":"public/2019/03/18/TypeScript手册/index.html","hash":"9157a8b3e4a470c7accda2cf0446b9d077990c38","modified":1553408142352},{"_id":"public/2019/03/17/算法工具-插件/index.html","hash":"40e66cfe604038f34fcb85312650bfca3baff3ca","modified":1553408142352},{"_id":"public/2019/03/17/Linux工具-插件/index.html","hash":"0980edfb18461e5932375e7ee79a469fa7f15ac4","modified":1553408142352},{"_id":"public/2019/03/16/css分层-命名规范/index.html","hash":"0002513ab2b63d5b24565b02c3c40e75b55aa7ac","modified":1553408142352},{"_id":"public/2019/03/16/【css-doodle】css-web-component入门/index.html","hash":"c726792f36add10e0ca4ae9e5e6039032fac4719","modified":1553408142352},{"_id":"public/2019/03/16/利用CSS混合模式更改图片颜色/index.html","hash":"c28197921c358888173c6d403ea739ee7f38c789","modified":1553408142353},{"_id":"public/2019/03/16/CSS插件及工具/index.html","hash":"4ce2b99e01b9f29b53d1b77b24c9b9bae6057bbd","modified":1553408142353},{"_id":"public/2019/03/16/Js与CSS变量操作/index.html","hash":"17ad4b6c62986eadb40988028dfb7b1f7c4acdf7","modified":1553408142353},{"_id":"public/2019/03/16/CSS如何了解新知识/index.html","hash":"1776278bf62bd3a3fcc6f3214e0cda9087a1c22f","modified":1553408142353},{"_id":"public/2019/03/16/【PostCss】使用明天的CSS/index.html","hash":"953852f2f032fa6c28edfb6961bbf38f724ba793","modified":1553408142353},{"_id":"public/2019/03/16/使用Jenkins构建前端持续集成/index.html","hash":"b090a94ed3387cae361562e06c0ec7295eb68758","modified":1553408142353},{"_id":"public/2019/03/16/css预处理与后处理器/index.html","hash":"c2b6de760193a280c21f5c75f19ff3171af5cf6c","modified":1553408142353},{"_id":"public/2019/03/16/手摸手AngularJs入门教程/index.html","hash":"65821fe6b2a5e9817f370f8c6c33c3fa7425328b","modified":1553408142353},{"_id":"public/2019/03/16/hexo中如何使用本地图片/index.html","hash":"ff916f637814a1279ad4f938e291b740b1099a7c","modified":1553408142353},{"_id":"public/archives/index.html","hash":"a5868bc4c1fb7c27342e72f7530fdccf01f5ea69","modified":1553408142353},{"_id":"public/archives/page/2/index.html","hash":"efdb5c2765586d996b58ff7aacdbe06792ac85e3","modified":1553408142354},{"_id":"public/archives/2019/index.html","hash":"580ee21a2442ff8d47e039e676d82de73cfd5ab0","modified":1553408142354},{"_id":"public/archives/2019/page/2/index.html","hash":"526a7eb8a7de457297caa59325aa099d938baede","modified":1553408142354},{"_id":"public/archives/2019/03/index.html","hash":"348740d1a8e3abf2763a894ba5bfd39715d07b83","modified":1553408142354},{"_id":"public/archives/2019/03/page/2/index.html","hash":"03b48607206b2103dd7e2dc9cd1b6f651885961c","modified":1553408142354},{"_id":"public/categories/学习技巧/index.html","hash":"b89110bea0aa50cb37467106110143baf19c1f3a","modified":1553408142354},{"_id":"public/categories/CSS/index.html","hash":"110f9cb78724706ece084e44b2bc4d8bd46246ed","modified":1553408142354},{"_id":"public/categories/Linux/index.html","hash":"39d4fb98c22e666f15403f35d3a17ed2ecab4a9e","modified":1553408142354},{"_id":"public/categories/hexo/index.html","hash":"ecdc0b83b92cbf73681192f54974dc794ae78e6f","modified":1553408142354},{"_id":"public/categories/编程思想/index.html","hash":"10ffbb0ca9a6a4dc409ae7d2e08d62f8bc5970d7","modified":1553408142354},{"_id":"public/categories/JavaScript/index.html","hash":"3bc51236b888b944bd6d464a8125cb3bc8f174c5","modified":1553408142355},{"_id":"public/categories/算法/index.html","hash":"9c46eedd72c4540e2e82c47c1b21550a285ff00f","modified":1553408142355},{"_id":"public/categories/TypeScript/index.html","hash":"b7da4227ce1e524d6b96704c9fd5670f204285fb","modified":1553408142355},{"_id":"public/categories/CI/index.html","hash":"5c1fbdbe8fef8f1bf6eb7848879e2078c559eb6f","modified":1553408142355},{"_id":"public/index.html","hash":"a303fccc6951b43d9f423fd2df1ed98f734db793","modified":1553408142355},{"_id":"public/page/2/index.html","hash":"ffd16328af280862f36fe068c8b241ea34aab449","modified":1553408142355},{"_id":"public/tags/学习技巧/index.html","hash":"9fc206f0f3553163256a53fb90c4dc2c16e9a9db","modified":1553408142355},{"_id":"public/tags/学习渠道/index.html","hash":"c0dd6d770fa4a9444c559cf9d9046f08fb819af5","modified":1553408142355},{"_id":"public/tags/css/index.html","hash":"e33242ba414e2c11cb20f6af310eb45e51691448","modified":1553408142355},{"_id":"public/tags/PostCss/index.html","hash":"00a6d8a7863acc6000d9207e1c4b661731c85da3","modified":1553408142356},{"_id":"public/tags/插件/index.html","hash":"e9d8b91ad8ab73a8dc5b0a4f2aeb2dbc693cd5f8","modified":1553408142356},{"_id":"public/tags/工具/index.html","hash":"d00e4fe5e93229c8b881c20661f6bf79a67ccd25","modified":1553408142357},{"_id":"public/tags/JavaScript/index.html","hash":"7a683fde9ac303bd33bd150d516183fbeb69254c","modified":1553408142357},{"_id":"public/tags/vim/index.html","hash":"19de5c3bf0c47ea2c827e6932c348a15b2ce92a5","modified":1553408142358},{"_id":"public/tags/命名规范/index.html","hash":"8d9aa4f6f06612150bf8dbd4647efa3e23d1baa5","modified":1553408142358},{"_id":"public/tags/hexo/index.html","hash":"921cb2fe5394e523c47511646a6de5be987ebd99","modified":1553408142358},{"_id":"public/tags/AOP/index.html","hash":"a9af5df5ed026a39e7ffa3ed64fb9b4018a3720b","modified":1553408142358},{"_id":"public/tags/编程范式/index.html","hash":"95207be6a5df173e18d21280e518e481c358690f","modified":1553408142358},{"_id":"public/tags/web-component/index.html","hash":"0d128bba4e1dc84a9886c285d25c9d1e9923bada","modified":1553408142358},{"_id":"public/tags/特效/index.html","hash":"fe8acd57325d6e3accdf409ae231725695faa176","modified":1553408142358},{"_id":"public/tags/Angular/index.html","hash":"28bbffe2f0495f6d5b8948744f537c46272ebc93","modified":1553408142358},{"_id":"public/tags/算法/index.html","hash":"9eb2964ee4e1e2bb5ff37f10e9640f0a49d965fe","modified":1553408142358},{"_id":"public/tags/oop/index.html","hash":"b0fa55dff5870883ecc05496796707a737107b5a","modified":1553408142358},{"_id":"public/tags/IOC/index.html","hash":"f11bb6cc37fe751f75c6a03b53115345640d84a6","modified":1553408142359},{"_id":"public/tags/编程原则/index.html","hash":"bf1affbd3482dff41d05cfbd035717355168eac2","modified":1553408142359},{"_id":"public/tags/TypeScript/index.html","hash":"51d3020358a38a7b7b1699c3111972886a9d644c","modified":1553408142359},{"_id":"public/tags/CI/index.html","hash":"72746af54ccfd2a837e6d6124d47ce8d34145842","modified":1553408142359},{"_id":"public/tags/Jenkins/index.html","hash":"6b30159453311100e8c3a380ee1fa729482673e0","modified":1553408142359},{"_id":"public/tags/Centos/index.html","hash":"072015e5c611281219ac759d617edafdcb013bcf","modified":1553408142359},{"_id":"public/tags/前端持续集成/index.html","hash":"eede5d3a7f115002491b3f3aabf2338c972cb417","modified":1553408142359},{"_id":"public/tags/SOLID/index.html","hash":"06da33a4fc1c25e978cdeade6d39486d2e62b1f3","modified":1553408142359},{"_id":"public/robots.txt","hash":"9ea605c9ceeea0daf677dc5405834a298fca9903","modified":1553408142402},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1553408142402},{"_id":"public/images/alipay.jpg","hash":"66b14acbff7c07594ab21624b1671ab49deb355f","modified":1553408142403},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1553408142403},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553408142403},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1553408142403},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1553408142403},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1553408142403},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1553408142404},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1553408142404},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1553408142404},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1553408142404},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1553408142404},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1553408142404},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553408142404},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1553408142404},{"_id":"public/images/my_favicon.ico","hash":"32d7f41cfc03d1a81346691b4803a3124b7b0b8d","modified":1553408142404},{"_id":"public/images/my_favicon_small.ico","hash":"677e14b2949bd9d9a38bbeaa538fb26792350c17","modified":1553408142404},{"_id":"public/images/myavatar.jpg","hash":"10545caf74010b6169944a4ff35b84f5ee32c6a2","modified":1553408142405},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553408142405},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1553408142405},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1553408142405},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553408142405},{"_id":"public/images/wechatpay.jpg","hash":"6bc7e8c08d39c4f18acc22344f5322727160dfe3","modified":1553408142405},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1553408142405},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1553408142405},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1553408142405},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1553408142407},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1553408142407},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1553408142407},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1553408142407},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1553408142407},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1553408142408},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1553408142408},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1553408142408},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1553408142408},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1553408142408},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1553408142408},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1553408142409},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553408143450},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553408143458},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1553408143496},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1553408143497},{"_id":"public/js/src/bai.js","hash":"46561541b1f1d5869ddf6c41d928354e6d8df93b","modified":1553408143499},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1553408143499},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1553408143499},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1553408143499},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1553408143499},{"_id":"public/js/src/md5.js","hash":"9e95b3d2fad05cd68bbe721bd9fe79e524c47e71","modified":1553408143499},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1553408143499},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1553408143499},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1553408143499},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553408143499},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1553408143499},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1553408143499},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1553408143499},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1553408143499},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1553408143500},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1553408143500},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1553408143500},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1553408143500},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1553408143500},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1553408143500},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1553408143500},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1553408143500},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1553408143500},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1553408143501},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1553408143501},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1553408143501},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1553408143501},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1553408143501},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1553408143501},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1553408143501},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1553408143501},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1553408143501},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1553408143501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1553408143501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1553408143501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1553408143501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1553408143501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1553408143501},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1553408143501},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1553408143501},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1553408143501},{"_id":"public/css/main.css","hash":"977acc1caf2ba47adf2940a8dc1e372e250ccbd9","modified":1553408143502},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553408143502},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553408143502},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553408143502},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1553408143552},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1553408143552},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1553408143552},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1553408143553},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1553408143553},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553408143553},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1553408143553},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1553408143553},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1553408143606},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1553408143606},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1553408143625},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553408143626},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553408143746},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1553408143746},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553408143747},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1553408143747},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553408143747},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1553408143747},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1553408143747},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1553408143747},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1553408143796},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1553408143796},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1553408143836},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1553408143849},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553408144050},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1553408144050},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553408144076},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1553408144090},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1553408144095}],"Category":[{"name":"学习技巧","_id":"cjtmj3dri000440uw6jowqx1n"},{"name":"CSS","_id":"cjtmj3drw000940uwd3q60udb"},{"name":"Linux","_id":"cjtmj3dsc000j40uwhxe5gpk7"},{"name":"hexo","_id":"cjtmj3dsr000z40uwtmheu6k7"},{"name":"编程思想","_id":"cjtmj3dsu001440uwxsyvcwi8"},{"name":"JavaScript","_id":"cjtmj3dsv001840uwo4ag5sk0"},{"name":"算法","_id":"cjtmj3dsx001d40uw2gp6btgd"},{"name":"TypeScript","_id":"cjtmj3e27002x40uw2qflebve"},{"name":"CI","_id":"cjtmj3e2e003040uwm78b47sh"}],"Data":[],"Page":[{"_content":"UCp8DVX1mJ","source":"baidu_verify_UCp8DVX1mJ.html","raw":"UCp8DVX1mJ","date":"2019-03-17T04:42:03.647Z","updated":"2019-03-17T04:42:03.647Z","path":"baidu_verify_UCp8DVX1mJ.html","title":"","comments":1,"layout":"page","_id":"cjtmj3dnt000040uwb1g0bwrj","content":"UCp8DVX1mJ","site":{"data":{}},"excerpt":"","more":"UCp8DVX1mJ"},{"_content":"google-site-verification: google0e4fe1e51eb21469.html","source":"google0e4fe1e51eb21469.html","raw":"google-site-verification: google0e4fe1e51eb21469.html","date":"2019-03-17T04:56:40.346Z","updated":"2019-03-17T04:56:40.346Z","path":"google0e4fe1e51eb21469.html","title":"","comments":1,"layout":"page","_id":"cjtmj3dot000140uwfwnznr01","content":"google-site-verification: google0e4fe1e51eb21469.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google0e4fe1e51eb21469.html"},{"title":"分类","date":"2019-03-15T15:34:34.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-03-15 23:34:34\ntype: \"categories\"   #这部分是新添加的\n---\n","updated":"2019-03-16T03:57:15.981Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjtmj3e1z002t40uw69yf7yv9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-03-15T13:54:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-15 21:54:26\ntype: \"tags\" #新添加的内容\n---\n","updated":"2019-03-16T03:57:11.233Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjtmj3e21002v40uw63s70mgi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSS如何了解新知识","date":"2019-03-16T08:56:22.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现\n\n并且还可以尝试着参与MDN的文章翻译及国外优质技术文章\n\n\n* MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference \n","source":"_posts/CSS如何了解新知识.md","raw":"---\ntitle: CSS如何了解新知识\ndate: 2019-03-16 16:56:22\ncategories: 学习技巧\ntags: [学习技巧, 学习渠道, css]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现\n\n并且还可以尝试着参与MDN的文章翻译及国外优质技术文章\n\n\n* MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference \n","slug":"CSS如何了解新知识","published":1,"updated":"2019-03-22T13:47:52.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3dr0000240uwwdyuc9n3","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现</p>\n<p>并且还可以尝试着参与MDN的文章翻译及国外优质技术文章</p>\n<ul>\n<li>MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference</a> </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现</p>\n<p>并且还可以尝试着参与MDN的文章翻译及国外优质技术文章</p>\n<ul>\n<li>MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference</a> </li>\n</ul>\n"},{"title":"CSS插件及工具","date":"2019-03-16T10:02:21.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n## CSS兼容查询\n* https://caniuse.com/ \n* https://cssdb.org/\n\n## 动画\n* 贝塞尔: http://cubic-bezier.com/#.17,.67,.83,.67\n\n## 高逼格\n* web component CSS: https://css-doodle.com/\n\n## PostCss 值得收藏的插件\n* POSTCSS-CUSTOM-PROPERTIES 运行时变量\n* POSTCSS-SIMPLE-VARS 与SCSS一致的变量实现\n* POSTCSS-MIXINS 实现类似SASS的@MIXIN的功能\n* POSTCSS-EXTEND 实现类似SASS的继承功能\n* POSTCSS-IMPORT 实现类似SASS的IMPORT\n* CSSNext 面向未来 \n* CSS Grace 修复过去（兼容IE，zomm、一像素留白等）","source":"_posts/CSS插件及工具.md","raw":"---\ntitle: CSS插件及工具\ndate: 2019-03-16 18:02:21\ncategories: CSS\ntags: [css, PostCss, 插件, 工具]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n## CSS兼容查询\n* https://caniuse.com/ \n* https://cssdb.org/\n\n## 动画\n* 贝塞尔: http://cubic-bezier.com/#.17,.67,.83,.67\n\n## 高逼格\n* web component CSS: https://css-doodle.com/\n\n## PostCss 值得收藏的插件\n* POSTCSS-CUSTOM-PROPERTIES 运行时变量\n* POSTCSS-SIMPLE-VARS 与SCSS一致的变量实现\n* POSTCSS-MIXINS 实现类似SASS的@MIXIN的功能\n* POSTCSS-EXTEND 实现类似SASS的继承功能\n* POSTCSS-IMPORT 实现类似SASS的IMPORT\n* CSSNext 面向未来 \n* CSS Grace 修复过去（兼容IE，zomm、一像素留白等）","slug":"CSS插件及工具","published":1,"updated":"2019-03-22T13:47:57.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3dr5000340uwuatwi6o2","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<h2 id=\"CSS兼容查询\"><a href=\"#CSS兼容查询\" class=\"headerlink\" title=\"CSS兼容查询\"></a>CSS兼容查询</h2><ul>\n<li><a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/</a> </li>\n<li><a href=\"https://cssdb.org/\" target=\"_blank\" rel=\"noopener\">https://cssdb.org/</a></li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>贝塞尔: <a href=\"http://cubic-bezier.com/#.17,.67,.83,.67\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com/#.17,.67,.83,.67</a></li>\n</ul>\n<h2 id=\"高逼格\"><a href=\"#高逼格\" class=\"headerlink\" title=\"高逼格\"></a>高逼格</h2><ul>\n<li>web component CSS: <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"noopener\">https://css-doodle.com/</a></li>\n</ul>\n<h2 id=\"PostCss-值得收藏的插件\"><a href=\"#PostCss-值得收藏的插件\" class=\"headerlink\" title=\"PostCss 值得收藏的插件\"></a>PostCss 值得收藏的插件</h2><ul>\n<li>POSTCSS-CUSTOM-PROPERTIES 运行时变量</li>\n<li>POSTCSS-SIMPLE-VARS 与SCSS一致的变量实现</li>\n<li>POSTCSS-MIXINS 实现类似SASS的@MIXIN的功能</li>\n<li>POSTCSS-EXTEND 实现类似SASS的继承功能</li>\n<li>POSTCSS-IMPORT 实现类似SASS的IMPORT</li>\n<li>CSSNext 面向未来 </li>\n<li>CSS Grace 修复过去（兼容IE，zomm、一像素留白等）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<h2 id=\"CSS兼容查询\"><a href=\"#CSS兼容查询\" class=\"headerlink\" title=\"CSS兼容查询\"></a>CSS兼容查询</h2><ul>\n<li><a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/</a> </li>\n<li><a href=\"https://cssdb.org/\" target=\"_blank\" rel=\"noopener\">https://cssdb.org/</a></li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>贝塞尔: <a href=\"http://cubic-bezier.com/#.17,.67,.83,.67\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com/#.17,.67,.83,.67</a></li>\n</ul>\n<h2 id=\"高逼格\"><a href=\"#高逼格\" class=\"headerlink\" title=\"高逼格\"></a>高逼格</h2><ul>\n<li>web component CSS: <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"noopener\">https://css-doodle.com/</a></li>\n</ul>\n<h2 id=\"PostCss-值得收藏的插件\"><a href=\"#PostCss-值得收藏的插件\" class=\"headerlink\" title=\"PostCss 值得收藏的插件\"></a>PostCss 值得收藏的插件</h2><ul>\n<li>POSTCSS-CUSTOM-PROPERTIES 运行时变量</li>\n<li>POSTCSS-SIMPLE-VARS 与SCSS一致的变量实现</li>\n<li>POSTCSS-MIXINS 实现类似SASS的@MIXIN的功能</li>\n<li>POSTCSS-EXTEND 实现类似SASS的继承功能</li>\n<li>POSTCSS-IMPORT 实现类似SASS的IMPORT</li>\n<li>CSSNext 面向未来 </li>\n<li>CSS Grace 修复过去（兼容IE，zomm、一像素留白等）</li>\n</ul>\n"},{"title":"Js与CSS变量操作","date":"2019-03-16T09:47:07.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排\n\n一起来看看如何操作吧~\n> 变量虽好， 不可滥用哦\n\n### 定义一个简单的变量\n```CSS\n/* 定义css 变量 */\n:root {\n  --backgroundColor: pink;\n}\n\nbody {\n  background-color: var(--backgroundColor);\n}\n```\n\n### 创建一个按钮\n```HTML\n<body>\n  <button id=\"btn\">点我改变背景</button>\n</body>\n```\n\n### 获取root元素并绑定按钮的点击事件\n```JavaScript\n<script>\nvar root = document.documentElement\n\nbtn.onclick = function() {\n  // 将变量修改为天蓝色\n  root.style.setProperty('--backgroundColor', 'skyblue')\n}\n</script>\n```\n\n\n### 结果对比\n\n点击前\n![按钮点击前](http://img.nixiaolei.com/2019-03-16-17-52-45.png)\n\n按钮点击后\n![按钮点击后](http://img.nixiaolei.com/2019-03-16-17-53-39.png)\n\n\n\n非常Nice~\n\n\n利用这个特性实现更多的可能吧！","source":"_posts/Js与CSS变量操作.md","raw":"---\ntitle: Js与CSS变量操作\ndate: 2019-03-16 17:47:07\ncategories: CSS\ntags: [JavaScript, css]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排\n\n一起来看看如何操作吧~\n> 变量虽好， 不可滥用哦\n\n### 定义一个简单的变量\n```CSS\n/* 定义css 变量 */\n:root {\n  --backgroundColor: pink;\n}\n\nbody {\n  background-color: var(--backgroundColor);\n}\n```\n\n### 创建一个按钮\n```HTML\n<body>\n  <button id=\"btn\">点我改变背景</button>\n</body>\n```\n\n### 获取root元素并绑定按钮的点击事件\n```JavaScript\n<script>\nvar root = document.documentElement\n\nbtn.onclick = function() {\n  // 将变量修改为天蓝色\n  root.style.setProperty('--backgroundColor', 'skyblue')\n}\n</script>\n```\n\n\n### 结果对比\n\n点击前\n![按钮点击前](http://img.nixiaolei.com/2019-03-16-17-52-45.png)\n\n按钮点击后\n![按钮点击后](http://img.nixiaolei.com/2019-03-16-17-53-39.png)\n\n\n\n非常Nice~\n\n\n利用这个特性实现更多的可能吧！","slug":"Js与CSS变量操作","published":1,"updated":"2019-03-22T13:48:14.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3drm000640uwznz78pje","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n<p>就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排</p>\n<p>一起来看看如何操作吧~</p>\n<blockquote>\n<p>变量虽好， 不可滥用哦</p>\n</blockquote>\n<h3 id=\"定义一个简单的变量\"><a href=\"#定义一个简单的变量\" class=\"headerlink\" title=\"定义一个简单的变量\"></a>定义一个简单的变量</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义css 变量 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--backgroundColor</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--backgroundColor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建一个按钮\"><a href=\"#创建一个按钮\" class=\"headerlink\" title=\"创建一个按钮\"></a>创建一个按钮</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>点我改变背景<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取root元素并绑定按钮的点击事件\"><a href=\"#获取root元素并绑定按钮的点击事件\" class=\"headerlink\" title=\"获取root元素并绑定按钮的点击事件\"></a>获取root元素并绑定按钮的点击事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"built_in\">document</span>.documentElement</span><br><span class=\"line\"></span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将变量修改为天蓝色</span></span><br><span class=\"line\">  root.style.setProperty(<span class=\"string\">'--backgroundColor'</span>, <span class=\"string\">'skyblue'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"结果对比\"><a href=\"#结果对比\" class=\"headerlink\" title=\"结果对比\"></a>结果对比</h3><p>点击前<br><img src=\"http://img.nixiaolei.com/2019-03-16-17-52-45.png\" alt=\"按钮点击前\"></p>\n<p>按钮点击后<br><img src=\"http://img.nixiaolei.com/2019-03-16-17-53-39.png\" alt=\"按钮点击后\"></p>\n<p>非常Nice~</p>\n<p>利用这个特性实现更多的可能吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n<p>就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排</p>\n<p>一起来看看如何操作吧~</p>\n<blockquote>\n<p>变量虽好， 不可滥用哦</p>\n</blockquote>\n<h3 id=\"定义一个简单的变量\"><a href=\"#定义一个简单的变量\" class=\"headerlink\" title=\"定义一个简单的变量\"></a>定义一个简单的变量</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义css 变量 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--backgroundColor</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--backgroundColor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建一个按钮\"><a href=\"#创建一个按钮\" class=\"headerlink\" title=\"创建一个按钮\"></a>创建一个按钮</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>点我改变背景<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取root元素并绑定按钮的点击事件\"><a href=\"#获取root元素并绑定按钮的点击事件\" class=\"headerlink\" title=\"获取root元素并绑定按钮的点击事件\"></a>获取root元素并绑定按钮的点击事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"built_in\">document</span>.documentElement</span><br><span class=\"line\"></span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将变量修改为天蓝色</span></span><br><span class=\"line\">  root.style.setProperty(<span class=\"string\">'--backgroundColor'</span>, <span class=\"string\">'skyblue'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"结果对比\"><a href=\"#结果对比\" class=\"headerlink\" title=\"结果对比\"></a>结果对比</h3><p>点击前<br><img src=\"http://img.nixiaolei.com/2019-03-16-17-52-45.png\" alt=\"按钮点击前\"></p>\n<p>按钮点击后<br><img src=\"http://img.nixiaolei.com/2019-03-16-17-53-39.png\" alt=\"按钮点击后\"></p>\n<p>非常Nice~</p>\n<p>利用这个特性实现更多的可能吧！</p>\n"},{"title":"Linux工具&插件","date":"2019-03-17T06:59:02.000Z","_content":"\n\n\n## vim\n* 快速学习vim的网站: https://vim-adventures.com/\n\n","source":"_posts/Linux工具-插件.md","raw":"---\ntitle: Linux工具&插件\ndate: 2019-03-17 14:59:02\ncategories: Linux\ntags: [vim, 插件, 工具]\n---\n\n\n\n## vim\n* 快速学习vim的网站: https://vim-adventures.com/\n\n","slug":"Linux工具-插件","published":1,"updated":"2019-03-20T14:46:15.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3drr000740uw9o8kchqp","content":"<h2 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h2><ul>\n<li>快速学习vim的网站: <a href=\"https://vim-adventures.com/\" target=\"_blank\" rel=\"noopener\">https://vim-adventures.com/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h2><ul>\n<li>快速学习vim的网站: <a href=\"https://vim-adventures.com/\" target=\"_blank\" rel=\"noopener\">https://vim-adventures.com/</a></li>\n</ul>\n"},{"title":"css分层&命名规范","date":"2019-03-16T15:32:55.000Z","_content":"\n为什么要分层? \n\n* CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。\n* 避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。\n* 有责任感地去命名你的选择器\n\n\n有哪些分层理论? \n* SMACSS\n* BEM\n* SUIT\n* ACSS\n* ITCSS\n\n\n\n## BEM\n\nBEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )\n\n* block - 代表了更高级别的抽象或组件\n* block__element - 代表.block的后代， 用于形成一个完整的.block的整体。\n* block--modifier - 代表.block 的不同状态或不同版本。\n* 修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )\n\n```HTML\n  <!-- container 是大容器 -->\n  <div class=\"container\">\n    <div class=\"menu\">\n      <div class=\"menu--item menu--item__active\">首页</div>\n      <div class=\"menu--item\">新闻</div>\n      <div class=\"menu--item\">消息</div>\n    </div>\n  </div>\n```","source":"_posts/css分层-命名规范.md","raw":"---\ntitle: css分层&命名规范\ndate: 2019-03-16 23:32:55\ncategories: CSS\ntags: [css, 命名规范]\n---\n\n为什么要分层? \n\n* CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。\n* 避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。\n* 有责任感地去命名你的选择器\n\n\n有哪些分层理论? \n* SMACSS\n* BEM\n* SUIT\n* ACSS\n* ITCSS\n\n\n\n## BEM\n\nBEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )\n\n* block - 代表了更高级别的抽象或组件\n* block__element - 代表.block的后代， 用于形成一个完整的.block的整体。\n* block--modifier - 代表.block 的不同状态或不同版本。\n* 修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )\n\n```HTML\n  <!-- container 是大容器 -->\n  <div class=\"container\">\n    <div class=\"menu\">\n      <div class=\"menu--item menu--item__active\">首页</div>\n      <div class=\"menu--item\">新闻</div>\n      <div class=\"menu--item\">消息</div>\n    </div>\n  </div>\n```","slug":"css分层-命名规范","published":1,"updated":"2019-03-22T13:47:48.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3drv000840uwu2f77cs3","content":"<p>为什么要分层? </p>\n<ul>\n<li>CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。</li>\n<li>避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。</li>\n<li>有责任感地去命名你的选择器</li>\n</ul>\n<p>有哪些分层理论? </p>\n<ul>\n<li>SMACSS</li>\n<li>BEM</li>\n<li>SUIT</li>\n<li>ACSS</li>\n<li>ITCSS</li>\n</ul>\n<h2 id=\"BEM\"><a href=\"#BEM\" class=\"headerlink\" title=\"BEM\"></a>BEM</h2><p>BEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )</p>\n<ul>\n<li>block - 代表了更高级别的抽象或组件</li>\n<li>block__element - 代表.block的后代， 用于形成一个完整的.block的整体。</li>\n<li>block–modifier - 代表.block 的不同状态或不同版本。</li>\n<li>修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- container 是大容器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item menu--item__active\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item\"</span>&gt;</span>新闻<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item\"</span>&gt;</span>消息<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>为什么要分层? </p>\n<ul>\n<li>CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。</li>\n<li>避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。</li>\n<li>有责任感地去命名你的选择器</li>\n</ul>\n<p>有哪些分层理论? </p>\n<ul>\n<li>SMACSS</li>\n<li>BEM</li>\n<li>SUIT</li>\n<li>ACSS</li>\n<li>ITCSS</li>\n</ul>\n<h2 id=\"BEM\"><a href=\"#BEM\" class=\"headerlink\" title=\"BEM\"></a>BEM</h2><p>BEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )</p>\n<ul>\n<li>block - 代表了更高级别的抽象或组件</li>\n<li>block__element - 代表.block的后代， 用于形成一个完整的.block的整体。</li>\n<li>block–modifier - 代表.block 的不同状态或不同版本。</li>\n<li>修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- container 是大容器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item menu--item__active\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item\"</span>&gt;</span>新闻<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item\"</span>&gt;</span>消息<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"css预处理与后处理器","date":"2019-03-16T04:20:43.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css\n\n一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了\n\n## 预处理器具有的能力\n* 变量\n* 混合(Mixin) Extend\n* 嵌套规则\n* 运算\n* 函数\n* Namespaces & Accessors (命名空间和访问器)\n* scope\n* 注释\n\n\n## 后处理器的能力\n\n* CSS 压缩 CLEAN-CSS\n* 自动添加浏览器前缀 Autoprefixer\n* CSS更加美观排序 CSScomb\n* Rework取代stylus 后处理器发热\n* 前后通吃的 PostCss\n\n\n\n\n\n## 他们是如何处理的CSS\n\n### 预处理器\n\n预处理器， 如： `sass` 它会先将他的语法转换成 AST--抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS \n\n### PostCss\n\nPostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能\n\n![PostCss处理流程](http://img.nixiaolei.com/2019-03-16-13-23-52.png)\n\n","source":"_posts/css预处理与后处理器.md","raw":"---\ntitle: css预处理与后处理器\ndate: 2019-03-16 12:20:43\ncategories: CSS\ntags: [css, PostCss]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css\n\n一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了\n\n## 预处理器具有的能力\n* 变量\n* 混合(Mixin) Extend\n* 嵌套规则\n* 运算\n* 函数\n* Namespaces & Accessors (命名空间和访问器)\n* scope\n* 注释\n\n\n## 后处理器的能力\n\n* CSS 压缩 CLEAN-CSS\n* 自动添加浏览器前缀 Autoprefixer\n* CSS更加美观排序 CSScomb\n* Rework取代stylus 后处理器发热\n* 前后通吃的 PostCss\n\n\n\n\n\n## 他们是如何处理的CSS\n\n### 预处理器\n\n预处理器， 如： `sass` 它会先将他的语法转换成 AST--抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS \n\n### PostCss\n\nPostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能\n\n![PostCss处理流程](http://img.nixiaolei.com/2019-03-16-13-23-52.png)\n\n","slug":"css预处理与后处理器","published":1,"updated":"2019-03-22T13:48:07.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3drz000b40uwb06hx4uq","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css</p>\n<p>一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了</p>\n<h2 id=\"预处理器具有的能力\"><a href=\"#预处理器具有的能力\" class=\"headerlink\" title=\"预处理器具有的能力\"></a>预处理器具有的能力</h2><ul>\n<li>变量</li>\n<li>混合(Mixin) Extend</li>\n<li>嵌套规则</li>\n<li>运算</li>\n<li>函数</li>\n<li>Namespaces &amp; Accessors (命名空间和访问器)</li>\n<li>scope</li>\n<li>注释</li>\n</ul>\n<h2 id=\"后处理器的能力\"><a href=\"#后处理器的能力\" class=\"headerlink\" title=\"后处理器的能力\"></a>后处理器的能力</h2><ul>\n<li>CSS 压缩 CLEAN-CSS</li>\n<li>自动添加浏览器前缀 Autoprefixer</li>\n<li>CSS更加美观排序 CSScomb</li>\n<li>Rework取代stylus 后处理器发热</li>\n<li>前后通吃的 PostCss</li>\n</ul>\n<h2 id=\"他们是如何处理的CSS\"><a href=\"#他们是如何处理的CSS\" class=\"headerlink\" title=\"他们是如何处理的CSS\"></a>他们是如何处理的CSS</h2><h3 id=\"预处理器\"><a href=\"#预处理器\" class=\"headerlink\" title=\"预处理器\"></a>预处理器</h3><p>预处理器， 如： <code>sass</code> 它会先将他的语法转换成 AST–抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS </p>\n<h3 id=\"PostCss\"><a href=\"#PostCss\" class=\"headerlink\" title=\"PostCss\"></a>PostCss</h3><p>PostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-23-52.png\" alt=\"PostCss处理流程\"></p>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css</p>\n<p>一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了</p>\n<h2 id=\"预处理器具有的能力\"><a href=\"#预处理器具有的能力\" class=\"headerlink\" title=\"预处理器具有的能力\"></a>预处理器具有的能力</h2><ul>\n<li>变量</li>\n<li>混合(Mixin) Extend</li>\n<li>嵌套规则</li>\n<li>运算</li>\n<li>函数</li>\n<li>Namespaces &amp; Accessors (命名空间和访问器)</li>\n<li>scope</li>\n<li>注释</li>\n</ul>\n<h2 id=\"后处理器的能力\"><a href=\"#后处理器的能力\" class=\"headerlink\" title=\"后处理器的能力\"></a>后处理器的能力</h2><ul>\n<li>CSS 压缩 CLEAN-CSS</li>\n<li>自动添加浏览器前缀 Autoprefixer</li>\n<li>CSS更加美观排序 CSScomb</li>\n<li>Rework取代stylus 后处理器发热</li>\n<li>前后通吃的 PostCss</li>\n</ul>\n<h2 id=\"他们是如何处理的CSS\"><a href=\"#他们是如何处理的CSS\" class=\"headerlink\" title=\"他们是如何处理的CSS\"></a>他们是如何处理的CSS</h2><h3 id=\"预处理器\"><a href=\"#预处理器\" class=\"headerlink\" title=\"预处理器\"></a>预处理器</h3><p>预处理器， 如： <code>sass</code> 它会先将他的语法转换成 AST–抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS </p>\n<h3 id=\"PostCss\"><a href=\"#PostCss\" class=\"headerlink\" title=\"PostCss\"></a>PostCss</h3><p>PostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-23-52.png\" alt=\"PostCss处理流程\"></p>\n"},{"title":"hexo中如何使用本地图片","date":"2019-03-16T03:20:19.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n首先需要修改`_config.yml`配置文件`post_asset_folder`项为`true`\n\n使用命令创建博客\n```\nhexo new 你的文章名称\n```\n\n他会生成`.md`文件及一个对应的文件夹， 我们将图片放到该文件夹中\n\n\n\n## 方法一\n\n在文章中这样插入图片\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n\n\n## 方法二\n> 这个方法在首页无法正常预览图片\n\n\n安装一下这个插件\n\n```shell\nnpm install hexo-asset-image --save\n```\n\n\n在文章中这样插入图片\n```\n![这是一张图片](xxxx.png)\n```\n\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n参考文献\n> http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/","source":"_posts/hexo中如何使用本地图片.md","raw":"---\ntitle: hexo中如何使用本地图片\ndate: 2019-03-16 11:20:19\ncategories: hexo\ntags: hexo\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n首先需要修改`_config.yml`配置文件`post_asset_folder`项为`true`\n\n使用命令创建博客\n```\nhexo new 你的文章名称\n```\n\n他会生成`.md`文件及一个对应的文件夹， 我们将图片放到该文件夹中\n\n\n\n## 方法一\n\n在文章中这样插入图片\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n\n\n## 方法二\n> 这个方法在首页无法正常预览图片\n\n\n安装一下这个插件\n\n```shell\nnpm install hexo-asset-image --save\n```\n\n\n在文章中这样插入图片\n```\n![这是一张图片](xxxx.png)\n```\n\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n参考文献\n> http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/","slug":"hexo中如何使用本地图片","published":1,"updated":"2019-03-20T14:45:28.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3ds1000c40uwr8bih8x9","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>首先需要修改<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code></p>\n<p>使用命令创建博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 你的文章名称</span><br></pre></td></tr></table></figure></p>\n<p>他会生成<code>.md</code>文件及一个对应的文件夹， 我们将图片放到该文件夹中</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>在文章中这样插入图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下:</p>\n<p><img src=\"http://img.nixiaolei.com/pika.png\" alt=\"皮卡皮卡\"></p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><blockquote>\n<p>这个方法在首页无法正常预览图片</p>\n</blockquote>\n<p>安装一下这个插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>在文章中这样插入图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![这是一张图片](xxxx.png)</span><br></pre></td></tr></table></figure></p>\n<p>效果如下:</p>\n<p><img src=\"http://img.nixiaolei.com/pika.png\" alt=\"皮卡皮卡\"></p>\n<p>参考文献</p>\n<blockquote>\n<p><a href=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/\" target=\"_blank\" rel=\"noopener\">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>首先需要修改<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code></p>\n<p>使用命令创建博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 你的文章名称</span><br></pre></td></tr></table></figure></p>\n<p>他会生成<code>.md</code>文件及一个对应的文件夹， 我们将图片放到该文件夹中</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>在文章中这样插入图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下:</p>\n<p><img src=\"http://img.nixiaolei.com/pika.png\" alt=\"皮卡皮卡\"></p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><blockquote>\n<p>这个方法在首页无法正常预览图片</p>\n</blockquote>\n<p>安装一下这个插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>在文章中这样插入图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![这是一张图片](xxxx.png)</span><br></pre></td></tr></table></figure></p>\n<p>效果如下:</p>\n<p><img src=\"http://img.nixiaolei.com/pika.png\" alt=\"皮卡皮卡\"></p>\n<p>参考文献</p>\n<blockquote>\n<p><a href=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/\" target=\"_blank\" rel=\"noopener\">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p>\n</blockquote>\n"},{"title":"【AOP】面向切面编程","date":"2019-03-24T05:53:14.000Z","_content":"\n> Aspect Oriented Programming\n\n面向切面编程（aop）是对面向对象编程（oop）的补充\n\n## 面向切面编程\n\n在软件业， AOP为 `Aspect Oriented Programming` 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。\n\n\n### 基础概念\nAOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。\n\n### Filter \nFilter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为\"Aspect\"， 即切面。 所谓“切面”。\n\n### 优点\nAOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！\n\n就像函数的`before`和 `after`\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【AOP】面向切面编程.md","raw":"---\ntitle: 【AOP】面向切面编程\ndate: 2019-03-24 13:53:14\ncategories: [编程思想]\ntags: [AOP, 编程范式]\n---\n\n> Aspect Oriented Programming\n\n面向切面编程（aop）是对面向对象编程（oop）的补充\n\n## 面向切面编程\n\n在软件业， AOP为 `Aspect Oriented Programming` 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。\n\n\n### 基础概念\nAOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。\n\n### Filter \nFilter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为\"Aspect\"， 即切面。 所谓“切面”。\n\n### 优点\nAOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！\n\n就像函数的`before`和 `after`\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【AOP】面向切面编程","published":1,"updated":"2019-03-24T06:14:53.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3ds7000g40uwqipyeiem","content":"<blockquote>\n<p>Aspect Oriented Programming</p>\n</blockquote>\n<p>面向切面编程（aop）是对面向对象编程（oop）的补充</p>\n<h2 id=\"面向切面编程\"><a href=\"#面向切面编程\" class=\"headerlink\" title=\"面向切面编程\"></a>面向切面编程</h2><p>在软件业， AOP为 <code>Aspect Oriented Programming</code> 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。</p>\n<h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p>AOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。</p>\n<h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><p>Filter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为”Aspect”， 即切面。 所谓“切面”。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>AOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！</p>\n<p>就像函数的<code>before</code>和 <code>after</code></p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Aspect Oriented Programming</p>\n</blockquote>\n<p>面向切面编程（aop）是对面向对象编程（oop）的补充</p>\n<h2 id=\"面向切面编程\"><a href=\"#面向切面编程\" class=\"headerlink\" title=\"面向切面编程\"></a>面向切面编程</h2><p>在软件业， AOP为 <code>Aspect Oriented Programming</code> 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。</p>\n<h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p>AOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。</p>\n<h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><p>Filter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为”Aspect”， 即切面。 所谓“切面”。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>AOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！</p>\n<p>就像函数的<code>before</code>和 <code>after</code></p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"【PostCss】使用明天的CSS","date":"2019-03-16T05:30:24.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法\n\n当然国内的情况有点不一样\n\n## 新特性举例\n\n比如这个CSS变量:\n他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了\n```CSS\n@custom-media --viewport-medium (width <= 50rem);\n\n@media (--viewport-medium) {\n  body { font-size: calc(var(--fontSize) * 1.2); }\n}\n\n```\n\n那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码\n\n```CSS\n@media (max-width: 50rem) {\n  body { font-size: 1.2rem; }\n}\n```\n\n## 更多演示\n> 编译前后以 ------ 分割\n\n\n自定义选择器\n```CSS\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n:--heading { margin-top: 0 }\n/* ------------------------------------ */\nh1,h2,h3,h4,h5,h6 { margin-top: 0 }\n```\n\n自动一倍图(1X)和二倍图(2X)\n```CSS\n/* image-set function */\n.foo {\n  background-image:\n    image-set(\n      url(img/test.png) 1x,\n      url(img/test-2x.png) 2x\n    );\n}\n\n/* ------------------------------------ */\n\n/* 默认状态 */\n.foo {\n    background-image:\n      url(img/test.png);\n}\n\n/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n.foo {\n    background-image:\n      url(img/test-2x.png);\n}\n}\n```\n\n\n`any-link`, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效\n```CSS\na {\ncolor: var(--highlightColor);\ntransition: color 1s; /* autoprefixed ! */\n}\na:hover { color: gray(255, 50%) }\na:active { color: rebeccapurple }\na:focus { background-color: rgb(255 153 0 / 33%); outline: 3px solid hsl(1turn 60% 50%); }\na:any-link { color: color(var(--highlightColor) blackness(+20%)) }\n\n/* --------------------------------- */\n\na {\n  color: rgb(89, 185, 204);\n  -webkit-transition: color 1s;\n  transition: color 1s; /* autoprefixed ! */\n}\na:hover { color: rgba(255, 255, 255, 0.5) }\na:active { color: #639 }\na:focus { \n  background-color: rgba(255, 153, 0, .33); \n  outline: 3px solid hsl(360, 60%, 50%); \n}\na:link,a:visited { color: rgb(89, 142, 153) }\n```\n\n\n还有很多， 不一一举例了， 比如：\n* 各个浏览器的滤镜`filter`兼容\n* 选择器正则\n* css嵌套\n\n## 如何让PostCS支持嵌套\n> 本环境基于webpack\n\nnpm地址:\n* https://www.npmjs.com/package/postcss\n* https://www.npmjs.com/package/postcss-loader\n\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n  & .menu {\n    height: 40px;\n    background: sandybrown; \n    & .menu--item {\n      height: 40px;\n      color: skyblue;\n      & .menu--item__active {\n        color: pink;\n      }\n    }\n  }\n}\n```\n\n\n\n\n首先在项目的根目录中创建一个文件`postcss.config.js`\n\n相关依赖安装就不说了， 真的缺了也会报错提示的\n\n我们将会在里面做`PostCSS`的相关配置\n\n```JavaScript\nmodule.exports = {\n  plugins: [\n    require('postcss-nested')\n  ]\n}\n```\n\n然后接下来是配置 Loader ，\n\n进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader\n```JavaScript\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      {\n        loader: 'css-loader',\n      },\n      // --------------新增区域---------------\n      {\n        loader: 'postcss-loader',\n        options: {\n          ident: 'postcss',\n          plugins: (loader) => [\n            require('postcss-preset-env')({\n              /* 这里要改成 0  否则不一定编译嵌套 */\n              stage: 0,\n              features: {\n                'nesting-rules': true\n              }\n            })\n          ]\n        }\n      }\n      // --------------新增区域---------------\n    ]\n  }\n]\n```\n\n像这样，记得把 `stage` 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。\n\n\n我们运行一下看看\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n}\n.container .menu {\n  height: 40px;\n  background: sandybrown\n}\n.container .menu .menu--item {\n  height: 40px;\n  color: skyblue\n}\n.container .menu .menu--item .menu--item__active {\n  color: pink;\n}\n```\n\n大功告成😄~\n\n想知道有用的PostCSS的插件大纲，可以在本站内搜索: `CSS插件` \n\n\n\n\n\n\n## 相关的网站\n> PostCss: https://postcss.org/\n> css next: http://cssnext.io/\n\n","source":"_posts/【PostCss】使用明天的CSS.md","raw":"---\ntitle: 【PostCss】使用明天的CSS\ndate: 2019-03-16 13:30:24\ncategories: CSS\ntags: [css, PostCss]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法\n\n当然国内的情况有点不一样\n\n## 新特性举例\n\n比如这个CSS变量:\n他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了\n```CSS\n@custom-media --viewport-medium (width <= 50rem);\n\n@media (--viewport-medium) {\n  body { font-size: calc(var(--fontSize) * 1.2); }\n}\n\n```\n\n那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码\n\n```CSS\n@media (max-width: 50rem) {\n  body { font-size: 1.2rem; }\n}\n```\n\n## 更多演示\n> 编译前后以 ------ 分割\n\n\n自定义选择器\n```CSS\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n:--heading { margin-top: 0 }\n/* ------------------------------------ */\nh1,h2,h3,h4,h5,h6 { margin-top: 0 }\n```\n\n自动一倍图(1X)和二倍图(2X)\n```CSS\n/* image-set function */\n.foo {\n  background-image:\n    image-set(\n      url(img/test.png) 1x,\n      url(img/test-2x.png) 2x\n    );\n}\n\n/* ------------------------------------ */\n\n/* 默认状态 */\n.foo {\n    background-image:\n      url(img/test.png);\n}\n\n/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n.foo {\n    background-image:\n      url(img/test-2x.png);\n}\n}\n```\n\n\n`any-link`, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效\n```CSS\na {\ncolor: var(--highlightColor);\ntransition: color 1s; /* autoprefixed ! */\n}\na:hover { color: gray(255, 50%) }\na:active { color: rebeccapurple }\na:focus { background-color: rgb(255 153 0 / 33%); outline: 3px solid hsl(1turn 60% 50%); }\na:any-link { color: color(var(--highlightColor) blackness(+20%)) }\n\n/* --------------------------------- */\n\na {\n  color: rgb(89, 185, 204);\n  -webkit-transition: color 1s;\n  transition: color 1s; /* autoprefixed ! */\n}\na:hover { color: rgba(255, 255, 255, 0.5) }\na:active { color: #639 }\na:focus { \n  background-color: rgba(255, 153, 0, .33); \n  outline: 3px solid hsl(360, 60%, 50%); \n}\na:link,a:visited { color: rgb(89, 142, 153) }\n```\n\n\n还有很多， 不一一举例了， 比如：\n* 各个浏览器的滤镜`filter`兼容\n* 选择器正则\n* css嵌套\n\n## 如何让PostCS支持嵌套\n> 本环境基于webpack\n\nnpm地址:\n* https://www.npmjs.com/package/postcss\n* https://www.npmjs.com/package/postcss-loader\n\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n  & .menu {\n    height: 40px;\n    background: sandybrown; \n    & .menu--item {\n      height: 40px;\n      color: skyblue;\n      & .menu--item__active {\n        color: pink;\n      }\n    }\n  }\n}\n```\n\n\n\n\n首先在项目的根目录中创建一个文件`postcss.config.js`\n\n相关依赖安装就不说了， 真的缺了也会报错提示的\n\n我们将会在里面做`PostCSS`的相关配置\n\n```JavaScript\nmodule.exports = {\n  plugins: [\n    require('postcss-nested')\n  ]\n}\n```\n\n然后接下来是配置 Loader ，\n\n进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader\n```JavaScript\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      {\n        loader: 'css-loader',\n      },\n      // --------------新增区域---------------\n      {\n        loader: 'postcss-loader',\n        options: {\n          ident: 'postcss',\n          plugins: (loader) => [\n            require('postcss-preset-env')({\n              /* 这里要改成 0  否则不一定编译嵌套 */\n              stage: 0,\n              features: {\n                'nesting-rules': true\n              }\n            })\n          ]\n        }\n      }\n      // --------------新增区域---------------\n    ]\n  }\n]\n```\n\n像这样，记得把 `stage` 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。\n\n\n我们运行一下看看\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n}\n.container .menu {\n  height: 40px;\n  background: sandybrown\n}\n.container .menu .menu--item {\n  height: 40px;\n  color: skyblue\n}\n.container .menu .menu--item .menu--item__active {\n  color: pink;\n}\n```\n\n大功告成😄~\n\n想知道有用的PostCSS的插件大纲，可以在本站内搜索: `CSS插件` \n\n\n\n\n\n\n## 相关的网站\n> PostCss: https://postcss.org/\n> css next: http://cssnext.io/\n\n","slug":"【PostCss】使用明天的CSS","published":1,"updated":"2019-03-22T13:49:32.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3dsa000h40uwtqjspuk1","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法</p>\n<p>当然国内的情况有点不一样</p>\n<h2 id=\"新特性举例\"><a href=\"#新特性举例\" class=\"headerlink\" title=\"新特性举例\"></a>新特性举例</h2><p>比如这个CSS变量:<br>他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">custom</span>-<span class=\"keyword\">media</span> --viewport-medium (width &lt;= <span class=\"number\">50rem</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (--viewport-medium) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(var(--fontSize) * <span class=\"number\">1.2</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">50rem</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多演示\"><a href=\"#更多演示\" class=\"headerlink\" title=\"更多演示\"></a>更多演示</h2><blockquote>\n<p>编译前后以 —— 分割</p>\n</blockquote>\n<p>自定义选择器<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">custom</span>-<span class=\"keyword\">selector</span> :--heading h1, h2, h3, h4, h5, h6;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:--heading</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------ */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>自动一倍图(1X)和二倍图(2X)<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* image-set function */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">    <span class=\"built_in\">image-set</span>(</span><br><span class=\"line\">      url(img/test.png) <span class=\"number\">1</span>x,</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test-2x.png) <span class=\"number\">2</span>x</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------ */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 默认状态 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test.png);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>), (min-resolution: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test-2x.png);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>any-link</code>, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--highlightColor);</span><br><span class=\"line\"><span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>; <span class=\"comment\">/* autoprefixed ! */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">gray</span>(255, 50%) &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: rebeccapurple &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(255 153 0 / 33%); <span class=\"attribute\">outline</span>: <span class=\"number\">3px</span> solid <span class=\"built_in\">hsl</span>(1turn 60% 50%); &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:any-link</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">color</span>(var(--highlightColor) <span class=\"built_in\">blackness</span>(+20%)) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --------------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(89, 185, 204);</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>; <span class=\"comment\">/* autoprefixed ! */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0.5) &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#639</span> &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 153, 0, .33); </span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">3px</span> solid <span class=\"built_in\">hsl</span>(360, 60%, 50%); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>,<span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(89, 142, 153) &#125;</span><br></pre></td></tr></table></figure></p>\n<p>还有很多， 不一一举例了， 比如：</p>\n<ul>\n<li>各个浏览器的滤镜<code>filter</code>兼容</li>\n<li>选择器正则</li>\n<li>css嵌套</li>\n</ul>\n<h2 id=\"如何让PostCS支持嵌套\"><a href=\"#如何让PostCS支持嵌套\" class=\"headerlink\" title=\"如何让PostCS支持嵌套\"></a>如何让PostCS支持嵌套</h2><blockquote>\n<p>本环境基于webpack</p>\n</blockquote>\n<p>npm地址:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/postcss\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/postcss</a></li>\n<li><a href=\"https://www.npmjs.com/package/postcss-loader\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/postcss-loader</a></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 一定要带上 &amp; 才会编译 */</span></span><br><span class=\"line\">  &amp; .menu &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span>: 40<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">sandybrown</span>; </span><br><span class=\"line\">    &amp; <span class=\"selector-class\">.menu--item</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: skyblue;</span><br><span class=\"line\">      &amp; .menu--item__active &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">pink</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先在项目的根目录中创建一个文件<code>postcss.config.js</code></p>\n<p>相关依赖安装就不说了， 真的缺了也会报错提示的</p>\n<p>我们将会在里面做<code>PostCSS</code>的相关配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-nested'</span>)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后接下来是配置 Loader ，</p>\n<p>进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// --------------新增区域---------------</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          ident: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">          plugins: <span class=\"function\">(<span class=\"params\">loader</span>) =&gt;</span> [</span><br><span class=\"line\">            <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-preset-env'</span>)(&#123;</span><br><span class=\"line\">              <span class=\"comment\">/* 这里要改成 0  否则不一定编译嵌套 */</span></span><br><span class=\"line\">              stage: <span class=\"number\">0</span>,</span><br><span class=\"line\">              features: &#123;</span><br><span class=\"line\">                <span class=\"string\">'nesting-rules'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// --------------新增区域---------------</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>像这样，记得把 <code>stage</code> 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。</p>\n<p>我们运行一下看看</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 一定要带上 &amp; 才会编译 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: sandybrown</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> <span class=\"selector-class\">.menu--item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: skyblue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> <span class=\"selector-class\">.menu--item</span> <span class=\"selector-class\">.menu--item__active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大功告成😄~</p>\n<p>想知道有用的PostCSS的插件大纲，可以在本站内搜索: <code>CSS插件</code> </p>\n<h2 id=\"相关的网站\"><a href=\"#相关的网站\" class=\"headerlink\" title=\"相关的网站\"></a>相关的网站</h2><blockquote>\n<p>PostCss: <a href=\"https://postcss.org/\" target=\"_blank\" rel=\"noopener\">https://postcss.org/</a><br>css next: <a href=\"http://cssnext.io/\" target=\"_blank\" rel=\"noopener\">http://cssnext.io/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法</p>\n<p>当然国内的情况有点不一样</p>\n<h2 id=\"新特性举例\"><a href=\"#新特性举例\" class=\"headerlink\" title=\"新特性举例\"></a>新特性举例</h2><p>比如这个CSS变量:<br>他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">custom</span>-<span class=\"keyword\">media</span> --viewport-medium (width &lt;= <span class=\"number\">50rem</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (--viewport-medium) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(var(--fontSize) * <span class=\"number\">1.2</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">50rem</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多演示\"><a href=\"#更多演示\" class=\"headerlink\" title=\"更多演示\"></a>更多演示</h2><blockquote>\n<p>编译前后以 —— 分割</p>\n</blockquote>\n<p>自定义选择器<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">custom</span>-<span class=\"keyword\">selector</span> :--heading h1, h2, h3, h4, h5, h6;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:--heading</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------ */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>自动一倍图(1X)和二倍图(2X)<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* image-set function */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">    <span class=\"built_in\">image-set</span>(</span><br><span class=\"line\">      url(img/test.png) <span class=\"number\">1</span>x,</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test-2x.png) <span class=\"number\">2</span>x</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------ */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 默认状态 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test.png);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>), (min-resolution: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test-2x.png);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>any-link</code>, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--highlightColor);</span><br><span class=\"line\"><span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>; <span class=\"comment\">/* autoprefixed ! */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">gray</span>(255, 50%) &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: rebeccapurple &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(255 153 0 / 33%); <span class=\"attribute\">outline</span>: <span class=\"number\">3px</span> solid <span class=\"built_in\">hsl</span>(1turn 60% 50%); &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:any-link</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">color</span>(var(--highlightColor) <span class=\"built_in\">blackness</span>(+20%)) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --------------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(89, 185, 204);</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>; <span class=\"comment\">/* autoprefixed ! */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0.5) &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#639</span> &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 153, 0, .33); </span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">3px</span> solid <span class=\"built_in\">hsl</span>(360, 60%, 50%); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>,<span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(89, 142, 153) &#125;</span><br></pre></td></tr></table></figure></p>\n<p>还有很多， 不一一举例了， 比如：</p>\n<ul>\n<li>各个浏览器的滤镜<code>filter</code>兼容</li>\n<li>选择器正则</li>\n<li>css嵌套</li>\n</ul>\n<h2 id=\"如何让PostCS支持嵌套\"><a href=\"#如何让PostCS支持嵌套\" class=\"headerlink\" title=\"如何让PostCS支持嵌套\"></a>如何让PostCS支持嵌套</h2><blockquote>\n<p>本环境基于webpack</p>\n</blockquote>\n<p>npm地址:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/postcss\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/postcss</a></li>\n<li><a href=\"https://www.npmjs.com/package/postcss-loader\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/postcss-loader</a></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 一定要带上 &amp; 才会编译 */</span></span><br><span class=\"line\">  &amp; .menu &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span>: 40<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">sandybrown</span>; </span><br><span class=\"line\">    &amp; <span class=\"selector-class\">.menu--item</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: skyblue;</span><br><span class=\"line\">      &amp; .menu--item__active &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">pink</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先在项目的根目录中创建一个文件<code>postcss.config.js</code></p>\n<p>相关依赖安装就不说了， 真的缺了也会报错提示的</p>\n<p>我们将会在里面做<code>PostCSS</code>的相关配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-nested'</span>)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后接下来是配置 Loader ，</p>\n<p>进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// --------------新增区域---------------</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          ident: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">          plugins: <span class=\"function\">(<span class=\"params\">loader</span>) =&gt;</span> [</span><br><span class=\"line\">            <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-preset-env'</span>)(&#123;</span><br><span class=\"line\">              <span class=\"comment\">/* 这里要改成 0  否则不一定编译嵌套 */</span></span><br><span class=\"line\">              stage: <span class=\"number\">0</span>,</span><br><span class=\"line\">              features: &#123;</span><br><span class=\"line\">                <span class=\"string\">'nesting-rules'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// --------------新增区域---------------</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>像这样，记得把 <code>stage</code> 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。</p>\n<p>我们运行一下看看</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 一定要带上 &amp; 才会编译 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: sandybrown</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> <span class=\"selector-class\">.menu--item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: skyblue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> <span class=\"selector-class\">.menu--item</span> <span class=\"selector-class\">.menu--item__active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大功告成😄~</p>\n<p>想知道有用的PostCSS的插件大纲，可以在本站内搜索: <code>CSS插件</code> </p>\n<h2 id=\"相关的网站\"><a href=\"#相关的网站\" class=\"headerlink\" title=\"相关的网站\"></a>相关的网站</h2><blockquote>\n<p>PostCss: <a href=\"https://postcss.org/\" target=\"_blank\" rel=\"noopener\">https://postcss.org/</a><br>css next: <a href=\"http://cssnext.io/\" target=\"_blank\" rel=\"noopener\">http://cssnext.io/</a></p>\n</blockquote>\n"},{"title":"【css-doodle】 css web-component入门","date":"2019-03-16T12:36:22.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效\n> https://css-doodle.com/\n\n\n`<css-doodle />`基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。\n该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。\n\n\n\n既然它这么牛逼， 那怎么用呢？\n\n我们一起来搭几个demo\n\n## css-doodle入门\n> 此处用到的语法或api有不了解的 请看页面下方的“释义” 区域\n\n动手过程中需要注意， 不要在`css-doodle`内部写注释， 会导致样式无效\n\n\n首先搭建好运行`css-doodle`的环境\n```HTML\n<!-- 引入CDN -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"></script>\n\n<!-- 页面上加入 css-doodle -->\n\n<css-doodle>\n<!-- 我们将在这里写代码 -->\n</css-doodle>\n```\n\n此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。\n\n现在我们给他加点料。\n\n```HTML\n<css-doodle>\n  width: 100px;\n  height: 100px;\n  background: red;\n</css-doodle>\n```\n\n此时我们再看看页面， 就出现了一个`100 x 100`的红色小方块，\n\n![红色方块](http://img.nixiaolei.com/2019-03-16-21-22-36.png)\n\n\n好，这个相当于hello world 级别的练习就完成了， \n\n\n我们再来点难的：\n\n**我想要一个10 x 10 个的小方块组成的大正方形!**\n\n正好我们可以借此尝试使用一下它提供的API\n\n\n```\n<css-doodle>\n  :doodle {\n    @grid: 10x10 / 500px;\n  }\n  background: #60569e;\n</css-doodle>\n```\n\n出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色\n\n\n![10x10的大正方](http://img.nixiaolei.com/2019-03-16-21-28-29.png)\n\n\n好既然实现了， 那现在需求升级了\n\n**那我要10个长方形怎么办， 并且我还要长短不一的！**\n\n我去，还要长短不一， 咋整呢\n\n别慌\n\n机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数 \n`@index` 严格的来说他会返回当前单元格的索引值\n\n既然有方法了那我们也有思路了， 二话不说开始动手。\n\n```HTML\n<!-- 首先把 10 x 10 小方块变为10个长方形 -->\n<!-- 然后根据 @index 获取当前单元格的索引 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  background: #60569e;\n  @size: calc(@index() * 1vmin);\n</css-doodle>\n<!-- 根据 index 这个索引值乘以高度 -->\n```\n\nduang!\n\n这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了\n\n\n![10个长方形](http://img.nixiaolei.com/2019-03-16-21-45-14.png)\n\n\n我们再给他加上`border-radius: 50%;` 它就变成10个球了\n\n\n![10个球](http://img.nixiaolei.com/2019-03-16-21-50-12.png)\n\n\n此时需求又来了\n\n**甲方：可不可以弄10个光环？还是渐变的那种?**\n\n行吧， 试试喽谁怕谁\n\n我们可以举一反三， 利用`@index`这个好东西来修改`hsla`产生不同的颜色， 当然修改`rgba` 也是可以的\n\n```\n<!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n</css-doodle>\n```\n\n好， 甲方爸爸， 你的需求我做到了\n\n\n\n![渐变光环](http://img.nixiaolei.com/2019-03-16-22-11-38.png)\n\n\n**甲方: 还不够，我要的是同心圆**\n\n我。。。。。\n\n得嘞，您说是啥就是啥\n\n同心圆， 你第一反应想到的是不是使用`position: absolute;` ? \n不 ，那太low 了\n我们只需要 `@place-cell: center;` 这个参数就搞定了， 它会将每个单元格都摆放至中间\n\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n\n  @place-cell: center;\n  <!-- ...省略之前的代码 -->\n</css-doodle>\n```\n然后去看一下效果， 卧槽\n\n![我把背景色调成深色方便大家观看](http://img.nixiaolei.com/2019-03-16-22-20-13.png)\n\n\n\n### 进阶\n基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧\n\n既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下\n\n我们先让光环变粗一点， 让他呈现扇叶的形状\n\n```\nborder-width: calc(@index() * 10px);\n```\n\n\n然后让我们用上 `keyframes` ， 为他添加动画\n\n为每个单元格注册几个css变量（css的新特性），  \n\n* 变量`--speed`控制动画的持续时间，也就是速度。\n* `--start` 控制当前光环的起始角度\n* `--direction`: 控制方向， 因为`turn`表示一圈， 所以 `1turn` 就是正的转一圈,`-1turn` 就是反着转一圈， 利用`@pick`方法来随机取一个值\n\n\n\n\n```HTML\n<css-doodle>\n  <!-- ...省略之前的代码 -->\n\n  <!-- 动画执行时间在20秒 - 40秒之间取值-->\n  --speed: @rand(20s, 40s);\n  <!-- 360度里取随机数 -->\n  --start: @rand(360deg);\n  <!-- 顺时针 或 逆时针 -->\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n\n  animation: demo var(--speed) linear infinite;\n\n  @keyframes demo {\n    form {\n      <!-- 填入起始角度 -->\n      transform: rotate(var(--start));\n    }\n    to {\n      <!-- 随机顺时针和逆时针旋转 -->\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```\n\n看看效果\n\n\n![随机旋转效果](http://img.nixiaolei.com/KUXh4tYGe4.gif)\n\n\n炫酷不？\n\n能不能再酷一点？\n\n可以， 我们再给他添一笔， \n\n给他加上一个自定义的贝塞尔\n\n贝塞尔可以去这个网站，根据需要生成\n> http://cubic-bezier.com/#1,.25,.83,.67\n\n\n![贝塞尔](http://img.nixiaolei.com/2019-03-16-23-11-46.png)\n\n\n\n然后我们你所需要的贝塞尔去更改`animation` 的参数\n```HTML\nanimation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n```\n\n根据贝塞尔曲线完成了加速减速的动画效果\n\n\n![添加了贝塞尔曲线的动画](http://img.nixiaolei.com/ApPKe0brCf.gif )\n\n\n\n😎cool~\n\n还有更多更酷的特效等着大家去探索~\n\n\n\n\n**切记`css-doodle` 中不能写注释，大家拷贝的时候记得删掉**\n\n## 释义\n* `:doodle` 选择器会创建一个`display: grid;` 的布局\n* `@grid`提供布局， 用法为 `@grid: 行 x 列 /  总宽高` \n* `@index` 返回当前单元格的索引\n* `hsla` 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。\n  * H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  * S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  * L：Lightness(亮度)。取值为：0.0% - 100.0%\n  * A：Alpha透明度。取值0~1之间。\n* `@place-cell` 调整单元格相对于网格放置。\n* `@pick`： 从给定列表中随机选择一个值。\n* `turn`: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )\n  * `1turn` 就是1圈\n\n\n\n\n\n\n## 完整的代码\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  @place-cell: center;\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  border-width: calc(@index() * 10px);\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n  --speed: @rand(20s, 40s);\n  --start: @rand(360deg);\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n\n  @keyframes demo {\n    form {\n      transform: rotate(var(--start));\n    }\n    to {\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```","source":"_posts/【css-doodle】css-web-component入门.md","raw":"---\ntitle: 【css-doodle】 css web-component入门\ndate: 2019-03-16 20:36:22\ncategories: CSS\ntags: [css, web-component, 特效]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效\n> https://css-doodle.com/\n\n\n`<css-doodle />`基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。\n该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。\n\n\n\n既然它这么牛逼， 那怎么用呢？\n\n我们一起来搭几个demo\n\n## css-doodle入门\n> 此处用到的语法或api有不了解的 请看页面下方的“释义” 区域\n\n动手过程中需要注意， 不要在`css-doodle`内部写注释， 会导致样式无效\n\n\n首先搭建好运行`css-doodle`的环境\n```HTML\n<!-- 引入CDN -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"></script>\n\n<!-- 页面上加入 css-doodle -->\n\n<css-doodle>\n<!-- 我们将在这里写代码 -->\n</css-doodle>\n```\n\n此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。\n\n现在我们给他加点料。\n\n```HTML\n<css-doodle>\n  width: 100px;\n  height: 100px;\n  background: red;\n</css-doodle>\n```\n\n此时我们再看看页面， 就出现了一个`100 x 100`的红色小方块，\n\n![红色方块](http://img.nixiaolei.com/2019-03-16-21-22-36.png)\n\n\n好，这个相当于hello world 级别的练习就完成了， \n\n\n我们再来点难的：\n\n**我想要一个10 x 10 个的小方块组成的大正方形!**\n\n正好我们可以借此尝试使用一下它提供的API\n\n\n```\n<css-doodle>\n  :doodle {\n    @grid: 10x10 / 500px;\n  }\n  background: #60569e;\n</css-doodle>\n```\n\n出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色\n\n\n![10x10的大正方](http://img.nixiaolei.com/2019-03-16-21-28-29.png)\n\n\n好既然实现了， 那现在需求升级了\n\n**那我要10个长方形怎么办， 并且我还要长短不一的！**\n\n我去，还要长短不一， 咋整呢\n\n别慌\n\n机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数 \n`@index` 严格的来说他会返回当前单元格的索引值\n\n既然有方法了那我们也有思路了， 二话不说开始动手。\n\n```HTML\n<!-- 首先把 10 x 10 小方块变为10个长方形 -->\n<!-- 然后根据 @index 获取当前单元格的索引 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  background: #60569e;\n  @size: calc(@index() * 1vmin);\n</css-doodle>\n<!-- 根据 index 这个索引值乘以高度 -->\n```\n\nduang!\n\n这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了\n\n\n![10个长方形](http://img.nixiaolei.com/2019-03-16-21-45-14.png)\n\n\n我们再给他加上`border-radius: 50%;` 它就变成10个球了\n\n\n![10个球](http://img.nixiaolei.com/2019-03-16-21-50-12.png)\n\n\n此时需求又来了\n\n**甲方：可不可以弄10个光环？还是渐变的那种?**\n\n行吧， 试试喽谁怕谁\n\n我们可以举一反三， 利用`@index`这个好东西来修改`hsla`产生不同的颜色， 当然修改`rgba` 也是可以的\n\n```\n<!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n</css-doodle>\n```\n\n好， 甲方爸爸， 你的需求我做到了\n\n\n\n![渐变光环](http://img.nixiaolei.com/2019-03-16-22-11-38.png)\n\n\n**甲方: 还不够，我要的是同心圆**\n\n我。。。。。\n\n得嘞，您说是啥就是啥\n\n同心圆， 你第一反应想到的是不是使用`position: absolute;` ? \n不 ，那太low 了\n我们只需要 `@place-cell: center;` 这个参数就搞定了， 它会将每个单元格都摆放至中间\n\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n\n  @place-cell: center;\n  <!-- ...省略之前的代码 -->\n</css-doodle>\n```\n然后去看一下效果， 卧槽\n\n![我把背景色调成深色方便大家观看](http://img.nixiaolei.com/2019-03-16-22-20-13.png)\n\n\n\n### 进阶\n基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧\n\n既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下\n\n我们先让光环变粗一点， 让他呈现扇叶的形状\n\n```\nborder-width: calc(@index() * 10px);\n```\n\n\n然后让我们用上 `keyframes` ， 为他添加动画\n\n为每个单元格注册几个css变量（css的新特性），  \n\n* 变量`--speed`控制动画的持续时间，也就是速度。\n* `--start` 控制当前光环的起始角度\n* `--direction`: 控制方向， 因为`turn`表示一圈， 所以 `1turn` 就是正的转一圈,`-1turn` 就是反着转一圈， 利用`@pick`方法来随机取一个值\n\n\n\n\n```HTML\n<css-doodle>\n  <!-- ...省略之前的代码 -->\n\n  <!-- 动画执行时间在20秒 - 40秒之间取值-->\n  --speed: @rand(20s, 40s);\n  <!-- 360度里取随机数 -->\n  --start: @rand(360deg);\n  <!-- 顺时针 或 逆时针 -->\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n\n  animation: demo var(--speed) linear infinite;\n\n  @keyframes demo {\n    form {\n      <!-- 填入起始角度 -->\n      transform: rotate(var(--start));\n    }\n    to {\n      <!-- 随机顺时针和逆时针旋转 -->\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```\n\n看看效果\n\n\n![随机旋转效果](http://img.nixiaolei.com/KUXh4tYGe4.gif)\n\n\n炫酷不？\n\n能不能再酷一点？\n\n可以， 我们再给他添一笔， \n\n给他加上一个自定义的贝塞尔\n\n贝塞尔可以去这个网站，根据需要生成\n> http://cubic-bezier.com/#1,.25,.83,.67\n\n\n![贝塞尔](http://img.nixiaolei.com/2019-03-16-23-11-46.png)\n\n\n\n然后我们你所需要的贝塞尔去更改`animation` 的参数\n```HTML\nanimation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n```\n\n根据贝塞尔曲线完成了加速减速的动画效果\n\n\n![添加了贝塞尔曲线的动画](http://img.nixiaolei.com/ApPKe0brCf.gif )\n\n\n\n😎cool~\n\n还有更多更酷的特效等着大家去探索~\n\n\n\n\n**切记`css-doodle` 中不能写注释，大家拷贝的时候记得删掉**\n\n## 释义\n* `:doodle` 选择器会创建一个`display: grid;` 的布局\n* `@grid`提供布局， 用法为 `@grid: 行 x 列 /  总宽高` \n* `@index` 返回当前单元格的索引\n* `hsla` 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。\n  * H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  * S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  * L：Lightness(亮度)。取值为：0.0% - 100.0%\n  * A：Alpha透明度。取值0~1之间。\n* `@place-cell` 调整单元格相对于网格放置。\n* `@pick`： 从给定列表中随机选择一个值。\n* `turn`: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )\n  * `1turn` 就是1圈\n\n\n\n\n\n\n## 完整的代码\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  @place-cell: center;\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  border-width: calc(@index() * 10px);\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n  --speed: @rand(20s, 40s);\n  --start: @rand(360deg);\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n\n  @keyframes demo {\n    form {\n      transform: rotate(var(--start));\n    }\n    to {\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```","slug":"【css-doodle】css-web-component入门","published":1,"updated":"2019-03-22T13:49:25.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3dse000l40uwsci4h3n6","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效</p>\n<blockquote>\n<p><a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"noopener\">https://css-doodle.com/</a></p>\n</blockquote>\n<p><code>&lt;css-doodle /&gt;</code>基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。<br>该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。</p>\n<p>既然它这么牛逼， 那怎么用呢？</p>\n<p>我们一起来搭几个demo</p>\n<h2 id=\"css-doodle入门\"><a href=\"#css-doodle入门\" class=\"headerlink\" title=\"css-doodle入门\"></a>css-doodle入门</h2><blockquote>\n<p>此处用到的语法或api有不了解的 请看页面下方的“释义” 区域</p>\n</blockquote>\n<p>动手过程中需要注意， 不要在<code>css-doodle</code>内部写注释， 会导致样式无效</p>\n<p>首先搭建好运行<code>css-doodle</code>的环境<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入CDN --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面上加入 css-doodle --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 我们将在这里写代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。</p>\n<p>现在我们给他加点料。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时我们再看看页面， 就出现了一个<code>100 x 100</code>的红色小方块，</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-22-36.png\" alt=\"红色方块\"></p>\n<p>好，这个相当于hello world 级别的练习就完成了， </p>\n<p>我们再来点难的：</p>\n<p><strong>我想要一个10 x 10 个的小方块组成的大正方形!</strong></p>\n<p>正好我们可以借此尝试使用一下它提供的API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;css-doodle&gt;</span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 10x10 / 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  background: #60569e;</span><br><span class=\"line\">&lt;/css-doodle&gt;</span><br></pre></td></tr></table></figure>\n<p>出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-28-29.png\" alt=\"10x10的大正方\"></p>\n<p>好既然实现了， 那现在需求升级了</p>\n<p><strong>那我要10个长方形怎么办， 并且我还要长短不一的！</strong></p>\n<p>我去，还要长短不一， 咋整呢</p>\n<p>别慌</p>\n<p>机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数<br><code>@index</code> 严格的来说他会返回当前单元格的索引值</p>\n<p>既然有方法了那我们也有思路了， 二话不说开始动手。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 首先把 10 x 10 小方块变为10个长方形 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 然后根据 @index 获取当前单元格的索引 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  background: #60569e;</span><br><span class=\"line\">  @size: calc(@index() * 1vmin);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 根据 index 这个索引值乘以高度 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>duang!</p>\n<p>这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-45-14.png\" alt=\"10个长方形\"></p>\n<p>我们再给他加上<code>border-radius: 50%;</code> 它就变成10个球了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-50-12.png\" alt=\"10个球\"></p>\n<p>此时需求又来了</p>\n<p><strong>甲方：可不可以弄10个光环？还是渐变的那种?</strong></p>\n<p>行吧， 试试喽谁怕谁</p>\n<p>我们可以举一反三， 利用<code>@index</code>这个好东西来修改<code>hsla</code>产生不同的颜色， 当然修改<code>rgba</code> 也是可以的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 --&gt;</span><br><span class=\"line\">&lt;css-doodle&gt;</span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  border-color: hsla(</span><br><span class=\"line\">    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  @size: calc(@index() * 10%);</span><br><span class=\"line\">  border-style: dashed;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">&lt;/css-doodle&gt;</span><br></pre></td></tr></table></figure>\n<p>好， 甲方爸爸， 你的需求我做到了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-22-11-38.png\" alt=\"渐变光环\"></p>\n<p><strong>甲方: 还不够，我要的是同心圆</strong></p>\n<p>我。。。。。</p>\n<p>得嘞，您说是啥就是啥</p>\n<p>同心圆， 你第一反应想到的是不是使用<code>position: absolute;</code> ?<br>不 ，那太low 了<br>我们只需要 <code>@place-cell: center;</code> 这个参数就搞定了， 它会将每个单元格都摆放至中间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @place-cell: center;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- ...省略之前的代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后去看一下效果， 卧槽</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-22-20-13.png\" alt=\"我把背景色调成深色方便大家观看\"></p>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><p>基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧</p>\n<p>既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下</p>\n<p>我们先让光环变粗一点， 让他呈现扇叶的形状</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-width: calc(@index() * 10px);</span><br></pre></td></tr></table></figure>\n<p>然后让我们用上 <code>keyframes</code> ， 为他添加动画</p>\n<p>为每个单元格注册几个css变量（css的新特性），  </p>\n<ul>\n<li>变量<code>--speed</code>控制动画的持续时间，也就是速度。</li>\n<li><code>--start</code> 控制当前光环的起始角度</li>\n<li><code>--direction</code>: 控制方向， 因为<code>turn</code>表示一圈， 所以 <code>1turn</code> 就是正的转一圈,<code>-1turn</code> 就是反着转一圈， 利用<code>@pick</code>方法来随机取一个值</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- ...省略之前的代码 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 动画执行时间在20秒 - 40秒之间取值--&gt;</span></span><br><span class=\"line\">  --speed: @rand(20s, 40s);</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 360度里取随机数 --&gt;</span></span><br><span class=\"line\">  --start: @rand(360deg);</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 顺时针 或 逆时针 --&gt;</span></span><br><span class=\"line\">  --direction: calc(var(--start) + @pick(1turn, -1turn));</span><br><span class=\"line\"></span><br><span class=\"line\">  animation: demo var(--speed) linear infinite;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes demo &#123;</span><br><span class=\"line\">    form &#123;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 填入起始角度 --&gt;</span></span><br><span class=\"line\">      transform: rotate(var(--start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 随机顺时针和逆时针旋转 --&gt;</span></span><br><span class=\"line\">      transform: rotate(var(--direction));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看看效果</p>\n<p><img src=\"http://img.nixiaolei.com/KUXh4tYGe4.gif\" alt=\"随机旋转效果\"></p>\n<p>炫酷不？</p>\n<p>能不能再酷一点？</p>\n<p>可以， 我们再给他添一笔， </p>\n<p>给他加上一个自定义的贝塞尔</p>\n<p>贝塞尔可以去这个网站，根据需要生成</p>\n<blockquote>\n<p><a href=\"http://cubic-bezier.com/#1,.25,.83,.67\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com/#1,.25,.83,.67</a></p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-23-11-46.png\" alt=\"贝塞尔\"></p>\n<p>然后我们你所需要的贝塞尔去更改<code>animation</code> 的参数<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;</span><br></pre></td></tr></table></figure></p>\n<p>根据贝塞尔曲线完成了加速减速的动画效果</p>\n<p><img src=\"http://img.nixiaolei.com/ApPKe0brCf.gif\" alt=\"添加了贝塞尔曲线的动画\"></p>\n<p>😎cool~</p>\n<p>还有更多更酷的特效等着大家去探索~</p>\n<p><strong>切记<code>css-doodle</code> 中不能写注释，大家拷贝的时候记得删掉</strong></p>\n<h2 id=\"释义\"><a href=\"#释义\" class=\"headerlink\" title=\"释义\"></a>释义</h2><ul>\n<li><code>:doodle</code> 选择器会创建一个<code>display: grid;</code> 的布局</li>\n<li><code>@grid</code>提供布局， 用法为 <code>@grid: 行 x 列 /  总宽高</code> </li>\n<li><code>@index</code> 返回当前单元格的索引</li>\n<li><code>hsla</code> 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。<ul>\n<li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li>\n<li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li>\n<li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li>\n<li>A：Alpha透明度。取值0~1之间。</li>\n</ul>\n</li>\n<li><code>@place-cell</code> 调整单元格相对于网格放置。</li>\n<li><code>@pick</code>： 从给定列表中随机选择一个值。</li>\n<li><code>turn</code>: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )<ul>\n<li><code>1turn</code> 就是1圈</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"完整的代码\"><a href=\"#完整的代码\" class=\"headerlink\" title=\"完整的代码\"></a>完整的代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @place-cell: center;</span><br><span class=\"line\">  border-color: hsla(</span><br><span class=\"line\">    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  border-width: calc(@index() * 10px);</span><br><span class=\"line\">  @size: calc(@index() * 10%);</span><br><span class=\"line\">  border-style: dashed;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">  --speed: @rand(20s, 40s);</span><br><span class=\"line\">  --start: @rand(360deg);</span><br><span class=\"line\">  --direction: calc(var(--start) + @pick(1turn, -1turn));</span><br><span class=\"line\">  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes demo &#123;</span><br><span class=\"line\">    form &#123;</span><br><span class=\"line\">      transform: rotate(var(--start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">      transform: rotate(var(--direction));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效</p>\n<blockquote>\n<p><a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"noopener\">https://css-doodle.com/</a></p>\n</blockquote>\n<p><code>&lt;css-doodle /&gt;</code>基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。<br>该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。</p>\n<p>既然它这么牛逼， 那怎么用呢？</p>\n<p>我们一起来搭几个demo</p>\n<h2 id=\"css-doodle入门\"><a href=\"#css-doodle入门\" class=\"headerlink\" title=\"css-doodle入门\"></a>css-doodle入门</h2><blockquote>\n<p>此处用到的语法或api有不了解的 请看页面下方的“释义” 区域</p>\n</blockquote>\n<p>动手过程中需要注意， 不要在<code>css-doodle</code>内部写注释， 会导致样式无效</p>\n<p>首先搭建好运行<code>css-doodle</code>的环境<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入CDN --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面上加入 css-doodle --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 我们将在这里写代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。</p>\n<p>现在我们给他加点料。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时我们再看看页面， 就出现了一个<code>100 x 100</code>的红色小方块，</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-22-36.png\" alt=\"红色方块\"></p>\n<p>好，这个相当于hello world 级别的练习就完成了， </p>\n<p>我们再来点难的：</p>\n<p><strong>我想要一个10 x 10 个的小方块组成的大正方形!</strong></p>\n<p>正好我们可以借此尝试使用一下它提供的API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;css-doodle&gt;</span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 10x10 / 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  background: #60569e;</span><br><span class=\"line\">&lt;/css-doodle&gt;</span><br></pre></td></tr></table></figure>\n<p>出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-28-29.png\" alt=\"10x10的大正方\"></p>\n<p>好既然实现了， 那现在需求升级了</p>\n<p><strong>那我要10个长方形怎么办， 并且我还要长短不一的！</strong></p>\n<p>我去，还要长短不一， 咋整呢</p>\n<p>别慌</p>\n<p>机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数<br><code>@index</code> 严格的来说他会返回当前单元格的索引值</p>\n<p>既然有方法了那我们也有思路了， 二话不说开始动手。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 首先把 10 x 10 小方块变为10个长方形 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 然后根据 @index 获取当前单元格的索引 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  background: #60569e;</span><br><span class=\"line\">  @size: calc(@index() * 1vmin);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 根据 index 这个索引值乘以高度 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>duang!</p>\n<p>这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-45-14.png\" alt=\"10个长方形\"></p>\n<p>我们再给他加上<code>border-radius: 50%;</code> 它就变成10个球了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-50-12.png\" alt=\"10个球\"></p>\n<p>此时需求又来了</p>\n<p><strong>甲方：可不可以弄10个光环？还是渐变的那种?</strong></p>\n<p>行吧， 试试喽谁怕谁</p>\n<p>我们可以举一反三， 利用<code>@index</code>这个好东西来修改<code>hsla</code>产生不同的颜色， 当然修改<code>rgba</code> 也是可以的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 --&gt;</span><br><span class=\"line\">&lt;css-doodle&gt;</span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  border-color: hsla(</span><br><span class=\"line\">    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  @size: calc(@index() * 10%);</span><br><span class=\"line\">  border-style: dashed;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">&lt;/css-doodle&gt;</span><br></pre></td></tr></table></figure>\n<p>好， 甲方爸爸， 你的需求我做到了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-22-11-38.png\" alt=\"渐变光环\"></p>\n<p><strong>甲方: 还不够，我要的是同心圆</strong></p>\n<p>我。。。。。</p>\n<p>得嘞，您说是啥就是啥</p>\n<p>同心圆， 你第一反应想到的是不是使用<code>position: absolute;</code> ?<br>不 ，那太low 了<br>我们只需要 <code>@place-cell: center;</code> 这个参数就搞定了， 它会将每个单元格都摆放至中间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @place-cell: center;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- ...省略之前的代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后去看一下效果， 卧槽</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-22-20-13.png\" alt=\"我把背景色调成深色方便大家观看\"></p>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><p>基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧</p>\n<p>既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下</p>\n<p>我们先让光环变粗一点， 让他呈现扇叶的形状</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-width: calc(@index() * 10px);</span><br></pre></td></tr></table></figure>\n<p>然后让我们用上 <code>keyframes</code> ， 为他添加动画</p>\n<p>为每个单元格注册几个css变量（css的新特性），  </p>\n<ul>\n<li>变量<code>--speed</code>控制动画的持续时间，也就是速度。</li>\n<li><code>--start</code> 控制当前光环的起始角度</li>\n<li><code>--direction</code>: 控制方向， 因为<code>turn</code>表示一圈， 所以 <code>1turn</code> 就是正的转一圈,<code>-1turn</code> 就是反着转一圈， 利用<code>@pick</code>方法来随机取一个值</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- ...省略之前的代码 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 动画执行时间在20秒 - 40秒之间取值--&gt;</span></span><br><span class=\"line\">  --speed: @rand(20s, 40s);</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 360度里取随机数 --&gt;</span></span><br><span class=\"line\">  --start: @rand(360deg);</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 顺时针 或 逆时针 --&gt;</span></span><br><span class=\"line\">  --direction: calc(var(--start) + @pick(1turn, -1turn));</span><br><span class=\"line\"></span><br><span class=\"line\">  animation: demo var(--speed) linear infinite;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes demo &#123;</span><br><span class=\"line\">    form &#123;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 填入起始角度 --&gt;</span></span><br><span class=\"line\">      transform: rotate(var(--start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 随机顺时针和逆时针旋转 --&gt;</span></span><br><span class=\"line\">      transform: rotate(var(--direction));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看看效果</p>\n<p><img src=\"http://img.nixiaolei.com/KUXh4tYGe4.gif\" alt=\"随机旋转效果\"></p>\n<p>炫酷不？</p>\n<p>能不能再酷一点？</p>\n<p>可以， 我们再给他添一笔， </p>\n<p>给他加上一个自定义的贝塞尔</p>\n<p>贝塞尔可以去这个网站，根据需要生成</p>\n<blockquote>\n<p><a href=\"http://cubic-bezier.com/#1,.25,.83,.67\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com/#1,.25,.83,.67</a></p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-23-11-46.png\" alt=\"贝塞尔\"></p>\n<p>然后我们你所需要的贝塞尔去更改<code>animation</code> 的参数<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;</span><br></pre></td></tr></table></figure></p>\n<p>根据贝塞尔曲线完成了加速减速的动画效果</p>\n<p><img src=\"http://img.nixiaolei.com/ApPKe0brCf.gif\" alt=\"添加了贝塞尔曲线的动画\"></p>\n<p>😎cool~</p>\n<p>还有更多更酷的特效等着大家去探索~</p>\n<p><strong>切记<code>css-doodle</code> 中不能写注释，大家拷贝的时候记得删掉</strong></p>\n<h2 id=\"释义\"><a href=\"#释义\" class=\"headerlink\" title=\"释义\"></a>释义</h2><ul>\n<li><code>:doodle</code> 选择器会创建一个<code>display: grid;</code> 的布局</li>\n<li><code>@grid</code>提供布局， 用法为 <code>@grid: 行 x 列 /  总宽高</code> </li>\n<li><code>@index</code> 返回当前单元格的索引</li>\n<li><code>hsla</code> 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。<ul>\n<li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li>\n<li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li>\n<li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li>\n<li>A：Alpha透明度。取值0~1之间。</li>\n</ul>\n</li>\n<li><code>@place-cell</code> 调整单元格相对于网格放置。</li>\n<li><code>@pick</code>： 从给定列表中随机选择一个值。</li>\n<li><code>turn</code>: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )<ul>\n<li><code>1turn</code> 就是1圈</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"完整的代码\"><a href=\"#完整的代码\" class=\"headerlink\" title=\"完整的代码\"></a>完整的代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @place-cell: center;</span><br><span class=\"line\">  border-color: hsla(</span><br><span class=\"line\">    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  border-width: calc(@index() * 10px);</span><br><span class=\"line\">  @size: calc(@index() * 10%);</span><br><span class=\"line\">  border-style: dashed;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">  --speed: @rand(20s, 40s);</span><br><span class=\"line\">  --start: @rand(360deg);</span><br><span class=\"line\">  --direction: calc(var(--start) + @pick(1turn, -1turn));</span><br><span class=\"line\">  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes demo &#123;</span><br><span class=\"line\">    form &#123;</span><br><span class=\"line\">      transform: rotate(var(--start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">      transform: rotate(var(--direction));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"利用CSS混合模式更改图片颜色","date":"2019-03-16T10:34:26.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\nCSS3 新增了一个很有意思的属性 `mix-blend-mode` ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。\n\n混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。\n\n\n\n开始动手吧 ~\n\n## 尝试修改图片物体颜色\n\n首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）\n```HTML\n<body>\n  <input type=\"color\" />\n  <img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553336864&di=2f41edc8eedbf09fb1d106545acaed5f&imgtype=jpg&er=1&src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\" alt=\"\">\n</body>\n```\n\n然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式`mix-blend-mode: hue;` \n> 因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效\n\n\n```CSS\n<style>\nhtml,body, input, img {\n  width: 100%;\n  height: 100%;\n}\ninput{ \n  position: absolute;\n  top: 0;\n  left: 0;\n  mix-blend-mode: hue;\n}\n</style>\n```\n\n\n### 过程记录\n原图:\n![原图](http://img.nixiaolei.com/2019-03-16-18-43-09.png)\n\n添加上了混合模式(变灰是因为color选择器默认是黑色):\n![添加上了混合模式](http://img.nixiaolei.com/2019-03-16-18-44-01.png)\n\n切换颜色中:\n![切换颜色中](http://img.nixiaolei.com/2019-03-16-18-45-53.png)\n\n切换后: \n\n![切换后](http://img.nixiaolei.com/2019-03-16-18-46-30.png)\n\n虽然有点丑但我们成功了~\n\n\n## 更多可能性\n\n利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错\n\n\n## 参考文献\n> https://www.cnblogs.com/coco1s/p/6829372.html","source":"_posts/利用CSS混合模式更改图片颜色.md","raw":"---\ntitle: 利用CSS混合模式更改图片颜色\ndate: 2019-03-16 18:34:26\ncategories: CSS\ntags: [css]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\nCSS3 新增了一个很有意思的属性 `mix-blend-mode` ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。\n\n混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。\n\n\n\n开始动手吧 ~\n\n## 尝试修改图片物体颜色\n\n首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）\n```HTML\n<body>\n  <input type=\"color\" />\n  <img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553336864&di=2f41edc8eedbf09fb1d106545acaed5f&imgtype=jpg&er=1&src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\" alt=\"\">\n</body>\n```\n\n然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式`mix-blend-mode: hue;` \n> 因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效\n\n\n```CSS\n<style>\nhtml,body, input, img {\n  width: 100%;\n  height: 100%;\n}\ninput{ \n  position: absolute;\n  top: 0;\n  left: 0;\n  mix-blend-mode: hue;\n}\n</style>\n```\n\n\n### 过程记录\n原图:\n![原图](http://img.nixiaolei.com/2019-03-16-18-43-09.png)\n\n添加上了混合模式(变灰是因为color选择器默认是黑色):\n![添加上了混合模式](http://img.nixiaolei.com/2019-03-16-18-44-01.png)\n\n切换颜色中:\n![切换颜色中](http://img.nixiaolei.com/2019-03-16-18-45-53.png)\n\n切换后: \n\n![切换后](http://img.nixiaolei.com/2019-03-16-18-46-30.png)\n\n虽然有点丑但我们成功了~\n\n\n## 更多可能性\n\n利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错\n\n\n## 参考文献\n> https://www.cnblogs.com/coco1s/p/6829372.html","slug":"利用CSS混合模式更改图片颜色","published":1,"updated":"2019-03-22T13:49:14.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3dsg000o40uw49t1xc38","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>CSS3 新增了一个很有意思的属性 <code>mix-blend-mode</code> ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。</p>\n<p>混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。</p>\n<p>开始动手吧 ~</p>\n<h2 id=\"尝试修改图片物体颜色\"><a href=\"#尝试修改图片物体颜色\" class=\"headerlink\" title=\"尝试修改图片物体颜色\"></a>尝试修改图片物体颜色</h2><p>首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1553336864&amp;di=2f41edc8eedbf09fb1d106545acaed5f&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式<code>mix-blend-mode: hue;</code> </p>\n<blockquote>\n<p>因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>&#123; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">mix-blend-mode</span>: hue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h3><p>原图:<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-43-09.png\" alt=\"原图\"></p>\n<p>添加上了混合模式(变灰是因为color选择器默认是黑色):<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-44-01.png\" alt=\"添加上了混合模式\"></p>\n<p>切换颜色中:<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-45-53.png\" alt=\"切换颜色中\"></p>\n<p>切换后: </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-18-46-30.png\" alt=\"切换后\"></p>\n<p>虽然有点丑但我们成功了~</p>\n<h2 id=\"更多可能性\"><a href=\"#更多可能性\" class=\"headerlink\" title=\"更多可能性\"></a>更多可能性</h2><p>利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/coco1s/p/6829372.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/coco1s/p/6829372.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>CSS3 新增了一个很有意思的属性 <code>mix-blend-mode</code> ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。</p>\n<p>混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。</p>\n<p>开始动手吧 ~</p>\n<h2 id=\"尝试修改图片物体颜色\"><a href=\"#尝试修改图片物体颜色\" class=\"headerlink\" title=\"尝试修改图片物体颜色\"></a>尝试修改图片物体颜色</h2><p>首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1553336864&amp;di=2f41edc8eedbf09fb1d106545acaed5f&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式<code>mix-blend-mode: hue;</code> </p>\n<blockquote>\n<p>因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>&#123; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">mix-blend-mode</span>: hue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h3><p>原图:<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-43-09.png\" alt=\"原图\"></p>\n<p>添加上了混合模式(变灰是因为color选择器默认是黑色):<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-44-01.png\" alt=\"添加上了混合模式\"></p>\n<p>切换颜色中:<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-45-53.png\" alt=\"切换颜色中\"></p>\n<p>切换后: </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-18-46-30.png\" alt=\"切换后\"></p>\n<p>虽然有点丑但我们成功了~</p>\n<h2 id=\"更多可能性\"><a href=\"#更多可能性\" class=\"headerlink\" title=\"更多可能性\"></a>更多可能性</h2><p>利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/coco1s/p/6829372.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/coco1s/p/6829372.html</a></p>\n</blockquote>\n"},{"title":"手摸手AngularJs入门教程","date":"2019-03-16T04:00:36.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\nAngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。\n\n这里我们用AngularJs7的练手吧\n\n## 起步\n> 请确保电脑已安装了`Node.js`\n\n首先是全局安装脚手架\n```shell\nnpm install -g @angular/cli\n```\n安装好后查看一下版本\n> ng --version\n\n![查看版本](http://img.nixiaolei.com/2019-03-17-15-54-41.png)\n\n\n确认`ng`命令存在后就可以开始创建我们的第一个 Angular 项目了\n```shell\n# 创建项目  project 替换为你的项目名称\nng new project\n```\n\n当你输入命令后他会问你需要的配置，  \n\n这里附上我的选择， 大家可以参照\n\n1. 你是否需要添加路由？ ---- yes\n2. 选择你喜欢的css 风格 ---- SCSS\n\n![选择配置](http://img.nixiaolei.com/2019-03-17-15-36-01.png)\n\n\n选择好后， 就会进入漫长的安装了\n![安装中](http://img.nixiaolei.com/2019-03-17-15-39-53.png)\n\n安装好后， cd 进入到项目所在的目录， 运行 `ng serve` 命令， 并打开`http://localhost:4200/` 查看我们第一个 `Angular`项目\n```shell\n# 进入你的项目目录\ncd project\n\n# 启动项目\nng serve\n\n# 如果你需要 可以生产环境运行\nng serve --prod --aot \n```\n\n## 基本的路由配置\n> 如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能\n因为之前我们在构建项目时就选择了加入`路由`， 因此也省去了很多配置过程， \n\n现在，我们来看看怎么用吧， \n\n首先想使用路由， 得需要再创建一个\"页面\"（这里指组件）， 这样才能通过切换看出是否实现了路由， \n\n**那如何创建一个组件呢？**\n\nAngular 给我们提供了非常多的创建命令， 组件也可以一键的生成\n\n我们来创建一个 `Demo` 组件\n> ng g c Demo\n\n等待片刻， 安装好后\n\n我们发现项目文件中的 `app` 目录下多了一个文件夹\n![Demo组件创建](http://img.nixiaolei.com/2019-03-17-17-01-55.png)\n\n里面有配套的\n* 模板文件\n* 样式文件\n* 测试文件\n* ts 脚本文件\n\n\n既然有了组件， 那我们现在需要为这个路由分配相应的访问路径\n\n进入 `app/app-routing.module.ts` 这个文件\n\n我们首先导入刚刚创建的`Demo`组件， 再 `routes`数组中，分配一个用于访问的`path`, 并和导入的`DemoComponent`关联上\n\n如下:\n\n```JavaScript\n// ------------新增区域------------\nimport { DemoComponent } from './demo/demo.component';\n// ------------新增区域------------\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  // -----------新增区域-------------\n  {\n    path: \"demo\",\n    component: DemoComponent\n  }\n  // ------------新增区域------------\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n\n然后进入 `app/app.component.html` 文件中找到 `<router-outlet></router-outlet>`\n\n刚才配置的路由就会显示在这个标签所在的位置，\n为了减少一点干扰，我们把没有用的信息删除\n\n!component19html\n切换后](http://img.nixiaolei.com/2019-03--17-17-27-25.png app.我只留了一张图片,\n\n然后我们进入 `app/demo/demo.component.html` 文件中\n\n原本是\n```HTML\n<p>\n  demo works!\n</p>\n```\n\n我们改成明显一点的内容\n> 千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息\n\n```HTML\n<div>\n  <h1>我是Demo 页面</h1>\n</div>\n```\n\n我们看看是否配置成功了\n\n\n首先，刚进入， 只有一张图片\n\n![根路由](http://img.nixiaolei.com/2019-03-17-17-34-37.png)\n\n\n让我们切换至`/demo`\n\n我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 `app/app.component.html` 中所做的配置一样\n\n![切换至demo](http://img.nixiaolei.com/2019-03-17-17-35-14.png)\n\n\n\n--------------------待完善-------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 常用的命令\n> 把 XXX 替换成你要的名字\n\n* ng g cl xxx // 创建一个新类\n* ng g c xxx // 创建一个新组件\n* ng g d xxx // 创建一个新指令\n* ng g e xxx // 创建一个新枚举\n* ng g m xxx // 创建一个新模块\n* ng g p xxx // 创建一个新管道\n* ng g s xxx // 创建一个新的指服务\n\n\n \n## 参考文献\n> https://github.com/angular/angular-cli/wiki\n\n","source":"_posts/手摸手AngularJs入门教程.md","raw":"---\ntitle: 手摸手AngularJs入门教程\ndate: 2019-03-16 12:00:36\ncategories: JavaScript\ntags: [Angular]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\nAngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。\n\n这里我们用AngularJs7的练手吧\n\n## 起步\n> 请确保电脑已安装了`Node.js`\n\n首先是全局安装脚手架\n```shell\nnpm install -g @angular/cli\n```\n安装好后查看一下版本\n> ng --version\n\n![查看版本](http://img.nixiaolei.com/2019-03-17-15-54-41.png)\n\n\n确认`ng`命令存在后就可以开始创建我们的第一个 Angular 项目了\n```shell\n# 创建项目  project 替换为你的项目名称\nng new project\n```\n\n当你输入命令后他会问你需要的配置，  \n\n这里附上我的选择， 大家可以参照\n\n1. 你是否需要添加路由？ ---- yes\n2. 选择你喜欢的css 风格 ---- SCSS\n\n![选择配置](http://img.nixiaolei.com/2019-03-17-15-36-01.png)\n\n\n选择好后， 就会进入漫长的安装了\n![安装中](http://img.nixiaolei.com/2019-03-17-15-39-53.png)\n\n安装好后， cd 进入到项目所在的目录， 运行 `ng serve` 命令， 并打开`http://localhost:4200/` 查看我们第一个 `Angular`项目\n```shell\n# 进入你的项目目录\ncd project\n\n# 启动项目\nng serve\n\n# 如果你需要 可以生产环境运行\nng serve --prod --aot \n```\n\n## 基本的路由配置\n> 如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能\n因为之前我们在构建项目时就选择了加入`路由`， 因此也省去了很多配置过程， \n\n现在，我们来看看怎么用吧， \n\n首先想使用路由， 得需要再创建一个\"页面\"（这里指组件）， 这样才能通过切换看出是否实现了路由， \n\n**那如何创建一个组件呢？**\n\nAngular 给我们提供了非常多的创建命令， 组件也可以一键的生成\n\n我们来创建一个 `Demo` 组件\n> ng g c Demo\n\n等待片刻， 安装好后\n\n我们发现项目文件中的 `app` 目录下多了一个文件夹\n![Demo组件创建](http://img.nixiaolei.com/2019-03-17-17-01-55.png)\n\n里面有配套的\n* 模板文件\n* 样式文件\n* 测试文件\n* ts 脚本文件\n\n\n既然有了组件， 那我们现在需要为这个路由分配相应的访问路径\n\n进入 `app/app-routing.module.ts` 这个文件\n\n我们首先导入刚刚创建的`Demo`组件， 再 `routes`数组中，分配一个用于访问的`path`, 并和导入的`DemoComponent`关联上\n\n如下:\n\n```JavaScript\n// ------------新增区域------------\nimport { DemoComponent } from './demo/demo.component';\n// ------------新增区域------------\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  // -----------新增区域-------------\n  {\n    path: \"demo\",\n    component: DemoComponent\n  }\n  // ------------新增区域------------\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n\n然后进入 `app/app.component.html` 文件中找到 `<router-outlet></router-outlet>`\n\n刚才配置的路由就会显示在这个标签所在的位置，\n为了减少一点干扰，我们把没有用的信息删除\n\n!component19html\n切换后](http://img.nixiaolei.com/2019-03--17-17-27-25.png app.我只留了一张图片,\n\n然后我们进入 `app/demo/demo.component.html` 文件中\n\n原本是\n```HTML\n<p>\n  demo works!\n</p>\n```\n\n我们改成明显一点的内容\n> 千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息\n\n```HTML\n<div>\n  <h1>我是Demo 页面</h1>\n</div>\n```\n\n我们看看是否配置成功了\n\n\n首先，刚进入， 只有一张图片\n\n![根路由](http://img.nixiaolei.com/2019-03-17-17-34-37.png)\n\n\n让我们切换至`/demo`\n\n我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 `app/app.component.html` 中所做的配置一样\n\n![切换至demo](http://img.nixiaolei.com/2019-03-17-17-35-14.png)\n\n\n\n--------------------待完善-------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 常用的命令\n> 把 XXX 替换成你要的名字\n\n* ng g cl xxx // 创建一个新类\n* ng g c xxx // 创建一个新组件\n* ng g d xxx // 创建一个新指令\n* ng g e xxx // 创建一个新枚举\n* ng g m xxx // 创建一个新模块\n* ng g p xxx // 创建一个新管道\n* ng g s xxx // 创建一个新的指服务\n\n\n \n## 参考文献\n> https://github.com/angular/angular-cli/wiki\n\n","slug":"手摸手AngularJs入门教程","published":1,"updated":"2019-03-20T14:55:14.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3dsj000t40uwj0zythvg","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>AngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。</p>\n<p>这里我们用AngularJs7的练手吧</p>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><blockquote>\n<p>请确保电脑已安装了<code>Node.js</code></p>\n</blockquote>\n<p>首先是全局安装脚手架<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular/cli</span><br></pre></td></tr></table></figure></p>\n<p>安装好后查看一下版本</p>\n<blockquote>\n<p>ng –version</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-15-54-41.png\" alt=\"查看版本\"></p>\n<p>确认<code>ng</code>命令存在后就可以开始创建我们的第一个 Angular 项目了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 创建项目  project 替换为你的项目名称</span><br><span class=\"line\">ng new project</span><br></pre></td></tr></table></figure></p>\n<p>当你输入命令后他会问你需要的配置，  </p>\n<p>这里附上我的选择， 大家可以参照</p>\n<ol>\n<li>你是否需要添加路由？ —- yes</li>\n<li>选择你喜欢的css 风格 —- SCSS</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-15-36-01.png\" alt=\"选择配置\"></p>\n<p>选择好后， 就会进入漫长的安装了<br><img src=\"http://img.nixiaolei.com/2019-03-17-15-39-53.png\" alt=\"安装中\"></p>\n<p>安装好后， cd 进入到项目所在的目录， 运行 <code>ng serve</code> 命令， 并打开<code>http://localhost:4200/</code> 查看我们第一个 <code>Angular</code>项目<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 进入你的项目目录</span><br><span class=\"line\">cd project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 启动项目</span><br><span class=\"line\">ng serve</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 如果你需要 可以生产环境运行</span><br><span class=\"line\">ng serve --prod --aot</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基本的路由配置\"><a href=\"#基本的路由配置\" class=\"headerlink\" title=\"基本的路由配置\"></a>基本的路由配置</h2><blockquote>\n<p>如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能<br>因为之前我们在构建项目时就选择了加入<code>路由</code>， 因此也省去了很多配置过程， </p>\n</blockquote>\n<p>现在，我们来看看怎么用吧， </p>\n<p>首先想使用路由， 得需要再创建一个”页面”（这里指组件）， 这样才能通过切换看出是否实现了路由， </p>\n<p><strong>那如何创建一个组件呢？</strong></p>\n<p>Angular 给我们提供了非常多的创建命令， 组件也可以一键的生成</p>\n<p>我们来创建一个 <code>Demo</code> 组件</p>\n<blockquote>\n<p>ng g c Demo</p>\n</blockquote>\n<p>等待片刻， 安装好后</p>\n<p>我们发现项目文件中的 <code>app</code> 目录下多了一个文件夹<br><img src=\"http://img.nixiaolei.com/2019-03-17-17-01-55.png\" alt=\"Demo组件创建\"></p>\n<p>里面有配套的</p>\n<ul>\n<li>模板文件</li>\n<li>样式文件</li>\n<li>测试文件</li>\n<li>ts 脚本文件</li>\n</ul>\n<p>既然有了组件， 那我们现在需要为这个路由分配相应的访问路径</p>\n<p>进入 <code>app/app-routing.module.ts</code> 这个文件</p>\n<p>我们首先导入刚刚创建的<code>Demo</code>组件， 再 <code>routes</code>数组中，分配一个用于访问的<code>path</code>, 并和导入的<code>DemoComponent</code>关联上</p>\n<p>如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; DemoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./demo/demo.component'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  <span class=\"comment\">// -----------新增区域-------------</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"demo\"</span>,</span><br><span class=\"line\">    component: DemoComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>然后进入 <code>app/app.component.html</code> 文件中找到 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code></p>\n<p>刚才配置的路由就会显示在这个标签所在的位置，<br>为了减少一点干扰，我们把没有用的信息删除</p>\n<p>!component19html<br>切换后](<a href=\"http://img.nixiaolei.com/2019-03--17-17-27-25.png\" target=\"_blank\" rel=\"noopener\">http://img.nixiaolei.com/2019-03--17-17-27-25.png</a> app.我只留了一张图片,</p>\n<p>然后我们进入 <code>app/demo/demo.component.html</code> 文件中</p>\n<p>原本是<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  demo works!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们改成明显一点的内容</p>\n<blockquote>\n<p>千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是Demo 页面<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们看看是否配置成功了</p>\n<p>首先，刚进入， 只有一张图片</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-17-34-37.png\" alt=\"根路由\"></p>\n<p>让我们切换至<code>/demo</code></p>\n<p>我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 <code>app/app.component.html</code> 中所做的配置一样</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-17-35-14.png\" alt=\"切换至demo\"></p>\n<p>——————–待完善————————-</p>\n<h2 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h2><blockquote>\n<p>把 XXX 替换成你要的名字</p>\n</blockquote>\n<ul>\n<li>ng g cl xxx // 创建一个新类</li>\n<li>ng g c xxx // 创建一个新组件</li>\n<li>ng g d xxx // 创建一个新指令</li>\n<li>ng g e xxx // 创建一个新枚举</li>\n<li>ng g m xxx // 创建一个新模块</li>\n<li>ng g p xxx // 创建一个新管道</li>\n<li>ng g s xxx // 创建一个新的指服务</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><blockquote>\n<p><a href=\"https://github.com/angular/angular-cli/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/angular/angular-cli/wiki</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>AngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。</p>\n<p>这里我们用AngularJs7的练手吧</p>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><blockquote>\n<p>请确保电脑已安装了<code>Node.js</code></p>\n</blockquote>\n<p>首先是全局安装脚手架<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular/cli</span><br></pre></td></tr></table></figure></p>\n<p>安装好后查看一下版本</p>\n<blockquote>\n<p>ng –version</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-15-54-41.png\" alt=\"查看版本\"></p>\n<p>确认<code>ng</code>命令存在后就可以开始创建我们的第一个 Angular 项目了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 创建项目  project 替换为你的项目名称</span><br><span class=\"line\">ng new project</span><br></pre></td></tr></table></figure></p>\n<p>当你输入命令后他会问你需要的配置，  </p>\n<p>这里附上我的选择， 大家可以参照</p>\n<ol>\n<li>你是否需要添加路由？ —- yes</li>\n<li>选择你喜欢的css 风格 —- SCSS</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-15-36-01.png\" alt=\"选择配置\"></p>\n<p>选择好后， 就会进入漫长的安装了<br><img src=\"http://img.nixiaolei.com/2019-03-17-15-39-53.png\" alt=\"安装中\"></p>\n<p>安装好后， cd 进入到项目所在的目录， 运行 <code>ng serve</code> 命令， 并打开<code>http://localhost:4200/</code> 查看我们第一个 <code>Angular</code>项目<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 进入你的项目目录</span><br><span class=\"line\">cd project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 启动项目</span><br><span class=\"line\">ng serve</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 如果你需要 可以生产环境运行</span><br><span class=\"line\">ng serve --prod --aot</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基本的路由配置\"><a href=\"#基本的路由配置\" class=\"headerlink\" title=\"基本的路由配置\"></a>基本的路由配置</h2><blockquote>\n<p>如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能<br>因为之前我们在构建项目时就选择了加入<code>路由</code>， 因此也省去了很多配置过程， </p>\n</blockquote>\n<p>现在，我们来看看怎么用吧， </p>\n<p>首先想使用路由， 得需要再创建一个”页面”（这里指组件）， 这样才能通过切换看出是否实现了路由， </p>\n<p><strong>那如何创建一个组件呢？</strong></p>\n<p>Angular 给我们提供了非常多的创建命令， 组件也可以一键的生成</p>\n<p>我们来创建一个 <code>Demo</code> 组件</p>\n<blockquote>\n<p>ng g c Demo</p>\n</blockquote>\n<p>等待片刻， 安装好后</p>\n<p>我们发现项目文件中的 <code>app</code> 目录下多了一个文件夹<br><img src=\"http://img.nixiaolei.com/2019-03-17-17-01-55.png\" alt=\"Demo组件创建\"></p>\n<p>里面有配套的</p>\n<ul>\n<li>模板文件</li>\n<li>样式文件</li>\n<li>测试文件</li>\n<li>ts 脚本文件</li>\n</ul>\n<p>既然有了组件， 那我们现在需要为这个路由分配相应的访问路径</p>\n<p>进入 <code>app/app-routing.module.ts</code> 这个文件</p>\n<p>我们首先导入刚刚创建的<code>Demo</code>组件， 再 <code>routes</code>数组中，分配一个用于访问的<code>path</code>, 并和导入的<code>DemoComponent</code>关联上</p>\n<p>如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; DemoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./demo/demo.component'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  <span class=\"comment\">// -----------新增区域-------------</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"demo\"</span>,</span><br><span class=\"line\">    component: DemoComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>然后进入 <code>app/app.component.html</code> 文件中找到 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code></p>\n<p>刚才配置的路由就会显示在这个标签所在的位置，<br>为了减少一点干扰，我们把没有用的信息删除</p>\n<p>!component19html<br>切换后](<a href=\"http://img.nixiaolei.com/2019-03--17-17-27-25.png\" target=\"_blank\" rel=\"noopener\">http://img.nixiaolei.com/2019-03--17-17-27-25.png</a> app.我只留了一张图片,</p>\n<p>然后我们进入 <code>app/demo/demo.component.html</code> 文件中</p>\n<p>原本是<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  demo works!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们改成明显一点的内容</p>\n<blockquote>\n<p>千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是Demo 页面<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们看看是否配置成功了</p>\n<p>首先，刚进入， 只有一张图片</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-17-34-37.png\" alt=\"根路由\"></p>\n<p>让我们切换至<code>/demo</code></p>\n<p>我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 <code>app/app.component.html</code> 中所做的配置一样</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-17-35-14.png\" alt=\"切换至demo\"></p>\n<p>——————–待完善————————-</p>\n<h2 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h2><blockquote>\n<p>把 XXX 替换成你要的名字</p>\n</blockquote>\n<ul>\n<li>ng g cl xxx // 创建一个新类</li>\n<li>ng g c xxx // 创建一个新组件</li>\n<li>ng g d xxx // 创建一个新指令</li>\n<li>ng g e xxx // 创建一个新枚举</li>\n<li>ng g m xxx // 创建一个新模块</li>\n<li>ng g p xxx // 创建一个新管道</li>\n<li>ng g s xxx // 创建一个新的指服务</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><blockquote>\n<p><a href=\"https://github.com/angular/angular-cli/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/angular/angular-cli/wiki</a></p>\n</blockquote>\n"},{"title":"算法工具&插件","date":"2019-03-17T07:01:46.000Z","_content":"\n\n\n## 学习帮助\n* 算法过程可视化: https://algorithm-visualizer.org/branch-and-bound/binary-search\n\n\n\n\n\n\n\n\n","source":"_posts/算法工具-插件.md","raw":"---\ntitle: 算法工具&插件\ndate: 2019-03-17 15:01:46\ncategories: 算法\ntags: [算法, 插件, 工具]\n---\n\n\n\n## 学习帮助\n* 算法过程可视化: https://algorithm-visualizer.org/branch-and-bound/binary-search\n\n\n\n\n\n\n\n\n","slug":"算法工具-插件","published":1,"updated":"2019-03-17T08:06:17.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3dsp000w40uw69tysftc","content":"<h2 id=\"学习帮助\"><a href=\"#学习帮助\" class=\"headerlink\" title=\"学习帮助\"></a>学习帮助</h2><ul>\n<li>算法过程可视化: <a href=\"https://algorithm-visualizer.org/branch-and-bound/binary-search\" target=\"_blank\" rel=\"noopener\">https://algorithm-visualizer.org/branch-and-bound/binary-search</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"学习帮助\"><a href=\"#学习帮助\" class=\"headerlink\" title=\"学习帮助\"></a>学习帮助</h2><ul>\n<li>算法过程可视化: <a href=\"https://algorithm-visualizer.org/branch-and-bound/binary-search\" target=\"_blank\" rel=\"noopener\">https://algorithm-visualizer.org/branch-and-bound/binary-search</a></li>\n</ul>\n"},{"title":"面向对象设计原则之IOC控制反转","date":"2019-03-24T05:39:45.000Z","_content":"\n\n# IOC （控制反转）\n> Inversion of Control\n\nIoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。\n\n\n## 什么是控制反转\n\n控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。\n\n\n> DI是IOC的一种表现形式\n\n\n\n## 两种方式\n\n### 依赖查找\n容器提供回调接口和上下文条件给组件。\n\n### 依赖注入\n组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。\n\n\n\n\n## IOC概念图\n\n在未使用IOC的时候 各个 `Object` 之间的耦合度很高， 谁也离不开谁\n\n在使用 IOC 后， 各个 `Object` 之间通过 `IOC容器` 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度\n\n![IOC概念图](http://img.nixiaolei.com/2019-03-24-13-49-37.png)\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/面向对象设计原则之IOC控制反转.md","raw":"---\ntitle: 面向对象设计原则之IOC控制反转\ndate: 2019-03-24 13:39:45\ncategories: [编程思想]\ntags: [oop, IOC, 编程原则]\n---\n\n\n# IOC （控制反转）\n> Inversion of Control\n\nIoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。\n\n\n## 什么是控制反转\n\n控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。\n\n\n> DI是IOC的一种表现形式\n\n\n\n## 两种方式\n\n### 依赖查找\n容器提供回调接口和上下文条件给组件。\n\n### 依赖注入\n组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。\n\n\n\n\n## IOC概念图\n\n在未使用IOC的时候 各个 `Object` 之间的耦合度很高， 谁也离不开谁\n\n在使用 IOC 后， 各个 `Object` 之间通过 `IOC容器` 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度\n\n![IOC概念图](http://img.nixiaolei.com/2019-03-24-13-49-37.png)\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"面向对象设计原则之IOC控制反转","published":1,"updated":"2019-03-24T05:57:42.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3dss001140uwclq0mwap","content":"<h1 id=\"IOC-（控制反转）\"><a href=\"#IOC-（控制反转）\" class=\"headerlink\" title=\"IOC （控制反转）\"></a>IOC （控制反转）</h1><blockquote>\n<p>Inversion of Control</p>\n</blockquote>\n<p>IoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。</p>\n<h2 id=\"什么是控制反转\"><a href=\"#什么是控制反转\" class=\"headerlink\" title=\"什么是控制反转\"></a>什么是控制反转</h2><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。</p>\n<blockquote>\n<p>DI是IOC的一种表现形式</p>\n</blockquote>\n<h2 id=\"两种方式\"><a href=\"#两种方式\" class=\"headerlink\" title=\"两种方式\"></a>两种方式</h2><h3 id=\"依赖查找\"><a href=\"#依赖查找\" class=\"headerlink\" title=\"依赖查找\"></a>依赖查找</h3><p>容器提供回调接口和上下文条件给组件。</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。</p>\n<h2 id=\"IOC概念图\"><a href=\"#IOC概念图\" class=\"headerlink\" title=\"IOC概念图\"></a>IOC概念图</h2><p>在未使用IOC的时候 各个 <code>Object</code> 之间的耦合度很高， 谁也离不开谁</p>\n<p>在使用 IOC 后， 各个 <code>Object</code> 之间通过 <code>IOC容器</code> 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-13-49-37.png\" alt=\"IOC概念图\"></p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"IOC-（控制反转）\"><a href=\"#IOC-（控制反转）\" class=\"headerlink\" title=\"IOC （控制反转）\"></a>IOC （控制反转）</h1><blockquote>\n<p>Inversion of Control</p>\n</blockquote>\n<p>IoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。</p>\n<h2 id=\"什么是控制反转\"><a href=\"#什么是控制反转\" class=\"headerlink\" title=\"什么是控制反转\"></a>什么是控制反转</h2><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。</p>\n<blockquote>\n<p>DI是IOC的一种表现形式</p>\n</blockquote>\n<h2 id=\"两种方式\"><a href=\"#两种方式\" class=\"headerlink\" title=\"两种方式\"></a>两种方式</h2><h3 id=\"依赖查找\"><a href=\"#依赖查找\" class=\"headerlink\" title=\"依赖查找\"></a>依赖查找</h3><p>容器提供回调接口和上下文条件给组件。</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。</p>\n<h2 id=\"IOC概念图\"><a href=\"#IOC概念图\" class=\"headerlink\" title=\"IOC概念图\"></a>IOC概念图</h2><p>在未使用IOC的时候 各个 <code>Object</code> 之间的耦合度很高， 谁也离不开谁</p>\n<p>在使用 IOC 后， 各个 <code>Object</code> 之间通过 <code>IOC容器</code> 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-13-49-37.png\" alt=\"IOC概念图\"></p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"TypeScript手册","date":"2019-03-18T14:41:51.000Z","_content":"\n\n\nTypeScript是JavaScript的超集\n\n## 开发环境搭建\n> 我的环境: window10 + vscode\n\n全局安装Ts\n> npm i -g typescript\n\n生成并配置`tsconfig.json`\n> tsc --init\n\n\n配置文件， 下面的配置中`ts`应存放在`src` 目录下， 并且会自动编译到dist文件夹下\n```JavaScript\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",                         // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'\n    \"module\": \"commonjs\",                       // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'\n    \"moduleResolution\": \"node\",                 // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)\n    \"emitDecoratorMetadata\": true,              // 为装饰器提供元数据的支持\n    \"experimentalDecorators\": true,             // 启用装饰器\n    \"allowSyntheticDefaultImports\": true,       // 允许从没有设置默认导出的模块中默认导入。\n    \"strict\": true,                             // 启用所有严格类型检查选项\n    \"noImplicitAny\": true,                      // 在表达式和声明上有隐含的 any类型时报错\n    \"alwaysStrict\": true,                       // 以严格模式检查没个模块，并在没个文件里加入 'use strict'\n    \"sourceMap\": true,\n    \"noEmit\": false,                            // 不生成输出文件\n    \"removeComments\": true,                     // 删除编译后的所有的注释\n    \"importHelpers\": true,                      // 从 tslib 导入辅助工具函数\n    \"strictNullChecks\": true,                   // 启用严格的 null 检查\n    \"lib\": [\"es2017\"],                          // 指定要包含在编译中的库文件\n    \"typeRoots\": [\"node_modules/@types\"],\n    \"types\": [\n      \"node\",\n    ],\n    \"outDir\": \"./dist\",                        // 编译后文件产出目录\n    \"rootDir\": \"./src\"                          // 你的ts文件目录\n  },\n  \"include\": [                                 // 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题\n    \"./src/*.ts\",\n    \"./src/**/*.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\",\n    \"**/*.test.ts\",\n    \"public\"\n  ]\n}\n```\n\n快速生成`package.json`\n> npm init -y\n\n\n运行命令， 开始监听\n> tsc -w\n\n\n是否有效呢？ 让我们来试一下\n\n\n进入src目录新建一个 `hello.ts`，记得是`.ts`， 不要写习惯了打成`.js`😅\n\n随便写点东西， 比如定义一个字符串类型:\n```TypeScript\nvar a:string = \"hello world\"\n```\n\n如果你配置没有问题的话， 我们就会看到他监听文件修改并编译\n\n这是ts文件与 编译后的js文件\n\n![编译前后](http://img.nixiaolei.com/2019-03-18-22-50-51.png)\n\n\n并且在他运行过程中， 我们可以按`F5`进行调试\n\n\n\n\n\n\n## 基本数据类型\n* Boolean\n* Number\n* String\n* Array\n* Enum\n* Any\n* Void\n\n\n简单的几种数据的定义\n```TypeScript\n// 定义一个Boolean\nvar a:boolean = true\n// 定义一个Number\nvar a:number = 13\n// 定义一个 String \nvar a:string = \"13\"\n```\n\n基本的数据结构定义\n```TypeScript\nvar list:number[] = [1,2,3]\n\n\n```\n\n\n## 接口\n> interfaces\n\n### 基础接口\n\n没有接口时我们如何规范参数类型\n```JavaScript\nfunction fn(dog:{name:string}) {\n  console.log(dog.name)\n}\nvar myObj = { name: \"Hello\" }\nfn(myObj)\n```\n\n有了接口， 我们就可以把参数规定与函数分离\n\n如何创建接口\n\n通过 `interface` 关键字来声明\n\n```JavaScript\ninterface dogValue {\n  name:string;\n}\n\n// 指定参数`dog`是接口类型\nfunction fn(dog: dogValue) {\n  console.log(dog.name)\n}\n\nvar myObj = { name: \"Hello\" }\nfn(myObj)  // 编译通过\n```\n\n### 接口的可选属性\n接口定义的参数不一定每一个都会被用到\n\n\n\n## 泛型\n\n什么是泛型?\n\n泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型\n\n一句话理解就是：  参数化类型（把类型当作是参数一样传递）\n\n使用泛型的好处:\n* 代码更加简洁【不用强制转换】\n* 程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】\n* 可读性和稳定性【在编写集合的时候，就限定了类型】\n\n\n指定一个最简单的泛型\n```TypeScript\nfunction Hello<T>(arg:T):T {\n  return arg;\n}\n```\n\n\n\n\n## Module 模块\n\nModule 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module\n\nModule 的好处\n1. 模块化\n2. 可重用\n3. 封装变量和函数\n\n\n\n来看看在ES6之前是如何书写的\n```JavaScript\n(function() {\n  // do somtiong\n}());\n```\n\n\n让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦\n\n使用Module之前\n```TypeScript\ninterface StringValidator {\n  // 接口定义的方法\n  isAcceptable(s:string):boolean;\n}\nvar lettersRegexp = /^[A-Za-z]+$]/;\nvar numberRegexp = /^[0-9]+$/;\n// 实现接口的方法\nclass LettersOnlyValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return lettersRegexp.test(s)\n  }\n} \nclass ZipCodeValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return s.length === 5 && numberRegexp.test(s)\n  }\n}\n```\n\n使用了Module 的书写方式后\n\n```TypeScript\nmodule Validation {\n  // 需要使用 export 来表示对外暴露\n  export interface StringValidator {\n    isAcceptable(s:string): boolean;\n  }\n\n  var lettersRegexp = /^[A-Za-z]+$]/;\n  var numberRegexp = /^[0-9]+$/;\n\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s:string) {\n      return lettersRegexp.test(s)\n    }\n  }\n  export class ZipCodeValidator implements StringValidator {\n    isAcceptable(s:string):boolean {\n      return s.length === 5 && numberRegexp.test(s)\n    }\n  }\n}\n```\n\n\nModule 与 类相结合使用\n```TypeScript\nmodule Person {\n  export class Student {\n    name: string;\n    constructor(name:string) {\n      this.name = name;\n    }\n    study() {\n      console.log(this.name + '在学习')\n    }\n    speak() {\n      console.log(this.name + '在说话')\n    }\n  }\n}\n\n// ----------- 使用时 -------------\n\nconst xiaoming = new Person.Student('小明')\nxiaoming.study()\n\n```\n\n\n\n## Namespaces\n\nNamespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module \n\n查看一下官方的示例\n\n```TypeScript\nnamespace Shapes {\n    export namespace Polygons {\n        export class Triangle { }\n        export class Square { }\n    }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square(); // Same as 'new Shapes.Polygons.Square()'\n```\n\n\n## 装饰器 < Decorators >\n\n如何定义一个装饰器\n\n其实装饰器就是一个普通的函数， 他接收一个参数`target` ，这个参数就是被装饰对象， 看下面的例子， `sealed` 装饰了`Dog`类， 并且在`sealed` 中打印了 `target` ， 让我们看看 `target`到底是什么？\n```TypeScript\nfunction sealed(target:any) {\n  // do something with 'target' ...\n  console.log(target)\n  return target\n}\n\n\n// 被装饰的对象 foo\n@sealed\nclass Dog {\n\n}\n```\n\n打印结果\n![使用装饰器](http://img.nixiaolei.com/2019-03-22-22-06-26.png)\n\n我们可以看到， 得到的正是 `Dog`这个类\n\n\n\n### 装饰器工厂< Decorator Factories >\n\n> 如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。\n\n\n装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果\n\n\n如何定义一个`装饰器工厂`\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any)  {\n    console.log(value)\n    console.log(target)    \n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  \n}\n```\n\n让我们来看看运行的结果\n\n![定义装饰器工厂](http://img.nixiaolei.com/2019-03-22-22-22-55.png)\n\n可以看到，我们传入的`test`字符串和 `Cat`类都被打印出来了，\n\n### 多装饰器的执行顺序\n使用多个装饰器时如何书写呢?\n\n当我们使用多个装饰器时有两种写法\n\n1. 写成一行\n```TypeScript\n@f @g x\n```\n2. 垂直书写\n```TypeScript\n@f\n@g\nx\n```\n**多个装饰器的执行顺序是如何的呢？**\n\n套用官网的说明\n1. 对每个装饰器的表达式进行自上而下的计算。\n2. 然后将结果作为自下而上的函数调用。\n\n\n其实真实的运行原理是\n```TypeScript\nf(g(x))\n```\n\n### 访问器修饰器\n\n访问器修饰器的接收的参数和方法修饰器接收的参数一样\n\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    this._x = x\n    this._y = y\n  }\n  // 访问器修饰器\n  @dec(true)\n  get  x() { return this._x }\n  @dec(false)\n  get  y() { return this._y }\n}\n```\n\n\n### 属性修饰器\n\n属性修饰器只有前两个参数\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    // 属性修饰器\n    @dec(false)\n    this._x = x\n    this._y = y\n  }\n}\n```\n\n### 参数修饰器\n参数修饰器也是三个参数， 但不同的是第三个参数接收\n\n**参数装饰器只能确认一个方法的参数是否被传入**\n\n\n前两个和其他的修饰器都相同， \n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. 参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数\n\n\n\n```TypeScript\nfunction require(value:boolean) {\n  return function (target:any, propertyKey: string, index: number)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  run(@require(true) name:string) {\n  }\n}\n```\n\n\n### 装饰器参数\n\n1. 类装饰器\n\n类装饰器的参数只接收一个， 那就是`target` 也就是这个类本身\n\n就和上面演示的那些例子一样\n\n\n2. 方法装饰器\n\n一般会传入三个参数\n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. descriptor 成员属性的描述符\n\n\n我们来验证下方法装饰器的参数\n\n让我们看看这段例子会输出什么\n```TypeScript\nfunction f(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n    console.log(arguments)\n    console.log(target)    \n  }\n}\n\nclass Tiger {\n  @f('tiger run')\n  run() {\n  }\n}\n```\n输入结果: \n\n![方法装饰器参数](http://img.nixiaolei.com/2019-03-23-11-35-28.png)\n\n\n在控制台输出， 我们看到了， \n第一个参数是 `tiger` 的实例对象（因为`run`是实例成员）\n\n第二个参数是成员名称， 也就是被装饰的`run`\n\n第三个参数是 `run` 的属性描述符\n\n\n## Mixins 混入\n除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。\n\n\nMixins 其实可以拆分为两个单词\n\nMix : 混合\n\nins : 是进入\n\n所以合在一起就是叫 `混入` 的意思的单词\n\n它想要表达的是一个对象中混入另一个对象的方法\n\n\n**让我们来实现一下Mixins**\n\n代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。\n\n```TypeScript\n// Disposable Mixin\nclass Disposable {\n    isDisposed: boolean;\n    dispose() {\n        this.isDisposed = true;\n    }\n\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive: boolean;\n    activate() {\n        this.isActive = true;\n    }\n    deactivate() {\n        this.isActive = false;\n    }\n}\n```\n创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：\n```TypeScript\n\nclass SmartObject implements Disposable, Activatable { }\n```\n这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。\n\n我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。\n\n也就是这样\n\n```TypeScript\nclass SmartObject implements Disposable, Activatable {\n  constructor() {\n      setInterval(() => console.log(this.isActive + \" : \" + this.isDisposed), 500);\n  }\n\n  interact() {\n      this.activate();\n  }\n\n  // Disposable\n  isDisposed: boolean = false;\n  dispose: () => void;\n  // Activatable\n  isActive: boolean = false;\n  activate: () => void;\n  deactivate: () => void;\n}\n```\n\n最后，把mixins混入定义的类，完成全部实现部分。\n```TypeScript\napplyMixins(SmartObject, [Disposable, Activatable]);\n```\n\n我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\n```TypeScript\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n          derivedCtor.prototype[name] = baseCtor.prototype[name];\n      })\n  });\n}\n```\n\n\n\n\n\n\n\n## 参考文献\n* https://segmentfault.com/a/1190000016305647\n\n\n-------------------------待完善——----------------------\n\n\n\n\n\n\n\n","source":"_posts/TypeScript手册.md","raw":"---\ntitle: TypeScript手册\ndate: 2019-03-18 22:41:51\ncategories: TypeScript\ntags: [ JavaScript, TypeScript ]\n---\n\n\n\nTypeScript是JavaScript的超集\n\n## 开发环境搭建\n> 我的环境: window10 + vscode\n\n全局安装Ts\n> npm i -g typescript\n\n生成并配置`tsconfig.json`\n> tsc --init\n\n\n配置文件， 下面的配置中`ts`应存放在`src` 目录下， 并且会自动编译到dist文件夹下\n```JavaScript\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",                         // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'\n    \"module\": \"commonjs\",                       // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'\n    \"moduleResolution\": \"node\",                 // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)\n    \"emitDecoratorMetadata\": true,              // 为装饰器提供元数据的支持\n    \"experimentalDecorators\": true,             // 启用装饰器\n    \"allowSyntheticDefaultImports\": true,       // 允许从没有设置默认导出的模块中默认导入。\n    \"strict\": true,                             // 启用所有严格类型检查选项\n    \"noImplicitAny\": true,                      // 在表达式和声明上有隐含的 any类型时报错\n    \"alwaysStrict\": true,                       // 以严格模式检查没个模块，并在没个文件里加入 'use strict'\n    \"sourceMap\": true,\n    \"noEmit\": false,                            // 不生成输出文件\n    \"removeComments\": true,                     // 删除编译后的所有的注释\n    \"importHelpers\": true,                      // 从 tslib 导入辅助工具函数\n    \"strictNullChecks\": true,                   // 启用严格的 null 检查\n    \"lib\": [\"es2017\"],                          // 指定要包含在编译中的库文件\n    \"typeRoots\": [\"node_modules/@types\"],\n    \"types\": [\n      \"node\",\n    ],\n    \"outDir\": \"./dist\",                        // 编译后文件产出目录\n    \"rootDir\": \"./src\"                          // 你的ts文件目录\n  },\n  \"include\": [                                 // 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题\n    \"./src/*.ts\",\n    \"./src/**/*.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\",\n    \"**/*.test.ts\",\n    \"public\"\n  ]\n}\n```\n\n快速生成`package.json`\n> npm init -y\n\n\n运行命令， 开始监听\n> tsc -w\n\n\n是否有效呢？ 让我们来试一下\n\n\n进入src目录新建一个 `hello.ts`，记得是`.ts`， 不要写习惯了打成`.js`😅\n\n随便写点东西， 比如定义一个字符串类型:\n```TypeScript\nvar a:string = \"hello world\"\n```\n\n如果你配置没有问题的话， 我们就会看到他监听文件修改并编译\n\n这是ts文件与 编译后的js文件\n\n![编译前后](http://img.nixiaolei.com/2019-03-18-22-50-51.png)\n\n\n并且在他运行过程中， 我们可以按`F5`进行调试\n\n\n\n\n\n\n## 基本数据类型\n* Boolean\n* Number\n* String\n* Array\n* Enum\n* Any\n* Void\n\n\n简单的几种数据的定义\n```TypeScript\n// 定义一个Boolean\nvar a:boolean = true\n// 定义一个Number\nvar a:number = 13\n// 定义一个 String \nvar a:string = \"13\"\n```\n\n基本的数据结构定义\n```TypeScript\nvar list:number[] = [1,2,3]\n\n\n```\n\n\n## 接口\n> interfaces\n\n### 基础接口\n\n没有接口时我们如何规范参数类型\n```JavaScript\nfunction fn(dog:{name:string}) {\n  console.log(dog.name)\n}\nvar myObj = { name: \"Hello\" }\nfn(myObj)\n```\n\n有了接口， 我们就可以把参数规定与函数分离\n\n如何创建接口\n\n通过 `interface` 关键字来声明\n\n```JavaScript\ninterface dogValue {\n  name:string;\n}\n\n// 指定参数`dog`是接口类型\nfunction fn(dog: dogValue) {\n  console.log(dog.name)\n}\n\nvar myObj = { name: \"Hello\" }\nfn(myObj)  // 编译通过\n```\n\n### 接口的可选属性\n接口定义的参数不一定每一个都会被用到\n\n\n\n## 泛型\n\n什么是泛型?\n\n泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型\n\n一句话理解就是：  参数化类型（把类型当作是参数一样传递）\n\n使用泛型的好处:\n* 代码更加简洁【不用强制转换】\n* 程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】\n* 可读性和稳定性【在编写集合的时候，就限定了类型】\n\n\n指定一个最简单的泛型\n```TypeScript\nfunction Hello<T>(arg:T):T {\n  return arg;\n}\n```\n\n\n\n\n## Module 模块\n\nModule 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module\n\nModule 的好处\n1. 模块化\n2. 可重用\n3. 封装变量和函数\n\n\n\n来看看在ES6之前是如何书写的\n```JavaScript\n(function() {\n  // do somtiong\n}());\n```\n\n\n让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦\n\n使用Module之前\n```TypeScript\ninterface StringValidator {\n  // 接口定义的方法\n  isAcceptable(s:string):boolean;\n}\nvar lettersRegexp = /^[A-Za-z]+$]/;\nvar numberRegexp = /^[0-9]+$/;\n// 实现接口的方法\nclass LettersOnlyValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return lettersRegexp.test(s)\n  }\n} \nclass ZipCodeValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return s.length === 5 && numberRegexp.test(s)\n  }\n}\n```\n\n使用了Module 的书写方式后\n\n```TypeScript\nmodule Validation {\n  // 需要使用 export 来表示对外暴露\n  export interface StringValidator {\n    isAcceptable(s:string): boolean;\n  }\n\n  var lettersRegexp = /^[A-Za-z]+$]/;\n  var numberRegexp = /^[0-9]+$/;\n\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s:string) {\n      return lettersRegexp.test(s)\n    }\n  }\n  export class ZipCodeValidator implements StringValidator {\n    isAcceptable(s:string):boolean {\n      return s.length === 5 && numberRegexp.test(s)\n    }\n  }\n}\n```\n\n\nModule 与 类相结合使用\n```TypeScript\nmodule Person {\n  export class Student {\n    name: string;\n    constructor(name:string) {\n      this.name = name;\n    }\n    study() {\n      console.log(this.name + '在学习')\n    }\n    speak() {\n      console.log(this.name + '在说话')\n    }\n  }\n}\n\n// ----------- 使用时 -------------\n\nconst xiaoming = new Person.Student('小明')\nxiaoming.study()\n\n```\n\n\n\n## Namespaces\n\nNamespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module \n\n查看一下官方的示例\n\n```TypeScript\nnamespace Shapes {\n    export namespace Polygons {\n        export class Triangle { }\n        export class Square { }\n    }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square(); // Same as 'new Shapes.Polygons.Square()'\n```\n\n\n## 装饰器 < Decorators >\n\n如何定义一个装饰器\n\n其实装饰器就是一个普通的函数， 他接收一个参数`target` ，这个参数就是被装饰对象， 看下面的例子， `sealed` 装饰了`Dog`类， 并且在`sealed` 中打印了 `target` ， 让我们看看 `target`到底是什么？\n```TypeScript\nfunction sealed(target:any) {\n  // do something with 'target' ...\n  console.log(target)\n  return target\n}\n\n\n// 被装饰的对象 foo\n@sealed\nclass Dog {\n\n}\n```\n\n打印结果\n![使用装饰器](http://img.nixiaolei.com/2019-03-22-22-06-26.png)\n\n我们可以看到， 得到的正是 `Dog`这个类\n\n\n\n### 装饰器工厂< Decorator Factories >\n\n> 如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。\n\n\n装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果\n\n\n如何定义一个`装饰器工厂`\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any)  {\n    console.log(value)\n    console.log(target)    \n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  \n}\n```\n\n让我们来看看运行的结果\n\n![定义装饰器工厂](http://img.nixiaolei.com/2019-03-22-22-22-55.png)\n\n可以看到，我们传入的`test`字符串和 `Cat`类都被打印出来了，\n\n### 多装饰器的执行顺序\n使用多个装饰器时如何书写呢?\n\n当我们使用多个装饰器时有两种写法\n\n1. 写成一行\n```TypeScript\n@f @g x\n```\n2. 垂直书写\n```TypeScript\n@f\n@g\nx\n```\n**多个装饰器的执行顺序是如何的呢？**\n\n套用官网的说明\n1. 对每个装饰器的表达式进行自上而下的计算。\n2. 然后将结果作为自下而上的函数调用。\n\n\n其实真实的运行原理是\n```TypeScript\nf(g(x))\n```\n\n### 访问器修饰器\n\n访问器修饰器的接收的参数和方法修饰器接收的参数一样\n\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    this._x = x\n    this._y = y\n  }\n  // 访问器修饰器\n  @dec(true)\n  get  x() { return this._x }\n  @dec(false)\n  get  y() { return this._y }\n}\n```\n\n\n### 属性修饰器\n\n属性修饰器只有前两个参数\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    // 属性修饰器\n    @dec(false)\n    this._x = x\n    this._y = y\n  }\n}\n```\n\n### 参数修饰器\n参数修饰器也是三个参数， 但不同的是第三个参数接收\n\n**参数装饰器只能确认一个方法的参数是否被传入**\n\n\n前两个和其他的修饰器都相同， \n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. 参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数\n\n\n\n```TypeScript\nfunction require(value:boolean) {\n  return function (target:any, propertyKey: string, index: number)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  run(@require(true) name:string) {\n  }\n}\n```\n\n\n### 装饰器参数\n\n1. 类装饰器\n\n类装饰器的参数只接收一个， 那就是`target` 也就是这个类本身\n\n就和上面演示的那些例子一样\n\n\n2. 方法装饰器\n\n一般会传入三个参数\n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. descriptor 成员属性的描述符\n\n\n我们来验证下方法装饰器的参数\n\n让我们看看这段例子会输出什么\n```TypeScript\nfunction f(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n    console.log(arguments)\n    console.log(target)    \n  }\n}\n\nclass Tiger {\n  @f('tiger run')\n  run() {\n  }\n}\n```\n输入结果: \n\n![方法装饰器参数](http://img.nixiaolei.com/2019-03-23-11-35-28.png)\n\n\n在控制台输出， 我们看到了， \n第一个参数是 `tiger` 的实例对象（因为`run`是实例成员）\n\n第二个参数是成员名称， 也就是被装饰的`run`\n\n第三个参数是 `run` 的属性描述符\n\n\n## Mixins 混入\n除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。\n\n\nMixins 其实可以拆分为两个单词\n\nMix : 混合\n\nins : 是进入\n\n所以合在一起就是叫 `混入` 的意思的单词\n\n它想要表达的是一个对象中混入另一个对象的方法\n\n\n**让我们来实现一下Mixins**\n\n代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。\n\n```TypeScript\n// Disposable Mixin\nclass Disposable {\n    isDisposed: boolean;\n    dispose() {\n        this.isDisposed = true;\n    }\n\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive: boolean;\n    activate() {\n        this.isActive = true;\n    }\n    deactivate() {\n        this.isActive = false;\n    }\n}\n```\n创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：\n```TypeScript\n\nclass SmartObject implements Disposable, Activatable { }\n```\n这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。\n\n我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。\n\n也就是这样\n\n```TypeScript\nclass SmartObject implements Disposable, Activatable {\n  constructor() {\n      setInterval(() => console.log(this.isActive + \" : \" + this.isDisposed), 500);\n  }\n\n  interact() {\n      this.activate();\n  }\n\n  // Disposable\n  isDisposed: boolean = false;\n  dispose: () => void;\n  // Activatable\n  isActive: boolean = false;\n  activate: () => void;\n  deactivate: () => void;\n}\n```\n\n最后，把mixins混入定义的类，完成全部实现部分。\n```TypeScript\napplyMixins(SmartObject, [Disposable, Activatable]);\n```\n\n我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\n```TypeScript\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n          derivedCtor.prototype[name] = baseCtor.prototype[name];\n      })\n  });\n}\n```\n\n\n\n\n\n\n\n## 参考文献\n* https://segmentfault.com/a/1190000016305647\n\n\n-------------------------待完善——----------------------\n\n\n\n\n\n\n\n","slug":"TypeScript手册","published":1,"updated":"2019-03-23T07:01:17.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3e20002u40uwtbm6pxro","content":"<p>TypeScript是JavaScript的超集</p>\n<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><blockquote>\n<p>我的环境: window10 + vscode</p>\n</blockquote>\n<p>全局安装Ts</p>\n<blockquote>\n<p>npm i -g typescript</p>\n</blockquote>\n<p>生成并配置<code>tsconfig.json</code></p>\n<blockquote>\n<p>tsc –init</p>\n</blockquote>\n<p>配置文件， 下面的配置中<code>ts</code>应存放在<code>src</code> 目录下， 并且会自动编译到dist文件夹下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es2017\"</span>,                         <span class=\"comment\">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span></span><br><span class=\"line\">    <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,                       <span class=\"comment\">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span></span><br><span class=\"line\">    <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,                 <span class=\"comment\">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span></span><br><span class=\"line\">    <span class=\"string\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>,              <span class=\"comment\">// 为装饰器提供元数据的支持</span></span><br><span class=\"line\">    <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,             <span class=\"comment\">// 启用装饰器</span></span><br><span class=\"line\">    <span class=\"string\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,       <span class=\"comment\">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class=\"line\">    <span class=\"string\">\"strict\"</span>: <span class=\"literal\">true</span>,                             <span class=\"comment\">// 启用所有严格类型检查选项</span></span><br><span class=\"line\">    <span class=\"string\">\"noImplicitAny\"</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class=\"line\">    <span class=\"string\">\"alwaysStrict\"</span>: <span class=\"literal\">true</span>,                       <span class=\"comment\">// 以严格模式检查没个模块，并在没个文件里加入 'use strict'</span></span><br><span class=\"line\">    <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"noEmit\"</span>: <span class=\"literal\">false</span>,                            <span class=\"comment\">// 不生成输出文件</span></span><br><span class=\"line\">    <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,                     <span class=\"comment\">// 删除编译后的所有的注释</span></span><br><span class=\"line\">    <span class=\"string\">\"importHelpers\"</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// 从 tslib 导入辅助工具函数</span></span><br><span class=\"line\">    <span class=\"string\">\"strictNullChecks\"</span>: <span class=\"literal\">true</span>,                   <span class=\"comment\">// 启用严格的 null 检查</span></span><br><span class=\"line\">    <span class=\"string\">\"lib\"</span>: [<span class=\"string\">\"es2017\"</span>],                          <span class=\"comment\">// 指定要包含在编译中的库文件</span></span><br><span class=\"line\">    <span class=\"string\">\"typeRoots\"</span>: [<span class=\"string\">\"node_modules/@types\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"types\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"outDir\"</span>: <span class=\"string\">\"./dist\"</span>,                        <span class=\"comment\">// 编译后文件产出目录</span></span><br><span class=\"line\">    <span class=\"string\">\"rootDir\"</span>: <span class=\"string\">\"./src\"</span>                          <span class=\"comment\">// 你的ts文件目录</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"include\"</span>: [                                 <span class=\"comment\">// 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题</span></span><br><span class=\"line\">    <span class=\"string\">\"./src/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"./src/**/*.ts\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"exclude\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"node_modules\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dist\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"**/*.test.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"public\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>快速生成<code>package.json</code></p>\n<blockquote>\n<p>npm init -y</p>\n</blockquote>\n<p>运行命令， 开始监听</p>\n<blockquote>\n<p>tsc -w</p>\n</blockquote>\n<p>是否有效呢？ 让我们来试一下</p>\n<p>进入src目录新建一个 <code>hello.ts</code>，记得是<code>.ts</code>， 不要写习惯了打成<code>.js</code>😅</p>\n<p>随便写点东西， 比如定义一个字符串类型:<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">string</span> = <span class=\"string\">\"hello world\"</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你配置没有问题的话， 我们就会看到他监听文件修改并编译</p>\n<p>这是ts文件与 编译后的js文件</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-18-22-50-51.png\" alt=\"编译前后\"></p>\n<p>并且在他运行过程中， 我们可以按<code>F5</code>进行调试</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Array</li>\n<li>Enum</li>\n<li>Any</li>\n<li>Void</li>\n</ul>\n<p>简单的几种数据的定义<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个Boolean</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个Number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">number</span> = <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 String </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">string</span> = <span class=\"string\">\"13\"</span></span><br></pre></td></tr></table></figure></p>\n<p>基本的数据结构定义<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><blockquote>\n<p>interfaces</p>\n</blockquote>\n<h3 id=\"基础接口\"><a href=\"#基础接口\" class=\"headerlink\" title=\"基础接口\"></a>基础接口</h3><p>没有接口时我们如何规范参数类型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">dog:&#123;name:string&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dog.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Hello\"</span> &#125;</span><br><span class=\"line\">fn(myObj)</span><br></pre></td></tr></table></figure></p>\n<p>有了接口， 我们就可以把参数规定与函数分离</p>\n<p>如何创建接口</p>\n<p>通过 <code>interface</code> 关键字来声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface dogValue &#123;</span><br><span class=\"line\">  name:string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定参数`dog`是接口类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">dog: dogValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dog.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Hello\"</span> &#125;</span><br><span class=\"line\">fn(myObj)  <span class=\"comment\">// 编译通过</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"接口的可选属性\"><a href=\"#接口的可选属性\" class=\"headerlink\" title=\"接口的可选属性\"></a>接口的可选属性</h3><p>接口定义的参数不一定每一个都会被用到</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>什么是泛型?</p>\n<p>泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型</p>\n<p>一句话理解就是：  参数化类型（把类型当作是参数一样传递）</p>\n<p>使用泛型的好处:</p>\n<ul>\n<li>代码更加简洁【不用强制转换】</li>\n<li>程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】</li>\n<li>可读性和稳定性【在编写集合的时候，就限定了类型】</li>\n</ul>\n<p>指定一个最简单的泛型<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Module-模块\"><a href=\"#Module-模块\" class=\"headerlink\" title=\"Module 模块\"></a>Module 模块</h2><p>Module 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module</p>\n<p>Module 的好处</p>\n<ol>\n<li>模块化</li>\n<li>可重用</li>\n<li>封装变量和函数</li>\n</ol>\n<p>来看看在ES6之前是如何书写的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do somtiong</span></span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦</p>\n<p>使用Module之前<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> StringValidator &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 接口定义的方法</span></span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lettersRegexp = <span class=\"regexp\">/^[A-Za-z]+$]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实现接口的方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> LettersOnlyValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lettersRegexp.test(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">class</span> ZipCodeValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用了Module 的书写方式后</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> Validation &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要使用 export 来表示对外暴露</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> lettersRegexp = <span class=\"regexp\">/^[A-Za-z]+$]/</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> LettersOnlyValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> lettersRegexp.test(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ZipCodeValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Module 与 类相结合使用<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Student &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    study() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'在学习'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    speak() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'在说话'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ----------- 使用时 -------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> xiaoming = <span class=\"keyword\">new</span> Person.Student(<span class=\"string\">'小明'</span>)</span><br><span class=\"line\">xiaoming.study()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Namespaces\"><a href=\"#Namespaces\" class=\"headerlink\" title=\"Namespaces\"></a>Namespaces</h2><p>Namespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module </p>\n<p>查看一下官方的示例</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> Shapes &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> Polygons &#123;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Triangle &#123; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Square &#123; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> polygons = Shapes.Polygons;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sq = <span class=\"keyword\">new</span> polygons.Square(); <span class=\"comment\">// Same as 'new Shapes.Polygons.Square()'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"装饰器-lt-Decorators-gt\"><a href=\"#装饰器-lt-Decorators-gt\" class=\"headerlink\" title=\"装饰器 &lt; Decorators &gt;\"></a>装饰器 &lt; Decorators &gt;</h2><p>如何定义一个装饰器</p>\n<p>其实装饰器就是一个普通的函数， 他接收一个参数<code>target</code> ，这个参数就是被装饰对象， 看下面的例子， <code>sealed</code> 装饰了<code>Dog</code>类， 并且在<code>sealed</code> 中打印了 <code>target</code> ， 让我们看看 <code>target</code>到底是什么？<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sealed</span>(<span class=\"params\">target:<span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with 'target' ...</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(target)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被装饰的对象 foo</span></span><br><span class=\"line\"><span class=\"meta\">@sealed</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>打印结果<br><img src=\"http://img.nixiaolei.com/2019-03-22-22-06-26.png\" alt=\"使用装饰器\"></p>\n<p>我们可以看到， 得到的正是 <code>Dog</code>这个类</p>\n<h3 id=\"装饰器工厂-lt-Decorator-Factories-gt\"><a href=\"#装饰器工厂-lt-Decorator-Factories-gt\" class=\"headerlink\" title=\"装饰器工厂&lt; Decorator Factories &gt;\"></a>装饰器工厂&lt; Decorator Factories &gt;</h3><blockquote>\n<p>如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。</p>\n</blockquote>\n<p>装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果</p>\n<p>如何定义一个<code>装饰器工厂</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span></span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target)    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让我们来看看运行的结果</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-22-22-22-55.png\" alt=\"定义装饰器工厂\"></p>\n<p>可以看到，我们传入的<code>test</code>字符串和 <code>Cat</code>类都被打印出来了，</p>\n<h3 id=\"多装饰器的执行顺序\"><a href=\"#多装饰器的执行顺序\" class=\"headerlink\" title=\"多装饰器的执行顺序\"></a>多装饰器的执行顺序</h3><p>使用多个装饰器时如何书写呢?</p>\n<p>当我们使用多个装饰器时有两种写法</p>\n<ol>\n<li><p>写成一行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@f</span> <span class=\"meta\">@g</span> x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>垂直书写</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@f</span></span><br><span class=\"line\"><span class=\"meta\">@g</span></span><br><span class=\"line\">x</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>多个装饰器的执行顺序是如何的呢？</strong></p>\n<p>套用官网的说明</p>\n<ol>\n<li>对每个装饰器的表达式进行自上而下的计算。</li>\n<li>然后将结果作为自下而上的函数调用。</li>\n</ol>\n<p>其实真实的运行原理是<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(g(x))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"访问器修饰器\"><a href=\"#访问器修饰器\" class=\"headerlink\" title=\"访问器修饰器\"></a>访问器修饰器</h3><p>访问器修饰器的接收的参数和方法修饰器接收的参数一样</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 访问器修饰器</span></span><br><span class=\"line\">  <span class=\"meta\">@dec</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">get</span>  x() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._x &#125;</span><br><span class=\"line\">  <span class=\"meta\">@dec</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">get</span>  y() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._y &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性修饰器\"><a href=\"#属性修饰器\" class=\"headerlink\" title=\"属性修饰器\"></a>属性修饰器</h3><p>属性修饰器只有前两个参数<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span></span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性修饰器</span></span><br><span class=\"line\">    <span class=\"meta\">@dec</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参数修饰器\"><a href=\"#参数修饰器\" class=\"headerlink\" title=\"参数修饰器\"></a>参数修饰器</h3><p>参数修饰器也是三个参数， 但不同的是第三个参数接收</p>\n<p><strong>参数装饰器只能确认一个方法的参数是否被传入</strong></p>\n<p>前两个和其他的修饰器都相同， </p>\n<ol>\n<li>target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象</li>\n<li>propertyKey 成员的名称</li>\n<li>参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">value:<span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, index: <span class=\"built_in\">number</span></span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  run(<span class=\"meta\">@require</span>(<span class=\"literal\">true</span>) name:<span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器参数\"><a href=\"#装饰器参数\" class=\"headerlink\" title=\"装饰器参数\"></a>装饰器参数</h3><ol>\n<li>类装饰器</li>\n</ol>\n<p>类装饰器的参数只接收一个， 那就是<code>target</code> 也就是这个类本身</p>\n<p>就和上面演示的那些例子一样</p>\n<ol start=\"2\">\n<li>方法装饰器</li>\n</ol>\n<p>一般会传入三个参数</p>\n<ol>\n<li>target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象</li>\n<li>propertyKey 成员的名称</li>\n<li>descriptor 成员属性的描述符</li>\n</ol>\n<p>我们来验证下方法装饰器的参数</p>\n<p>让我们看看这段例子会输出什么<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target)    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Tiger &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">'tiger run'</span>)</span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输入结果: </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-23-11-35-28.png\" alt=\"方法装饰器参数\"></p>\n<p>在控制台输出， 我们看到了，<br>第一个参数是 <code>tiger</code> 的实例对象（因为<code>run</code>是实例成员）</p>\n<p>第二个参数是成员名称， 也就是被装饰的<code>run</code></p>\n<p>第三个参数是 <code>run</code> 的属性描述符</p>\n<h2 id=\"Mixins-混入\"><a href=\"#Mixins-混入\" class=\"headerlink\" title=\"Mixins 混入\"></a>Mixins 混入</h2><p>除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。</p>\n<p>Mixins 其实可以拆分为两个单词</p>\n<p>Mix : 混合</p>\n<p>ins : 是进入</p>\n<p>所以合在一起就是叫 <code>混入</code> 的意思的单词</p>\n<p>它想要表达的是一个对象中混入另一个对象的方法</p>\n<p><strong>让我们来实现一下Mixins</strong></p>\n<p>代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Disposable Mixin</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Disposable &#123;</span><br><span class=\"line\">    isDisposed: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    dispose() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isDisposed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Activatable Mixin</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Activatable &#123;</span><br><span class=\"line\">    isActive: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    activate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isActive = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deactivate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> SmartObject <span class=\"keyword\">implements</span> Disposable, Activatable &#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。</p>\n<p>我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。</p>\n<p>也就是这样</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> SmartObject <span class=\"keyword\">implements</span> Disposable, Activatable &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.isActive + <span class=\"string\">\" : \"</span> + <span class=\"keyword\">this</span>.isDisposed), <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  interact() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.activate();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Disposable</span></span><br><span class=\"line\">  isDisposed: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  dispose: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Activatable</span></span><br><span class=\"line\">  isActive: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  activate: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  deactivate: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，把mixins混入定义的类，完成全部实现部分。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyMixins(SmartObject, [Disposable, Activatable]);</span><br></pre></td></tr></table></figure></p>\n<p>我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMixins</span>(<span class=\"params\">derivedCtor: <span class=\"built_in\">any</span>, baseCtors: <span class=\"built_in\">any</span>[]</span>) </span>&#123;</span><br><span class=\"line\">  baseCtors.forEach(<span class=\"function\"><span class=\"params\">baseCtor</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">          derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000016305647\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016305647</a></li>\n</ul>\n<p>————————-待完善—————————-</p>\n","site":{"data":{}},"excerpt":"","more":"<p>TypeScript是JavaScript的超集</p>\n<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><blockquote>\n<p>我的环境: window10 + vscode</p>\n</blockquote>\n<p>全局安装Ts</p>\n<blockquote>\n<p>npm i -g typescript</p>\n</blockquote>\n<p>生成并配置<code>tsconfig.json</code></p>\n<blockquote>\n<p>tsc –init</p>\n</blockquote>\n<p>配置文件， 下面的配置中<code>ts</code>应存放在<code>src</code> 目录下， 并且会自动编译到dist文件夹下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es2017\"</span>,                         <span class=\"comment\">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span></span><br><span class=\"line\">    <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,                       <span class=\"comment\">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span></span><br><span class=\"line\">    <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,                 <span class=\"comment\">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span></span><br><span class=\"line\">    <span class=\"string\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>,              <span class=\"comment\">// 为装饰器提供元数据的支持</span></span><br><span class=\"line\">    <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,             <span class=\"comment\">// 启用装饰器</span></span><br><span class=\"line\">    <span class=\"string\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,       <span class=\"comment\">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class=\"line\">    <span class=\"string\">\"strict\"</span>: <span class=\"literal\">true</span>,                             <span class=\"comment\">// 启用所有严格类型检查选项</span></span><br><span class=\"line\">    <span class=\"string\">\"noImplicitAny\"</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class=\"line\">    <span class=\"string\">\"alwaysStrict\"</span>: <span class=\"literal\">true</span>,                       <span class=\"comment\">// 以严格模式检查没个模块，并在没个文件里加入 'use strict'</span></span><br><span class=\"line\">    <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"noEmit\"</span>: <span class=\"literal\">false</span>,                            <span class=\"comment\">// 不生成输出文件</span></span><br><span class=\"line\">    <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,                     <span class=\"comment\">// 删除编译后的所有的注释</span></span><br><span class=\"line\">    <span class=\"string\">\"importHelpers\"</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// 从 tslib 导入辅助工具函数</span></span><br><span class=\"line\">    <span class=\"string\">\"strictNullChecks\"</span>: <span class=\"literal\">true</span>,                   <span class=\"comment\">// 启用严格的 null 检查</span></span><br><span class=\"line\">    <span class=\"string\">\"lib\"</span>: [<span class=\"string\">\"es2017\"</span>],                          <span class=\"comment\">// 指定要包含在编译中的库文件</span></span><br><span class=\"line\">    <span class=\"string\">\"typeRoots\"</span>: [<span class=\"string\">\"node_modules/@types\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"types\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"outDir\"</span>: <span class=\"string\">\"./dist\"</span>,                        <span class=\"comment\">// 编译后文件产出目录</span></span><br><span class=\"line\">    <span class=\"string\">\"rootDir\"</span>: <span class=\"string\">\"./src\"</span>                          <span class=\"comment\">// 你的ts文件目录</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"include\"</span>: [                                 <span class=\"comment\">// 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题</span></span><br><span class=\"line\">    <span class=\"string\">\"./src/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"./src/**/*.ts\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"exclude\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"node_modules\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dist\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"**/*.test.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"public\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>快速生成<code>package.json</code></p>\n<blockquote>\n<p>npm init -y</p>\n</blockquote>\n<p>运行命令， 开始监听</p>\n<blockquote>\n<p>tsc -w</p>\n</blockquote>\n<p>是否有效呢？ 让我们来试一下</p>\n<p>进入src目录新建一个 <code>hello.ts</code>，记得是<code>.ts</code>， 不要写习惯了打成<code>.js</code>😅</p>\n<p>随便写点东西， 比如定义一个字符串类型:<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">string</span> = <span class=\"string\">\"hello world\"</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你配置没有问题的话， 我们就会看到他监听文件修改并编译</p>\n<p>这是ts文件与 编译后的js文件</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-18-22-50-51.png\" alt=\"编译前后\"></p>\n<p>并且在他运行过程中， 我们可以按<code>F5</code>进行调试</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Array</li>\n<li>Enum</li>\n<li>Any</li>\n<li>Void</li>\n</ul>\n<p>简单的几种数据的定义<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个Boolean</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个Number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">number</span> = <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 String </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">string</span> = <span class=\"string\">\"13\"</span></span><br></pre></td></tr></table></figure></p>\n<p>基本的数据结构定义<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><blockquote>\n<p>interfaces</p>\n</blockquote>\n<h3 id=\"基础接口\"><a href=\"#基础接口\" class=\"headerlink\" title=\"基础接口\"></a>基础接口</h3><p>没有接口时我们如何规范参数类型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">dog:&#123;name:string&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dog.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Hello\"</span> &#125;</span><br><span class=\"line\">fn(myObj)</span><br></pre></td></tr></table></figure></p>\n<p>有了接口， 我们就可以把参数规定与函数分离</p>\n<p>如何创建接口</p>\n<p>通过 <code>interface</code> 关键字来声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface dogValue &#123;</span><br><span class=\"line\">  name:string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定参数`dog`是接口类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">dog: dogValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dog.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Hello\"</span> &#125;</span><br><span class=\"line\">fn(myObj)  <span class=\"comment\">// 编译通过</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"接口的可选属性\"><a href=\"#接口的可选属性\" class=\"headerlink\" title=\"接口的可选属性\"></a>接口的可选属性</h3><p>接口定义的参数不一定每一个都会被用到</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>什么是泛型?</p>\n<p>泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型</p>\n<p>一句话理解就是：  参数化类型（把类型当作是参数一样传递）</p>\n<p>使用泛型的好处:</p>\n<ul>\n<li>代码更加简洁【不用强制转换】</li>\n<li>程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】</li>\n<li>可读性和稳定性【在编写集合的时候，就限定了类型】</li>\n</ul>\n<p>指定一个最简单的泛型<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Module-模块\"><a href=\"#Module-模块\" class=\"headerlink\" title=\"Module 模块\"></a>Module 模块</h2><p>Module 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module</p>\n<p>Module 的好处</p>\n<ol>\n<li>模块化</li>\n<li>可重用</li>\n<li>封装变量和函数</li>\n</ol>\n<p>来看看在ES6之前是如何书写的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do somtiong</span></span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦</p>\n<p>使用Module之前<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> StringValidator &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 接口定义的方法</span></span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lettersRegexp = <span class=\"regexp\">/^[A-Za-z]+$]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实现接口的方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> LettersOnlyValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lettersRegexp.test(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">class</span> ZipCodeValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用了Module 的书写方式后</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> Validation &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要使用 export 来表示对外暴露</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> lettersRegexp = <span class=\"regexp\">/^[A-Za-z]+$]/</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> LettersOnlyValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> lettersRegexp.test(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ZipCodeValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Module 与 类相结合使用<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Student &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    study() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'在学习'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    speak() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'在说话'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ----------- 使用时 -------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> xiaoming = <span class=\"keyword\">new</span> Person.Student(<span class=\"string\">'小明'</span>)</span><br><span class=\"line\">xiaoming.study()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Namespaces\"><a href=\"#Namespaces\" class=\"headerlink\" title=\"Namespaces\"></a>Namespaces</h2><p>Namespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module </p>\n<p>查看一下官方的示例</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> Shapes &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> Polygons &#123;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Triangle &#123; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Square &#123; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> polygons = Shapes.Polygons;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sq = <span class=\"keyword\">new</span> polygons.Square(); <span class=\"comment\">// Same as 'new Shapes.Polygons.Square()'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"装饰器-lt-Decorators-gt\"><a href=\"#装饰器-lt-Decorators-gt\" class=\"headerlink\" title=\"装饰器 &lt; Decorators &gt;\"></a>装饰器 &lt; Decorators &gt;</h2><p>如何定义一个装饰器</p>\n<p>其实装饰器就是一个普通的函数， 他接收一个参数<code>target</code> ，这个参数就是被装饰对象， 看下面的例子， <code>sealed</code> 装饰了<code>Dog</code>类， 并且在<code>sealed</code> 中打印了 <code>target</code> ， 让我们看看 <code>target</code>到底是什么？<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sealed</span>(<span class=\"params\">target:<span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with 'target' ...</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(target)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被装饰的对象 foo</span></span><br><span class=\"line\"><span class=\"meta\">@sealed</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>打印结果<br><img src=\"http://img.nixiaolei.com/2019-03-22-22-06-26.png\" alt=\"使用装饰器\"></p>\n<p>我们可以看到， 得到的正是 <code>Dog</code>这个类</p>\n<h3 id=\"装饰器工厂-lt-Decorator-Factories-gt\"><a href=\"#装饰器工厂-lt-Decorator-Factories-gt\" class=\"headerlink\" title=\"装饰器工厂&lt; Decorator Factories &gt;\"></a>装饰器工厂&lt; Decorator Factories &gt;</h3><blockquote>\n<p>如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。</p>\n</blockquote>\n<p>装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果</p>\n<p>如何定义一个<code>装饰器工厂</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span></span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target)    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让我们来看看运行的结果</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-22-22-22-55.png\" alt=\"定义装饰器工厂\"></p>\n<p>可以看到，我们传入的<code>test</code>字符串和 <code>Cat</code>类都被打印出来了，</p>\n<h3 id=\"多装饰器的执行顺序\"><a href=\"#多装饰器的执行顺序\" class=\"headerlink\" title=\"多装饰器的执行顺序\"></a>多装饰器的执行顺序</h3><p>使用多个装饰器时如何书写呢?</p>\n<p>当我们使用多个装饰器时有两种写法</p>\n<ol>\n<li><p>写成一行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@f</span> <span class=\"meta\">@g</span> x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>垂直书写</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@f</span></span><br><span class=\"line\"><span class=\"meta\">@g</span></span><br><span class=\"line\">x</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>多个装饰器的执行顺序是如何的呢？</strong></p>\n<p>套用官网的说明</p>\n<ol>\n<li>对每个装饰器的表达式进行自上而下的计算。</li>\n<li>然后将结果作为自下而上的函数调用。</li>\n</ol>\n<p>其实真实的运行原理是<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(g(x))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"访问器修饰器\"><a href=\"#访问器修饰器\" class=\"headerlink\" title=\"访问器修饰器\"></a>访问器修饰器</h3><p>访问器修饰器的接收的参数和方法修饰器接收的参数一样</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 访问器修饰器</span></span><br><span class=\"line\">  <span class=\"meta\">@dec</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">get</span>  x() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._x &#125;</span><br><span class=\"line\">  <span class=\"meta\">@dec</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">get</span>  y() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._y &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性修饰器\"><a href=\"#属性修饰器\" class=\"headerlink\" title=\"属性修饰器\"></a>属性修饰器</h3><p>属性修饰器只有前两个参数<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span></span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性修饰器</span></span><br><span class=\"line\">    <span class=\"meta\">@dec</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参数修饰器\"><a href=\"#参数修饰器\" class=\"headerlink\" title=\"参数修饰器\"></a>参数修饰器</h3><p>参数修饰器也是三个参数， 但不同的是第三个参数接收</p>\n<p><strong>参数装饰器只能确认一个方法的参数是否被传入</strong></p>\n<p>前两个和其他的修饰器都相同， </p>\n<ol>\n<li>target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象</li>\n<li>propertyKey 成员的名称</li>\n<li>参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">value:<span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, index: <span class=\"built_in\">number</span></span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  run(<span class=\"meta\">@require</span>(<span class=\"literal\">true</span>) name:<span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器参数\"><a href=\"#装饰器参数\" class=\"headerlink\" title=\"装饰器参数\"></a>装饰器参数</h3><ol>\n<li>类装饰器</li>\n</ol>\n<p>类装饰器的参数只接收一个， 那就是<code>target</code> 也就是这个类本身</p>\n<p>就和上面演示的那些例子一样</p>\n<ol start=\"2\">\n<li>方法装饰器</li>\n</ol>\n<p>一般会传入三个参数</p>\n<ol>\n<li>target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象</li>\n<li>propertyKey 成员的名称</li>\n<li>descriptor 成员属性的描述符</li>\n</ol>\n<p>我们来验证下方法装饰器的参数</p>\n<p>让我们看看这段例子会输出什么<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target)    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Tiger &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">'tiger run'</span>)</span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输入结果: </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-23-11-35-28.png\" alt=\"方法装饰器参数\"></p>\n<p>在控制台输出， 我们看到了，<br>第一个参数是 <code>tiger</code> 的实例对象（因为<code>run</code>是实例成员）</p>\n<p>第二个参数是成员名称， 也就是被装饰的<code>run</code></p>\n<p>第三个参数是 <code>run</code> 的属性描述符</p>\n<h2 id=\"Mixins-混入\"><a href=\"#Mixins-混入\" class=\"headerlink\" title=\"Mixins 混入\"></a>Mixins 混入</h2><p>除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。</p>\n<p>Mixins 其实可以拆分为两个单词</p>\n<p>Mix : 混合</p>\n<p>ins : 是进入</p>\n<p>所以合在一起就是叫 <code>混入</code> 的意思的单词</p>\n<p>它想要表达的是一个对象中混入另一个对象的方法</p>\n<p><strong>让我们来实现一下Mixins</strong></p>\n<p>代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Disposable Mixin</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Disposable &#123;</span><br><span class=\"line\">    isDisposed: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    dispose() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isDisposed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Activatable Mixin</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Activatable &#123;</span><br><span class=\"line\">    isActive: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    activate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isActive = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deactivate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> SmartObject <span class=\"keyword\">implements</span> Disposable, Activatable &#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。</p>\n<p>我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。</p>\n<p>也就是这样</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> SmartObject <span class=\"keyword\">implements</span> Disposable, Activatable &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.isActive + <span class=\"string\">\" : \"</span> + <span class=\"keyword\">this</span>.isDisposed), <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  interact() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.activate();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Disposable</span></span><br><span class=\"line\">  isDisposed: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  dispose: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Activatable</span></span><br><span class=\"line\">  isActive: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  activate: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  deactivate: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，把mixins混入定义的类，完成全部实现部分。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyMixins(SmartObject, [Disposable, Activatable]);</span><br></pre></td></tr></table></figure></p>\n<p>我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMixins</span>(<span class=\"params\">derivedCtor: <span class=\"built_in\">any</span>, baseCtors: <span class=\"built_in\">any</span>[]</span>) </span>&#123;</span><br><span class=\"line\">  baseCtors.forEach(<span class=\"function\"><span class=\"params\">baseCtor</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">          derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000016305647\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016305647</a></li>\n</ul>\n<p>————————-待完善—————————-</p>\n"},{"title":"使用Jenkins构建前端持续集成","date":"2019-03-16T04:34:36.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n1. 安装JDK\n\n直接使用yum 安装的是 `openjdk` , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装\n\n\n```\nyum install -y java\n```\n\n2. 安装jenkins\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n\n```\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\nyum install -y jenkins\n```\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n```\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n```\n\n3. 配置jenkis的端口\n\njenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口\n\n```\nvim /etc/sysconfig/jenkins\n```\n\n找到修改端口号：\n\n> JENKINS_PORT=\"8080\" \n\n4. 启动jenkins \n\n\n```\nservice jenkins start/stop/restart\n```\n* 安装成功后Jenkins将作为一个守护进程随系统启动\n* 系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改`/var/log/jenkins`, `/var/lib/jenkins`, 和`/var/cache/jenkins`的所有者\n* 启动的时候将从/etc/sysconfig/jenkins获取配置参数\n* 默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置\n* Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo\n\n\n## 配置阶段\n安装好`jenkins` 后 ， 我们就可以根据刚才所设置的端口号访问 `jenkins` 服务了 \n\n比如进入 `127.0.0.1:8081` 访问`jenkins`\n\n首先会看到让我们输入初始密码\n\n它提示我们进入 `/var/lib/jenkins/secrets/initialAdminPassword ` 查看\n\n![输入初始密码](http://img.nixiaolei.com/2019-03-09-16-16-27.png)\n\n\n\n输入密码无误后， 就是提示我们安装对应的插件了，\n\n左边是推荐安装， 右边是自定义安装，  这里我们建议点击 `推荐安装`\n\n![选择推荐安装](http://img.nixiaolei.com/2019-03-09-16-17-31.png)\n\n\n\n\n安装过程可能稍长\n\n![等待安装完毕 ](http://img.nixiaolei.com/jenkins03.png)\n\n\n这时我们创建一个 `Jenkins` 账户， \n一定要牢记你的输入账号和密码， 用作之后的登录\n\n![创建账户](http://img.nixiaolei.com/2019-03-09-16-29-08.png)\n\n\n\n创建账户之后， 会显示一个 `jenkins` 的资源根路径， 一般不需要修改， 保持默认即可\n\n\n![资源路径](http://img.nixiaolei.com/2019-03-09-16-32-04.png)\n\n\n\n\n之后就是愉快的`jenkins` 之旅啦\n\n![开始使用Jenkins](http://img.nixiaolei.com/2019-03-09-16-32-37.png)\n\n\n## 补善插件阶段\n我们要做的前端持续集成， 所以 `jenkins` 默认安装的插件 并不能完全的满足我们的需求\n\n进入`jenkins` 主页面后， 找到插件管理\n\n![插件管理](http://img.nixiaolei.com/2019-03-09-16-36-26.png)\n\n\n\n首先查看我们必要的插件是否安装好了\n* NodeJs Plugin\n* Publish Over SSH\n* GitHub\n\n如果发现没有安装的就安装， 查漏补缺\n\n\n\n## 变量及远程服务器基本配置\n\n插件安装好后, 进入`系统设置` 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好\n\n![系统设置](http://img.nixiaolei.com/2019-03-09-17-36-54.png)\n\n\n管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱\n\n![邮件地址](http://img.nixiaolei.com/2019-03-09-17-42-24.png)\n\n(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上\n\n![github](http://img.nixiaolei.com/2019-03-09-17-43-51.png)\n\n\n比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址\n\n点击新增添加你的服务器\n\n![添加你的服务器](http://img.nixiaolei.com/2019-03-09-17-48-05.png)\n\n\n\n点击新增后, 这里有几个关键的参数,  需要注意\n\n![参数注意](http://img.nixiaolei.com/2019-03-09-17-51-39.png)\n\n连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录\n\n![配置免密](http://img.nixiaolei.com/2019-03-09-17-54-49.png)\n\n\n> 填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，\n\n\n![编路径错误](http://img.nixiaolei.com/2019-03-10-10-43-33.png)\n\n\n\n\n因为`jenkins `的在运行时会自动的创建一个名为`jenkins`的用户， 而这个用户的权限不够，无法访问你的目录\n\n![编运行身份](http://img.nixiaolei.com/2019-03-10-10-46-12.png)\n\n\n\n解决方案有两个:\n1. 把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限\n2. 把`jenkins` 的运行身份修改为 `root`, 但是会有点安全性问题\n\n本次实践以学习为目的， 所以这里我选择了第二钟\n\n> 相关操作文章: https://blog.csdn.net/jeikerxiao/article/details/80768949\n\n\nssh 免密配置成功后， 我们就可以开始创建一个自己的任务了\n\n\n\n## 创建任务阶段\n\n回到主页， 找到`新建任务`\n\n\n![编新建任务](http://img.nixiaolei.com/2019-03-10-10-55-02.png)\n\n\n\n进入新建任务后， 有几种不同的项目， 我们这里选择 `自由风格`， 并且输入项目名称\n\n![编自由风格](http://img.nixiaolei.com/2019-03-10-10-59-00.png)\n\n创建好项目后就会自动进入 当前项目的配置文件中\n\n\n首先我们看到`General`, 这是一些全局的配置， 在这里我们可以写上该项目的描述\n\n![编全局配置](http://img.nixiaolei.com/2019-03-10-11-02-26.png)\n\n\n`General`的后面几个类目是构建项目阶段几个比较大的步骤和流程\n\n\n如果你要配置的“github”项目， 可以在`Git`这里打上勾\n\n并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在`\tCredentials` 处新增配置\n\n\n![编github项目](http://img.nixiaolei.com/2019-03-10-11-11-35.png)\n\n\n接下来是看看构建触发器， 这里的填写根据你的工程需要， \n\n可以配置定时任务 或 多任务构建\n\n> 本次演示我并没有用到\n\n![编触发器](http://img.nixiaolei.com/2019-03-10-13-26-16.png)\n\n\n\n现在来到我们的重点`构建` ， \n\n我们可以添加步骤，我们可以看到能够支持 `Node`、`shell` 、`批处理`等等方式\n\n这些添加的步骤会按顺序执行， \n\n![编构建](http://img.nixiaolei.com/2019-03-10-13-30-56.png)\n\n\n我们需要`shell` 脚本来运行npm 命令\n\n所以我创建了 `shell`的操作步骤\n\n![编shell脚本](http://img.nixiaolei.com/2019-03-10-13-35-35.png)\n\n\n\n基于此， `jenkins` 就会自动帮我们做好 测试与打包的步骤，\n\n在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个`send files or execute commands over SSH` 步骤， \n\n\n![编overSSH](http://img.nixiaolei.com/2019-03-16-13-05-58.png)\n\n\n建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去\n\n> deploy文件参考\n\n![编deploy文件参考](http://img.nixiaolei.com/2019-03-16-13-08-32.png)\n\n\n\n## 你可能遇到的问题\n\n### 命令无效或不存在\n> 这里拿npm举例，  其他命令如:node ,都是同理\n\n![编无法使用npm命令](http://img.nixiaolei.com/2019-03-16-12-54-06.png)\n\n\n因为全局的命令需要设置`软连接` Jenkins 才可以访问的到\n\n如何设置:\n\n先查看一下你的 npm 在哪\n> whereis npm\n\n![编查看npm位置](http://img.nixiaolei.com/2019-03-16-12-57-08.png)\n\n这个`/usr/local/bin/npm` 就是你的npm所在位置 ( 使用带 `local` 的地址)\n\n我们来创建 `软连接`, 这里使用刚刚获取到的npm \n\n> ln -s /usr/local/bin/npm   /usr/bin\n \n\n如果出现无法修改的情况， 那我们就将他强制更改 😄\n\n> ln -sf /usr/local/bin/npm   /usr/bin\n\n\n再去构建一次Jenkins 任务\n\n看到控制台输出， 现在npm 可以正常运行了\n\n![编npm运行成功](http://img.nixiaolei.com/2019-03-10-18-56-51.png)\n\n\n\n\n\n\n## 持续集成的必要条件\n1. 必须有github 、svn或私有git服务器\n2. 完整的项目\n  1. test\n  2. 接口测试\n  3. 其他的测试内容\n3. CI 平台\n4. 项目代码要提交到Github、 svn等服务器上\n5. 保证代码在开发机的正常\n  1. bug\n  2. 运行环境 ( 引用的包要写入packa)\n6. 保证jenkins 环境一切正常\n7. 发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)\n8. 必要的静态资源服务器\n9. 配置jenkins的自动化处理流程\n\n\n\n\n参考文章:\n> https://www.cnblogs.com/loveyouyou616/p/8714544.html\n\n","source":"_posts/使用Jenkins构建前端持续集成.md","raw":"---\ntitle: 使用Jenkins构建前端持续集成\ndate: 2019-03-16 12:34:36\ncategories: CI\ntags: [CI, Jenkins, Centos, 前端持续集成]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n1. 安装JDK\n\n直接使用yum 安装的是 `openjdk` , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装\n\n\n```\nyum install -y java\n```\n\n2. 安装jenkins\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n\n```\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\nyum install -y jenkins\n```\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n```\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n```\n\n3. 配置jenkis的端口\n\njenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口\n\n```\nvim /etc/sysconfig/jenkins\n```\n\n找到修改端口号：\n\n> JENKINS_PORT=\"8080\" \n\n4. 启动jenkins \n\n\n```\nservice jenkins start/stop/restart\n```\n* 安装成功后Jenkins将作为一个守护进程随系统启动\n* 系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改`/var/log/jenkins`, `/var/lib/jenkins`, 和`/var/cache/jenkins`的所有者\n* 启动的时候将从/etc/sysconfig/jenkins获取配置参数\n* 默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置\n* Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo\n\n\n## 配置阶段\n安装好`jenkins` 后 ， 我们就可以根据刚才所设置的端口号访问 `jenkins` 服务了 \n\n比如进入 `127.0.0.1:8081` 访问`jenkins`\n\n首先会看到让我们输入初始密码\n\n它提示我们进入 `/var/lib/jenkins/secrets/initialAdminPassword ` 查看\n\n![输入初始密码](http://img.nixiaolei.com/2019-03-09-16-16-27.png)\n\n\n\n输入密码无误后， 就是提示我们安装对应的插件了，\n\n左边是推荐安装， 右边是自定义安装，  这里我们建议点击 `推荐安装`\n\n![选择推荐安装](http://img.nixiaolei.com/2019-03-09-16-17-31.png)\n\n\n\n\n安装过程可能稍长\n\n![等待安装完毕 ](http://img.nixiaolei.com/jenkins03.png)\n\n\n这时我们创建一个 `Jenkins` 账户， \n一定要牢记你的输入账号和密码， 用作之后的登录\n\n![创建账户](http://img.nixiaolei.com/2019-03-09-16-29-08.png)\n\n\n\n创建账户之后， 会显示一个 `jenkins` 的资源根路径， 一般不需要修改， 保持默认即可\n\n\n![资源路径](http://img.nixiaolei.com/2019-03-09-16-32-04.png)\n\n\n\n\n之后就是愉快的`jenkins` 之旅啦\n\n![开始使用Jenkins](http://img.nixiaolei.com/2019-03-09-16-32-37.png)\n\n\n## 补善插件阶段\n我们要做的前端持续集成， 所以 `jenkins` 默认安装的插件 并不能完全的满足我们的需求\n\n进入`jenkins` 主页面后， 找到插件管理\n\n![插件管理](http://img.nixiaolei.com/2019-03-09-16-36-26.png)\n\n\n\n首先查看我们必要的插件是否安装好了\n* NodeJs Plugin\n* Publish Over SSH\n* GitHub\n\n如果发现没有安装的就安装， 查漏补缺\n\n\n\n## 变量及远程服务器基本配置\n\n插件安装好后, 进入`系统设置` 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好\n\n![系统设置](http://img.nixiaolei.com/2019-03-09-17-36-54.png)\n\n\n管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱\n\n![邮件地址](http://img.nixiaolei.com/2019-03-09-17-42-24.png)\n\n(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上\n\n![github](http://img.nixiaolei.com/2019-03-09-17-43-51.png)\n\n\n比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址\n\n点击新增添加你的服务器\n\n![添加你的服务器](http://img.nixiaolei.com/2019-03-09-17-48-05.png)\n\n\n\n点击新增后, 这里有几个关键的参数,  需要注意\n\n![参数注意](http://img.nixiaolei.com/2019-03-09-17-51-39.png)\n\n连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录\n\n![配置免密](http://img.nixiaolei.com/2019-03-09-17-54-49.png)\n\n\n> 填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，\n\n\n![编路径错误](http://img.nixiaolei.com/2019-03-10-10-43-33.png)\n\n\n\n\n因为`jenkins `的在运行时会自动的创建一个名为`jenkins`的用户， 而这个用户的权限不够，无法访问你的目录\n\n![编运行身份](http://img.nixiaolei.com/2019-03-10-10-46-12.png)\n\n\n\n解决方案有两个:\n1. 把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限\n2. 把`jenkins` 的运行身份修改为 `root`, 但是会有点安全性问题\n\n本次实践以学习为目的， 所以这里我选择了第二钟\n\n> 相关操作文章: https://blog.csdn.net/jeikerxiao/article/details/80768949\n\n\nssh 免密配置成功后， 我们就可以开始创建一个自己的任务了\n\n\n\n## 创建任务阶段\n\n回到主页， 找到`新建任务`\n\n\n![编新建任务](http://img.nixiaolei.com/2019-03-10-10-55-02.png)\n\n\n\n进入新建任务后， 有几种不同的项目， 我们这里选择 `自由风格`， 并且输入项目名称\n\n![编自由风格](http://img.nixiaolei.com/2019-03-10-10-59-00.png)\n\n创建好项目后就会自动进入 当前项目的配置文件中\n\n\n首先我们看到`General`, 这是一些全局的配置， 在这里我们可以写上该项目的描述\n\n![编全局配置](http://img.nixiaolei.com/2019-03-10-11-02-26.png)\n\n\n`General`的后面几个类目是构建项目阶段几个比较大的步骤和流程\n\n\n如果你要配置的“github”项目， 可以在`Git`这里打上勾\n\n并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在`\tCredentials` 处新增配置\n\n\n![编github项目](http://img.nixiaolei.com/2019-03-10-11-11-35.png)\n\n\n接下来是看看构建触发器， 这里的填写根据你的工程需要， \n\n可以配置定时任务 或 多任务构建\n\n> 本次演示我并没有用到\n\n![编触发器](http://img.nixiaolei.com/2019-03-10-13-26-16.png)\n\n\n\n现在来到我们的重点`构建` ， \n\n我们可以添加步骤，我们可以看到能够支持 `Node`、`shell` 、`批处理`等等方式\n\n这些添加的步骤会按顺序执行， \n\n![编构建](http://img.nixiaolei.com/2019-03-10-13-30-56.png)\n\n\n我们需要`shell` 脚本来运行npm 命令\n\n所以我创建了 `shell`的操作步骤\n\n![编shell脚本](http://img.nixiaolei.com/2019-03-10-13-35-35.png)\n\n\n\n基于此， `jenkins` 就会自动帮我们做好 测试与打包的步骤，\n\n在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个`send files or execute commands over SSH` 步骤， \n\n\n![编overSSH](http://img.nixiaolei.com/2019-03-16-13-05-58.png)\n\n\n建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去\n\n> deploy文件参考\n\n![编deploy文件参考](http://img.nixiaolei.com/2019-03-16-13-08-32.png)\n\n\n\n## 你可能遇到的问题\n\n### 命令无效或不存在\n> 这里拿npm举例，  其他命令如:node ,都是同理\n\n![编无法使用npm命令](http://img.nixiaolei.com/2019-03-16-12-54-06.png)\n\n\n因为全局的命令需要设置`软连接` Jenkins 才可以访问的到\n\n如何设置:\n\n先查看一下你的 npm 在哪\n> whereis npm\n\n![编查看npm位置](http://img.nixiaolei.com/2019-03-16-12-57-08.png)\n\n这个`/usr/local/bin/npm` 就是你的npm所在位置 ( 使用带 `local` 的地址)\n\n我们来创建 `软连接`, 这里使用刚刚获取到的npm \n\n> ln -s /usr/local/bin/npm   /usr/bin\n \n\n如果出现无法修改的情况， 那我们就将他强制更改 😄\n\n> ln -sf /usr/local/bin/npm   /usr/bin\n\n\n再去构建一次Jenkins 任务\n\n看到控制台输出， 现在npm 可以正常运行了\n\n![编npm运行成功](http://img.nixiaolei.com/2019-03-10-18-56-51.png)\n\n\n\n\n\n\n## 持续集成的必要条件\n1. 必须有github 、svn或私有git服务器\n2. 完整的项目\n  1. test\n  2. 接口测试\n  3. 其他的测试内容\n3. CI 平台\n4. 项目代码要提交到Github、 svn等服务器上\n5. 保证代码在开发机的正常\n  1. bug\n  2. 运行环境 ( 引用的包要写入packa)\n6. 保证jenkins 环境一切正常\n7. 发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)\n8. 必要的静态资源服务器\n9. 配置jenkins的自动化处理流程\n\n\n\n\n参考文章:\n> https://www.cnblogs.com/loveyouyou616/p/8714544.html\n\n","slug":"使用Jenkins构建前端持续集成","published":1,"updated":"2019-03-20T14:52:16.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3e22002w40uwrf8kdeo7","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<ol>\n<li>安装JDK</li>\n</ol>\n<p>直接使用yum 安装的是 <code>openjdk</code> , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y java</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装jenkins</li>\n</ol>\n<p>添加Jenkins库到yum库，Jenkins将从这里下载安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</span><br><span class=\"line\">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class=\"line\">yum install -y jenkins</span><br></pre></td></tr></table></figure>\n<p>添加Jenkins库到yum库，Jenkins将从这里下载安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm</span><br><span class=\"line\">rpm -ivh jenkins-2.7.3-1.1.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>配置jenkis的端口</li>\n</ol>\n<p>jenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure>\n<p>找到修改端口号：</p>\n<blockquote>\n<p>JENKINS_PORT=”8080” </p>\n</blockquote>\n<ol start=\"4\">\n<li>启动jenkins </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start/stop/restart</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装成功后Jenkins将作为一个守护进程随系统启动</li>\n<li>系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改<code>/var/log/jenkins</code>, <code>/var/lib/jenkins</code>, 和<code>/var/cache/jenkins</code>的所有者</li>\n<li>启动的时候将从/etc/sysconfig/jenkins获取配置参数</li>\n<li>默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置</li>\n<li>Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo</li>\n</ul>\n<h2 id=\"配置阶段\"><a href=\"#配置阶段\" class=\"headerlink\" title=\"配置阶段\"></a>配置阶段</h2><p>安装好<code>jenkins</code> 后 ， 我们就可以根据刚才所设置的端口号访问 <code>jenkins</code> 服务了 </p>\n<p>比如进入 <code>127.0.0.1:8081</code> 访问<code>jenkins</code></p>\n<p>首先会看到让我们输入初始密码</p>\n<p>它提示我们进入 <code>/var/lib/jenkins/secrets/initialAdminPassword</code> 查看</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-16-27.png\" alt=\"输入初始密码\"></p>\n<p>输入密码无误后， 就是提示我们安装对应的插件了，</p>\n<p>左边是推荐安装， 右边是自定义安装，  这里我们建议点击 <code>推荐安装</code></p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-17-31.png\" alt=\"选择推荐安装\"></p>\n<p>安装过程可能稍长</p>\n<p><img src=\"http://img.nixiaolei.com/jenkins03.png\" alt=\"等待安装完毕 \"></p>\n<p>这时我们创建一个 <code>Jenkins</code> 账户，<br>一定要牢记你的输入账号和密码， 用作之后的登录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-29-08.png\" alt=\"创建账户\"></p>\n<p>创建账户之后， 会显示一个 <code>jenkins</code> 的资源根路径， 一般不需要修改， 保持默认即可</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-32-04.png\" alt=\"资源路径\"></p>\n<p>之后就是愉快的<code>jenkins</code> 之旅啦</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-32-37.png\" alt=\"开始使用Jenkins\"></p>\n<h2 id=\"补善插件阶段\"><a href=\"#补善插件阶段\" class=\"headerlink\" title=\"补善插件阶段\"></a>补善插件阶段</h2><p>我们要做的前端持续集成， 所以 <code>jenkins</code> 默认安装的插件 并不能完全的满足我们的需求</p>\n<p>进入<code>jenkins</code> 主页面后， 找到插件管理</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-36-26.png\" alt=\"插件管理\"></p>\n<p>首先查看我们必要的插件是否安装好了</p>\n<ul>\n<li>NodeJs Plugin</li>\n<li>Publish Over SSH</li>\n<li>GitHub</li>\n</ul>\n<p>如果发现没有安装的就安装， 查漏补缺</p>\n<h2 id=\"变量及远程服务器基本配置\"><a href=\"#变量及远程服务器基本配置\" class=\"headerlink\" title=\"变量及远程服务器基本配置\"></a>变量及远程服务器基本配置</h2><p>插件安装好后, 进入<code>系统设置</code> 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-36-54.png\" alt=\"系统设置\"></p>\n<p>管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-42-24.png\" alt=\"邮件地址\"></p>\n<p>(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-43-51.png\" alt=\"github\"></p>\n<p>比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址</p>\n<p>点击新增添加你的服务器</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-48-05.png\" alt=\"添加你的服务器\"></p>\n<p>点击新增后, 这里有几个关键的参数,  需要注意</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-51-39.png\" alt=\"参数注意\"></p>\n<p>连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-54-49.png\" alt=\"配置免密\"></p>\n<blockquote>\n<p>填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-43-33.png\" alt=\"编路径错误\"></p>\n<p>因为<code>jenkins</code>的在运行时会自动的创建一个名为<code>jenkins</code>的用户， 而这个用户的权限不够，无法访问你的目录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-46-12.png\" alt=\"编运行身份\"></p>\n<p>解决方案有两个:</p>\n<ol>\n<li>把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限</li>\n<li>把<code>jenkins</code> 的运行身份修改为 <code>root</code>, 但是会有点安全性问题</li>\n</ol>\n<p>本次实践以学习为目的， 所以这里我选择了第二钟</p>\n<blockquote>\n<p>相关操作文章: <a href=\"https://blog.csdn.net/jeikerxiao/article/details/80768949\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jeikerxiao/article/details/80768949</a></p>\n</blockquote>\n<p>ssh 免密配置成功后， 我们就可以开始创建一个自己的任务了</p>\n<h2 id=\"创建任务阶段\"><a href=\"#创建任务阶段\" class=\"headerlink\" title=\"创建任务阶段\"></a>创建任务阶段</h2><p>回到主页， 找到<code>新建任务</code></p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-55-02.png\" alt=\"编新建任务\"></p>\n<p>进入新建任务后， 有几种不同的项目， 我们这里选择 <code>自由风格</code>， 并且输入项目名称</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-59-00.png\" alt=\"编自由风格\"></p>\n<p>创建好项目后就会自动进入 当前项目的配置文件中</p>\n<p>首先我们看到<code>General</code>, 这是一些全局的配置， 在这里我们可以写上该项目的描述</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-11-02-26.png\" alt=\"编全局配置\"></p>\n<p><code>General</code>的后面几个类目是构建项目阶段几个比较大的步骤和流程</p>\n<p>如果你要配置的“github”项目， 可以在<code>Git</code>这里打上勾</p>\n<p>并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在<code>Credentials</code> 处新增配置</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-11-11-35.png\" alt=\"编github项目\"></p>\n<p>接下来是看看构建触发器， 这里的填写根据你的工程需要， </p>\n<p>可以配置定时任务 或 多任务构建</p>\n<blockquote>\n<p>本次演示我并没有用到</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-26-16.png\" alt=\"编触发器\"></p>\n<p>现在来到我们的重点<code>构建</code> ， </p>\n<p>我们可以添加步骤，我们可以看到能够支持 <code>Node</code>、<code>shell</code> 、<code>批处理</code>等等方式</p>\n<p>这些添加的步骤会按顺序执行， </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-30-56.png\" alt=\"编构建\"></p>\n<p>我们需要<code>shell</code> 脚本来运行npm 命令</p>\n<p>所以我创建了 <code>shell</code>的操作步骤</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-35-35.png\" alt=\"编shell脚本\"></p>\n<p>基于此， <code>jenkins</code> 就会自动帮我们做好 测试与打包的步骤，</p>\n<p>在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个<code>send files or execute commands over SSH</code> 步骤， </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-05-58.png\" alt=\"编overSSH\"></p>\n<p>建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去</p>\n<blockquote>\n<p>deploy文件参考</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-08-32.png\" alt=\"编deploy文件参考\"></p>\n<h2 id=\"你可能遇到的问题\"><a href=\"#你可能遇到的问题\" class=\"headerlink\" title=\"你可能遇到的问题\"></a>你可能遇到的问题</h2><h3 id=\"命令无效或不存在\"><a href=\"#命令无效或不存在\" class=\"headerlink\" title=\"命令无效或不存在\"></a>命令无效或不存在</h3><blockquote>\n<p>这里拿npm举例，  其他命令如:node ,都是同理</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-12-54-06.png\" alt=\"编无法使用npm命令\"></p>\n<p>因为全局的命令需要设置<code>软连接</code> Jenkins 才可以访问的到</p>\n<p>如何设置:</p>\n<p>先查看一下你的 npm 在哪</p>\n<blockquote>\n<p>whereis npm</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-12-57-08.png\" alt=\"编查看npm位置\"></p>\n<p>这个<code>/usr/local/bin/npm</code> 就是你的npm所在位置 ( 使用带 <code>local</code> 的地址)</p>\n<p>我们来创建 <code>软连接</code>, 这里使用刚刚获取到的npm </p>\n<blockquote>\n<p>ln -s /usr/local/bin/npm   /usr/bin</p>\n</blockquote>\n<p>如果出现无法修改的情况， 那我们就将他强制更改 😄</p>\n<blockquote>\n<p>ln -sf /usr/local/bin/npm   /usr/bin</p>\n</blockquote>\n<p>再去构建一次Jenkins 任务</p>\n<p>看到控制台输出， 现在npm 可以正常运行了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-18-56-51.png\" alt=\"编npm运行成功\"></p>\n<h2 id=\"持续集成的必要条件\"><a href=\"#持续集成的必要条件\" class=\"headerlink\" title=\"持续集成的必要条件\"></a>持续集成的必要条件</h2><ol>\n<li>必须有github 、svn或私有git服务器</li>\n<li>完整的项目<ol>\n<li>test</li>\n<li>接口测试</li>\n<li>其他的测试内容</li>\n</ol>\n</li>\n<li>CI 平台</li>\n<li>项目代码要提交到Github、 svn等服务器上</li>\n<li>保证代码在开发机的正常<ol>\n<li>bug</li>\n<li>运行环境 ( 引用的包要写入packa)</li>\n</ol>\n</li>\n<li>保证jenkins 环境一切正常</li>\n<li>发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)</li>\n<li>必要的静态资源服务器</li>\n<li>配置jenkins的自动化处理流程</li>\n</ol>\n<p>参考文章:</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/loveyouyou616/p/8714544.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/loveyouyou616/p/8714544.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<ol>\n<li>安装JDK</li>\n</ol>\n<p>直接使用yum 安装的是 <code>openjdk</code> , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y java</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装jenkins</li>\n</ol>\n<p>添加Jenkins库到yum库，Jenkins将从这里下载安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</span><br><span class=\"line\">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class=\"line\">yum install -y jenkins</span><br></pre></td></tr></table></figure>\n<p>添加Jenkins库到yum库，Jenkins将从这里下载安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm</span><br><span class=\"line\">rpm -ivh jenkins-2.7.3-1.1.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>配置jenkis的端口</li>\n</ol>\n<p>jenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure>\n<p>找到修改端口号：</p>\n<blockquote>\n<p>JENKINS_PORT=”8080” </p>\n</blockquote>\n<ol start=\"4\">\n<li>启动jenkins </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start/stop/restart</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装成功后Jenkins将作为一个守护进程随系统启动</li>\n<li>系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改<code>/var/log/jenkins</code>, <code>/var/lib/jenkins</code>, 和<code>/var/cache/jenkins</code>的所有者</li>\n<li>启动的时候将从/etc/sysconfig/jenkins获取配置参数</li>\n<li>默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置</li>\n<li>Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo</li>\n</ul>\n<h2 id=\"配置阶段\"><a href=\"#配置阶段\" class=\"headerlink\" title=\"配置阶段\"></a>配置阶段</h2><p>安装好<code>jenkins</code> 后 ， 我们就可以根据刚才所设置的端口号访问 <code>jenkins</code> 服务了 </p>\n<p>比如进入 <code>127.0.0.1:8081</code> 访问<code>jenkins</code></p>\n<p>首先会看到让我们输入初始密码</p>\n<p>它提示我们进入 <code>/var/lib/jenkins/secrets/initialAdminPassword</code> 查看</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-16-27.png\" alt=\"输入初始密码\"></p>\n<p>输入密码无误后， 就是提示我们安装对应的插件了，</p>\n<p>左边是推荐安装， 右边是自定义安装，  这里我们建议点击 <code>推荐安装</code></p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-17-31.png\" alt=\"选择推荐安装\"></p>\n<p>安装过程可能稍长</p>\n<p><img src=\"http://img.nixiaolei.com/jenkins03.png\" alt=\"等待安装完毕 \"></p>\n<p>这时我们创建一个 <code>Jenkins</code> 账户，<br>一定要牢记你的输入账号和密码， 用作之后的登录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-29-08.png\" alt=\"创建账户\"></p>\n<p>创建账户之后， 会显示一个 <code>jenkins</code> 的资源根路径， 一般不需要修改， 保持默认即可</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-32-04.png\" alt=\"资源路径\"></p>\n<p>之后就是愉快的<code>jenkins</code> 之旅啦</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-32-37.png\" alt=\"开始使用Jenkins\"></p>\n<h2 id=\"补善插件阶段\"><a href=\"#补善插件阶段\" class=\"headerlink\" title=\"补善插件阶段\"></a>补善插件阶段</h2><p>我们要做的前端持续集成， 所以 <code>jenkins</code> 默认安装的插件 并不能完全的满足我们的需求</p>\n<p>进入<code>jenkins</code> 主页面后， 找到插件管理</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-36-26.png\" alt=\"插件管理\"></p>\n<p>首先查看我们必要的插件是否安装好了</p>\n<ul>\n<li>NodeJs Plugin</li>\n<li>Publish Over SSH</li>\n<li>GitHub</li>\n</ul>\n<p>如果发现没有安装的就安装， 查漏补缺</p>\n<h2 id=\"变量及远程服务器基本配置\"><a href=\"#变量及远程服务器基本配置\" class=\"headerlink\" title=\"变量及远程服务器基本配置\"></a>变量及远程服务器基本配置</h2><p>插件安装好后, 进入<code>系统设置</code> 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-36-54.png\" alt=\"系统设置\"></p>\n<p>管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-42-24.png\" alt=\"邮件地址\"></p>\n<p>(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-43-51.png\" alt=\"github\"></p>\n<p>比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址</p>\n<p>点击新增添加你的服务器</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-48-05.png\" alt=\"添加你的服务器\"></p>\n<p>点击新增后, 这里有几个关键的参数,  需要注意</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-51-39.png\" alt=\"参数注意\"></p>\n<p>连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-54-49.png\" alt=\"配置免密\"></p>\n<blockquote>\n<p>填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-43-33.png\" alt=\"编路径错误\"></p>\n<p>因为<code>jenkins</code>的在运行时会自动的创建一个名为<code>jenkins</code>的用户， 而这个用户的权限不够，无法访问你的目录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-46-12.png\" alt=\"编运行身份\"></p>\n<p>解决方案有两个:</p>\n<ol>\n<li>把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限</li>\n<li>把<code>jenkins</code> 的运行身份修改为 <code>root</code>, 但是会有点安全性问题</li>\n</ol>\n<p>本次实践以学习为目的， 所以这里我选择了第二钟</p>\n<blockquote>\n<p>相关操作文章: <a href=\"https://blog.csdn.net/jeikerxiao/article/details/80768949\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jeikerxiao/article/details/80768949</a></p>\n</blockquote>\n<p>ssh 免密配置成功后， 我们就可以开始创建一个自己的任务了</p>\n<h2 id=\"创建任务阶段\"><a href=\"#创建任务阶段\" class=\"headerlink\" title=\"创建任务阶段\"></a>创建任务阶段</h2><p>回到主页， 找到<code>新建任务</code></p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-55-02.png\" alt=\"编新建任务\"></p>\n<p>进入新建任务后， 有几种不同的项目， 我们这里选择 <code>自由风格</code>， 并且输入项目名称</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-59-00.png\" alt=\"编自由风格\"></p>\n<p>创建好项目后就会自动进入 当前项目的配置文件中</p>\n<p>首先我们看到<code>General</code>, 这是一些全局的配置， 在这里我们可以写上该项目的描述</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-11-02-26.png\" alt=\"编全局配置\"></p>\n<p><code>General</code>的后面几个类目是构建项目阶段几个比较大的步骤和流程</p>\n<p>如果你要配置的“github”项目， 可以在<code>Git</code>这里打上勾</p>\n<p>并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在<code>Credentials</code> 处新增配置</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-11-11-35.png\" alt=\"编github项目\"></p>\n<p>接下来是看看构建触发器， 这里的填写根据你的工程需要， </p>\n<p>可以配置定时任务 或 多任务构建</p>\n<blockquote>\n<p>本次演示我并没有用到</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-26-16.png\" alt=\"编触发器\"></p>\n<p>现在来到我们的重点<code>构建</code> ， </p>\n<p>我们可以添加步骤，我们可以看到能够支持 <code>Node</code>、<code>shell</code> 、<code>批处理</code>等等方式</p>\n<p>这些添加的步骤会按顺序执行， </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-30-56.png\" alt=\"编构建\"></p>\n<p>我们需要<code>shell</code> 脚本来运行npm 命令</p>\n<p>所以我创建了 <code>shell</code>的操作步骤</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-35-35.png\" alt=\"编shell脚本\"></p>\n<p>基于此， <code>jenkins</code> 就会自动帮我们做好 测试与打包的步骤，</p>\n<p>在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个<code>send files or execute commands over SSH</code> 步骤， </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-05-58.png\" alt=\"编overSSH\"></p>\n<p>建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去</p>\n<blockquote>\n<p>deploy文件参考</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-08-32.png\" alt=\"编deploy文件参考\"></p>\n<h2 id=\"你可能遇到的问题\"><a href=\"#你可能遇到的问题\" class=\"headerlink\" title=\"你可能遇到的问题\"></a>你可能遇到的问题</h2><h3 id=\"命令无效或不存在\"><a href=\"#命令无效或不存在\" class=\"headerlink\" title=\"命令无效或不存在\"></a>命令无效或不存在</h3><blockquote>\n<p>这里拿npm举例，  其他命令如:node ,都是同理</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-12-54-06.png\" alt=\"编无法使用npm命令\"></p>\n<p>因为全局的命令需要设置<code>软连接</code> Jenkins 才可以访问的到</p>\n<p>如何设置:</p>\n<p>先查看一下你的 npm 在哪</p>\n<blockquote>\n<p>whereis npm</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-12-57-08.png\" alt=\"编查看npm位置\"></p>\n<p>这个<code>/usr/local/bin/npm</code> 就是你的npm所在位置 ( 使用带 <code>local</code> 的地址)</p>\n<p>我们来创建 <code>软连接</code>, 这里使用刚刚获取到的npm </p>\n<blockquote>\n<p>ln -s /usr/local/bin/npm   /usr/bin</p>\n</blockquote>\n<p>如果出现无法修改的情况， 那我们就将他强制更改 😄</p>\n<blockquote>\n<p>ln -sf /usr/local/bin/npm   /usr/bin</p>\n</blockquote>\n<p>再去构建一次Jenkins 任务</p>\n<p>看到控制台输出， 现在npm 可以正常运行了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-18-56-51.png\" alt=\"编npm运行成功\"></p>\n<h2 id=\"持续集成的必要条件\"><a href=\"#持续集成的必要条件\" class=\"headerlink\" title=\"持续集成的必要条件\"></a>持续集成的必要条件</h2><ol>\n<li>必须有github 、svn或私有git服务器</li>\n<li>完整的项目<ol>\n<li>test</li>\n<li>接口测试</li>\n<li>其他的测试内容</li>\n</ol>\n</li>\n<li>CI 平台</li>\n<li>项目代码要提交到Github、 svn等服务器上</li>\n<li>保证代码在开发机的正常<ol>\n<li>bug</li>\n<li>运行环境 ( 引用的包要写入packa)</li>\n</ol>\n</li>\n<li>保证jenkins 环境一切正常</li>\n<li>发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)</li>\n<li>必要的静态资源服务器</li>\n<li>配置jenkins的自动化处理流程</li>\n</ol>\n<p>参考文章:</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/loveyouyou616/p/8714544.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/loveyouyou616/p/8714544.html</a></p>\n</blockquote>\n"},{"title":"面向对象设计原则之S.O.L.I.D","date":"2019-03-24T01:39:12.000Z","_content":"\n\n作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步\n\n\n那编程里如何提升内功， 主要就是体现在编程思想上了，\n\n## 逐层提升你编程思想\n比如从一开始的最传统的面向对象 到 面向切面\n\n面向对象 -> 工厂模式 -> 面向切面\n\n\n从 \"oop 的静态抽象\" 演变为 \"aop的动态抽象\"\n\n![提升思想](http://img.nixiaolei.com/2019-03-24-09-45-24.png)\n\n\n## SOLID原则的基本概念\n\n让我们来看下 `SOLID` 的概念\n\n程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。\n\n\n## SOLID这几个字母代表什么意义？\n\n\n### S (单一一功能原则)\n> Single Responsibility Principle \n\n单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。\n换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。\n在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。\n单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。\n责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，\n从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。\n\n\n**缩减一下就是:**\n> 让每个函数和每个类都只做一件小事，职责单一，解耦和\n\n\n\n### O (开闭原则)\n> Open Close Principle\n\n开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。\n软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。\n\n对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。\n\n说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。\n\n\n让我们来看下一个简单的 `Ts` demo\n\n**糟糕的实现**\n```TypeScript\nclass Animal {\n\n  constructor(name: any) {\n    super(name)\n    this.name = name\n  }\n  eat() {\n    if(this.name == '小猫') {\n      console.log(this.name + '吃猫粮')\n    } else if( this.name == \"小狗\") {\n      console.log(this.name + '吃狗粮')\n    }\n  }\n}\n```\n\n这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背\n\n\n\n**利用 `OCP` 思想**\n```TypeScript\n// Animal 抽象类\nabstract class Animal {\n  public name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  abstract eat(): any;\n}\n\n// 实现Animal抽象类\nclass Dog extends Animal {\n  constructor(name: any) {\n    super(name)\n  }\n  eat() {\n    console.log(this.name + '吃狗粮')\n  }\n}\nvar d = new Dog('小狗')\nd.eat()\n```\n\n上面的代码中， 首先使用`abstract` 定义抽象类和抽象方法，提供其他类继承的基类\n我们定义只要是`Animal`就必须要有`eat`方法\n\n于是， 我们创建了一个`Dog` 继承`Animal` ,  \n这个`Dog`就不一般了， 它规定了必须重新实现 `eat` 方法， 并且可以扩展自己的方法\n\n当我们将来如果需要一只 `Cat`\n我们一样只需要让他继承`Animal`抽象类， 然后实现一个自己的`eat`方法\n\n\n\n### L (里⽒氏替换原则)\n> Liskov Substitution Principle\n\n里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。\n\n**子类必须能够替换他们的基类**。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现`if/else`之类对子类类型进行判断的条件。 里氏替换原则`LSP`使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， `LSP`则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。\n\n当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。\n\n\n\n\n**缩减一下就是:**\n> 老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系\n\n\n\n### I (接⼝隔离原则)\n> Interface Segregation Principle\n\n接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。\n\n不能强迫用户去依赖那些他们不能使用的接口。 换句话说， **使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。** 注意： 在代码中应用 `ISP` 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。\n\n这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， `ISP`原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。\n\n\n\n**缩减一下就是:**\n> 每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口\n\n\n\n\n### D (依赖反转原则)\n> Dependency Inversion Principle\n\n依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。\n\n**高层模块不应该依赖于底层模块， 二者都应该依赖于抽象**\n**抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)**\n\n类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。\n\n\n**举个例子:**\n\n你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。\n\n此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品\n\n\n\n#### 依赖反转原则\n\n**依赖注入**\n\n当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。\n\n**注⼊入过程**\n\n如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊\n\n\n**依赖反转有两种方式**\n1. 设值注入（在类上方设置字段）\n2. 构造注入 （在`constructor`中接收需要地参数）\n\n![依赖反转原则](http://img.nixiaolei.com/2019-03-24-13-25-50.png)\n\n\n#### DI（依赖注⼊入）\n> 依赖注⼊入（Dependency Injection）\n\n为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。\n\n\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/面向对象设计原则之SOLID.md","raw":"---\ntitle: 面向对象设计原则之S.O.L.I.D\ndate: 2019-03-24 09:39:12\ncategories: 编程思想\ntags: [oop, SOLID, 编程原则]\n---\n\n\n作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步\n\n\n那编程里如何提升内功， 主要就是体现在编程思想上了，\n\n## 逐层提升你编程思想\n比如从一开始的最传统的面向对象 到 面向切面\n\n面向对象 -> 工厂模式 -> 面向切面\n\n\n从 \"oop 的静态抽象\" 演变为 \"aop的动态抽象\"\n\n![提升思想](http://img.nixiaolei.com/2019-03-24-09-45-24.png)\n\n\n## SOLID原则的基本概念\n\n让我们来看下 `SOLID` 的概念\n\n程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。\n\n\n## SOLID这几个字母代表什么意义？\n\n\n### S (单一一功能原则)\n> Single Responsibility Principle \n\n单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。\n换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。\n在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。\n单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。\n责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，\n从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。\n\n\n**缩减一下就是:**\n> 让每个函数和每个类都只做一件小事，职责单一，解耦和\n\n\n\n### O (开闭原则)\n> Open Close Principle\n\n开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。\n软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。\n\n对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。\n\n说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。\n\n\n让我们来看下一个简单的 `Ts` demo\n\n**糟糕的实现**\n```TypeScript\nclass Animal {\n\n  constructor(name: any) {\n    super(name)\n    this.name = name\n  }\n  eat() {\n    if(this.name == '小猫') {\n      console.log(this.name + '吃猫粮')\n    } else if( this.name == \"小狗\") {\n      console.log(this.name + '吃狗粮')\n    }\n  }\n}\n```\n\n这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背\n\n\n\n**利用 `OCP` 思想**\n```TypeScript\n// Animal 抽象类\nabstract class Animal {\n  public name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  abstract eat(): any;\n}\n\n// 实现Animal抽象类\nclass Dog extends Animal {\n  constructor(name: any) {\n    super(name)\n  }\n  eat() {\n    console.log(this.name + '吃狗粮')\n  }\n}\nvar d = new Dog('小狗')\nd.eat()\n```\n\n上面的代码中， 首先使用`abstract` 定义抽象类和抽象方法，提供其他类继承的基类\n我们定义只要是`Animal`就必须要有`eat`方法\n\n于是， 我们创建了一个`Dog` 继承`Animal` ,  \n这个`Dog`就不一般了， 它规定了必须重新实现 `eat` 方法， 并且可以扩展自己的方法\n\n当我们将来如果需要一只 `Cat`\n我们一样只需要让他继承`Animal`抽象类， 然后实现一个自己的`eat`方法\n\n\n\n### L (里⽒氏替换原则)\n> Liskov Substitution Principle\n\n里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。\n\n**子类必须能够替换他们的基类**。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现`if/else`之类对子类类型进行判断的条件。 里氏替换原则`LSP`使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， `LSP`则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。\n\n当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。\n\n\n\n\n**缩减一下就是:**\n> 老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系\n\n\n\n### I (接⼝隔离原则)\n> Interface Segregation Principle\n\n接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。\n\n不能强迫用户去依赖那些他们不能使用的接口。 换句话说， **使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。** 注意： 在代码中应用 `ISP` 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。\n\n这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， `ISP`原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。\n\n\n\n**缩减一下就是:**\n> 每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口\n\n\n\n\n### D (依赖反转原则)\n> Dependency Inversion Principle\n\n依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。\n\n**高层模块不应该依赖于底层模块， 二者都应该依赖于抽象**\n**抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)**\n\n类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。\n\n\n**举个例子:**\n\n你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。\n\n此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品\n\n\n\n#### 依赖反转原则\n\n**依赖注入**\n\n当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。\n\n**注⼊入过程**\n\n如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊\n\n\n**依赖反转有两种方式**\n1. 设值注入（在类上方设置字段）\n2. 构造注入 （在`constructor`中接收需要地参数）\n\n![依赖反转原则](http://img.nixiaolei.com/2019-03-24-13-25-50.png)\n\n\n#### DI（依赖注⼊入）\n> 依赖注⼊入（Dependency Injection）\n\n为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。\n\n\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"面向对象设计原则之SOLID","published":1,"updated":"2019-03-24T05:57:53.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmj3e29002z40uw1q2kpqt0","content":"<p>作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步</p>\n<p>那编程里如何提升内功， 主要就是体现在编程思想上了，</p>\n<h2 id=\"逐层提升你编程思想\"><a href=\"#逐层提升你编程思想\" class=\"headerlink\" title=\"逐层提升你编程思想\"></a>逐层提升你编程思想</h2><p>比如从一开始的最传统的面向对象 到 面向切面</p>\n<p>面向对象 -&gt; 工厂模式 -&gt; 面向切面</p>\n<p>从 “oop 的静态抽象” 演变为 “aop的动态抽象”</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-09-45-24.png\" alt=\"提升思想\"></p>\n<h2 id=\"SOLID原则的基本概念\"><a href=\"#SOLID原则的基本概念\" class=\"headerlink\" title=\"SOLID原则的基本概念\"></a>SOLID原则的基本概念</h2><p>让我们来看下 <code>SOLID</code> 的概念</p>\n<p>程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。</p>\n<h2 id=\"SOLID这几个字母代表什么意义？\"><a href=\"#SOLID这几个字母代表什么意义？\" class=\"headerlink\" title=\"SOLID这几个字母代表什么意义？\"></a>SOLID这几个字母代表什么意义？</h2><h3 id=\"S-单一一功能原则\"><a href=\"#S-单一一功能原则\" class=\"headerlink\" title=\"S (单一一功能原则)\"></a>S (单一一功能原则)</h3><blockquote>\n<p>Single Responsibility Principle </p>\n</blockquote>\n<p>单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。<br>换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。<br>在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。<br>单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。<br>责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，<br>从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>让每个函数和每个类都只做一件小事，职责单一，解耦和</p>\n</blockquote>\n<h3 id=\"O-开闭原则\"><a href=\"#O-开闭原则\" class=\"headerlink\" title=\"O (开闭原则)\"></a>O (开闭原则)</h3><blockquote>\n<p>Open Close Principle</p>\n</blockquote>\n<p>开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。<br>软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。</p>\n<p>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。</p>\n<p>说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。</p>\n<p>让我们来看下一个简单的 <code>Ts</code> demo</p>\n<p><strong>糟糕的实现</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name == <span class=\"string\">'小猫'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃猫粮'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.name == <span class=\"string\">\"小狗\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃狗粮'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背</p>\n<p><strong>利用 <code>OCP</code> 思想</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Animal 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> eat(): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Animal抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃狗粮'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'小狗'</span>)</span><br><span class=\"line\">d.eat()</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码中， 首先使用<code>abstract</code> 定义抽象类和抽象方法，提供其他类继承的基类<br>我们定义只要是<code>Animal</code>就必须要有<code>eat</code>方法</p>\n<p>于是， 我们创建了一个<code>Dog</code> 继承<code>Animal</code> ,<br>这个<code>Dog</code>就不一般了， 它规定了必须重新实现 <code>eat</code> 方法， 并且可以扩展自己的方法</p>\n<p>当我们将来如果需要一只 <code>Cat</code><br>我们一样只需要让他继承<code>Animal</code>抽象类， 然后实现一个自己的<code>eat</code>方法</p>\n<h3 id=\"L-里⽒氏替换原则\"><a href=\"#L-里⽒氏替换原则\" class=\"headerlink\" title=\"L (里⽒氏替换原则)\"></a>L (里⽒氏替换原则)</h3><blockquote>\n<p>Liskov Substitution Principle</p>\n</blockquote>\n<p>里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。</p>\n<p><strong>子类必须能够替换他们的基类</strong>。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现<code>if/else</code>之类对子类类型进行判断的条件。 里氏替换原则<code>LSP</code>使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， <code>LSP</code>则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。</p>\n<p>当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系</p>\n</blockquote>\n<h3 id=\"I-接⼝隔离原则\"><a href=\"#I-接⼝隔离原则\" class=\"headerlink\" title=\"I (接⼝隔离原则)\"></a>I (接⼝隔离原则)</h3><blockquote>\n<p>Interface Segregation Principle</p>\n</blockquote>\n<p>接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。</p>\n<p>不能强迫用户去依赖那些他们不能使用的接口。 换句话说， <strong>使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。</strong> 注意： 在代码中应用 <code>ISP</code> 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。</p>\n<p>这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， <code>ISP</code>原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口</p>\n</blockquote>\n<h3 id=\"D-依赖反转原则\"><a href=\"#D-依赖反转原则\" class=\"headerlink\" title=\"D (依赖反转原则)\"></a>D (依赖反转原则)</h3><blockquote>\n<p>Dependency Inversion Principle</p>\n</blockquote>\n<p>依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。</p>\n<p><strong>高层模块不应该依赖于底层模块， 二者都应该依赖于抽象</strong><br><strong>抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)</strong></p>\n<p>类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。</p>\n<p><strong>举个例子:</strong></p>\n<p>你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。</p>\n<p>此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品</p>\n<h4 id=\"依赖反转原则\"><a href=\"#依赖反转原则\" class=\"headerlink\" title=\"依赖反转原则\"></a>依赖反转原则</h4><p><strong>依赖注入</strong></p>\n<p>当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。</p>\n<p><strong>注⼊入过程</strong></p>\n<p>如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊</p>\n<p><strong>依赖反转有两种方式</strong></p>\n<ol>\n<li>设值注入（在类上方设置字段）</li>\n<li>构造注入 （在<code>constructor</code>中接收需要地参数）</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-13-25-50.png\" alt=\"依赖反转原则\"></p>\n<h4 id=\"DI（依赖注⼊入）\"><a href=\"#DI（依赖注⼊入）\" class=\"headerlink\" title=\"DI（依赖注⼊入）\"></a>DI（依赖注⼊入）</h4><blockquote>\n<p>依赖注⼊入（Dependency Injection）</p>\n</blockquote>\n<p>为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。</p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步</p>\n<p>那编程里如何提升内功， 主要就是体现在编程思想上了，</p>\n<h2 id=\"逐层提升你编程思想\"><a href=\"#逐层提升你编程思想\" class=\"headerlink\" title=\"逐层提升你编程思想\"></a>逐层提升你编程思想</h2><p>比如从一开始的最传统的面向对象 到 面向切面</p>\n<p>面向对象 -&gt; 工厂模式 -&gt; 面向切面</p>\n<p>从 “oop 的静态抽象” 演变为 “aop的动态抽象”</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-09-45-24.png\" alt=\"提升思想\"></p>\n<h2 id=\"SOLID原则的基本概念\"><a href=\"#SOLID原则的基本概念\" class=\"headerlink\" title=\"SOLID原则的基本概念\"></a>SOLID原则的基本概念</h2><p>让我们来看下 <code>SOLID</code> 的概念</p>\n<p>程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。</p>\n<h2 id=\"SOLID这几个字母代表什么意义？\"><a href=\"#SOLID这几个字母代表什么意义？\" class=\"headerlink\" title=\"SOLID这几个字母代表什么意义？\"></a>SOLID这几个字母代表什么意义？</h2><h3 id=\"S-单一一功能原则\"><a href=\"#S-单一一功能原则\" class=\"headerlink\" title=\"S (单一一功能原则)\"></a>S (单一一功能原则)</h3><blockquote>\n<p>Single Responsibility Principle </p>\n</blockquote>\n<p>单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。<br>换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。<br>在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。<br>单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。<br>责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，<br>从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>让每个函数和每个类都只做一件小事，职责单一，解耦和</p>\n</blockquote>\n<h3 id=\"O-开闭原则\"><a href=\"#O-开闭原则\" class=\"headerlink\" title=\"O (开闭原则)\"></a>O (开闭原则)</h3><blockquote>\n<p>Open Close Principle</p>\n</blockquote>\n<p>开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。<br>软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。</p>\n<p>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。</p>\n<p>说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。</p>\n<p>让我们来看下一个简单的 <code>Ts</code> demo</p>\n<p><strong>糟糕的实现</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name == <span class=\"string\">'小猫'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃猫粮'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.name == <span class=\"string\">\"小狗\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃狗粮'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背</p>\n<p><strong>利用 <code>OCP</code> 思想</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Animal 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> eat(): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Animal抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃狗粮'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'小狗'</span>)</span><br><span class=\"line\">d.eat()</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码中， 首先使用<code>abstract</code> 定义抽象类和抽象方法，提供其他类继承的基类<br>我们定义只要是<code>Animal</code>就必须要有<code>eat</code>方法</p>\n<p>于是， 我们创建了一个<code>Dog</code> 继承<code>Animal</code> ,<br>这个<code>Dog</code>就不一般了， 它规定了必须重新实现 <code>eat</code> 方法， 并且可以扩展自己的方法</p>\n<p>当我们将来如果需要一只 <code>Cat</code><br>我们一样只需要让他继承<code>Animal</code>抽象类， 然后实现一个自己的<code>eat</code>方法</p>\n<h3 id=\"L-里⽒氏替换原则\"><a href=\"#L-里⽒氏替换原则\" class=\"headerlink\" title=\"L (里⽒氏替换原则)\"></a>L (里⽒氏替换原则)</h3><blockquote>\n<p>Liskov Substitution Principle</p>\n</blockquote>\n<p>里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。</p>\n<p><strong>子类必须能够替换他们的基类</strong>。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现<code>if/else</code>之类对子类类型进行判断的条件。 里氏替换原则<code>LSP</code>使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， <code>LSP</code>则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。</p>\n<p>当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系</p>\n</blockquote>\n<h3 id=\"I-接⼝隔离原则\"><a href=\"#I-接⼝隔离原则\" class=\"headerlink\" title=\"I (接⼝隔离原则)\"></a>I (接⼝隔离原则)</h3><blockquote>\n<p>Interface Segregation Principle</p>\n</blockquote>\n<p>接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。</p>\n<p>不能强迫用户去依赖那些他们不能使用的接口。 换句话说， <strong>使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。</strong> 注意： 在代码中应用 <code>ISP</code> 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。</p>\n<p>这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， <code>ISP</code>原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口</p>\n</blockquote>\n<h3 id=\"D-依赖反转原则\"><a href=\"#D-依赖反转原则\" class=\"headerlink\" title=\"D (依赖反转原则)\"></a>D (依赖反转原则)</h3><blockquote>\n<p>Dependency Inversion Principle</p>\n</blockquote>\n<p>依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。</p>\n<p><strong>高层模块不应该依赖于底层模块， 二者都应该依赖于抽象</strong><br><strong>抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)</strong></p>\n<p>类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。</p>\n<p><strong>举个例子:</strong></p>\n<p>你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。</p>\n<p>此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品</p>\n<h4 id=\"依赖反转原则\"><a href=\"#依赖反转原则\" class=\"headerlink\" title=\"依赖反转原则\"></a>依赖反转原则</h4><p><strong>依赖注入</strong></p>\n<p>当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。</p>\n<p><strong>注⼊入过程</strong></p>\n<p>如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊</p>\n<p><strong>依赖反转有两种方式</strong></p>\n<ol>\n<li>设值注入（在类上方设置字段）</li>\n<li>构造注入 （在<code>constructor</code>中接收需要地参数）</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-13-25-50.png\" alt=\"依赖反转原则\"></p>\n<h4 id=\"DI（依赖注⼊入）\"><a href=\"#DI（依赖注⼊入）\" class=\"headerlink\" title=\"DI（依赖注⼊入）\"></a>DI（依赖注⼊入）</h4><blockquote>\n<p>依赖注⼊入（Dependency Injection）</p>\n</blockquote>\n<p>为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。</p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjtmj3dr0000240uwwdyuc9n3","category_id":"cjtmj3dri000440uw6jowqx1n","_id":"cjtmj3ds3000d40uwsxignkf8"},{"post_id":"cjtmj3drz000b40uwb06hx4uq","category_id":"cjtmj3drw000940uwd3q60udb","_id":"cjtmj3dsb000i40uwiq4jxpy7"},{"post_id":"cjtmj3dr5000340uwuatwi6o2","category_id":"cjtmj3drw000940uwd3q60udb","_id":"cjtmj3dsf000m40uw1wf0s799"},{"post_id":"cjtmj3drm000640uwznz78pje","category_id":"cjtmj3drw000940uwd3q60udb","_id":"cjtmj3dsh000p40uwk2tetej6"},{"post_id":"cjtmj3dsa000h40uwtqjspuk1","category_id":"cjtmj3drw000940uwd3q60udb","_id":"cjtmj3dsm000u40uwvbyya6u6"},{"post_id":"cjtmj3dse000l40uwsci4h3n6","category_id":"cjtmj3drw000940uwd3q60udb","_id":"cjtmj3dsr000x40uwhdaevqc8"},{"post_id":"cjtmj3drr000740uw9o8kchqp","category_id":"cjtmj3dsc000j40uwhxe5gpk7","_id":"cjtmj3dst001240uwyab2h1x6"},{"post_id":"cjtmj3dsg000o40uw49t1xc38","category_id":"cjtmj3drw000940uwd3q60udb","_id":"cjtmj3dsu001340uwynxzg4co"},{"post_id":"cjtmj3drv000840uwu2f77cs3","category_id":"cjtmj3drw000940uwd3q60udb","_id":"cjtmj3dsv001640uwkpl97xd6"},{"post_id":"cjtmj3ds1000c40uwr8bih8x9","category_id":"cjtmj3dsr000z40uwtmheu6k7","_id":"cjtmj3dsv001740uwymlm94l2"},{"post_id":"cjtmj3ds7000g40uwqipyeiem","category_id":"cjtmj3dsu001440uwxsyvcwi8","_id":"cjtmj3dsw001b40uwohf47uea"},{"post_id":"cjtmj3dsj000t40uwj0zythvg","category_id":"cjtmj3dsv001840uwo4ag5sk0","_id":"cjtmj3dsy001h40uwbuuad8pj"},{"post_id":"cjtmj3dsp000w40uw69tysftc","category_id":"cjtmj3dsx001d40uw2gp6btgd","_id":"cjtmj3dt1001m40uw56dyu3ga"},{"post_id":"cjtmj3dss001140uwclq0mwap","category_id":"cjtmj3dsu001440uwxsyvcwi8","_id":"cjtmj3dt3001o40uwwcc9776w"},{"post_id":"cjtmj3e29002z40uw1q2kpqt0","category_id":"cjtmj3dsu001440uwxsyvcwi8","_id":"cjtmj3e2f003340uwoo09sfsn"},{"post_id":"cjtmj3e20002u40uwtbm6pxro","category_id":"cjtmj3e27002x40uw2qflebve","_id":"cjtmj3e2g003540uwan3jc9un"},{"post_id":"cjtmj3e22002w40uwrf8kdeo7","category_id":"cjtmj3e2e003040uwm78b47sh","_id":"cjtmj3e2h003740uwa41t0kz9"}],"PostTag":[{"post_id":"cjtmj3dr0000240uwwdyuc9n3","tag_id":"cjtmj3drl000540uwktl9q2ku","_id":"cjtmj3dsg000n40uwym2kl57q"},{"post_id":"cjtmj3dr0000240uwwdyuc9n3","tag_id":"cjtmj3drx000a40uw7eph1m4a","_id":"cjtmj3dsi000q40uwpjembkjs"},{"post_id":"cjtmj3dr0000240uwwdyuc9n3","tag_id":"cjtmj3ds4000f40uwby0ypylt","_id":"cjtmj3dsn000v40uww8bpt0yw"},{"post_id":"cjtmj3dsg000o40uw49t1xc38","tag_id":"cjtmj3ds4000f40uwby0ypylt","_id":"cjtmj3dsr000y40uw5a6wdszd"},{"post_id":"cjtmj3dr5000340uwuatwi6o2","tag_id":"cjtmj3ds4000f40uwby0ypylt","_id":"cjtmj3dsw001a40uwwntfkqh5"},{"post_id":"cjtmj3dr5000340uwuatwi6o2","tag_id":"cjtmj3dsi000s40uw3b3gjy0x","_id":"cjtmj3dsx001c40uw0h3rrqmy"},{"post_id":"cjtmj3dr5000340uwuatwi6o2","tag_id":"cjtmj3dss001040uw04iscctg","_id":"cjtmj3dsy001f40uwiztqzw7s"},{"post_id":"cjtmj3dr5000340uwuatwi6o2","tag_id":"cjtmj3dsu001540uwopagquos","_id":"cjtmj3dsy001g40uw3caul0da"},{"post_id":"cjtmj3drm000640uwznz78pje","tag_id":"cjtmj3dsw001940uw8hujw602","_id":"cjtmj3dt0001k40uwn7e3ekqc"},{"post_id":"cjtmj3drm000640uwznz78pje","tag_id":"cjtmj3ds4000f40uwby0ypylt","_id":"cjtmj3dt1001l40uwzyxs18ug"},{"post_id":"cjtmj3drr000740uw9o8kchqp","tag_id":"cjtmj3dsz001j40uwl1y1gwey","_id":"cjtmj3dt6001r40uwa1hrhm3c"},{"post_id":"cjtmj3drr000740uw9o8kchqp","tag_id":"cjtmj3dss001040uw04iscctg","_id":"cjtmj3dt7001s40uw4j4mzt8h"},{"post_id":"cjtmj3drr000740uw9o8kchqp","tag_id":"cjtmj3dsu001540uwopagquos","_id":"cjtmj3dt8001u40uwgtb127wa"},{"post_id":"cjtmj3drv000840uwu2f77cs3","tag_id":"cjtmj3ds4000f40uwby0ypylt","_id":"cjtmj3dt9001w40uwzq2hchvb"},{"post_id":"cjtmj3drv000840uwu2f77cs3","tag_id":"cjtmj3dt7001t40uwy8xjt1fj","_id":"cjtmj3dt9001x40uw3bgm66dq"},{"post_id":"cjtmj3drz000b40uwb06hx4uq","tag_id":"cjtmj3ds4000f40uwby0ypylt","_id":"cjtmj3dtb002040uwq40kp7me"},{"post_id":"cjtmj3drz000b40uwb06hx4uq","tag_id":"cjtmj3dsi000s40uw3b3gjy0x","_id":"cjtmj3dtb002140uw3ur41oxc"},{"post_id":"cjtmj3ds1000c40uwr8bih8x9","tag_id":"cjtmj3dtb001z40uwxbent5im","_id":"cjtmj3dtc002340uw7b82ppzb"},{"post_id":"cjtmj3ds7000g40uwqipyeiem","tag_id":"cjtmj3dtb002240uwc4ic6tlx","_id":"cjtmj3dte002640uw7xizapwl"},{"post_id":"cjtmj3ds7000g40uwqipyeiem","tag_id":"cjtmj3dtc002440uwyc5du3rd","_id":"cjtmj3dte002740uwxjjligxn"},{"post_id":"cjtmj3dsa000h40uwtqjspuk1","tag_id":"cjtmj3ds4000f40uwby0ypylt","_id":"cjtmj3dtf002940uw5gc4nnnf"},{"post_id":"cjtmj3dsa000h40uwtqjspuk1","tag_id":"cjtmj3dsi000s40uw3b3gjy0x","_id":"cjtmj3dtg002a40uwi8qbn5y2"},{"post_id":"cjtmj3dse000l40uwsci4h3n6","tag_id":"cjtmj3ds4000f40uwby0ypylt","_id":"cjtmj3dth002d40uwxr6faapu"},{"post_id":"cjtmj3dse000l40uwsci4h3n6","tag_id":"cjtmj3dtf002840uwyfly9zt8","_id":"cjtmj3dti002e40uwu7in7wzb"},{"post_id":"cjtmj3dse000l40uwsci4h3n6","tag_id":"cjtmj3dtg002b40uwnk3y37xn","_id":"cjtmj3dtk002g40uwql25zj7f"},{"post_id":"cjtmj3dsj000t40uwj0zythvg","tag_id":"cjtmj3dth002c40uwpf8coeul","_id":"cjtmj3dtk002h40uw54l42xjj"},{"post_id":"cjtmj3dsp000w40uw69tysftc","tag_id":"cjtmj3dti002f40uwohh3z524","_id":"cjtmj3dtq002l40uw0lqpigi9"},{"post_id":"cjtmj3dsp000w40uw69tysftc","tag_id":"cjtmj3dss001040uw04iscctg","_id":"cjtmj3dtq002m40uwwi3j5mj7"},{"post_id":"cjtmj3dsp000w40uw69tysftc","tag_id":"cjtmj3dsu001540uwopagquos","_id":"cjtmj3dtr002o40uwqyg08v6z"},{"post_id":"cjtmj3dss001140uwclq0mwap","tag_id":"cjtmj3dtp002k40uwyhfn0if2","_id":"cjtmj3dts002q40uwxxa0egij"},{"post_id":"cjtmj3dss001140uwclq0mwap","tag_id":"cjtmj3dtq002n40uwopr6yrho","_id":"cjtmj3dts002r40uwxcdezfxk"},{"post_id":"cjtmj3dss001140uwclq0mwap","tag_id":"cjtmj3dtr002p40uwosarng7j","_id":"cjtmj3dts002s40uw1km573t0"},{"post_id":"cjtmj3e20002u40uwtbm6pxro","tag_id":"cjtmj3dsw001940uw8hujw602","_id":"cjtmj3e2f003240uwzx60ebiv"},{"post_id":"cjtmj3e20002u40uwtbm6pxro","tag_id":"cjtmj3e28002y40uw20ue69p1","_id":"cjtmj3e2g003440uw9vpcae9q"},{"post_id":"cjtmj3e22002w40uwrf8kdeo7","tag_id":"cjtmj3e2e003140uw3qarrpxd","_id":"cjtmj3e2n003b40uwre58d5dd"},{"post_id":"cjtmj3e22002w40uwrf8kdeo7","tag_id":"cjtmj3e2g003640uw5fw2w2f9","_id":"cjtmj3e2o003c40uw5mf3ws6p"},{"post_id":"cjtmj3e22002w40uwrf8kdeo7","tag_id":"cjtmj3e2h003840uwykjg0ey0","_id":"cjtmj3e2p003d40uwuexqwrk9"},{"post_id":"cjtmj3e22002w40uwrf8kdeo7","tag_id":"cjtmj3e2j003940uwyihd3fp7","_id":"cjtmj3e2q003e40uw0yqbil4j"},{"post_id":"cjtmj3e29002z40uw1q2kpqt0","tag_id":"cjtmj3dtp002k40uwyhfn0if2","_id":"cjtmj3e2q003f40uwbbtdawmz"},{"post_id":"cjtmj3e29002z40uw1q2kpqt0","tag_id":"cjtmj3e2k003a40uwkvycxxyu","_id":"cjtmj3e2r003g40uwx8c9s79h"},{"post_id":"cjtmj3e29002z40uw1q2kpqt0","tag_id":"cjtmj3dtr002p40uwosarng7j","_id":"cjtmj3e2r003h40uw5dzx49as"}],"Tag":[{"name":"学习技巧","_id":"cjtmj3drl000540uwktl9q2ku"},{"name":"学习渠道","_id":"cjtmj3drx000a40uw7eph1m4a"},{"name":"css","_id":"cjtmj3ds4000f40uwby0ypylt"},{"name":"PostCss","_id":"cjtmj3dsi000s40uw3b3gjy0x"},{"name":"插件","_id":"cjtmj3dss001040uw04iscctg"},{"name":"工具","_id":"cjtmj3dsu001540uwopagquos"},{"name":"JavaScript","_id":"cjtmj3dsw001940uw8hujw602"},{"name":"vim","_id":"cjtmj3dsz001j40uwl1y1gwey"},{"name":"命名规范","_id":"cjtmj3dt7001t40uwy8xjt1fj"},{"name":"hexo","_id":"cjtmj3dtb001z40uwxbent5im"},{"name":"AOP","_id":"cjtmj3dtb002240uwc4ic6tlx"},{"name":"编程范式","_id":"cjtmj3dtc002440uwyc5du3rd"},{"name":"web-component","_id":"cjtmj3dtf002840uwyfly9zt8"},{"name":"特效","_id":"cjtmj3dtg002b40uwnk3y37xn"},{"name":"Angular","_id":"cjtmj3dth002c40uwpf8coeul"},{"name":"算法","_id":"cjtmj3dti002f40uwohh3z524"},{"name":"oop","_id":"cjtmj3dtp002k40uwyhfn0if2"},{"name":"IOC","_id":"cjtmj3dtq002n40uwopr6yrho"},{"name":"编程原则","_id":"cjtmj3dtr002p40uwosarng7j"},{"name":"TypeScript","_id":"cjtmj3e28002y40uw20ue69p1"},{"name":"CI","_id":"cjtmj3e2e003140uw3qarrpxd"},{"name":"Jenkins","_id":"cjtmj3e2g003640uw5fw2w2f9"},{"name":"Centos","_id":"cjtmj3e2h003840uwykjg0ey0"},{"name":"前端持续集成","_id":"cjtmj3e2j003940uwyihd3fp7"},{"name":"SOLID","_id":"cjtmj3e2k003a40uwkvycxxyu"}]}}