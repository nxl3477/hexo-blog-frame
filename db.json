{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/myavatar.jpg","path":"images/myavatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/my_favicon_small.ico","path":"images/my_favicon_small.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/my_favicon.ico","path":"images/my_favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bai.js","path":"js/src/bai.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/md5.js","path":"js/src/md5.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/baidu_verify_UCp8DVX1mJ.html","hash":"1862349bcebd44d95e04e440c274368ca2c6e938","modified":1552797723647},{"_id":"source/google0e4fe1e51eb21469.html","hash":"4706a06de6dcf15d319375f5a48263abc9ddb693","modified":1552798600346},{"_id":"source/robots.txt","hash":"9ea605c9ceeea0daf677dc5405834a298fca9903","modified":1552707732045},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1552659391732},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1552659391733},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1552659391735},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1552659391747},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1552659391749},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1552659391750},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1552659391752},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1552659391758},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1552659391760},{"_id":"themes/next/_config.yml","hash":"7adf80cd29da20eb9b1575681fdcc408ca83073b","modified":1553331930131},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1552659391764},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1552659391755},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1552659391753},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1552659391765},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1552659391966},{"_id":"source/_posts/CSS如何了解新知识.md","hash":"92c164fa35e2d33f7121c84ec8b0ae07d5655997","modified":1553262472702},{"_id":"source/_posts/JavaScript事件机制.md","hash":"b0495cc90ff940fe8b527d36aebbc489aa303c0f","modified":1554026678433},{"_id":"source/_posts/TypeScript语法.md","hash":"2d58c122ac74c260d9835b7c6024145591b82eea","modified":1553410275706},{"_id":"source/_posts/Js与CSS变量操作.md","hash":"03c9cb6cc4cd228cb0ab6e8aebda304f3b4b8813","modified":1553262494797},{"_id":"source/_posts/hexo中如何使用本地图片.md","hash":"1c9188b165b00b4ac3008a961ee8193ae41aa452","modified":1553093128787},{"_id":"source/_posts/TypeScript手册.md","hash":"79a9815ed30b9487c861fe519935afa6668cd2ce","modified":1553324477275},{"_id":"source/_posts/vue的add命令与npm的小区别.md","hash":"64c90b703617bd672039be4ff7ba772961fd296a","modified":1554549851450},{"_id":"source/_posts/css分层-命名规范.md","hash":"699026ce9ce684e21484dee745e43d9820e700f4","modified":1553262468923},{"_id":"source/_posts/this的软绑定和硬绑定.md","hash":"cd217e734c85c666ca700f34f8c4c8b315838591","modified":1553927213912},{"_id":"source/_posts/vuecli3脚手架环境变量.md","hash":"7184103740363698acc7c14ed1ad1166ebfeb37e","modified":1554549846099},{"_id":"source/_posts/【CSS全景】淘宝造物节H5原理.md","hash":"bc4f7f500320afe0192c0c09136b468af898f79c","modified":1553774322971},{"_id":"source/_posts/【CSS矩阵】你不知道的Css矩阵.md","hash":"de2efc919b6f20f8882a84741b9069b58400f193","modified":1553774304472},{"_id":"source/_posts/【AOP】面向切面编程.md","hash":"329c519a06e2f23132dbc1134d0ce1cce3edb037","modified":1553408093857},{"_id":"source/_posts/css预处理与后处理器.md","hash":"339760f450884615404aceff9d39c39e0018fad9","modified":1553262487487},{"_id":"source/_posts/【C语言】入门知识.md","hash":"2b4650d2d1c6f0db5231261820a7b4903963f0fe","modified":1554538305105},{"_id":"source/_posts/【Linux】命令手册.md","hash":"e30cdf1214079489198f10ce295c060b41ca9ad5","modified":1554300224655},{"_id":"source/_posts/vue-cli3脚手架配置px2rem适配方案.md","hash":"58d2638282aba044a42e9662a16aa54fe96f4b5c","modified":1554605436923},{"_id":"source/_posts/【NodeJs】异步IO与EventLoop.md","hash":"2bedea4082b3e59b471d10ff6902be3643ee23d2","modified":1553871341282},{"_id":"source/_posts/【Linux】理解chown命令.md","hash":"1acb30ac5f5f5ade19a627e3ad9824b4452fd5df","modified":1554299835427},{"_id":"source/_posts/【React】从高阶函数到理解高阶组件.md","hash":"0ed9bc422f9cb24f66affc820dda16bdb8ef06c8","modified":1554820583069},{"_id":"source/_posts/【PostCss】使用明天的CSS.md","hash":"49e58d072b9c14fd832e2f24a3d13b1299ff8897","modified":1553262572343},{"_id":"source/_posts/【React】高阶用法.md","hash":"98ee1863592ddb3307ad4670b523057d5870513e","modified":1554819199863},{"_id":"source/_posts/【React】PureComponent解决了什么问题.md","hash":"3ac70a7d9f8874788b4b676eb5cab3a13a85ecfb","modified":1554626713489},{"_id":"source/_posts/【容器】Docker入门教程.md","hash":"42b8dcc2bb216c28716b7ec16e64dcb84f6a01cf","modified":1554613375975},{"_id":"source/_posts/【容器】docker命令手册.md","hash":"046c9ed04a908b1d4a6d54780e59a45e1bdec016","modified":1554613370032},{"_id":"source/_posts/【Vue】源码解析.md","hash":"dcf0bc06725eee14904a3c97e5fd3ec51fd1c063","modified":1554032888940},{"_id":"source/_posts/了解CPU工作原理.md","hash":"3a7b51f322161cbed8b9c1fbe5933e8437487fd9","modified":1554549885564},{"_id":"source/_posts/了解汇编语言.md","hash":"28030321d72bcd1aed4e3e46dbde1f7e44cbf5b6","modified":1554528256916},{"_id":"source/_posts/使用Jenkins构建前端持续集成.md","hash":"763a993c6935b7612b4d5b9e8ef3e88dcd6fbca5","modified":1553093536270},{"_id":"source/_posts/【容器】搭建第一个docker环境.md","hash":"1ba1279ba300b314c1e355e830e33bffeb2a5d14","modified":1554729032560},{"_id":"source/_posts/工具目录.md","hash":"da76aed2c5c0305137ad06be2fa8135f1b330caa","modified":1553774315656},{"_id":"source/_posts/如何在伪元素中使用Iconfont.md","hash":"b9b71442f7a4f876ce295b154dfe10c654b67198","modified":1553409999728},{"_id":"source/_posts/模拟实现一个bind.md","hash":"c21a34d50c13e949230e3d9f503da38f36ec6a6a","modified":1554025067224},{"_id":"source/_posts/利用CSS混合模式更改图片颜色.md","hash":"166fc0701077ff9751a4d241c7ad48eb1ee8485f","modified":1553262554147},{"_id":"source/_posts/【React】为什么要使用immutableJs.md","hash":"76aef8b8d9a3d7ce12b3376dcd9c3099ed8a7874","modified":1554817741217},{"_id":"source/_posts/计算机语言的本源与发展.md","hash":"afbffecfcca092c99125ba8a5b2ff82b7a5acd3d","modified":1554529663541},{"_id":"source/_posts/简单理解微服务架构.md","hash":"696a16da4b57fbdfb3cf1af137323c5acf822e4f","modified":1554544612948},{"_id":"source/_posts/理解Iaas、PaaS、SaaS的区别.md","hash":"68dfdc2ec766d89a51bd440c472ee37b1d6fc9c6","modified":1554729170174},{"_id":"source/_posts/面向对象设计原则之IOC控制反转.md","hash":"24d085757aaa344add2f4570920647536280b54f","modified":1553407062075},{"_id":"source/_posts/手摸手AngularJs入门教程.md","hash":"f256e85a3a46eb74565cef22cb791a4c514db10a","modified":1553093714313},{"_id":"source/categories/index.md","hash":"2de5f843791cc237fc93871d470e69131726404c","modified":1552708635981},{"_id":"source/tags/index.md","hash":"9064f7e5fe91e9cdf9694214e4a62bc1da2d77b9","modified":1552708631233},{"_id":"source/_posts/面试题集合.md","hash":"53362b1c4046c0eb486d62cccc154b70bd041dbc","modified":1554033605910},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1552659391768},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1552659391769},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1552659391774},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1552659391771},{"_id":"source/_posts/面向对象设计原则之SOLID.md","hash":"37c0ffae507b526274a7e0627a6bc485a0cc8b73","modified":1554542026220},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1552659391776},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1552659391778},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1552659391781},{"_id":"source/_posts/【css-doodle】css-web-component入门.md","hash":"ed6aad8837c50af632f6310716971248ebe2597c","modified":1553262565352},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1552659391779},{"_id":"source/_posts/简单理解破解与脱壳.md","hash":"97223d704b936fa3e0ad046bde46f0e2eca1438e","modified":1554537571301},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1552659391787},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1552659391782},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1552659391786},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1552659391784},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1552659391788},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1552659391795},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1552659391793},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1552666076235},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1552659391956},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1552659391953},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1552659391958},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1552659391963},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1552659391960},{"_id":"themes/next/layout/_layout.swig","hash":"4ecd1406c9ffe4deb1fb98d0da0ba4bc6b0021a8","modified":1553267220882},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1552659391961},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1552659391964},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1552659391969},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1552659391971},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1552659392652},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1552659392657},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1552659392654},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392266},{"_id":"source/_posts/md_imgs/2019-04-04-23-02-40.png","hash":"d02bc3ce9576f7ed6103dcc842355214a3ba9f85","modified":1554390162086},{"_id":"source/_posts/md_imgs/2019-04-06-13-13-58.png","hash":"ca19eae04d84b0f17e0da4db2ebaf0e2a8e22b46","modified":1554527639695},{"_id":"source/_posts/md_imgs/2019-04-04-22-51-57.png","hash":"245c433f1859ce305cfdfca4983ea380f7cc63cd","modified":1554389518533},{"_id":"source/_posts/md_imgs/2019-04-06-14-38-20.png","hash":"8e8ca3ad7925ea4cbd59c59fd3c3e03f4112920d","modified":1554532700681},{"_id":"source/_posts/md_imgs/2019-04-08-21-05-28.png","hash":"11499ac2ee32f6fe0a919c123867ce57a5c3ba8d","modified":1554728729083},{"_id":"source/_posts/md_imgs/2019-04-07-11-28-59.png","hash":"25d54c27f4e338eaef45334605cc7a517c9f7ad9","modified":1554607740716},{"_id":"source/_posts/md_imgs/2019-04-07-12-57-12.png","hash":"49689bbf60f5d71e5fe2a49afbf1bd3bf0291ecb","modified":1554613033191},{"_id":"source/_posts/md_imgs/2019-04-07-16-04-36.png","hash":"55c67c067c81e25fc2a85d1a87ca49221d5ff504","modified":1554624277007},{"_id":"source/_posts/md_imgs/2019-04-08-21-10-04.png","hash":"294c59b7df10adc7da6c8965cecd28d632675311","modified":1554729004916},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1552659391799},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1552659391801},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1552659391805},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1552659391808},{"_id":"source/_posts/md_imgs/2019-04-08-21-09-13.png","hash":"34abc6c62e7efbb3d3454a17ec116bbfac6fa509","modified":1554728954451},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1552659391812},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1552659391816},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"80180e4d6382fa690fa4d16b63288bb98b919d35","modified":1552799624607},{"_id":"themes/next/layout/_partials/footer.swig","hash":"faf71d7f8242911394b49425f2ee61c1b7d64586","modified":1552799535288},{"_id":"themes/next/layout/_macro/post.swig","hash":"ba2a3560fbabbeaa9681dc41d1bb81975ad136ad","modified":1552665952382},{"_id":"themes/next/layout/_partials/head.swig","hash":"297ac38603d60a75aa6a45a197ef0d9d18deec5c","modified":1552798919510},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1552659391832},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1552659391834},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1552659391835},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1552659391856},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1552659391858},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4c044d39b3f3f7c6512db433533cf9e2dd3055fc","modified":1553330582208},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1552659391870},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1552659391923},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1552659391925},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1552659391830},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1552659391930},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1552659391932},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1552659391927},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1552659391933},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1552659391928},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1552659391977},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1552659391974},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1552659391976},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1552659391979},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1552659391981},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1552659391983},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1552659391986},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1552659391985},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1552659391989},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1552659392270},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1552659392263},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1552659392275},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1552659392273},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1552659392277},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1552659392283},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1552659392279},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1552659392281},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1552659392291},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1552659392286},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1552659392285},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552659392294},{"_id":"themes/next/source/images/alipay.jpg","hash":"66b14acbff7c07594ab21624b1671ab49deb355f","modified":1552792130526},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1552659392293},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1552659392289},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552659392298},{"_id":"themes/next/source/images/myavatar.jpg","hash":"10545caf74010b6169944a4ff35b84f5ee32c6a2","modified":1553268800872},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1552659392296},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1552659392301},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1552659392299},{"_id":"themes/next/source/images/my_favicon_small.ico","hash":"677e14b2949bd9d9a38bbeaa538fb26792350c17","modified":1552714838347},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1552659392303},{"_id":"themes/next/source/images/my_favicon.ico","hash":"32d7f41cfc03d1a81346691b4803a3124b7b0b8d","modified":1552714719214},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"6bc7e8c08d39c4f18acc22344f5322727160dfe3","modified":1552792137052},{"_id":"source/_posts/md_imgs/2019-04-06-15-09-10.png","hash":"10ce907f37ce69a87ab8a1de9f0920bda9e3e563","modified":1554534551596},{"_id":"source/_posts/md_imgs/2019-04-06-22-42-11.png","hash":"58a24799ffea2056d44ec33ab7a1e04ff9d51153","modified":1554561732732},{"_id":"source/_posts/md_imgs/2019-04-06-19-57-22.png","hash":"54591679e9b0ba77d04811bb3f9d49abeac131aa","modified":1554551843181},{"_id":"source/_posts/md_imgs/2019-04-06-23-14-37.png","hash":"71040da1699dd4f92f8c5d66c511d9074aaae39c","modified":1554563679590},{"_id":"source/_posts/md_imgs/2019-04-07-10-26-08.png","hash":"2f4fc9c116289b0e3fad05d3d30892ed176ad638","modified":1554603968998},{"_id":"source/_posts/md_imgs/2019-04-07-10-26-12.png","hash":"2f4fc9c116289b0e3fad05d3d30892ed176ad638","modified":1554603973526},{"_id":"source/_posts/md_imgs/2019-04-06-22-56-37.png","hash":"c5c9ce1f1fe53bed978d55110cff012bacfef830","modified":1554562598356},{"_id":"source/_posts/md_imgs/2019-04-06-23-15-51.png","hash":"706a10dac22f5b26f66aa5198c9cfd5362e65f70","modified":1554563753900},{"_id":"source/_posts/md_imgs/2019-04-08-21-08-27.png","hash":"90ef33537dea52f521f43112d984390ebe00183f","modified":1554728908632},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659391866},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659391867},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392183},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392185},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392191},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392256},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392262},{"_id":"source/_posts/md_imgs/2019-04-06-13-10-58.png","hash":"8fa7fa6134a80e6b68e85880d9e6cac0aa310d76","modified":1554527459461},{"_id":"source/_posts/md_imgs/2019-04-06-13-58-53.png","hash":"70fbd1f4dfc436d7e04d80cfedaddcd653d507a6","modified":1554530334697},{"_id":"source/_posts/md_imgs/2019-04-06-15-13-36.png","hash":"6e6cc1eb39e43a7c143c988689df918e8d5800d9","modified":1554534816851},{"_id":"source/_posts/md_imgs/2019-04-06-12-32-53.png","hash":"3d0f3098f5726963d15f0b6493ce80c510c4e118","modified":1554525174199},{"_id":"source/_posts/md_imgs/2019-04-09-21-43-20.png","hash":"d48e619e96c2e2bde83ee27e684a6bd608eb905c","modified":1554817400767},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1552659391827},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1552659391840},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1552659391841},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1552659391844},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1552659391847},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1552659391829},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1552659391849},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1552659391850},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1552659391865},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1552659391862},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1552659391868},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1552659391876},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1552659391880},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1552659391852},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1552659391884},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1552659391885},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1552659391890},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1552659391891},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1552659391882},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1552659391877},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1552659391896},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1552659391898},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1552659391894},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1552659391887},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1552659391903},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1552659391900},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1552659391906},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1552659391909},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"75d973fc442af673a15b253379a1839df29b1a32","modified":1553267972093},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1552659391911},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1552659391919},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1552659391920},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1552659391944},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1552659391948},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1552659391952},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1552659391913},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1552659392179},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1552659392182},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1552659392187},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e968fbc0c455532a969007e7622b6afd3c853f2","modified":1553270927283},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1552659391946},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1552659392254},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1552659392190},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1552659392253},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1552659392258},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1552659392309},{"_id":"themes/next/source/js/src/bai.js","hash":"5b3b5a34da919896acc03a34f63f784dd084e72c","modified":1552800718615},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1552659392311},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1552659392313},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1552659392315},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1552659392316},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1552659392260},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1552659392318},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1552659392320},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1552659392323},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1552659391917},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1552659392330},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1552659392329},{"_id":"themes/next/source/js/src/md5.js","hash":"c27927a82941ba972c140abf26ad82e04c32d86a","modified":1553270761828},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1552659392362},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1552659392379},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1552659392380},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1552659392331},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1552659392421},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1552659392375},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1552659392427},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1552659392371},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1552659392437},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1552659392440},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1552659392442},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1552659392444},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1552659392511},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1552659392425},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1552659392436},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1552659392424},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1552659392531},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1552659392538},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1552659392535},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1552659392529},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1552659392541},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1552659392543},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1552659392552},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1552659392556},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1552659392558},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1552659392548},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1552659392549},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1552659392561},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1552659392563},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1552659392567},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1552659392565},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1552659392573},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1552659392570},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1552659392571},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1552659392584},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1552659392575},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1552659392578},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1552659392582},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1552659392593},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1552659392587},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1552659392595},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1552659392598},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1552659392634},{"_id":"source/_posts/md_imgs/2019-04-06-11-53-40.png","hash":"a3535d35fe3c6dff13028cb79af3bf7af761f0e1","modified":1554522821647},{"_id":"source/_posts/md_imgs/2019-04-06-11-53-35.png","hash":"a3535d35fe3c6dff13028cb79af3bf7af761f0e1","modified":1554522817084},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1552659392649},{"_id":"source/_posts/md_imgs/2019-04-06-15-14-35.png","hash":"c9c1cbb9146ed0da9230131c96b7b198ce22da14","modified":1554534875809},{"_id":"source/_posts/md_imgs/2019-04-06-16-21-09.png","hash":"3a997bf5b9106002fee3edc4ad4c2cc760593e02","modified":1554538869792},{"_id":"source/_posts/md_imgs/2019-04-09-21-43-13.png","hash":"d48e619e96c2e2bde83ee27e684a6bd608eb905c","modified":1554817394798},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1552659392525},{"_id":"source/_posts/md_imgs/2019-04-04-22-39-37.png","hash":"eab865d10917a79b7773c5fcf42b529a2abd2aeb","modified":1554388778735},{"_id":"source/_posts/md_imgs/2019-04-04-22-39-41.png","hash":"eab865d10917a79b7773c5fcf42b529a2abd2aeb","modified":1554388782224},{"_id":"source/_posts/md_imgs/2019-04-06-13-11-29.png","hash":"5e6147d076ebc1d9c5b5bf5d85585ebc3764cd1d","modified":1554527490554},{"_id":"source/_posts/md_imgs/2019-04-06-13-46-58.png","hash":"447fb53787dc0871f2e1b1c238cb511ab066f186","modified":1554529619111},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1552659392632},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1552659391940},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1552659391942},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1552659392201},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1552659392646},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1552659392205},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1552659392645},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1552659392210},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1552659392212},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1552659392203},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1552659392208},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1552659392226},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1552659392228},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1552659392229},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1552659392231},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1552659392233},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1552659392240},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1552659392198},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1552659392246},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1552659392244},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1552659392249},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1552659392213},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1552659392242},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1552659392248},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1552659392007},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1552659392009},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1552659392004},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1552659392050},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1552659392000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1552659392002},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1552659392166},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1552659392168},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1552659392111},{"_id":"source/_posts/md_imgs/2019-04-08-22-39-14.png","hash":"70dbb46911a8a8a2b2816c55e236ce960d084e2b","modified":1554734355409},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1552659392174},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1552659392170},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1552659392176},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1552659392163},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1552659392327},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1552659392172},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1552659392358},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1552659392384},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1552659392386},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1552659392349},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1552659392388},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1552659392390},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1552659392392},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1552659392395},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1552659392355},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1552659392413},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1552659392418},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1552659392430},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1552659392432},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1552659392450},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1552659392452},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1552659392448},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1552659392415},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1552659392625},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1552659392627},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1552659392353},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1552659392497},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1552659392494},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1552659392640},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1552659392217},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1552659392221},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1552659392236},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1552659392013},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1552659392017},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1552659392019},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1552659392023},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1552659392028},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1552659392026},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1552659392041},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1552659392042},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1552659392044},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1552659392046},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1552659392032},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1552659392048},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1552659392034},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1552659392036},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1552659392054},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1552659392057},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1552659392058},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1552659392060},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1552659392062},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1552659392066},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1552659392064},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1552659392068},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1552659392070},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1552659392073},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1552659392075},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1552659392078},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1552659392086},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1552659392076},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1552659392093},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1552659392095},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1552659392097},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"b9002196a748365b5c14e4193816c654b9ce5fd6","modified":1553269273709},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1552659392099},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1552659392080},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1552659392082},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1552659392101},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1552659392106},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1552659392117},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1552659392109},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1552659392119},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1552659392125},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1552659392103},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1552659392115},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1552659392122},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1552659392129},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1552659392133},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1552659392127},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1552659392131},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1552659392141},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1552659392144},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1552659392137},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1552659392148},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1552659392150},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1552659392158},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1552659392153},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1552659392161},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1552659392146},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1552659392155},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1552659392342},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1552659392340},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1552659392348},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1552659392346},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1552659392400},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1552659392398},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1552659392403},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1552659392344},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1552659392491},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1552659392461},{"_id":"source/_posts/md_imgs/2019-04-06-16-52-38.png","hash":"978edaf17279eeb24a9bbed8f46953eb7284a8f1","modified":1554540759581},{"_id":"source/_posts/md_imgs/2019-04-06-17-25-10.png","hash":"9dd4dced7c1ec784d881ad0bb1f0ed900d5b8aa3","modified":1554542711387},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1552659392466},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1552659392405},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1552659392411},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1552659392408},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1552659392368},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1552659392618},{"_id":"source/_posts/md_imgs/2019-04-06-13-07-06.png","hash":"acc56885e790b7164ea6130e53ec648c89d4ea45","modified":1554527227788},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1552659392484},{"_id":"source/_posts/md_imgs/2019-04-06-13-06-51.png","hash":"e0b787266a50201faa7a09099dd93a2d11d5d63e","modified":1554527212290},{"_id":"public/baidusitemap.xml","hash":"e87d130438e99a1d9a0c053748ccb1674f32606c","modified":1554820643094},{"_id":"public/search.xml","hash":"f93b432f916ed8d7a6589c6a7e5b5136983399e6","modified":1554820643094},{"_id":"public/sitemap.xml","hash":"81c5227fff76a576f66992c612b94c4d13e7c478","modified":1554820643180},{"_id":"public/baidu_verify_UCp8DVX1mJ.html","hash":"1e3b8d15d7f6740026553fba8eb31ad30ec18d14","modified":1554820643194},{"_id":"public/google0e4fe1e51eb21469.html","hash":"d4047ec86576d15c375ed98104f81b7f74411cb5","modified":1554820643194},{"_id":"public/categories/index.html","hash":"99564e1b8fb29ea783baf3395f1ad21d34726e2d","modified":1554820643194},{"_id":"public/tags/index.html","hash":"3df24266edd31223f14bf007e0610c754df743ac","modified":1554820643194},{"_id":"public/2019/04/24/vuecli3脚手架环境变量/index.html","hash":"7dfbde7e291095e30a2757070301838bab532721","modified":1554820643194},{"_id":"public/2019/04/24/vue的add命令与npm的小区别/index.html","hash":"281d233e2db6a3f0b06ada0b51e0e531da6cb1cd","modified":1554820643194},{"_id":"public/2019/04/24/vue-cli3脚手架配置px2rem适配方案/index.html","hash":"d4cd88f53bf26932786eea92388d0c85b118a2c7","modified":1554820643195},{"_id":"public/2019/04/09/【React】从高阶函数到理解高阶组件/index.html","hash":"bcba0ed0567592c0681095431dd0297e108f8bd1","modified":1554820643195},{"_id":"public/2019/04/08/【React】为什么要使用immutableJs/index.html","hash":"ca899522f8ac01b25e2d53a02dd39526c8e2756b","modified":1554820643195},{"_id":"public/2019/04/04/【React】PureComponent解决了什么问题/index.html","hash":"aca5635f7bc9ab5ebdc7b887b29d7a9342f7650b","modified":1554820643195},{"_id":"public/2019/04/02/【Linux】命令手册/index.html","hash":"72d57519b4d0bec825ef5081192dbfa5db977fa9","modified":1554820643195},{"_id":"public/2019/04/02/【React】高阶用法/index.html","hash":"b4439542fed46770707b11b6c80f7fe9f4aeec13","modified":1554820643195},{"_id":"public/2019/04/01/了解CPU工作原理/index.html","hash":"2618dfa13647bf28f86de9333ab9fb467199f13b","modified":1554820643195},{"_id":"public/2019/03/31/模拟实现一个bind/index.html","hash":"6cba3a300b3366500844e04276a9857a12d5f163","modified":1554820643195},{"_id":"public/2019/03/30/this的软绑定和硬绑定/index.html","hash":"33bcc6cdce34313e3d28594f8d5a72e29dbc0778","modified":1554820643195},{"_id":"public/2019/03/29/理解Iaas、PaaS、SaaS的区别/index.html","hash":"2d7f48bac5bd88c348778c0addb949ec731ba6b2","modified":1554820643196},{"_id":"public/2019/03/28/【容器】搭建第一个docker环境/index.html","hash":"7a0dc84823eca4383f0b6bb70922e20d97d5137b","modified":1554820643196},{"_id":"public/2019/03/28/简单理解破解与脱壳/index.html","hash":"187ef3c33580e61852c81167a94d5db535b81446","modified":1554820643196},{"_id":"public/2019/03/26/JavaScript事件机制/index.html","hash":"afb6bf1f31a1ba204942f37c6a4603f47d30772e","modified":1554820643196},{"_id":"public/2019/03/26/【NodeJs】异步IO与EventLoop/index.html","hash":"7f265487aae0e08fcc017a533aa59f19eb903319","modified":1554820643196},{"_id":"public/2019/03/26/简单理解微服务架构/index.html","hash":"2cef79643218480d537cd22af203df3ffb4cbe2a","modified":1554820643196},{"_id":"public/2019/03/24/TypeScript语法/index.html","hash":"7b0a5756b6b82845d6c834ca36fc2f755a8eb77e","modified":1554820643196},{"_id":"public/2019/03/24/如何在伪元素中使用Iconfont/index.html","hash":"e1aecd49bb403f9da7f46bb899343ea3469ac27f","modified":1554820643196},{"_id":"public/2019/03/24/【AOP】面向切面编程/index.html","hash":"057f2bee50c9e5810d622ddda6997d95a19fe523","modified":1554820643197},{"_id":"public/2019/03/24/面向对象设计原则之IOC控制反转/index.html","hash":"5864ca01ca1192530e7da3bffccded810f4e665c","modified":1554820643197},{"_id":"public/2019/03/24/了解汇编语言/index.html","hash":"6dc3c149959c3ffbe0800ce20202c12646891a22","modified":1554820643197},{"_id":"public/2019/03/24/面向对象设计原则之SOLID/index.html","hash":"31da6d42ac07fac6ceb7a6866c049fb70329dc3f","modified":1554820643197},{"_id":"public/2019/03/23/【C语言】入门知识/index.html","hash":"9040e34938f511bf8f9fb17349b6bf568cc2b805","modified":1554820643197},{"_id":"public/2019/03/22/【Linux】理解chown命令/index.html","hash":"a345ade549263248f96288007eb68125123d4966","modified":1554820643197},{"_id":"public/2019/03/20/面试题集合/index.html","hash":"865467a912f28299304ede5886df05133795307a","modified":1554820643197},{"_id":"public/2019/03/18/TypeScript手册/index.html","hash":"cc0c9e31584586d872ff506ab64bfd9bfef63aab","modified":1554820643198},{"_id":"public/2019/03/18/【CSS矩阵】你不知道的Css矩阵/index.html","hash":"ff057efecf0f3b4cb172d1b0d73ba39debdb3a1f","modified":1554820643198},{"_id":"public/2019/03/18/【CSS全景】淘宝造物节H5原理/index.html","hash":"948839544d6b63096d9ba3c23b003e7a70a40a84","modified":1554820643198},{"_id":"public/2019/03/18/计算机语言的本源与发展/index.html","hash":"ca8d881ad069a15cb0edb5fc4963470ce2271552","modified":1554820643198},{"_id":"public/2019/03/18/【Vue】源码解析/index.html","hash":"70402864c5edab6d446de683c9cd794dd00181dc","modified":1554820643198},{"_id":"public/2019/03/17/工具目录/index.html","hash":"9f5714c94bf8fefd2f7a0e6b7a4c183c388e0401","modified":1554820643198},{"_id":"public/2019/03/17/【容器】docker命令手册/index.html","hash":"ca792aab082e66a57cb547855840ccd469a34c01","modified":1554820643198},{"_id":"public/2019/03/16/css分层-命名规范/index.html","hash":"447204f22a3b34490b87d3883e03d08c8dd21177","modified":1554820643198},{"_id":"public/2019/03/16/【css-doodle】css-web-component入门/index.html","hash":"051db87f952378afef72a48ef5ea348a926138e3","modified":1554820643198},{"_id":"public/2019/03/16/利用CSS混合模式更改图片颜色/index.html","hash":"bd61133c7c7894072590cd15bf863b3142b202c6","modified":1554820643198},{"_id":"public/2019/03/16/【容器】Docker入门教程/index.html","hash":"3ad7fd108bbc73d1cc06af3dea62612784e502ba","modified":1554820643199},{"_id":"public/2019/03/16/Js与CSS变量操作/index.html","hash":"16a2245f540b8b2060b1f4ab23aa94224603da2b","modified":1554820643199},{"_id":"public/2019/03/16/CSS如何了解新知识/index.html","hash":"18c7ab28bbcbdf2fab0a54954c3044e0b0c179a8","modified":1554820643199},{"_id":"public/2019/03/16/【PostCss】使用明天的CSS/index.html","hash":"0afe6f9a7cf4eb3cd1feccfb1b4c6538164e0a7e","modified":1554820643199},{"_id":"public/2019/03/16/使用Jenkins构建前端持续集成/index.html","hash":"01ca26a2e787973d46c8d12fd55ab81a306c91bb","modified":1554820643199},{"_id":"public/2019/03/16/css预处理与后处理器/index.html","hash":"7974af538960beaa37fa24049d2d70604171242a","modified":1554820643199},{"_id":"public/2019/03/16/手摸手AngularJs入门教程/index.html","hash":"6c0fe5bc2501a7b7efce4bfba987eaf155c5984a","modified":1554820643199},{"_id":"public/2019/03/16/hexo中如何使用本地图片/index.html","hash":"fda4ada52f9fde52189f4fcad1c74d46f5716bc7","modified":1554820643199},{"_id":"public/archives/index.html","hash":"8cbc4e2cf6dee4fdf0bf1b322cf9285ac546d308","modified":1554820643199},{"_id":"public/archives/page/2/index.html","hash":"14b740328ce9fff14496486439169a06967d0314","modified":1554820643200},{"_id":"public/archives/page/3/index.html","hash":"8d24844488e7b0d1c19821fbb8fc3bfc4d8040a0","modified":1554820643200},{"_id":"public/archives/page/4/index.html","hash":"cefc3efc31e623aa80e737097ba0497e52e72bd4","modified":1554820643200},{"_id":"public/archives/page/5/index.html","hash":"faeb37e7f4153ecb3d02a715ca18b4868f4aa3d3","modified":1554820643200},{"_id":"public/archives/2019/index.html","hash":"8ad8cc435797bda4efe15b4b80d404dd2d24c150","modified":1554820643200},{"_id":"public/archives/2019/page/2/index.html","hash":"8edf954bfc26689f8fc03521d5fc40988e12118a","modified":1554820643200},{"_id":"public/archives/2019/page/3/index.html","hash":"1747197c7183d5eaa1159cce86d1975c5cd3f5e6","modified":1554820643200},{"_id":"public/archives/2019/page/4/index.html","hash":"ac9fcb4984ab7324ccd2439ce58152742bc2323f","modified":1554820643200},{"_id":"public/archives/2019/page/5/index.html","hash":"2b1ce9609ab6175404ef9075c146484a99b06e67","modified":1554820643200},{"_id":"public/archives/2019/03/index.html","hash":"e274fcbc76f8b5c72a18b6d41032afbf00307373","modified":1554820643200},{"_id":"public/archives/2019/03/page/2/index.html","hash":"07a32ce7c24706bc74ded476ab788e2b81a774b6","modified":1554820643200},{"_id":"public/archives/2019/03/page/3/index.html","hash":"185d29e99bff315ca3cc68212a46d87d001511e7","modified":1554820643200},{"_id":"public/archives/2019/03/page/4/index.html","hash":"c4839dee58848468c0105bea4b3af8e454f566e8","modified":1554820643201},{"_id":"public/archives/2019/04/index.html","hash":"94b65979ab2a0e3932ff50e197af0354b7fd7ec6","modified":1554820643201},{"_id":"public/categories/学习技巧/index.html","hash":"a6a59f45376984fa7a38fa4a77d282a42278561d","modified":1554820643201},{"_id":"public/categories/CSS/index.html","hash":"f26fc71802233a184be0d0137af28c0d7c4eff40","modified":1554820643201},{"_id":"public/categories/hexo/index.html","hash":"7e36088375641e9e7ea783e3816e1df4bec7f45d","modified":1554820643201},{"_id":"public/categories/Vue/index.html","hash":"1c97198bc200f1606559b46ac09092e19f5d42b2","modified":1554820643201},{"_id":"public/categories/JavaScript/index.html","hash":"2ca4ec35e8a4235a46acff27698e4806e83e4ef7","modified":1554820643201},{"_id":"public/categories/编程思想/index.html","hash":"ff3cc5a2c15b282a01291346f445c39510bf02cb","modified":1554820643201},{"_id":"public/categories/C语言/index.html","hash":"e68d5352a0c2df270eb37a341385caa3acb21915","modified":1554820643201},{"_id":"public/categories/Linux/index.html","hash":"aed2386d11be3e56b82bb92c39b7e0608a6b41f0","modified":1554820643201},{"_id":"public/categories/NodeJs/index.html","hash":"4a14bde900a8d2622d6d70eb3faef454cc0f3b3b","modified":1554820643201},{"_id":"public/categories/React/index.html","hash":"1368191f851b53819d72213ad7eb3d8801952934","modified":1554820643201},{"_id":"public/categories/容器/index.html","hash":"d64aea39d15a60d3d40e6b0c53d183ce38807052","modified":1554820643201},{"_id":"public/categories/计算机基础/index.html","hash":"c0591c0384030272733a5fce04d32b0c3a1bcb41","modified":1554820643201},{"_id":"public/categories/目录/index.html","hash":"3ad29e680cb648e1f2c6d240b4a363aa0e0131cf","modified":1554820643202},{"_id":"public/categories/架构/index.html","hash":"6d07c23b4b6f85768999e9c1ec6b81a32af84044","modified":1554820643202},{"_id":"public/categories/专业术语/index.html","hash":"3aa83313e6ff92f533f348d25893685949d9bcd4","modified":1554820643202},{"_id":"public/categories/面试/index.html","hash":"041a15f9da1c494fd5b1da07fbe9e3b38d5594c6","modified":1554820643202},{"_id":"public/categories/TypeScript/index.html","hash":"dcd3b6feed5edefa6e60e6e91c18328e8272af90","modified":1554820643202},{"_id":"public/categories/CI/index.html","hash":"9c054bc346a154396cf26ef1bfc3fa679163da83","modified":1554820643202},{"_id":"public/index.html","hash":"ddc225fe544675a8023dd5387faf651e8ccca686","modified":1554820643202},{"_id":"public/page/2/index.html","hash":"72a5225b6a26bad712991dbdb7464b90e14d9039","modified":1554820643202},{"_id":"public/page/3/index.html","hash":"db95264e5b283c60bdb9dbbb0c67ee92d090b496","modified":1554820643202},{"_id":"public/page/4/index.html","hash":"5e725dc3b826a4e85ff2bef6331d5087cb360c49","modified":1554820643202},{"_id":"public/page/5/index.html","hash":"eb5c2cd61e8214d49a69b43fa60ebdd578fcbdb7","modified":1554820643202},{"_id":"public/tags/学习技巧/index.html","hash":"ac02fbb4f14325d6effd3db595c33b57076c6ca4","modified":1554820643203},{"_id":"public/tags/学习渠道/index.html","hash":"cca07a4c3a05da7b0cbab39d06e197d78b89a325","modified":1554820643203},{"_id":"public/tags/css/index.html","hash":"62070fee6090091f41cb43a3410a853fc20a34c7","modified":1554820643203},{"_id":"public/tags/JavaScript/index.html","hash":"a25a6ca50f95011d48cce8700db02698a586d1ca","modified":1554820643203},{"_id":"public/tags/hexo/index.html","hash":"eb453cacfffb54cc91b3d58aff69f756b395c1db","modified":1554820643203},{"_id":"public/tags/Vue/index.html","hash":"3c597a4c9904ed0d7b5f0e245d3cbe6e2b0a8f80","modified":1554820643203},{"_id":"public/tags/命名规范/index.html","hash":"5eb6327fe831b5620d1d9809915e40b65fb0707a","modified":1554820643203},{"_id":"public/tags/3D/index.html","hash":"cac7f4d134e34403c94536c72b554a59b668998c","modified":1554820643203},{"_id":"public/tags/矩阵/index.html","hash":"e42618f65d640ed1f618b4b68f8846d033aaed09","modified":1554820643203},{"_id":"public/tags/AOP/index.html","hash":"6cb4d2c48ca383c309950a96c71c617c182db7d4","modified":1554820643203},{"_id":"public/tags/编程范式/index.html","hash":"d5f28599b5d8365a1292e311389ef4ecc2a70d7b","modified":1554820643204},{"_id":"public/tags/PostCss/index.html","hash":"f7689df6a5f301adcea383aa302966b193a5f6aa","modified":1554820643204},{"_id":"public/tags/C语言/index.html","hash":"56b6911bf9f5f43a05e2560eb47d95169725bf4e","modified":1554820643204},{"_id":"public/tags/Linux/index.html","hash":"08b6c1f904e3fb50f0cdbdd75799a986b14b536e","modified":1554820643204},{"_id":"public/tags/NodeJs/index.html","hash":"42a5450a8a3a295db7062384b40973cde10b497f","modified":1554820643204},{"_id":"public/tags/适配/index.html","hash":"ae77511641419de3859eb9dc20ec917ab3d48608","modified":1554820643204},{"_id":"public/tags/React/index.html","hash":"014a98b5b2c73f205b3ca465c5535e2189d15135","modified":1554820643204},{"_id":"public/tags/Docker/index.html","hash":"1fa4cef49d3587fde97b42cdac2ef8253129987b","modified":1554820643204},{"_id":"public/tags/容器/index.html","hash":"b8218cdb0cc9e8c5a66b9cf0964700f4859bb55b","modified":1554820643204},{"_id":"public/tags/计算机基础/index.html","hash":"40013a110a815cbad82a07e8a779aeb5befb4b7c","modified":1554820643204},{"_id":"public/tags/CPU/index.html","hash":"8f451e9863c5acbaf79f5dd1f12e237033340260","modified":1554820643204},{"_id":"public/tags/汇编/index.html","hash":"71852cd9d9f483c4073f912e8df0c49bcc27b4f2","modified":1554820643204},{"_id":"public/tags/目录/index.html","hash":"41d103a90a188bcb4c45757c144ae597415a9055","modified":1554820643204},{"_id":"public/tags/架构/index.html","hash":"c06a3f1f19cabb4d30b08208b013d3178254e29e","modified":1554820643205},{"_id":"public/tags/微服务/index.html","hash":"bc31056756b20e546c52ea680577255cccf48cc0","modified":1554820643205},{"_id":"public/tags/专业术语/index.html","hash":"0678057a29a52c54a0aa8e062df6e538b4302ac2","modified":1554820643205},{"_id":"public/tags/oop/index.html","hash":"61bd3c6fbd4d9f4a8e302b2fc24d3a157aa6a207","modified":1554820643205},{"_id":"public/tags/IOC/index.html","hash":"51ee2fc634e7205a95355e357a8b3e42722eb08d","modified":1554820643205},{"_id":"public/tags/编程原则/index.html","hash":"86503eb825a055f9deeb389158692810c844569a","modified":1554820643205},{"_id":"public/tags/Angular/index.html","hash":"6498dc50b7c053da47884bfba542595355468253","modified":1554820643205},{"_id":"public/tags/面试/index.html","hash":"63cfb1fc4f8c5f2e047d208a1d193216efc810c8","modified":1554820643205},{"_id":"public/tags/web-component/index.html","hash":"9f2a7cd6928f2524df71ce77b14740f6ba80376b","modified":1554820643205},{"_id":"public/tags/特效/index.html","hash":"b5c4379a2b60cbaad3521b7a123a104f645df28f","modified":1554820643205},{"_id":"public/tags/破解/index.html","hash":"54b730196b24fc3df0f9b3283438fdd381e11fa3","modified":1554820643205},{"_id":"public/tags/TypeScript/index.html","hash":"02e5749f02bf6885aab3a4979f1e432fea2670fc","modified":1554820643205},{"_id":"public/tags/CI/index.html","hash":"d4e3e5a65d434426f549d603929d188037bdf4e6","modified":1554820643205},{"_id":"public/tags/Jenkins/index.html","hash":"3ec48d6d6869805721a2ad800016eec093172120","modified":1554820643206},{"_id":"public/tags/Centos/index.html","hash":"cdf4bc1b1c57bf142afbc8243a51a293703a3a9f","modified":1554820643206},{"_id":"public/tags/前端持续集成/index.html","hash":"553925f4009af2987d8ca154b719299bcdbf5447","modified":1554820643206},{"_id":"public/robots.txt","hash":"9ea605c9ceeea0daf677dc5405834a298fca9903","modified":1554820643244},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1554820643244},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554820643244},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554820643244},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1554820643244},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1554820643244},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1554820643244},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1554820643244},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554820643244},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1554820643244},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1554820643245},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554820643245},{"_id":"public/images/alipay.jpg","hash":"66b14acbff7c07594ab21624b1671ab49deb355f","modified":1554820643245},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554820643245},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1554820643245},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554820643245},{"_id":"public/images/myavatar.jpg","hash":"10545caf74010b6169944a4ff35b84f5ee32c6a2","modified":1554820643245},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1554820643245},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1554820643245},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1554820643245},{"_id":"public/images/my_favicon_small.ico","hash":"677e14b2949bd9d9a38bbeaa538fb26792350c17","modified":1554820643245},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554820643245},{"_id":"public/images/my_favicon.ico","hash":"32d7f41cfc03d1a81346691b4803a3124b7b0b8d","modified":1554820643245},{"_id":"public/images/wechatpay.jpg","hash":"6bc7e8c08d39c4f18acc22344f5322727160dfe3","modified":1554820643246},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1554820643246},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1554820643246},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554820643246},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554820643246},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554820643246},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554820643246},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554820643246},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554820643246},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1554820643246},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1554820643246},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1554820643246},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1554820643246},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1554820643246},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554820643246},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1554820643246},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554820644875},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554820644884},{"_id":"public/js/src/bai.js","hash":"46561541b1f1d5869ddf6c41d928354e6d8df93b","modified":1554820644902},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1554820644902},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1554820644906},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1554820644907},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1554820644910},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1554820644911},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1554820644914},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1554820644914},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1554820644914},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1554820644915},{"_id":"public/js/src/md5.js","hash":"9e95b3d2fad05cd68bbe721bd9fe79e524c47e71","modified":1554820644915},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1554820644915},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1554820644915},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554820644916},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1554820644916},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1554820644916},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1554820644916},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1554820644916},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1554820644916},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1554820644916},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1554820644917},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1554820644917},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1554820644918},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1554820644921},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1554820644921},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1554820644921},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1554820644921},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1554820644921},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1554820644921},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1554820644922},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1554820644924},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1554820644924},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1554820644926},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1554820644926},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1554820644926},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1554820644926},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1554820644926},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1554820644926},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1554820644926},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1554820644927},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1554820644927},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1554820644928},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1554820644929},{"_id":"public/css/main.css","hash":"68ef47652088a9dabffd4e13e022ce55637e6155","modified":1554820644931},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554820644932},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554820644932},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554820644933},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1554820644954},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1554820644954},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1554820644955},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1554820644955},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1554820644955},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554820644955},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1554820644955},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1554820644955},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1554820644993},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1554820644993},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1554820645020},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554820645023},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1554820645104},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1554820645104},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554820645110},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1554820645110},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554820645110},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1554820645110},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554820645111},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1554820645111},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1554820645226},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1554820645227},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1554820645260},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1554820645260},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1554820645478},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554820645478},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554820645501},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1554820645512},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1554820645516}],"Category":[{"name":"学习技巧","_id":"cju9w1w750006ssuwp340m3en"},{"name":"CSS","_id":"cju9w1w7f000bssuwk7f7zhri"},{"name":"hexo","_id":"cju9w1w7v000gssuwdpbe9k9i"},{"name":"Vue","_id":"cju9w1w9i000lssuwibvqy3k3"},{"name":"JavaScript","_id":"cju9w1wah000zssuwvdouin44"},{"name":"编程思想","_id":"cju9w1wbi001fssuw9qqu6mh1"},{"name":"C语言","_id":"cju9w1wc3001mssuwvme6w5p7"},{"name":"Linux","_id":"cju9w1wcq001sssuwhehaf667"},{"name":"NodeJs","_id":"cju9w1wdh0020ssuwniddh4v1"},{"name":"React","_id":"cju9w1wds0027ssuwhcdc5rq8"},{"name":"容器","_id":"cju9w1wfh002tssuwwvrudqx7"},{"name":"计算机基础","_id":"cju9w1wg10039ssuwc90j2kee"},{"name":"目录","_id":"cju9w1wh7003qssuwkwxhgyct"},{"name":"架构","_id":"cju9w1whi003zssuwad7qfday"},{"name":"专业术语","_id":"cju9w1whp0044ssuw6zt81m12"},{"name":"面试","_id":"cju9w1wi00049ssuww58zwpta"},{"name":"TypeScript","_id":"cju9w1wmn0063ssuw9b3ujt9e"},{"name":"CI","_id":"cju9w1wmx006dssuwebe29ker"}],"Data":[],"Page":[{"_content":"UCp8DVX1mJ","source":"baidu_verify_UCp8DVX1mJ.html","raw":"UCp8DVX1mJ","date":"2019-03-17T04:42:03.647Z","updated":"2019-03-17T04:42:03.647Z","path":"baidu_verify_UCp8DVX1mJ.html","title":"","comments":1,"layout":"page","_id":"cju9w1vmg0000ssuwrs1pdoy5","content":"UCp8DVX1mJ","site":{"data":{}},"excerpt":"","more":"UCp8DVX1mJ"},{"_content":"google-site-verification: google0e4fe1e51eb21469.html","source":"google0e4fe1e51eb21469.html","raw":"google-site-verification: google0e4fe1e51eb21469.html","date":"2019-03-17T04:56:40.346Z","updated":"2019-03-17T04:56:40.346Z","path":"google0e4fe1e51eb21469.html","title":"","comments":1,"layout":"page","_id":"cju9w1vmk0001ssuwxdz20jav","content":"google-site-verification: google0e4fe1e51eb21469.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google0e4fe1e51eb21469.html"},{"title":"分类","date":"2019-03-15T15:34:34.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-03-15 23:34:34\ntype: \"categories\"   #这部分是新添加的\n---\n","updated":"2019-03-16T03:57:15.981Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cju9w1w6v0003ssuwzjezjft1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-03-15T13:54:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-15 21:54:26\ntype: \"tags\" #新添加的内容\n---\n","updated":"2019-03-16T03:57:11.233Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cju9w1w710005ssuwb2n42sgd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSS如何了解新知识","date":"2019-03-16T08:56:22.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现\n\n并且还可以尝试着参与MDN的文章翻译及国外优质技术文章\n\n\n* MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference \n","source":"_posts/CSS如何了解新知识.md","raw":"---\ntitle: CSS如何了解新知识\ndate: 2019-03-16 16:56:22\ncategories: 学习技巧\ntags: [学习技巧, 学习渠道, css]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现\n\n并且还可以尝试着参与MDN的文章翻译及国外优质技术文章\n\n\n* MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference \n","slug":"CSS如何了解新知识","published":1,"updated":"2019-03-22T13:47:52.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w6p0002ssuw7d0d2elf","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现</p>\n<p>并且还可以尝试着参与MDN的文章翻译及国外优质技术文章</p>\n<ul>\n<li>MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference</a> </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现</p>\n<p>并且还可以尝试着参与MDN的文章翻译及国外优质技术文章</p>\n<ul>\n<li>MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference</a> </li>\n</ul>\n"},{"title":"Js与CSS变量操作","date":"2019-03-16T09:47:07.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排\n\n一起来看看如何操作吧~\n> 变量虽好， 不可滥用哦\n\n### 定义一个简单的变量\n```CSS\n/* 定义css 变量 */\n:root {\n  --backgroundColor: pink;\n}\n\nbody {\n  background-color: var(--backgroundColor);\n}\n```\n\n### 创建一个按钮\n```HTML\n<body>\n  <button id=\"btn\">点我改变背景</button>\n</body>\n```\n\n### 获取root元素并绑定按钮的点击事件\n```JavaScript\n<script>\nvar root = document.documentElement\n\nbtn.onclick = function() {\n  // 将变量修改为天蓝色\n  root.style.setProperty('--backgroundColor', 'skyblue')\n}\n</script>\n```\n\n\n### 结果对比\n\n点击前\n![按钮点击前](http://img.nixiaolei.com/2019-03-16-17-52-45.png)\n\n按钮点击后\n![按钮点击后](http://img.nixiaolei.com/2019-03-16-17-53-39.png)\n\n\n\n非常Nice~\n\n\n利用这个特性实现更多的可能吧！","source":"_posts/Js与CSS变量操作.md","raw":"---\ntitle: Js与CSS变量操作\ndate: 2019-03-16 17:47:07\ncategories: CSS\ntags: [JavaScript, css]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排\n\n一起来看看如何操作吧~\n> 变量虽好， 不可滥用哦\n\n### 定义一个简单的变量\n```CSS\n/* 定义css 变量 */\n:root {\n  --backgroundColor: pink;\n}\n\nbody {\n  background-color: var(--backgroundColor);\n}\n```\n\n### 创建一个按钮\n```HTML\n<body>\n  <button id=\"btn\">点我改变背景</button>\n</body>\n```\n\n### 获取root元素并绑定按钮的点击事件\n```JavaScript\n<script>\nvar root = document.documentElement\n\nbtn.onclick = function() {\n  // 将变量修改为天蓝色\n  root.style.setProperty('--backgroundColor', 'skyblue')\n}\n</script>\n```\n\n\n### 结果对比\n\n点击前\n![按钮点击前](http://img.nixiaolei.com/2019-03-16-17-52-45.png)\n\n按钮点击后\n![按钮点击后](http://img.nixiaolei.com/2019-03-16-17-53-39.png)\n\n\n\n非常Nice~\n\n\n利用这个特性实现更多的可能吧！","slug":"Js与CSS变量操作","published":1,"updated":"2019-03-22T13:48:14.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w6y0004ssuwknqxb1mx","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n<p>就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排</p>\n<p>一起来看看如何操作吧~</p>\n<blockquote>\n<p>变量虽好， 不可滥用哦</p>\n</blockquote>\n<h3 id=\"定义一个简单的变量\"><a href=\"#定义一个简单的变量\" class=\"headerlink\" title=\"定义一个简单的变量\"></a>定义一个简单的变量</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义css 变量 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--backgroundColor</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--backgroundColor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建一个按钮\"><a href=\"#创建一个按钮\" class=\"headerlink\" title=\"创建一个按钮\"></a>创建一个按钮</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>点我改变背景<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取root元素并绑定按钮的点击事件\"><a href=\"#获取root元素并绑定按钮的点击事件\" class=\"headerlink\" title=\"获取root元素并绑定按钮的点击事件\"></a>获取root元素并绑定按钮的点击事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"built_in\">document</span>.documentElement</span><br><span class=\"line\"></span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将变量修改为天蓝色</span></span><br><span class=\"line\">  root.style.setProperty(<span class=\"string\">'--backgroundColor'</span>, <span class=\"string\">'skyblue'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"结果对比\"><a href=\"#结果对比\" class=\"headerlink\" title=\"结果对比\"></a>结果对比</h3><p>点击前<br><img src=\"http://img.nixiaolei.com/2019-03-16-17-52-45.png\" alt=\"按钮点击前\"></p>\n<p>按钮点击后<br><img src=\"http://img.nixiaolei.com/2019-03-16-17-53-39.png\" alt=\"按钮点击后\"></p>\n<p>非常Nice~</p>\n<p>利用这个特性实现更多的可能吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n<p>就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排</p>\n<p>一起来看看如何操作吧~</p>\n<blockquote>\n<p>变量虽好， 不可滥用哦</p>\n</blockquote>\n<h3 id=\"定义一个简单的变量\"><a href=\"#定义一个简单的变量\" class=\"headerlink\" title=\"定义一个简单的变量\"></a>定义一个简单的变量</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义css 变量 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--backgroundColor</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--backgroundColor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建一个按钮\"><a href=\"#创建一个按钮\" class=\"headerlink\" title=\"创建一个按钮\"></a>创建一个按钮</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>点我改变背景<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取root元素并绑定按钮的点击事件\"><a href=\"#获取root元素并绑定按钮的点击事件\" class=\"headerlink\" title=\"获取root元素并绑定按钮的点击事件\"></a>获取root元素并绑定按钮的点击事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"built_in\">document</span>.documentElement</span><br><span class=\"line\"></span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将变量修改为天蓝色</span></span><br><span class=\"line\">  root.style.setProperty(<span class=\"string\">'--backgroundColor'</span>, <span class=\"string\">'skyblue'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"结果对比\"><a href=\"#结果对比\" class=\"headerlink\" title=\"结果对比\"></a>结果对比</h3><p>点击前<br><img src=\"http://img.nixiaolei.com/2019-03-16-17-52-45.png\" alt=\"按钮点击前\"></p>\n<p>按钮点击后<br><img src=\"http://img.nixiaolei.com/2019-03-16-17-53-39.png\" alt=\"按钮点击后\"></p>\n<p>非常Nice~</p>\n<p>利用这个特性实现更多的可能吧！</p>\n"},{"title":"hexo中如何使用本地图片","date":"2019-03-16T03:20:19.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n首先需要修改`_config.yml`配置文件`post_asset_folder`项为`true`\n\n使用命令创建博客\n```\nhexo new 你的文章名称\n```\n\n他会生成`.md`文件及一个对应的文件夹， 我们将图片放到该文件夹中\n\n\n\n## 方法一\n\n在文章中这样插入图片\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n\n\n## 方法二\n> 这个方法在首页无法正常预览图片\n\n\n安装一下这个插件\n\n```shell\nnpm install hexo-asset-image --save\n```\n\n\n在文章中这样插入图片\n```\n![这是一张图片](xxxx.png)\n```\n\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n参考文献\n> http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/","source":"_posts/hexo中如何使用本地图片.md","raw":"---\ntitle: hexo中如何使用本地图片\ndate: 2019-03-16 11:20:19\ncategories: hexo\ntags: hexo\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n首先需要修改`_config.yml`配置文件`post_asset_folder`项为`true`\n\n使用命令创建博客\n```\nhexo new 你的文章名称\n```\n\n他会生成`.md`文件及一个对应的文件夹， 我们将图片放到该文件夹中\n\n\n\n## 方法一\n\n在文章中这样插入图片\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n\n\n## 方法二\n> 这个方法在首页无法正常预览图片\n\n\n安装一下这个插件\n\n```shell\nnpm install hexo-asset-image --save\n```\n\n\n在文章中这样插入图片\n```\n![这是一张图片](xxxx.png)\n```\n\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n参考文献\n> http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/","slug":"hexo中如何使用本地图片","published":1,"updated":"2019-03-20T14:45:28.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w780008ssuwmyf7fnh0","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>首先需要修改<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code></p>\n<p>使用命令创建博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 你的文章名称</span><br></pre></td></tr></table></figure></p>\n<p>他会生成<code>.md</code>文件及一个对应的文件夹， 我们将图片放到该文件夹中</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>在文章中这样插入图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下:</p>\n<p><img src=\"http://img.nixiaolei.com/pika.png\" alt=\"皮卡皮卡\"></p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><blockquote>\n<p>这个方法在首页无法正常预览图片</p>\n</blockquote>\n<p>安装一下这个插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>在文章中这样插入图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![这是一张图片](xxxx.png)</span><br></pre></td></tr></table></figure></p>\n<p>效果如下:</p>\n<p><img src=\"http://img.nixiaolei.com/pika.png\" alt=\"皮卡皮卡\"></p>\n<p>参考文献</p>\n<blockquote>\n<p><a href=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/\" target=\"_blank\" rel=\"noopener\">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>首先需要修改<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code></p>\n<p>使用命令创建博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 你的文章名称</span><br></pre></td></tr></table></figure></p>\n<p>他会生成<code>.md</code>文件及一个对应的文件夹， 我们将图片放到该文件夹中</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>在文章中这样插入图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下:</p>\n<p><img src=\"http://img.nixiaolei.com/pika.png\" alt=\"皮卡皮卡\"></p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><blockquote>\n<p>这个方法在首页无法正常预览图片</p>\n</blockquote>\n<p>安装一下这个插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>在文章中这样插入图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![这是一张图片](xxxx.png)</span><br></pre></td></tr></table></figure></p>\n<p>效果如下:</p>\n<p><img src=\"http://img.nixiaolei.com/pika.png\" alt=\"皮卡皮卡\"></p>\n<p>参考文献</p>\n<blockquote>\n<p><a href=\"http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/\" target=\"_blank\" rel=\"noopener\">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p>\n</blockquote>\n"},{"title":"vue的add命令与npm的小区别","date":"2019-04-24T06:42:25.000Z","_content":"\n## add\n如果你下载的库, 特别是 Ui 库, 希望对脚手架结构产生影响,\n\n那就选择 \n> vue add xxx\n\n## npm\n如果不希望对脚手架结构产生影响, 只是单纯的使用, 比如 axios 这个插件\n那就选择 \n> npm install xxx\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue的add命令与npm的小区别.md","raw":"---\ntitle: vue的add命令与npm的小区别\ndate: 2019-04-24 14:42:25\ncategories: Vue\ntags: Vue\n---\n\n## add\n如果你下载的库, 特别是 Ui 库, 希望对脚手架结构产生影响,\n\n那就选择 \n> vue add xxx\n\n## npm\n如果不希望对脚手架结构产生影响, 只是单纯的使用, 比如 axios 这个插件\n那就选择 \n> npm install xxx\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue的add命令与npm的小区别","published":1,"updated":"2019-04-06T11:24:11.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w7d0009ssuwm442p8mv","content":"<h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><p>如果你下载的库, 特别是 Ui 库, 希望对脚手架结构产生影响,</p>\n<p>那就选择 </p>\n<blockquote>\n<p>vue add xxx</p>\n</blockquote>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>如果不希望对脚手架结构产生影响, 只是单纯的使用, 比如 axios 这个插件<br>那就选择 </p>\n<blockquote>\n<p>npm install xxx</p>\n</blockquote>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><p>如果你下载的库, 特别是 Ui 库, 希望对脚手架结构产生影响,</p>\n<p>那就选择 </p>\n<blockquote>\n<p>vue add xxx</p>\n</blockquote>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>如果不希望对脚手架结构产生影响, 只是单纯的使用, 比如 axios 这个插件<br>那就选择 </p>\n<blockquote>\n<p>npm install xxx</p>\n</blockquote>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"css分层&命名规范","date":"2019-03-16T15:32:55.000Z","_content":"\n为什么要分层? \n\n* CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。\n* 避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。\n* 有责任感地去命名你的选择器\n\n\n有哪些分层理论? \n* SMACSS\n* BEM\n* SUIT\n* ACSS\n* ITCSS\n\n\n\n## BEM\n\nBEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )\n\n* block - 代表了更高级别的抽象或组件\n* block__element - 代表.block的后代， 用于形成一个完整的.block的整体。\n* block--modifier - 代表.block 的不同状态或不同版本。\n* 修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )\n\n```HTML\n  <!-- container 是大容器 -->\n  <div class=\"container\">\n    <div class=\"menu\">\n      <div class=\"menu--item menu--item__active\">首页</div>\n      <div class=\"menu--item\">新闻</div>\n      <div class=\"menu--item\">消息</div>\n    </div>\n  </div>\n```","source":"_posts/css分层-命名规范.md","raw":"---\ntitle: css分层&命名规范\ndate: 2019-03-16 23:32:55\ncategories: CSS\ntags: [css, 命名规范]\n---\n\n为什么要分层? \n\n* CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。\n* 避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。\n* 有责任感地去命名你的选择器\n\n\n有哪些分层理论? \n* SMACSS\n* BEM\n* SUIT\n* ACSS\n* ITCSS\n\n\n\n## BEM\n\nBEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )\n\n* block - 代表了更高级别的抽象或组件\n* block__element - 代表.block的后代， 用于形成一个完整的.block的整体。\n* block--modifier - 代表.block 的不同状态或不同版本。\n* 修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )\n\n```HTML\n  <!-- container 是大容器 -->\n  <div class=\"container\">\n    <div class=\"menu\">\n      <div class=\"menu--item menu--item__active\">首页</div>\n      <div class=\"menu--item\">新闻</div>\n      <div class=\"menu--item\">消息</div>\n    </div>\n  </div>\n```","slug":"css分层-命名规范","published":1,"updated":"2019-03-22T13:47:48.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w7e000assuwas1k1omk","content":"<p>为什么要分层? </p>\n<ul>\n<li>CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。</li>\n<li>避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。</li>\n<li>有责任感地去命名你的选择器</li>\n</ul>\n<p>有哪些分层理论? </p>\n<ul>\n<li>SMACSS</li>\n<li>BEM</li>\n<li>SUIT</li>\n<li>ACSS</li>\n<li>ITCSS</li>\n</ul>\n<h2 id=\"BEM\"><a href=\"#BEM\" class=\"headerlink\" title=\"BEM\"></a>BEM</h2><p>BEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )</p>\n<ul>\n<li>block - 代表了更高级别的抽象或组件</li>\n<li>block__element - 代表.block的后代， 用于形成一个完整的.block的整体。</li>\n<li>block–modifier - 代表.block 的不同状态或不同版本。</li>\n<li>修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- container 是大容器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item menu--item__active\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item\"</span>&gt;</span>新闻<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item\"</span>&gt;</span>消息<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>为什么要分层? </p>\n<ul>\n<li>CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。</li>\n<li>避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。</li>\n<li>有责任感地去命名你的选择器</li>\n</ul>\n<p>有哪些分层理论? </p>\n<ul>\n<li>SMACSS</li>\n<li>BEM</li>\n<li>SUIT</li>\n<li>ACSS</li>\n<li>ITCSS</li>\n</ul>\n<h2 id=\"BEM\"><a href=\"#BEM\" class=\"headerlink\" title=\"BEM\"></a>BEM</h2><p>BEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )</p>\n<ul>\n<li>block - 代表了更高级别的抽象或组件</li>\n<li>block__element - 代表.block的后代， 用于形成一个完整的.block的整体。</li>\n<li>block–modifier - 代表.block 的不同状态或不同版本。</li>\n<li>修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- container 是大容器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item menu--item__active\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item\"</span>&gt;</span>新闻<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu--item\"</span>&gt;</span>消息<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"this的软绑定和硬绑定","date":"2019-03-30T06:11:56.000Z","_content":"\n被调用的函数示例\n```JavaScript\nfunction fn() {\n  // 如果严格模式， \"use strict\"加在此处\n  console.log(this)\n}\n```\n\n## 软绑定\n```JavaScript\nfn() // window\n```\n\"use strict\" 严格模式的软绑定\n\n```JavaScript\nfn()  // undefined\n```\n\n## 硬绑定\n```JavaScript\nfn.apply({},['a'])  // {}\n```\n\n忽略硬绑定， 使用软绑定\n```JavaScript\nfn.apply(null,['a'])  // window\n```\n\n\"use strict\" 严格模式\n```JavaScript\nfn.apply({},['a'])  // {}\nfn.apply(null,['a'])  // null\n```\n\n\n\n\n\n","source":"_posts/this的软绑定和硬绑定.md","raw":"---\ntitle: this的软绑定和硬绑定\ndate: 2019-03-30 14:11:56\ncategories: JavaScript\ntags: JavaScript\n---\n\n被调用的函数示例\n```JavaScript\nfunction fn() {\n  // 如果严格模式， \"use strict\"加在此处\n  console.log(this)\n}\n```\n\n## 软绑定\n```JavaScript\nfn() // window\n```\n\"use strict\" 严格模式的软绑定\n\n```JavaScript\nfn()  // undefined\n```\n\n## 硬绑定\n```JavaScript\nfn.apply({},['a'])  // {}\n```\n\n忽略硬绑定， 使用软绑定\n```JavaScript\nfn.apply(null,['a'])  // window\n```\n\n\"use strict\" 严格模式\n```JavaScript\nfn.apply({},['a'])  // {}\nfn.apply(null,['a'])  // null\n```\n\n\n\n\n\n","slug":"this的软绑定和硬绑定","published":1,"updated":"2019-03-30T06:26:53.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w7g000dssuwkys574np","content":"<p>被调用的函数示例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果严格模式， \"use strict\"加在此处</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"软绑定\"><a href=\"#软绑定\" class=\"headerlink\" title=\"软绑定\"></a>软绑定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>“use strict” 严格模式的软绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn()  <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"硬绑定\"><a href=\"#硬绑定\" class=\"headerlink\" title=\"硬绑定\"></a>硬绑定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.apply(&#123;&#125;,[<span class=\"string\">'a'</span>])  <span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>忽略硬绑定， 使用软绑定<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.apply(<span class=\"literal\">null</span>,[<span class=\"string\">'a'</span>])  <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure></p>\n<p>“use strict” 严格模式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.apply(&#123;&#125;,[<span class=\"string\">'a'</span>])  <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\">fn.apply(<span class=\"literal\">null</span>,[<span class=\"string\">'a'</span>])  <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>被调用的函数示例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果严格模式， \"use strict\"加在此处</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"软绑定\"><a href=\"#软绑定\" class=\"headerlink\" title=\"软绑定\"></a>软绑定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>“use strict” 严格模式的软绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn()  <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"硬绑定\"><a href=\"#硬绑定\" class=\"headerlink\" title=\"硬绑定\"></a>硬绑定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.apply(&#123;&#125;,[<span class=\"string\">'a'</span>])  <span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>忽略硬绑定， 使用软绑定<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.apply(<span class=\"literal\">null</span>,[<span class=\"string\">'a'</span>])  <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure></p>\n<p>“use strict” 严格模式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.apply(&#123;&#125;,[<span class=\"string\">'a'</span>])  <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\">fn.apply(<span class=\"literal\">null</span>,[<span class=\"string\">'a'</span>])  <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"vuecli3脚手架环境变量","date":"2019-04-24T06:44:02.000Z","_content":"\n## 环境变量\n> 环境变量, 在开发和生产环境中会经常使用到\n\n### 举一个例子\n> 在开发过程中我们使用一个本地的接口      \n> 但是在我们打包上线的时候, 我们会使用线上的接口      \n> 这时候我们就可以通过环境变量来配置\n\n\n### 如何创建环境变量\n> 进入脚手架根目录 , 新建一个 .env 文件  , 这就是一个环境变量文件     \n\n**.env**              优先级最低的配置文件, 两种环境都可以用     \n**.env.development**  开发环境, 时优先使用的环境变量     \n**.env.production**   生产环节, 打包时使用的环境变量     \n\n\n#### 环境变量语法\n> VUE_APP_衔接上一个名字='你的变量'\n\n如: \n> VUE_APP_URL='https://baidu.com'\n\n\n\n### 如何在组件中获取环境变量\n> process.env.VUE_APP_URL     \n> 然后挂载到当前组件的data 上 ,如下\n\n```\ndata(){\n    return {\n        url: process.env.VUE_APP_URL\n    }\n}\n\n```\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vuecli3脚手架环境变量.md","raw":"---\ntitle: vuecli3脚手架环境变量\ndate: 2019-04-24 14:44:02\ncategories: Vue\ntags: Vue\n---\n\n## 环境变量\n> 环境变量, 在开发和生产环境中会经常使用到\n\n### 举一个例子\n> 在开发过程中我们使用一个本地的接口      \n> 但是在我们打包上线的时候, 我们会使用线上的接口      \n> 这时候我们就可以通过环境变量来配置\n\n\n### 如何创建环境变量\n> 进入脚手架根目录 , 新建一个 .env 文件  , 这就是一个环境变量文件     \n\n**.env**              优先级最低的配置文件, 两种环境都可以用     \n**.env.development**  开发环境, 时优先使用的环境变量     \n**.env.production**   生产环节, 打包时使用的环境变量     \n\n\n#### 环境变量语法\n> VUE_APP_衔接上一个名字='你的变量'\n\n如: \n> VUE_APP_URL='https://baidu.com'\n\n\n\n### 如何在组件中获取环境变量\n> process.env.VUE_APP_URL     \n> 然后挂载到当前组件的data 上 ,如下\n\n```\ndata(){\n    return {\n        url: process.env.VUE_APP_URL\n    }\n}\n\n```\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vuecli3脚手架环境变量","published":1,"updated":"2019-04-06T11:24:06.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w7m000essuwwp1mwnyi","content":"<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><blockquote>\n<p>环境变量, 在开发和生产环境中会经常使用到</p>\n</blockquote>\n<h3 id=\"举一个例子\"><a href=\"#举一个例子\" class=\"headerlink\" title=\"举一个例子\"></a>举一个例子</h3><blockquote>\n<p>在开发过程中我们使用一个本地的接口<br>但是在我们打包上线的时候, 我们会使用线上的接口<br>这时候我们就可以通过环境变量来配置</p>\n</blockquote>\n<h3 id=\"如何创建环境变量\"><a href=\"#如何创建环境变量\" class=\"headerlink\" title=\"如何创建环境变量\"></a>如何创建环境变量</h3><blockquote>\n<p>进入脚手架根目录 , 新建一个 .env 文件  , 这就是一个环境变量文件     </p>\n</blockquote>\n<p><strong>.env</strong>              优先级最低的配置文件, 两种环境都可以用<br><strong>.env.development</strong>  开发环境, 时优先使用的环境变量<br><strong>.env.production</strong>   生产环节, 打包时使用的环境变量     </p>\n<h4 id=\"环境变量语法\"><a href=\"#环境变量语法\" class=\"headerlink\" title=\"环境变量语法\"></a>环境变量语法</h4><blockquote>\n<p>VUE_APP_衔接上一个名字=’你的变量’</p>\n</blockquote>\n<p>如: </p>\n<blockquote>\n<p>VUE_APP_URL=’<a href=\"https://baidu.com&#39;\" target=\"_blank\" rel=\"noopener\">https://baidu.com&#39;</a></p>\n</blockquote>\n<h3 id=\"如何在组件中获取环境变量\"><a href=\"#如何在组件中获取环境变量\" class=\"headerlink\" title=\"如何在组件中获取环境变量\"></a>如何在组件中获取环境变量</h3><blockquote>\n<p>process.env.VUE_APP_URL<br>然后挂载到当前组件的data 上 ,如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        url: process.env.VUE_APP_URL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><blockquote>\n<p>环境变量, 在开发和生产环境中会经常使用到</p>\n</blockquote>\n<h3 id=\"举一个例子\"><a href=\"#举一个例子\" class=\"headerlink\" title=\"举一个例子\"></a>举一个例子</h3><blockquote>\n<p>在开发过程中我们使用一个本地的接口<br>但是在我们打包上线的时候, 我们会使用线上的接口<br>这时候我们就可以通过环境变量来配置</p>\n</blockquote>\n<h3 id=\"如何创建环境变量\"><a href=\"#如何创建环境变量\" class=\"headerlink\" title=\"如何创建环境变量\"></a>如何创建环境变量</h3><blockquote>\n<p>进入脚手架根目录 , 新建一个 .env 文件  , 这就是一个环境变量文件     </p>\n</blockquote>\n<p><strong>.env</strong>              优先级最低的配置文件, 两种环境都可以用<br><strong>.env.development</strong>  开发环境, 时优先使用的环境变量<br><strong>.env.production</strong>   生产环节, 打包时使用的环境变量     </p>\n<h4 id=\"环境变量语法\"><a href=\"#环境变量语法\" class=\"headerlink\" title=\"环境变量语法\"></a>环境变量语法</h4><blockquote>\n<p>VUE_APP_衔接上一个名字=’你的变量’</p>\n</blockquote>\n<p>如: </p>\n<blockquote>\n<p>VUE_APP_URL=’<a href=\"https://baidu.com&#39;\" target=\"_blank\" rel=\"noopener\">https://baidu.com&#39;</a></p>\n</blockquote>\n<h3 id=\"如何在组件中获取环境变量\"><a href=\"#如何在组件中获取环境变量\" class=\"headerlink\" title=\"如何在组件中获取环境变量\"></a>如何在组件中获取环境变量</h3><blockquote>\n<p>process.env.VUE_APP_URL<br>然后挂载到当前组件的data 上 ,如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        url: process.env.VUE_APP_URL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"【CSS全景】淘宝造物节H5原理","date":"2019-03-18T07:49:50.000Z","_content":"\n\n![](http://img.nixiaolei.com/zaowu.gif)\n\n2016年的淘宝造物节邀请函， 太牛了， 不过，我们这回先不研究他的入场特效，先研究下它的全景是如何实现的\n\n\n## 一、 载入图片, 定位至统一位置\n>因为20张图片被定位到统一地方, 所以所有图片都叠在一起了\n\n>此时效果\n\n\n![](http://img.nixiaolei.com/taobao01.png)\n\n## 二、依照Y轴旋转图片\n>先说下为什么要依照y轴:  我们需要把图片围绕成一个环形, 类似于 木桶的每一块木板,   图片就是木板, 按图片的顺序旋转自各自的角度, 目前也是原地旋转, 所以图片依旧叠加在一起\n\n>素材有20张图片, 那每张的旋转角度就是 360 / 20 = 18度, 每张旋转的度数在前一张的基础上累加 18 度, \n\n>这里注意注意注意: 因为是按图片中心的Y轴旋转, 所以同一个度数会有两张图片,  比如: 0度的图片, 头在0度, 尾在90度,    然后当轮到头在90度的图片时, 他的尾在 0 度, 所以会有同一个度数两张图片的现象\n\n\n>此时效果\n\n![](http://img.nixiaolei.com/taobao02.png)\n\n\n>为了方便理解, 切换成上帝视角, ,  所有图片围绕中心点旋转\n\n![](http://img.nixiaolei.com/taobao03.png)\n\n![](http://img.nixiaolei.com/taobao04.png)\n\n\n\n## 三、将图片沿着各自Z轴向外推\n>现在木板(也就是每一张图片)是穿插在一起的, 我们需要让他们远离中心点, 拉开距离, 让他,们边缘连接而不是这样交叉在一起,  才能形成一个圆\n\n### 先了解每一块木板怎么推\n>简单的画了个前后的效果图,  用的是上帝视角, 也就是你低头看一个木桶的视角\n\n\n\n![](http://img.nixiaolei.com/taobao05.png)\n\n\n### 如何计算该推多少距离\n>做一道三角函数数学题\n>\n>画的角度不太对别介意\n\n![](http://img.nixiaolei.com/taobao06.png)\n\n>设一共12条线,  每条长200px(此时的长就对应图片的宽) ,  求将橙线移动到图中最终位置的距离 \"黑线\",\n```JavaScript\n// 先求旋转度数\n// 然后取度数的一半\n360 / 12 / 2 = 15 度\n// 得知直角底边长度\n200 / 2 = 100px\n// 根据度数得知 tan, 顺便说下, tan是对边比邻边\ntan15°= 0.26794\n// 求出黑线\n100PX / 黑线 = 0.26794\n黑线约等于 373.2px\n```\n\n## js计算时注意\n1. Math.tan 接收的是弧度单位\n2. Math.PI 表示的是一个 Π\n3. 360度 = 2Π \n>计算出每张图片之间的形成的弧度\n```JavaScript\n // 假设图片数量是 8 张\n// 因为 360 = 2Π\n// 1度 = Π / 180\n// 每份的角度是\nconst deg = 360 / 8 // 此时为 45\n// 一份的弧度就是 每份弧度 * 旋转角度的一半\n// 最后结果就等于 Π / 图片数量\n( Math.PI / 180 ) * ( 45 / 2 )  ==>  Math.PI / 8\n```\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【CSS全景】淘宝造物节H5原理.md","raw":"---\ntitle: 【CSS全景】淘宝造物节H5原理\ndate: 2019-03-18 15:49:50\ncategories: CSS\ntags: [css, 3D]\n---\n\n\n![](http://img.nixiaolei.com/zaowu.gif)\n\n2016年的淘宝造物节邀请函， 太牛了， 不过，我们这回先不研究他的入场特效，先研究下它的全景是如何实现的\n\n\n## 一、 载入图片, 定位至统一位置\n>因为20张图片被定位到统一地方, 所以所有图片都叠在一起了\n\n>此时效果\n\n\n![](http://img.nixiaolei.com/taobao01.png)\n\n## 二、依照Y轴旋转图片\n>先说下为什么要依照y轴:  我们需要把图片围绕成一个环形, 类似于 木桶的每一块木板,   图片就是木板, 按图片的顺序旋转自各自的角度, 目前也是原地旋转, 所以图片依旧叠加在一起\n\n>素材有20张图片, 那每张的旋转角度就是 360 / 20 = 18度, 每张旋转的度数在前一张的基础上累加 18 度, \n\n>这里注意注意注意: 因为是按图片中心的Y轴旋转, 所以同一个度数会有两张图片,  比如: 0度的图片, 头在0度, 尾在90度,    然后当轮到头在90度的图片时, 他的尾在 0 度, 所以会有同一个度数两张图片的现象\n\n\n>此时效果\n\n![](http://img.nixiaolei.com/taobao02.png)\n\n\n>为了方便理解, 切换成上帝视角, ,  所有图片围绕中心点旋转\n\n![](http://img.nixiaolei.com/taobao03.png)\n\n![](http://img.nixiaolei.com/taobao04.png)\n\n\n\n## 三、将图片沿着各自Z轴向外推\n>现在木板(也就是每一张图片)是穿插在一起的, 我们需要让他们远离中心点, 拉开距离, 让他,们边缘连接而不是这样交叉在一起,  才能形成一个圆\n\n### 先了解每一块木板怎么推\n>简单的画了个前后的效果图,  用的是上帝视角, 也就是你低头看一个木桶的视角\n\n\n\n![](http://img.nixiaolei.com/taobao05.png)\n\n\n### 如何计算该推多少距离\n>做一道三角函数数学题\n>\n>画的角度不太对别介意\n\n![](http://img.nixiaolei.com/taobao06.png)\n\n>设一共12条线,  每条长200px(此时的长就对应图片的宽) ,  求将橙线移动到图中最终位置的距离 \"黑线\",\n```JavaScript\n// 先求旋转度数\n// 然后取度数的一半\n360 / 12 / 2 = 15 度\n// 得知直角底边长度\n200 / 2 = 100px\n// 根据度数得知 tan, 顺便说下, tan是对边比邻边\ntan15°= 0.26794\n// 求出黑线\n100PX / 黑线 = 0.26794\n黑线约等于 373.2px\n```\n\n## js计算时注意\n1. Math.tan 接收的是弧度单位\n2. Math.PI 表示的是一个 Π\n3. 360度 = 2Π \n>计算出每张图片之间的形成的弧度\n```JavaScript\n // 假设图片数量是 8 张\n// 因为 360 = 2Π\n// 1度 = Π / 180\n// 每份的角度是\nconst deg = 360 / 8 // 此时为 45\n// 一份的弧度就是 每份弧度 * 旋转角度的一半\n// 最后结果就等于 Π / 图片数量\n( Math.PI / 180 ) * ( 45 / 2 )  ==>  Math.PI / 8\n```\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【CSS全景】淘宝造物节H5原理","published":1,"updated":"2019-03-28T11:58:42.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w80000issuwwj93monp","content":"<p><img src=\"http://img.nixiaolei.com/zaowu.gif\" alt></p>\n<p>2016年的淘宝造物节邀请函， 太牛了， 不过，我们这回先不研究他的入场特效，先研究下它的全景是如何实现的</p>\n<h2 id=\"一、-载入图片-定位至统一位置\"><a href=\"#一、-载入图片-定位至统一位置\" class=\"headerlink\" title=\"一、 载入图片, 定位至统一位置\"></a>一、 载入图片, 定位至统一位置</h2><blockquote>\n<p>因为20张图片被定位到统一地方, 所以所有图片都叠在一起了</p>\n</blockquote>\n<blockquote>\n<p>此时效果</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao01.png\" alt></p>\n<h2 id=\"二、依照Y轴旋转图片\"><a href=\"#二、依照Y轴旋转图片\" class=\"headerlink\" title=\"二、依照Y轴旋转图片\"></a>二、依照Y轴旋转图片</h2><blockquote>\n<p>先说下为什么要依照y轴:  我们需要把图片围绕成一个环形, 类似于 木桶的每一块木板,   图片就是木板, 按图片的顺序旋转自各自的角度, 目前也是原地旋转, 所以图片依旧叠加在一起</p>\n</blockquote>\n<blockquote>\n<p>素材有20张图片, 那每张的旋转角度就是 360 / 20 = 18度, 每张旋转的度数在前一张的基础上累加 18 度, </p>\n</blockquote>\n<blockquote>\n<p>这里注意注意注意: 因为是按图片中心的Y轴旋转, 所以同一个度数会有两张图片,  比如: 0度的图片, 头在0度, 尾在90度,    然后当轮到头在90度的图片时, 他的尾在 0 度, 所以会有同一个度数两张图片的现象</p>\n</blockquote>\n<blockquote>\n<p>此时效果</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao02.png\" alt></p>\n<blockquote>\n<p>为了方便理解, 切换成上帝视角, ,  所有图片围绕中心点旋转</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao03.png\" alt></p>\n<p><img src=\"http://img.nixiaolei.com/taobao04.png\" alt></p>\n<h2 id=\"三、将图片沿着各自Z轴向外推\"><a href=\"#三、将图片沿着各自Z轴向外推\" class=\"headerlink\" title=\"三、将图片沿着各自Z轴向外推\"></a>三、将图片沿着各自Z轴向外推</h2><blockquote>\n<p>现在木板(也就是每一张图片)是穿插在一起的, 我们需要让他们远离中心点, 拉开距离, 让他,们边缘连接而不是这样交叉在一起,  才能形成一个圆</p>\n</blockquote>\n<h3 id=\"先了解每一块木板怎么推\"><a href=\"#先了解每一块木板怎么推\" class=\"headerlink\" title=\"先了解每一块木板怎么推\"></a>先了解每一块木板怎么推</h3><blockquote>\n<p>简单的画了个前后的效果图,  用的是上帝视角, 也就是你低头看一个木桶的视角</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao05.png\" alt></p>\n<h3 id=\"如何计算该推多少距离\"><a href=\"#如何计算该推多少距离\" class=\"headerlink\" title=\"如何计算该推多少距离\"></a>如何计算该推多少距离</h3><blockquote>\n<p>做一道三角函数数学题</p>\n<p>画的角度不太对别介意</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao06.png\" alt></p>\n<blockquote>\n<p>设一共12条线,  每条长200px(此时的长就对应图片的宽) ,  求将橙线移动到图中最终位置的距离 “黑线”,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先求旋转度数</span></span><br><span class=\"line\"><span class=\"comment\">// 然后取度数的一半</span></span><br><span class=\"line\"><span class=\"number\">360</span> / <span class=\"number\">12</span> / <span class=\"number\">2</span> = <span class=\"number\">15</span> 度</span><br><span class=\"line\"><span class=\"comment\">// 得知直角底边长度</span></span><br><span class=\"line\"><span class=\"number\">200</span> / <span class=\"number\">2</span> = <span class=\"number\">100</span>px</span><br><span class=\"line\"><span class=\"comment\">// 根据度数得知 tan, 顺便说下, tan是对边比邻边</span></span><br><span class=\"line\">tan15°= <span class=\"number\">0.26794</span></span><br><span class=\"line\"><span class=\"comment\">// 求出黑线</span></span><br><span class=\"line\"><span class=\"number\">100</span>PX / 黑线 = <span class=\"number\">0.26794</span></span><br><span class=\"line\">黑线约等于 <span class=\"number\">373.2</span>px</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"js计算时注意\"><a href=\"#js计算时注意\" class=\"headerlink\" title=\"js计算时注意\"></a>js计算时注意</h2><ol>\n<li>Math.tan 接收的是弧度单位</li>\n<li>Math.PI 表示的是一个 Π</li>\n<li>360度 = 2Π <blockquote>\n<p>计算出每张图片之间的形成的弧度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 假设图片数量是 8 张</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 360 = 2Π</span></span><br><span class=\"line\"><span class=\"comment\">// 1度 = Π / 180</span></span><br><span class=\"line\"><span class=\"comment\">// 每份的角度是</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> deg = <span class=\"number\">360</span> / <span class=\"number\">8</span> <span class=\"comment\">// 此时为 45</span></span><br><span class=\"line\"><span class=\"comment\">// 一份的弧度就是 每份弧度 * 旋转角度的一半</span></span><br><span class=\"line\"><span class=\"comment\">// 最后结果就等于 Π / 图片数量</span></span><br><span class=\"line\">( <span class=\"built_in\">Math</span>.PI / <span class=\"number\">180</span> ) * ( <span class=\"number\">45</span> / <span class=\"number\">2</span> )  ==&gt;  <span class=\"built_in\">Math</span>.PI / <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://img.nixiaolei.com/zaowu.gif\" alt></p>\n<p>2016年的淘宝造物节邀请函， 太牛了， 不过，我们这回先不研究他的入场特效，先研究下它的全景是如何实现的</p>\n<h2 id=\"一、-载入图片-定位至统一位置\"><a href=\"#一、-载入图片-定位至统一位置\" class=\"headerlink\" title=\"一、 载入图片, 定位至统一位置\"></a>一、 载入图片, 定位至统一位置</h2><blockquote>\n<p>因为20张图片被定位到统一地方, 所以所有图片都叠在一起了</p>\n</blockquote>\n<blockquote>\n<p>此时效果</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao01.png\" alt></p>\n<h2 id=\"二、依照Y轴旋转图片\"><a href=\"#二、依照Y轴旋转图片\" class=\"headerlink\" title=\"二、依照Y轴旋转图片\"></a>二、依照Y轴旋转图片</h2><blockquote>\n<p>先说下为什么要依照y轴:  我们需要把图片围绕成一个环形, 类似于 木桶的每一块木板,   图片就是木板, 按图片的顺序旋转自各自的角度, 目前也是原地旋转, 所以图片依旧叠加在一起</p>\n</blockquote>\n<blockquote>\n<p>素材有20张图片, 那每张的旋转角度就是 360 / 20 = 18度, 每张旋转的度数在前一张的基础上累加 18 度, </p>\n</blockquote>\n<blockquote>\n<p>这里注意注意注意: 因为是按图片中心的Y轴旋转, 所以同一个度数会有两张图片,  比如: 0度的图片, 头在0度, 尾在90度,    然后当轮到头在90度的图片时, 他的尾在 0 度, 所以会有同一个度数两张图片的现象</p>\n</blockquote>\n<blockquote>\n<p>此时效果</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao02.png\" alt></p>\n<blockquote>\n<p>为了方便理解, 切换成上帝视角, ,  所有图片围绕中心点旋转</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao03.png\" alt></p>\n<p><img src=\"http://img.nixiaolei.com/taobao04.png\" alt></p>\n<h2 id=\"三、将图片沿着各自Z轴向外推\"><a href=\"#三、将图片沿着各自Z轴向外推\" class=\"headerlink\" title=\"三、将图片沿着各自Z轴向外推\"></a>三、将图片沿着各自Z轴向外推</h2><blockquote>\n<p>现在木板(也就是每一张图片)是穿插在一起的, 我们需要让他们远离中心点, 拉开距离, 让他,们边缘连接而不是这样交叉在一起,  才能形成一个圆</p>\n</blockquote>\n<h3 id=\"先了解每一块木板怎么推\"><a href=\"#先了解每一块木板怎么推\" class=\"headerlink\" title=\"先了解每一块木板怎么推\"></a>先了解每一块木板怎么推</h3><blockquote>\n<p>简单的画了个前后的效果图,  用的是上帝视角, 也就是你低头看一个木桶的视角</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao05.png\" alt></p>\n<h3 id=\"如何计算该推多少距离\"><a href=\"#如何计算该推多少距离\" class=\"headerlink\" title=\"如何计算该推多少距离\"></a>如何计算该推多少距离</h3><blockquote>\n<p>做一道三角函数数学题</p>\n<p>画的角度不太对别介意</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/taobao06.png\" alt></p>\n<blockquote>\n<p>设一共12条线,  每条长200px(此时的长就对应图片的宽) ,  求将橙线移动到图中最终位置的距离 “黑线”,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先求旋转度数</span></span><br><span class=\"line\"><span class=\"comment\">// 然后取度数的一半</span></span><br><span class=\"line\"><span class=\"number\">360</span> / <span class=\"number\">12</span> / <span class=\"number\">2</span> = <span class=\"number\">15</span> 度</span><br><span class=\"line\"><span class=\"comment\">// 得知直角底边长度</span></span><br><span class=\"line\"><span class=\"number\">200</span> / <span class=\"number\">2</span> = <span class=\"number\">100</span>px</span><br><span class=\"line\"><span class=\"comment\">// 根据度数得知 tan, 顺便说下, tan是对边比邻边</span></span><br><span class=\"line\">tan15°= <span class=\"number\">0.26794</span></span><br><span class=\"line\"><span class=\"comment\">// 求出黑线</span></span><br><span class=\"line\"><span class=\"number\">100</span>PX / 黑线 = <span class=\"number\">0.26794</span></span><br><span class=\"line\">黑线约等于 <span class=\"number\">373.2</span>px</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"js计算时注意\"><a href=\"#js计算时注意\" class=\"headerlink\" title=\"js计算时注意\"></a>js计算时注意</h2><ol>\n<li>Math.tan 接收的是弧度单位</li>\n<li>Math.PI 表示的是一个 Π</li>\n<li>360度 = 2Π <blockquote>\n<p>计算出每张图片之间的形成的弧度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 假设图片数量是 8 张</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 360 = 2Π</span></span><br><span class=\"line\"><span class=\"comment\">// 1度 = Π / 180</span></span><br><span class=\"line\"><span class=\"comment\">// 每份的角度是</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> deg = <span class=\"number\">360</span> / <span class=\"number\">8</span> <span class=\"comment\">// 此时为 45</span></span><br><span class=\"line\"><span class=\"comment\">// 一份的弧度就是 每份弧度 * 旋转角度的一半</span></span><br><span class=\"line\"><span class=\"comment\">// 最后结果就等于 Π / 图片数量</span></span><br><span class=\"line\">( <span class=\"built_in\">Math</span>.PI / <span class=\"number\">180</span> ) * ( <span class=\"number\">45</span> / <span class=\"number\">2</span> )  ==&gt;  <span class=\"built_in\">Math</span>.PI / <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"你不知道的Css矩阵","date":"2019-03-18T07:54:33.000Z","_content":"\n\n# 矩阵\n1. matrix(a,b,c,d,e,f);        \n2. a c e 分别和 X, Y, 1 相乘得出线性方程\n3. b d f 分别和 X, Y, 1 相乘得出线性方程\n\n\n这是很清楚的计算公式\n\n![](http://img.nixiaolei.com/matrix.png)\n\n\n\n\n\n\n## rotateZ矩阵推理\n推理过程\n\n\n![](http://img.nixiaolei.com/note.png)\n\n\n\n\n## 参考同学的笔记\n同学写的很不错👍\n\n![](http://img.nixiaolei.com/classmate-note01.png)\n\n![](http://img.nixiaolei.com/classmate-note02.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【CSS矩阵】你不知道的Css矩阵.md","raw":"---\ntitle: 你不知道的Css矩阵\ndate: 2019-03-18 15:54:33\ncategories: CSS\ntags: [css, 矩阵]\n---\n\n\n# 矩阵\n1. matrix(a,b,c,d,e,f);        \n2. a c e 分别和 X, Y, 1 相乘得出线性方程\n3. b d f 分别和 X, Y, 1 相乘得出线性方程\n\n\n这是很清楚的计算公式\n\n![](http://img.nixiaolei.com/matrix.png)\n\n\n\n\n\n\n## rotateZ矩阵推理\n推理过程\n\n\n![](http://img.nixiaolei.com/note.png)\n\n\n\n\n## 参考同学的笔记\n同学写的很不错👍\n\n![](http://img.nixiaolei.com/classmate-note01.png)\n\n![](http://img.nixiaolei.com/classmate-note02.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【CSS矩阵】你不知道的Css矩阵","published":1,"updated":"2019-03-28T11:58:24.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w8s000jssuwzxdke7id","content":"<h1 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h1><ol>\n<li>matrix(a,b,c,d,e,f);        </li>\n<li>a c e 分别和 X, Y, 1 相乘得出线性方程</li>\n<li>b d f 分别和 X, Y, 1 相乘得出线性方程</li>\n</ol>\n<p>这是很清楚的计算公式</p>\n<p><img src=\"http://img.nixiaolei.com/matrix.png\" alt></p>\n<h2 id=\"rotateZ矩阵推理\"><a href=\"#rotateZ矩阵推理\" class=\"headerlink\" title=\"rotateZ矩阵推理\"></a>rotateZ矩阵推理</h2><p>推理过程</p>\n<p><img src=\"http://img.nixiaolei.com/note.png\" alt></p>\n<h2 id=\"参考同学的笔记\"><a href=\"#参考同学的笔记\" class=\"headerlink\" title=\"参考同学的笔记\"></a>参考同学的笔记</h2><p>同学写的很不错👍</p>\n<p><img src=\"http://img.nixiaolei.com/classmate-note01.png\" alt></p>\n<p><img src=\"http://img.nixiaolei.com/classmate-note02.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h1><ol>\n<li>matrix(a,b,c,d,e,f);        </li>\n<li>a c e 分别和 X, Y, 1 相乘得出线性方程</li>\n<li>b d f 分别和 X, Y, 1 相乘得出线性方程</li>\n</ol>\n<p>这是很清楚的计算公式</p>\n<p><img src=\"http://img.nixiaolei.com/matrix.png\" alt></p>\n<h2 id=\"rotateZ矩阵推理\"><a href=\"#rotateZ矩阵推理\" class=\"headerlink\" title=\"rotateZ矩阵推理\"></a>rotateZ矩阵推理</h2><p>推理过程</p>\n<p><img src=\"http://img.nixiaolei.com/note.png\" alt></p>\n<h2 id=\"参考同学的笔记\"><a href=\"#参考同学的笔记\" class=\"headerlink\" title=\"参考同学的笔记\"></a>参考同学的笔记</h2><p>同学写的很不错👍</p>\n<p><img src=\"http://img.nixiaolei.com/classmate-note01.png\" alt></p>\n<p><img src=\"http://img.nixiaolei.com/classmate-note02.png\" alt></p>\n"},{"title":"【AOP】面向切面编程","date":"2019-03-24T05:53:14.000Z","_content":"\n> Aspect Oriented Programming\n\n面向切面编程（aop）是对面向对象编程（oop）的补充\n\n## 面向切面编程\n\n在软件业， AOP为 `Aspect Oriented Programming` 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。\n\n\n### 基础概念\nAOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。\n\n### Filter \nFilter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为\"Aspect\"， 即切面。 所谓“切面”。\n\n### 优点\nAOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！\n\n就像函数的`before`和 `after`\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【AOP】面向切面编程.md","raw":"---\ntitle: 【AOP】面向切面编程\ndate: 2019-03-24 13:53:14\ncategories: [编程思想]\ntags: [AOP, 编程范式]\n---\n\n> Aspect Oriented Programming\n\n面向切面编程（aop）是对面向对象编程（oop）的补充\n\n## 面向切面编程\n\n在软件业， AOP为 `Aspect Oriented Programming` 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。\n\n\n### 基础概念\nAOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。\n\n### Filter \nFilter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为\"Aspect\"， 即切面。 所谓“切面”。\n\n### 优点\nAOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！\n\n就像函数的`before`和 `after`\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【AOP】面向切面编程","published":1,"updated":"2019-03-24T06:14:53.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w9o000nssuwy5ire9ya","content":"<blockquote>\n<p>Aspect Oriented Programming</p>\n</blockquote>\n<p>面向切面编程（aop）是对面向对象编程（oop）的补充</p>\n<h2 id=\"面向切面编程\"><a href=\"#面向切面编程\" class=\"headerlink\" title=\"面向切面编程\"></a>面向切面编程</h2><p>在软件业， AOP为 <code>Aspect Oriented Programming</code> 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。</p>\n<h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p>AOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。</p>\n<h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><p>Filter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为”Aspect”， 即切面。 所谓“切面”。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>AOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！</p>\n<p>就像函数的<code>before</code>和 <code>after</code></p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Aspect Oriented Programming</p>\n</blockquote>\n<p>面向切面编程（aop）是对面向对象编程（oop）的补充</p>\n<h2 id=\"面向切面编程\"><a href=\"#面向切面编程\" class=\"headerlink\" title=\"面向切面编程\"></a>面向切面编程</h2><p>在软件业， AOP为 <code>Aspect Oriented Programming</code> 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。</p>\n<h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p>AOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。</p>\n<h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><p>Filter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为”Aspect”， 即切面。 所谓“切面”。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>AOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！</p>\n<p>就像函数的<code>before</code>和 <code>after</code></p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"css预处理与后处理器","date":"2019-03-16T04:20:43.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css\n\n一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了\n\n## 预处理器具有的能力\n* 变量\n* 混合(Mixin) Extend\n* 嵌套规则\n* 运算\n* 函数\n* Namespaces & Accessors (命名空间和访问器)\n* scope\n* 注释\n\n\n## 后处理器的能力\n\n* CSS 压缩 CLEAN-CSS\n* 自动添加浏览器前缀 Autoprefixer\n* CSS更加美观排序 CSScomb\n* Rework取代stylus 后处理器发热\n* 前后通吃的 PostCss\n\n\n\n\n\n## 他们是如何处理的CSS\n\n### 预处理器\n\n预处理器， 如： `sass` 它会先将他的语法转换成 AST--抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS \n\n### PostCss\n\nPostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能\n\n![PostCss处理流程](http://img.nixiaolei.com/2019-03-16-13-23-52.png)\n\n","source":"_posts/css预处理与后处理器.md","raw":"---\ntitle: css预处理与后处理器\ndate: 2019-03-16 12:20:43\ncategories: CSS\ntags: [css, PostCss]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css\n\n一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了\n\n## 预处理器具有的能力\n* 变量\n* 混合(Mixin) Extend\n* 嵌套规则\n* 运算\n* 函数\n* Namespaces & Accessors (命名空间和访问器)\n* scope\n* 注释\n\n\n## 后处理器的能力\n\n* CSS 压缩 CLEAN-CSS\n* 自动添加浏览器前缀 Autoprefixer\n* CSS更加美观排序 CSScomb\n* Rework取代stylus 后处理器发热\n* 前后通吃的 PostCss\n\n\n\n\n\n## 他们是如何处理的CSS\n\n### 预处理器\n\n预处理器， 如： `sass` 它会先将他的语法转换成 AST--抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS \n\n### PostCss\n\nPostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能\n\n![PostCss处理流程](http://img.nixiaolei.com/2019-03-16-13-23-52.png)\n\n","slug":"css预处理与后处理器","published":1,"updated":"2019-03-22T13:48:07.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w9s000pssuwin24evmz","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css</p>\n<p>一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了</p>\n<h2 id=\"预处理器具有的能力\"><a href=\"#预处理器具有的能力\" class=\"headerlink\" title=\"预处理器具有的能力\"></a>预处理器具有的能力</h2><ul>\n<li>变量</li>\n<li>混合(Mixin) Extend</li>\n<li>嵌套规则</li>\n<li>运算</li>\n<li>函数</li>\n<li>Namespaces &amp; Accessors (命名空间和访问器)</li>\n<li>scope</li>\n<li>注释</li>\n</ul>\n<h2 id=\"后处理器的能力\"><a href=\"#后处理器的能力\" class=\"headerlink\" title=\"后处理器的能力\"></a>后处理器的能力</h2><ul>\n<li>CSS 压缩 CLEAN-CSS</li>\n<li>自动添加浏览器前缀 Autoprefixer</li>\n<li>CSS更加美观排序 CSScomb</li>\n<li>Rework取代stylus 后处理器发热</li>\n<li>前后通吃的 PostCss</li>\n</ul>\n<h2 id=\"他们是如何处理的CSS\"><a href=\"#他们是如何处理的CSS\" class=\"headerlink\" title=\"他们是如何处理的CSS\"></a>他们是如何处理的CSS</h2><h3 id=\"预处理器\"><a href=\"#预处理器\" class=\"headerlink\" title=\"预处理器\"></a>预处理器</h3><p>预处理器， 如： <code>sass</code> 它会先将他的语法转换成 AST–抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS </p>\n<h3 id=\"PostCss\"><a href=\"#PostCss\" class=\"headerlink\" title=\"PostCss\"></a>PostCss</h3><p>PostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-23-52.png\" alt=\"PostCss处理流程\"></p>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css</p>\n<p>一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了</p>\n<h2 id=\"预处理器具有的能力\"><a href=\"#预处理器具有的能力\" class=\"headerlink\" title=\"预处理器具有的能力\"></a>预处理器具有的能力</h2><ul>\n<li>变量</li>\n<li>混合(Mixin) Extend</li>\n<li>嵌套规则</li>\n<li>运算</li>\n<li>函数</li>\n<li>Namespaces &amp; Accessors (命名空间和访问器)</li>\n<li>scope</li>\n<li>注释</li>\n</ul>\n<h2 id=\"后处理器的能力\"><a href=\"#后处理器的能力\" class=\"headerlink\" title=\"后处理器的能力\"></a>后处理器的能力</h2><ul>\n<li>CSS 压缩 CLEAN-CSS</li>\n<li>自动添加浏览器前缀 Autoprefixer</li>\n<li>CSS更加美观排序 CSScomb</li>\n<li>Rework取代stylus 后处理器发热</li>\n<li>前后通吃的 PostCss</li>\n</ul>\n<h2 id=\"他们是如何处理的CSS\"><a href=\"#他们是如何处理的CSS\" class=\"headerlink\" title=\"他们是如何处理的CSS\"></a>他们是如何处理的CSS</h2><h3 id=\"预处理器\"><a href=\"#预处理器\" class=\"headerlink\" title=\"预处理器\"></a>预处理器</h3><p>预处理器， 如： <code>sass</code> 它会先将他的语法转换成 AST–抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS </p>\n<h3 id=\"PostCss\"><a href=\"#PostCss\" class=\"headerlink\" title=\"PostCss\"></a>PostCss</h3><p>PostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-23-52.png\" alt=\"PostCss处理流程\"></p>\n"},{"title":"【C语言】入门知识","date":"2019-03-23T14:07:29.000Z","_content":"\n![C语言](http://img.nixiaolei.com/2019-04-04-22-39-41.png)\nC语言的诞生要比JavaScript早很多, 属于低级语言，比较擅长和系统交互写底层应用。\n\nC语言的编译工具就是gcc\n\n\n## 🤯前端不限端\n作为一名优质的前端切图仔， 不应该把自己困死在前端中， 更应该多开阔视野， 朝较底层的方向探索\n\n当然， 这只是鸡汤， 我们来看看前端学习C语言的必要性\n\n* 编译开源软件的源代码\n* C语言基本语法，要看得懂代码\n* 指针和C语言的坑\n* 从内存层面理解数据结构\n* 搞懂V8的内存管理机制\n* 分析webkit引擎代码\n* 用C语言编写Node.js和PHP扩展模块\n\n\n\n## C语言沉浮录\nC语言的前身是B语言\n\n\n* 天生的系统级语言\n* 最早用来编写Unix内核\n* 曾经最流行的语言\n* 至今仍在不断发展\n\n![语言发展史](http://img.nixiaolei.com/2019-04-06-13-46-58.png)\n\n\n## C语言和JavaScript的异同\n\n* C语言是编译型语言\n* C语言要借助编译器转换成可执行程序\n* JavaScript是解释型语言\n* JavaScript要借助解释引擎运行\n\n![语言编译过程](http://img.nixiaolei.com/2019-04-06-13-58-53.png)\n\n需要编译的语言经过编译后生成目标程序， 其实生成目标程序时已经是机器指令了， 但是计算机仍旧无法直接运行它，因为操作系统有他自己的规则， 想要符合操作系统的规则， 这时候就要走链接， 那链接做了哪些事让操作系统能够识别到该程序呢：\n\n1. 给操作系统一个识别块，操作系统先读识别块再运行程序\n2. 把生成的很多`.obj`文件串起来， 连成一块\n\n\n\n\n\n## C语言与C++语言的区别\n1. C++是新的编程语言，并不是C的扩展\n2. C语言是面向过程的，C＋＋是面向对象的\n3. C和C++语言都有标准库【standard.io】\n4. 目前C大多用在网络相关和嵌入式等方面【不管Python、还是JS，底层都需要C语言基本环境】\n5. 目前C++大多用在复杂引擎和应用软件方面\n\n\n\n\n## 理解内存与指针\n* 内存与内存地址\n* 指针、地址与引用\n* 指向变量的指针\n* 指向指针的指针\n* 指向函数的指针\n* 动态内存分配\n\n\n要理解内存和指针首先我们应该知道内存在计算机中是什么样子的， 我们可以把内存看作是一个打了很多格子的小纸条，**每个格子就是内存的基本存储单位**, 1个单位是一个字节，也就是一个`byte`, 而一个`byte`等于8个`bit`，那我们该如何找到对应的内存呢， 实际上内存是有编号的，这个编号从0开始， 作为内存的地址（门牌）\n\n![内存地址](http://img.nixiaolei.com/2019-04-06-14-38-20.png)\n\n### 指针\n> 指针其实也是可以运算的，但大多数情况没有意义，  一般用在计算存储空间\n\n容纳内存地址的变量就是指针\n\nC语言中， 指针也是有类型的， 因为不同的数据类型对应内存中的所占的大小不一样， 定义类型是为了从内存中拿出正确长度的数据， 比如： 短整型只占两个字节、 长整型占4个字节、  超长整型占8个字节、单精度浮点型占6个字节、 双精度浮点型占8个字节\n\n如果不正确定义指针的类型，就会导致从内存中拿出来的长度是错的， 也就是导致得到的值是错的\n\n\n![理解指针](http://img.nixiaolei.com/2019-04-06-15-09-10.png)\n\n#### 🕵️‍一级指针结构\n![一级指针结构](http://img.nixiaolei.com/2019-04-06-15-13-36.png)\n\n\n\n\n\n#### 🕵️‍二级指针结构\n![二级指针结构](http://img.nixiaolei.com/2019-04-06-15-14-35.png)\n\n\n#### 🤒声明指针\n> 一开始声明的指针我们只能给他一个Null或是 内存地址, 因为一个具体的值对于指针是没有意义的，\n\n声明一个整型的指针\n```C\n// 声明一个变量， 会自动分配内存\nint a = 10;\n\n// 声明一个指向变量a的指针\nint * p_a = &a;\n```\n#### 🧐直接寻址和间接寻址\n直接使用变量和利用指针访问的结构是一样的\n```C\nprintf(a);  // 10\nprintf( *p );  // 10\n```\n\n\n#### 🤒二级指针及多级指针\n> 不管是几级指针编译器都是能够通过的\n\n\n```C\n// 声明一个变量， 会自动分配内存\nint a = 10;\n\n// 声明一个指向变量a的指针\nint * p_a = &a;\n\n// 声明一个指向指针的指针\nint ** pp_a = &p_a;\n```\n\n\n#### 指向函数的指针\n> 函数它本身也在内存当中, 当我们看到一个指向函数的指针时就代表着函数调用， 回调函数就是基于指针的\n\nC语言的函数是有原型的\n\n声明一个两数相加函数的原型\n```C\n// 函数返回类型及参数类型\nint add( int, int );\n```\n\n实现函数\n```C\nint add(int v1, int v2) \n{\n  return v1 + v2;\n}\n```\n\n创建指向函数的指针\n```C\nint*(int, int) p_func;\np_func = add;\n```\n\n\n\n\n\n### 引用\n\n引用是对指针的封装， 现代语言不允许你直接去操作地址  因为现代语言都自带着垃圾回收机制， 在垃圾回收的过程中， 地址会经常改变，  改变地址的目的是为了提高内存的利用效率， 使内存连续\n\n\n\n\n## 内存动态分配\n\nC语言主要分如下四个区\n\n\n内存    | 描述  | 特性 \n:--------------:|:-----:|:-----:\n栈区    | 是一个确定的常数(1~2M) 不同平台会有不同大小，超出会提示stackoverflow |  自动分配, 自动释放\n堆区   | 用于动态内存分配 | 手动分配和释放 ， 可占用80%内存\n全局区或静态区  | 在程序中明确被初始化的全局变量、静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量） | 只初始化一次 \n程序代码区  | 代码区指令根据程序设计流程依次执行，对于顺序指令，则只会执行一次（每个进程），如果反复，则需要使用跳转指令，如果进行递归，则需要借助栈来实现。 | 代码区的指令中包括操作码和要操作的对象（或对象地址引用）\n\n\n\n\n* 栈区： 还用来保存当前函数的局部变量\n* 堆区： 存放new出来的变量\n* 全局区或静态区: 存放全局变量及对象的静态变量\n* 程序代码区:  存放指令、代码， 以前的金山游侠修改器就是专门改程序代码区的\n\n\n\n\n### 分配内存代码\n```C\nint * p;\n\n// size_t 表示一个无符号整型\n// p = malloc( size_t );\n\n// 给整型分配空间必须 传入整型长度的倍数（ 整型长度是 4个字节）\n// 这样我就申请了40个字节的内存空间， 它能容纳10个整型的数字\np = malloc(40);\n\n// 实际上 malloc 申请到的是一个数组， 下面这样是对前4个字节进行赋值\n*p = 1;\n// 实际等价于\np[0] = 1;\n\n// 如果你要给其他位置的字节赋值, 这样表示向后移动一个元素单位的位置\n*(p+1) = 2; \n// 等价于\np[1] = 2;\n```\n\n### 释放内存\n```C\nfree(p)\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【C语言】入门知识.md","raw":"---\ntitle: 【C语言】入门知识\ndate: 2019-03-23 22:07:29\ncategories: C语言\ntags: C语言\n---\n\n![C语言](http://img.nixiaolei.com/2019-04-04-22-39-41.png)\nC语言的诞生要比JavaScript早很多, 属于低级语言，比较擅长和系统交互写底层应用。\n\nC语言的编译工具就是gcc\n\n\n## 🤯前端不限端\n作为一名优质的前端切图仔， 不应该把自己困死在前端中， 更应该多开阔视野， 朝较底层的方向探索\n\n当然， 这只是鸡汤， 我们来看看前端学习C语言的必要性\n\n* 编译开源软件的源代码\n* C语言基本语法，要看得懂代码\n* 指针和C语言的坑\n* 从内存层面理解数据结构\n* 搞懂V8的内存管理机制\n* 分析webkit引擎代码\n* 用C语言编写Node.js和PHP扩展模块\n\n\n\n## C语言沉浮录\nC语言的前身是B语言\n\n\n* 天生的系统级语言\n* 最早用来编写Unix内核\n* 曾经最流行的语言\n* 至今仍在不断发展\n\n![语言发展史](http://img.nixiaolei.com/2019-04-06-13-46-58.png)\n\n\n## C语言和JavaScript的异同\n\n* C语言是编译型语言\n* C语言要借助编译器转换成可执行程序\n* JavaScript是解释型语言\n* JavaScript要借助解释引擎运行\n\n![语言编译过程](http://img.nixiaolei.com/2019-04-06-13-58-53.png)\n\n需要编译的语言经过编译后生成目标程序， 其实生成目标程序时已经是机器指令了， 但是计算机仍旧无法直接运行它，因为操作系统有他自己的规则， 想要符合操作系统的规则， 这时候就要走链接， 那链接做了哪些事让操作系统能够识别到该程序呢：\n\n1. 给操作系统一个识别块，操作系统先读识别块再运行程序\n2. 把生成的很多`.obj`文件串起来， 连成一块\n\n\n\n\n\n## C语言与C++语言的区别\n1. C++是新的编程语言，并不是C的扩展\n2. C语言是面向过程的，C＋＋是面向对象的\n3. C和C++语言都有标准库【standard.io】\n4. 目前C大多用在网络相关和嵌入式等方面【不管Python、还是JS，底层都需要C语言基本环境】\n5. 目前C++大多用在复杂引擎和应用软件方面\n\n\n\n\n## 理解内存与指针\n* 内存与内存地址\n* 指针、地址与引用\n* 指向变量的指针\n* 指向指针的指针\n* 指向函数的指针\n* 动态内存分配\n\n\n要理解内存和指针首先我们应该知道内存在计算机中是什么样子的， 我们可以把内存看作是一个打了很多格子的小纸条，**每个格子就是内存的基本存储单位**, 1个单位是一个字节，也就是一个`byte`, 而一个`byte`等于8个`bit`，那我们该如何找到对应的内存呢， 实际上内存是有编号的，这个编号从0开始， 作为内存的地址（门牌）\n\n![内存地址](http://img.nixiaolei.com/2019-04-06-14-38-20.png)\n\n### 指针\n> 指针其实也是可以运算的，但大多数情况没有意义，  一般用在计算存储空间\n\n容纳内存地址的变量就是指针\n\nC语言中， 指针也是有类型的， 因为不同的数据类型对应内存中的所占的大小不一样， 定义类型是为了从内存中拿出正确长度的数据， 比如： 短整型只占两个字节、 长整型占4个字节、  超长整型占8个字节、单精度浮点型占6个字节、 双精度浮点型占8个字节\n\n如果不正确定义指针的类型，就会导致从内存中拿出来的长度是错的， 也就是导致得到的值是错的\n\n\n![理解指针](http://img.nixiaolei.com/2019-04-06-15-09-10.png)\n\n#### 🕵️‍一级指针结构\n![一级指针结构](http://img.nixiaolei.com/2019-04-06-15-13-36.png)\n\n\n\n\n\n#### 🕵️‍二级指针结构\n![二级指针结构](http://img.nixiaolei.com/2019-04-06-15-14-35.png)\n\n\n#### 🤒声明指针\n> 一开始声明的指针我们只能给他一个Null或是 内存地址, 因为一个具体的值对于指针是没有意义的，\n\n声明一个整型的指针\n```C\n// 声明一个变量， 会自动分配内存\nint a = 10;\n\n// 声明一个指向变量a的指针\nint * p_a = &a;\n```\n#### 🧐直接寻址和间接寻址\n直接使用变量和利用指针访问的结构是一样的\n```C\nprintf(a);  // 10\nprintf( *p );  // 10\n```\n\n\n#### 🤒二级指针及多级指针\n> 不管是几级指针编译器都是能够通过的\n\n\n```C\n// 声明一个变量， 会自动分配内存\nint a = 10;\n\n// 声明一个指向变量a的指针\nint * p_a = &a;\n\n// 声明一个指向指针的指针\nint ** pp_a = &p_a;\n```\n\n\n#### 指向函数的指针\n> 函数它本身也在内存当中, 当我们看到一个指向函数的指针时就代表着函数调用， 回调函数就是基于指针的\n\nC语言的函数是有原型的\n\n声明一个两数相加函数的原型\n```C\n// 函数返回类型及参数类型\nint add( int, int );\n```\n\n实现函数\n```C\nint add(int v1, int v2) \n{\n  return v1 + v2;\n}\n```\n\n创建指向函数的指针\n```C\nint*(int, int) p_func;\np_func = add;\n```\n\n\n\n\n\n### 引用\n\n引用是对指针的封装， 现代语言不允许你直接去操作地址  因为现代语言都自带着垃圾回收机制， 在垃圾回收的过程中， 地址会经常改变，  改变地址的目的是为了提高内存的利用效率， 使内存连续\n\n\n\n\n## 内存动态分配\n\nC语言主要分如下四个区\n\n\n内存    | 描述  | 特性 \n:--------------:|:-----:|:-----:\n栈区    | 是一个确定的常数(1~2M) 不同平台会有不同大小，超出会提示stackoverflow |  自动分配, 自动释放\n堆区   | 用于动态内存分配 | 手动分配和释放 ， 可占用80%内存\n全局区或静态区  | 在程序中明确被初始化的全局变量、静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量） | 只初始化一次 \n程序代码区  | 代码区指令根据程序设计流程依次执行，对于顺序指令，则只会执行一次（每个进程），如果反复，则需要使用跳转指令，如果进行递归，则需要借助栈来实现。 | 代码区的指令中包括操作码和要操作的对象（或对象地址引用）\n\n\n\n\n* 栈区： 还用来保存当前函数的局部变量\n* 堆区： 存放new出来的变量\n* 全局区或静态区: 存放全局变量及对象的静态变量\n* 程序代码区:  存放指令、代码， 以前的金山游侠修改器就是专门改程序代码区的\n\n\n\n\n### 分配内存代码\n```C\nint * p;\n\n// size_t 表示一个无符号整型\n// p = malloc( size_t );\n\n// 给整型分配空间必须 传入整型长度的倍数（ 整型长度是 4个字节）\n// 这样我就申请了40个字节的内存空间， 它能容纳10个整型的数字\np = malloc(40);\n\n// 实际上 malloc 申请到的是一个数组， 下面这样是对前4个字节进行赋值\n*p = 1;\n// 实际等价于\np[0] = 1;\n\n// 如果你要给其他位置的字节赋值, 这样表示向后移动一个元素单位的位置\n*(p+1) = 2; \n// 等价于\np[1] = 2;\n```\n\n### 释放内存\n```C\nfree(p)\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【C语言】入门知识","published":1,"updated":"2019-04-06T08:11:45.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1w9y000ussuwqtrlhjye","content":"<p><img src=\"http://img.nixiaolei.com/2019-04-04-22-39-41.png\" alt=\"C语言\"><br>C语言的诞生要比JavaScript早很多, 属于低级语言，比较擅长和系统交互写底层应用。</p>\n<p>C语言的编译工具就是gcc</p>\n<h2 id=\"🤯前端不限端\"><a href=\"#🤯前端不限端\" class=\"headerlink\" title=\"🤯前端不限端\"></a>🤯前端不限端</h2><p>作为一名优质的前端切图仔， 不应该把自己困死在前端中， 更应该多开阔视野， 朝较底层的方向探索</p>\n<p>当然， 这只是鸡汤， 我们来看看前端学习C语言的必要性</p>\n<ul>\n<li>编译开源软件的源代码</li>\n<li>C语言基本语法，要看得懂代码</li>\n<li>指针和C语言的坑</li>\n<li>从内存层面理解数据结构</li>\n<li>搞懂V8的内存管理机制</li>\n<li>分析webkit引擎代码</li>\n<li>用C语言编写Node.js和PHP扩展模块</li>\n</ul>\n<h2 id=\"C语言沉浮录\"><a href=\"#C语言沉浮录\" class=\"headerlink\" title=\"C语言沉浮录\"></a>C语言沉浮录</h2><p>C语言的前身是B语言</p>\n<ul>\n<li>天生的系统级语言</li>\n<li>最早用来编写Unix内核</li>\n<li>曾经最流行的语言</li>\n<li>至今仍在不断发展</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-46-58.png\" alt=\"语言发展史\"></p>\n<h2 id=\"C语言和JavaScript的异同\"><a href=\"#C语言和JavaScript的异同\" class=\"headerlink\" title=\"C语言和JavaScript的异同\"></a>C语言和JavaScript的异同</h2><ul>\n<li>C语言是编译型语言</li>\n<li>C语言要借助编译器转换成可执行程序</li>\n<li>JavaScript是解释型语言</li>\n<li>JavaScript要借助解释引擎运行</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-58-53.png\" alt=\"语言编译过程\"></p>\n<p>需要编译的语言经过编译后生成目标程序， 其实生成目标程序时已经是机器指令了， 但是计算机仍旧无法直接运行它，因为操作系统有他自己的规则， 想要符合操作系统的规则， 这时候就要走链接， 那链接做了哪些事让操作系统能够识别到该程序呢：</p>\n<ol>\n<li>给操作系统一个识别块，操作系统先读识别块再运行程序</li>\n<li>把生成的很多<code>.obj</code>文件串起来， 连成一块</li>\n</ol>\n<h2 id=\"C语言与C-语言的区别\"><a href=\"#C语言与C-语言的区别\" class=\"headerlink\" title=\"C语言与C++语言的区别\"></a>C语言与C++语言的区别</h2><ol>\n<li>C++是新的编程语言，并不是C的扩展</li>\n<li>C语言是面向过程的，C＋＋是面向对象的</li>\n<li>C和C++语言都有标准库【standard.io】</li>\n<li>目前C大多用在网络相关和嵌入式等方面【不管Python、还是JS，底层都需要C语言基本环境】</li>\n<li>目前C++大多用在复杂引擎和应用软件方面</li>\n</ol>\n<h2 id=\"理解内存与指针\"><a href=\"#理解内存与指针\" class=\"headerlink\" title=\"理解内存与指针\"></a>理解内存与指针</h2><ul>\n<li>内存与内存地址</li>\n<li>指针、地址与引用</li>\n<li>指向变量的指针</li>\n<li>指向指针的指针</li>\n<li>指向函数的指针</li>\n<li>动态内存分配</li>\n</ul>\n<p>要理解内存和指针首先我们应该知道内存在计算机中是什么样子的， 我们可以把内存看作是一个打了很多格子的小纸条，<strong>每个格子就是内存的基本存储单位</strong>, 1个单位是一个字节，也就是一个<code>byte</code>, 而一个<code>byte</code>等于8个<code>bit</code>，那我们该如何找到对应的内存呢， 实际上内存是有编号的，这个编号从0开始， 作为内存的地址（门牌）</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-14-38-20.png\" alt=\"内存地址\"></p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><blockquote>\n<p>指针其实也是可以运算的，但大多数情况没有意义，  一般用在计算存储空间</p>\n</blockquote>\n<p>容纳内存地址的变量就是指针</p>\n<p>C语言中， 指针也是有类型的， 因为不同的数据类型对应内存中的所占的大小不一样， 定义类型是为了从内存中拿出正确长度的数据， 比如： 短整型只占两个字节、 长整型占4个字节、  超长整型占8个字节、单精度浮点型占6个字节、 双精度浮点型占8个字节</p>\n<p>如果不正确定义指针的类型，就会导致从内存中拿出来的长度是错的， 也就是导致得到的值是错的</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-15-09-10.png\" alt=\"理解指针\"></p>\n<h4 id=\"🕵️‍一级指针结构\"><a href=\"#🕵️‍一级指针结构\" class=\"headerlink\" title=\"🕵️‍一级指针结构\"></a>🕵️‍一级指针结构</h4><p><img src=\"http://img.nixiaolei.com/2019-04-06-15-13-36.png\" alt=\"一级指针结构\"></p>\n<h4 id=\"🕵️‍二级指针结构\"><a href=\"#🕵️‍二级指针结构\" class=\"headerlink\" title=\"🕵️‍二级指针结构\"></a>🕵️‍二级指针结构</h4><p><img src=\"http://img.nixiaolei.com/2019-04-06-15-14-35.png\" alt=\"二级指针结构\"></p>\n<h4 id=\"🤒声明指针\"><a href=\"#🤒声明指针\" class=\"headerlink\" title=\"🤒声明指针\"></a>🤒声明指针</h4><blockquote>\n<p>一开始声明的指针我们只能给他一个Null或是 内存地址, 因为一个具体的值对于指针是没有意义的，</p>\n</blockquote>\n<p>声明一个整型的指针<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个变量， 会自动分配内存</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个指向变量a的指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> * p_a = &amp;a;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"🧐直接寻址和间接寻址\"><a href=\"#🧐直接寻址和间接寻址\" class=\"headerlink\" title=\"🧐直接寻址和间接寻址\"></a>🧐直接寻址和间接寻址</h4><p>直接使用变量和利用指针访问的结构是一样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(a);  <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>( *p );  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"🤒二级指针及多级指针\"><a href=\"#🤒二级指针及多级指针\" class=\"headerlink\" title=\"🤒二级指针及多级指针\"></a>🤒二级指针及多级指针</h4><blockquote>\n<p>不管是几级指针编译器都是能够通过的</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个变量， 会自动分配内存</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个指向变量a的指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> * p_a = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个指向指针的指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ** pp_a = &amp;p_a;</span><br></pre></td></tr></table></figure>\n<h4 id=\"指向函数的指针\"><a href=\"#指向函数的指针\" class=\"headerlink\" title=\"指向函数的指针\"></a>指向函数的指针</h4><blockquote>\n<p>函数它本身也在内存当中, 当我们看到一个指向函数的指针时就代表着函数调用， 回调函数就是基于指针的</p>\n</blockquote>\n<p>C语言的函数是有原型的</p>\n<p>声明一个两数相加函数的原型<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数返回类型及参数类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">( <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> )</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>实现函数<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1 + v2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建指向函数的指针<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>*(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) p_func;</span><br><span class=\"line\">p_func = add;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>引用是对指针的封装， 现代语言不允许你直接去操作地址  因为现代语言都自带着垃圾回收机制， 在垃圾回收的过程中， 地址会经常改变，  改变地址的目的是为了提高内存的利用效率， 使内存连续</p>\n<h2 id=\"内存动态分配\"><a href=\"#内存动态分配\" class=\"headerlink\" title=\"内存动态分配\"></a>内存动态分配</h2><p>C语言主要分如下四个区</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">内存</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">特性 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">栈区</td>\n<td style=\"text-align:center\">是一个确定的常数(1~2M) 不同平台会有不同大小，超出会提示stackoverflow</td>\n<td style=\"text-align:center\">自动分配, 自动释放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">堆区</td>\n<td style=\"text-align:center\">用于动态内存分配</td>\n<td style=\"text-align:center\">手动分配和释放 ， 可占用80%内存</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全局区或静态区</td>\n<td style=\"text-align:center\">在程序中明确被初始化的全局变量、静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）</td>\n<td style=\"text-align:center\">只初始化一次 </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">程序代码区</td>\n<td style=\"text-align:center\">代码区指令根据程序设计流程依次执行，对于顺序指令，则只会执行一次（每个进程），如果反复，则需要使用跳转指令，如果进行递归，则需要借助栈来实现。</td>\n<td style=\"text-align:center\">代码区的指令中包括操作码和要操作的对象（或对象地址引用）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>栈区： 还用来保存当前函数的局部变量</li>\n<li>堆区： 存放new出来的变量</li>\n<li>全局区或静态区: 存放全局变量及对象的静态变量</li>\n<li>程序代码区:  存放指令、代码， 以前的金山游侠修改器就是专门改程序代码区的</li>\n</ul>\n<h3 id=\"分配内存代码\"><a href=\"#分配内存代码\" class=\"headerlink\" title=\"分配内存代码\"></a>分配内存代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// size_t 表示一个无符号整型</span></span><br><span class=\"line\"><span class=\"comment\">// p = malloc( size_t );</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给整型分配空间必须 传入整型长度的倍数（ 整型长度是 4个字节）</span></span><br><span class=\"line\"><span class=\"comment\">// 这样我就申请了40个字节的内存空间， 它能容纳10个整型的数字</span></span><br><span class=\"line\">p = <span class=\"built_in\">malloc</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际上 malloc 申请到的是一个数组， 下面这样是对前4个字节进行赋值</span></span><br><span class=\"line\">*p = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实际等价于</span></span><br><span class=\"line\">p[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你要给其他位置的字节赋值, 这样表示向后移动一个元素单位的位置</span></span><br><span class=\"line\">*(p+<span class=\"number\">1</span>) = <span class=\"number\">2</span>; </span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">p[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"释放内存\"><a href=\"#释放内存\" class=\"headerlink\" title=\"释放内存\"></a>释放内存</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">free</span>(p)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://img.nixiaolei.com/2019-04-04-22-39-41.png\" alt=\"C语言\"><br>C语言的诞生要比JavaScript早很多, 属于低级语言，比较擅长和系统交互写底层应用。</p>\n<p>C语言的编译工具就是gcc</p>\n<h2 id=\"🤯前端不限端\"><a href=\"#🤯前端不限端\" class=\"headerlink\" title=\"🤯前端不限端\"></a>🤯前端不限端</h2><p>作为一名优质的前端切图仔， 不应该把自己困死在前端中， 更应该多开阔视野， 朝较底层的方向探索</p>\n<p>当然， 这只是鸡汤， 我们来看看前端学习C语言的必要性</p>\n<ul>\n<li>编译开源软件的源代码</li>\n<li>C语言基本语法，要看得懂代码</li>\n<li>指针和C语言的坑</li>\n<li>从内存层面理解数据结构</li>\n<li>搞懂V8的内存管理机制</li>\n<li>分析webkit引擎代码</li>\n<li>用C语言编写Node.js和PHP扩展模块</li>\n</ul>\n<h2 id=\"C语言沉浮录\"><a href=\"#C语言沉浮录\" class=\"headerlink\" title=\"C语言沉浮录\"></a>C语言沉浮录</h2><p>C语言的前身是B语言</p>\n<ul>\n<li>天生的系统级语言</li>\n<li>最早用来编写Unix内核</li>\n<li>曾经最流行的语言</li>\n<li>至今仍在不断发展</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-46-58.png\" alt=\"语言发展史\"></p>\n<h2 id=\"C语言和JavaScript的异同\"><a href=\"#C语言和JavaScript的异同\" class=\"headerlink\" title=\"C语言和JavaScript的异同\"></a>C语言和JavaScript的异同</h2><ul>\n<li>C语言是编译型语言</li>\n<li>C语言要借助编译器转换成可执行程序</li>\n<li>JavaScript是解释型语言</li>\n<li>JavaScript要借助解释引擎运行</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-58-53.png\" alt=\"语言编译过程\"></p>\n<p>需要编译的语言经过编译后生成目标程序， 其实生成目标程序时已经是机器指令了， 但是计算机仍旧无法直接运行它，因为操作系统有他自己的规则， 想要符合操作系统的规则， 这时候就要走链接， 那链接做了哪些事让操作系统能够识别到该程序呢：</p>\n<ol>\n<li>给操作系统一个识别块，操作系统先读识别块再运行程序</li>\n<li>把生成的很多<code>.obj</code>文件串起来， 连成一块</li>\n</ol>\n<h2 id=\"C语言与C-语言的区别\"><a href=\"#C语言与C-语言的区别\" class=\"headerlink\" title=\"C语言与C++语言的区别\"></a>C语言与C++语言的区别</h2><ol>\n<li>C++是新的编程语言，并不是C的扩展</li>\n<li>C语言是面向过程的，C＋＋是面向对象的</li>\n<li>C和C++语言都有标准库【standard.io】</li>\n<li>目前C大多用在网络相关和嵌入式等方面【不管Python、还是JS，底层都需要C语言基本环境】</li>\n<li>目前C++大多用在复杂引擎和应用软件方面</li>\n</ol>\n<h2 id=\"理解内存与指针\"><a href=\"#理解内存与指针\" class=\"headerlink\" title=\"理解内存与指针\"></a>理解内存与指针</h2><ul>\n<li>内存与内存地址</li>\n<li>指针、地址与引用</li>\n<li>指向变量的指针</li>\n<li>指向指针的指针</li>\n<li>指向函数的指针</li>\n<li>动态内存分配</li>\n</ul>\n<p>要理解内存和指针首先我们应该知道内存在计算机中是什么样子的， 我们可以把内存看作是一个打了很多格子的小纸条，<strong>每个格子就是内存的基本存储单位</strong>, 1个单位是一个字节，也就是一个<code>byte</code>, 而一个<code>byte</code>等于8个<code>bit</code>，那我们该如何找到对应的内存呢， 实际上内存是有编号的，这个编号从0开始， 作为内存的地址（门牌）</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-14-38-20.png\" alt=\"内存地址\"></p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><blockquote>\n<p>指针其实也是可以运算的，但大多数情况没有意义，  一般用在计算存储空间</p>\n</blockquote>\n<p>容纳内存地址的变量就是指针</p>\n<p>C语言中， 指针也是有类型的， 因为不同的数据类型对应内存中的所占的大小不一样， 定义类型是为了从内存中拿出正确长度的数据， 比如： 短整型只占两个字节、 长整型占4个字节、  超长整型占8个字节、单精度浮点型占6个字节、 双精度浮点型占8个字节</p>\n<p>如果不正确定义指针的类型，就会导致从内存中拿出来的长度是错的， 也就是导致得到的值是错的</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-15-09-10.png\" alt=\"理解指针\"></p>\n<h4 id=\"🕵️‍一级指针结构\"><a href=\"#🕵️‍一级指针结构\" class=\"headerlink\" title=\"🕵️‍一级指针结构\"></a>🕵️‍一级指针结构</h4><p><img src=\"http://img.nixiaolei.com/2019-04-06-15-13-36.png\" alt=\"一级指针结构\"></p>\n<h4 id=\"🕵️‍二级指针结构\"><a href=\"#🕵️‍二级指针结构\" class=\"headerlink\" title=\"🕵️‍二级指针结构\"></a>🕵️‍二级指针结构</h4><p><img src=\"http://img.nixiaolei.com/2019-04-06-15-14-35.png\" alt=\"二级指针结构\"></p>\n<h4 id=\"🤒声明指针\"><a href=\"#🤒声明指针\" class=\"headerlink\" title=\"🤒声明指针\"></a>🤒声明指针</h4><blockquote>\n<p>一开始声明的指针我们只能给他一个Null或是 内存地址, 因为一个具体的值对于指针是没有意义的，</p>\n</blockquote>\n<p>声明一个整型的指针<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个变量， 会自动分配内存</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个指向变量a的指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> * p_a = &amp;a;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"🧐直接寻址和间接寻址\"><a href=\"#🧐直接寻址和间接寻址\" class=\"headerlink\" title=\"🧐直接寻址和间接寻址\"></a>🧐直接寻址和间接寻址</h4><p>直接使用变量和利用指针访问的结构是一样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(a);  <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>( *p );  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"🤒二级指针及多级指针\"><a href=\"#🤒二级指针及多级指针\" class=\"headerlink\" title=\"🤒二级指针及多级指针\"></a>🤒二级指针及多级指针</h4><blockquote>\n<p>不管是几级指针编译器都是能够通过的</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个变量， 会自动分配内存</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个指向变量a的指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> * p_a = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个指向指针的指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ** pp_a = &amp;p_a;</span><br></pre></td></tr></table></figure>\n<h4 id=\"指向函数的指针\"><a href=\"#指向函数的指针\" class=\"headerlink\" title=\"指向函数的指针\"></a>指向函数的指针</h4><blockquote>\n<p>函数它本身也在内存当中, 当我们看到一个指向函数的指针时就代表着函数调用， 回调函数就是基于指针的</p>\n</blockquote>\n<p>C语言的函数是有原型的</p>\n<p>声明一个两数相加函数的原型<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数返回类型及参数类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">( <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> )</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>实现函数<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1 + v2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建指向函数的指针<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>*(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) p_func;</span><br><span class=\"line\">p_func = add;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>引用是对指针的封装， 现代语言不允许你直接去操作地址  因为现代语言都自带着垃圾回收机制， 在垃圾回收的过程中， 地址会经常改变，  改变地址的目的是为了提高内存的利用效率， 使内存连续</p>\n<h2 id=\"内存动态分配\"><a href=\"#内存动态分配\" class=\"headerlink\" title=\"内存动态分配\"></a>内存动态分配</h2><p>C语言主要分如下四个区</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">内存</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">特性 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">栈区</td>\n<td style=\"text-align:center\">是一个确定的常数(1~2M) 不同平台会有不同大小，超出会提示stackoverflow</td>\n<td style=\"text-align:center\">自动分配, 自动释放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">堆区</td>\n<td style=\"text-align:center\">用于动态内存分配</td>\n<td style=\"text-align:center\">手动分配和释放 ， 可占用80%内存</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全局区或静态区</td>\n<td style=\"text-align:center\">在程序中明确被初始化的全局变量、静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）</td>\n<td style=\"text-align:center\">只初始化一次 </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">程序代码区</td>\n<td style=\"text-align:center\">代码区指令根据程序设计流程依次执行，对于顺序指令，则只会执行一次（每个进程），如果反复，则需要使用跳转指令，如果进行递归，则需要借助栈来实现。</td>\n<td style=\"text-align:center\">代码区的指令中包括操作码和要操作的对象（或对象地址引用）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>栈区： 还用来保存当前函数的局部变量</li>\n<li>堆区： 存放new出来的变量</li>\n<li>全局区或静态区: 存放全局变量及对象的静态变量</li>\n<li>程序代码区:  存放指令、代码， 以前的金山游侠修改器就是专门改程序代码区的</li>\n</ul>\n<h3 id=\"分配内存代码\"><a href=\"#分配内存代码\" class=\"headerlink\" title=\"分配内存代码\"></a>分配内存代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// size_t 表示一个无符号整型</span></span><br><span class=\"line\"><span class=\"comment\">// p = malloc( size_t );</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给整型分配空间必须 传入整型长度的倍数（ 整型长度是 4个字节）</span></span><br><span class=\"line\"><span class=\"comment\">// 这样我就申请了40个字节的内存空间， 它能容纳10个整型的数字</span></span><br><span class=\"line\">p = <span class=\"built_in\">malloc</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际上 malloc 申请到的是一个数组， 下面这样是对前4个字节进行赋值</span></span><br><span class=\"line\">*p = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实际等价于</span></span><br><span class=\"line\">p[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你要给其他位置的字节赋值, 这样表示向后移动一个元素单位的位置</span></span><br><span class=\"line\">*(p+<span class=\"number\">1</span>) = <span class=\"number\">2</span>; </span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">p[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"释放内存\"><a href=\"#释放内存\" class=\"headerlink\" title=\"释放内存\"></a>释放内存</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">free</span>(p)</span><br></pre></td></tr></table></figure>\n"},{"title":"【Linux】命令手册","date":"2019-04-02T12:35:33.000Z","_content":"\n\nlinux 只有区的概念\n\n## 终端快捷键\n| 命令 | 功能 | \n| ------ | ------ | \n| ctrl + c | 结束正在运行的程序 【 ping 、 teInet等】 | \n| ctrl + d | 结束输入或退出shell |\n| ctrl + s |  暂停屏幕输出 |\n| ctrl + q |  恢复屏幕输出 |\n| ctrl + l |  清屏， 等同于Clear |\n| ctrl + a / ctrl + e | 快速移动光标到行首 / 行尾 |\n\n\n\n## 身份命令\n| 命令 | 功能 | \n| ------ | ------ | \n| sudo | 暂时以root 用户身份运行命令 | \n| su | 切换用户身份, root身份切换不需要密码 |\n| exit |  退出当前身份或退出连接 |\n| w | 查看正在登录用户|\n\n### 路径知识\n* Linux下文件前带`.`表示隐藏文件\n* 一个`.`代表当前目录, 两个`..`代表上级目录\n\n\n## 资源目录相关命令\n> a是显示隐藏文件, l是显示长列表格\n\n命令 | 说明\n---|---\nls 或 dir | 查看当前目录内容\nls -l  | 显示长格式目录, 有创建时间,修改信息, 文件大小\nls -a | 显示隐藏文件\nls -al | 查看目录所有对应的权限( )\npwd | 宣誓当前目录的全部路径\ncd ~ | 进入到当前分配`home`目录下的用户区域, 比如`/home/nxl`\ncd / | 进入系统的根目录\n\n\n## 文件命令\n* [old] 表示旧文件       \n* [new] 表示操作后的文件     \n* [target] 目标文件        \n* [targetDir] 目标目录\n\n命令 | 说明\n---|---\nmkdir | 创建文件夹\nrmdir | 删除文件\ntouch [new] | 创建文件\nrm [target] | 删除文件\nrm -r [targetDir] | 删除文件夹\nrm -rf * | 删除所有内容(r递归, f强制)\ncp [old] [test/new] | 复制文件\ncp [old] -R [test/new] | 复制目录 \nln -s old new  | 建立软链\n\n\n## 界面切换命令 init [number]\n命令 | 说明\n---|---\n0  | 关机\n1 | 单用户\n2 | 多用户状态没有网络服务\n3 | 多用户状态有网络服务(就是平时的小黑窗)\n4 |  系统未使用保留给用户\n5 | 图形界面\n6 | 系统重启\n\n## 服务 / 进程管理命令\n\n命令 | 说明\n---|---\nsystemctl  | 查看进程\nststemctl [ status , start , stop , restart ] nginx |  如对 nginx 执行相关命令 \ntop  | 进程资源实时状态\nps  [aux] | 进程快照\nkill [-9] pid | 杀死进程\npkill [name] | 根据进程名杀死进程\n\n\n\n\n## 网络管理命令\n命令 | 说明\n---|---\nifconfig| 查看网络接口（ interface）\nip | 网络配置工具箱\nroute | 诊断网络\n ipdown eth0 | 关闭`eth0`网卡\nipup eth0 |开启`eth0`网卡\nss -anp , grep :22 |  查找占用端口情况\nnetstat -anp , grep :22 |  查找占用端口情况\n\n\n## 命令行下载命令\n命令 | 说明\n---|---\ncurl| 查看网络接口（ interface）\nwget | 网络配置工具箱\nwget -c | 断点续传\n\n\n## vi / vim 行编辑器\n> vim是vi的增强版\n\n命令 | 说明\n---|---\nvi [target] | 编辑目标文件\ncat [target] | 查看文件内容\ni (insert) | 在当前光标所在字符的前面，转为编辑模式；\na (append) | 在当前光标所在字符的后面，转为编辑模式；\no| 在当前光标所在行的下方，新建一行，并转为输入模式；\nI|在当前光标所在行的行首，转换为输入模式\nA|在当前光标所在行的行尾，转换为输入模式\nO|在当前光标所在行的上方，新建一行，并转为输入模式；\nesc | 退出编辑, ubuntu 需要 `esc + :`\n:q| 退出编辑\n:q!| 强制退出\n:wq| 退出并保存\n\n\n## 系统操作命令\n命令 | 说明\n---|---\n！| 强制执行命令\nshutdown -h now  | 立刻关机\nshutdown -r now /reboot | 立刻重启计算机\nsu - root | 先用普通账户登录再切换 sudo临时已管理员操作\nlogout | 用户注销\n\n## 帮助命令\n命令 | 说明\n---|---\n--help  | 查看命令帮助\nman xxx | 查看详细手册\n\n## 辅助命令\n命令 | 说明\n---|---\n0  | 关机\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【Linux】命令手册.md","raw":"---\ntitle: 【Linux】命令手册\ndate: 2019-04-02 20:35:33\ncategories: Linux\ntags: Linux\n---\n\n\nlinux 只有区的概念\n\n## 终端快捷键\n| 命令 | 功能 | \n| ------ | ------ | \n| ctrl + c | 结束正在运行的程序 【 ping 、 teInet等】 | \n| ctrl + d | 结束输入或退出shell |\n| ctrl + s |  暂停屏幕输出 |\n| ctrl + q |  恢复屏幕输出 |\n| ctrl + l |  清屏， 等同于Clear |\n| ctrl + a / ctrl + e | 快速移动光标到行首 / 行尾 |\n\n\n\n## 身份命令\n| 命令 | 功能 | \n| ------ | ------ | \n| sudo | 暂时以root 用户身份运行命令 | \n| su | 切换用户身份, root身份切换不需要密码 |\n| exit |  退出当前身份或退出连接 |\n| w | 查看正在登录用户|\n\n### 路径知识\n* Linux下文件前带`.`表示隐藏文件\n* 一个`.`代表当前目录, 两个`..`代表上级目录\n\n\n## 资源目录相关命令\n> a是显示隐藏文件, l是显示长列表格\n\n命令 | 说明\n---|---\nls 或 dir | 查看当前目录内容\nls -l  | 显示长格式目录, 有创建时间,修改信息, 文件大小\nls -a | 显示隐藏文件\nls -al | 查看目录所有对应的权限( )\npwd | 宣誓当前目录的全部路径\ncd ~ | 进入到当前分配`home`目录下的用户区域, 比如`/home/nxl`\ncd / | 进入系统的根目录\n\n\n## 文件命令\n* [old] 表示旧文件       \n* [new] 表示操作后的文件     \n* [target] 目标文件        \n* [targetDir] 目标目录\n\n命令 | 说明\n---|---\nmkdir | 创建文件夹\nrmdir | 删除文件\ntouch [new] | 创建文件\nrm [target] | 删除文件\nrm -r [targetDir] | 删除文件夹\nrm -rf * | 删除所有内容(r递归, f强制)\ncp [old] [test/new] | 复制文件\ncp [old] -R [test/new] | 复制目录 \nln -s old new  | 建立软链\n\n\n## 界面切换命令 init [number]\n命令 | 说明\n---|---\n0  | 关机\n1 | 单用户\n2 | 多用户状态没有网络服务\n3 | 多用户状态有网络服务(就是平时的小黑窗)\n4 |  系统未使用保留给用户\n5 | 图形界面\n6 | 系统重启\n\n## 服务 / 进程管理命令\n\n命令 | 说明\n---|---\nsystemctl  | 查看进程\nststemctl [ status , start , stop , restart ] nginx |  如对 nginx 执行相关命令 \ntop  | 进程资源实时状态\nps  [aux] | 进程快照\nkill [-9] pid | 杀死进程\npkill [name] | 根据进程名杀死进程\n\n\n\n\n## 网络管理命令\n命令 | 说明\n---|---\nifconfig| 查看网络接口（ interface）\nip | 网络配置工具箱\nroute | 诊断网络\n ipdown eth0 | 关闭`eth0`网卡\nipup eth0 |开启`eth0`网卡\nss -anp , grep :22 |  查找占用端口情况\nnetstat -anp , grep :22 |  查找占用端口情况\n\n\n## 命令行下载命令\n命令 | 说明\n---|---\ncurl| 查看网络接口（ interface）\nwget | 网络配置工具箱\nwget -c | 断点续传\n\n\n## vi / vim 行编辑器\n> vim是vi的增强版\n\n命令 | 说明\n---|---\nvi [target] | 编辑目标文件\ncat [target] | 查看文件内容\ni (insert) | 在当前光标所在字符的前面，转为编辑模式；\na (append) | 在当前光标所在字符的后面，转为编辑模式；\no| 在当前光标所在行的下方，新建一行，并转为输入模式；\nI|在当前光标所在行的行首，转换为输入模式\nA|在当前光标所在行的行尾，转换为输入模式\nO|在当前光标所在行的上方，新建一行，并转为输入模式；\nesc | 退出编辑, ubuntu 需要 `esc + :`\n:q| 退出编辑\n:q!| 强制退出\n:wq| 退出并保存\n\n\n## 系统操作命令\n命令 | 说明\n---|---\n！| 强制执行命令\nshutdown -h now  | 立刻关机\nshutdown -r now /reboot | 立刻重启计算机\nsu - root | 先用普通账户登录再切换 sudo临时已管理员操作\nlogout | 用户注销\n\n## 帮助命令\n命令 | 说明\n---|---\n--help  | 查看命令帮助\nman xxx | 查看详细手册\n\n## 辅助命令\n命令 | 说明\n---|---\n0  | 关机\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【Linux】命令手册","published":1,"updated":"2019-04-03T14:03:44.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wab000xssuwkjfxoot5","content":"<p>linux 只有区的概念</p>\n<h2 id=\"终端快捷键\"><a href=\"#终端快捷键\" class=\"headerlink\" title=\"终端快捷键\"></a>终端快捷键</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl + c</td>\n<td>结束正在运行的程序 【 ping 、 teInet等】</td>\n</tr>\n<tr>\n<td>ctrl + d</td>\n<td>结束输入或退出shell</td>\n</tr>\n<tr>\n<td>ctrl + s</td>\n<td>暂停屏幕输出</td>\n</tr>\n<tr>\n<td>ctrl + q</td>\n<td>恢复屏幕输出</td>\n</tr>\n<tr>\n<td>ctrl + l</td>\n<td>清屏， 等同于Clear</td>\n</tr>\n<tr>\n<td>ctrl + a / ctrl + e</td>\n<td>快速移动光标到行首 / 行尾</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"身份命令\"><a href=\"#身份命令\" class=\"headerlink\" title=\"身份命令\"></a>身份命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sudo</td>\n<td>暂时以root 用户身份运行命令</td>\n</tr>\n<tr>\n<td>su</td>\n<td>切换用户身份, root身份切换不需要密码</td>\n</tr>\n<tr>\n<td>exit</td>\n<td>退出当前身份或退出连接</td>\n</tr>\n<tr>\n<td>w</td>\n<td>查看正在登录用户</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"路径知识\"><a href=\"#路径知识\" class=\"headerlink\" title=\"路径知识\"></a>路径知识</h3><ul>\n<li>Linux下文件前带<code>.</code>表示隐藏文件</li>\n<li>一个<code>.</code>代表当前目录, 两个<code>..</code>代表上级目录</li>\n</ul>\n<h2 id=\"资源目录相关命令\"><a href=\"#资源目录相关命令\" class=\"headerlink\" title=\"资源目录相关命令\"></a>资源目录相关命令</h2><blockquote>\n<p>a是显示隐藏文件, l是显示长列表格</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ls 或 dir</td>\n<td>查看当前目录内容</td>\n</tr>\n<tr>\n<td>ls -l</td>\n<td>显示长格式目录, 有创建时间,修改信息, 文件大小</td>\n</tr>\n<tr>\n<td>ls -a</td>\n<td>显示隐藏文件</td>\n</tr>\n<tr>\n<td>ls -al</td>\n<td>查看目录所有对应的权限( )</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>宣誓当前目录的全部路径</td>\n</tr>\n<tr>\n<td>cd ~</td>\n<td>进入到当前分配<code>home</code>目录下的用户区域, 比如<code>/home/nxl</code></td>\n</tr>\n<tr>\n<td>cd /</td>\n<td>进入系统的根目录</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"文件命令\"><a href=\"#文件命令\" class=\"headerlink\" title=\"文件命令\"></a>文件命令</h2><ul>\n<li>[old] 表示旧文件       </li>\n<li>[new] 表示操作后的文件     </li>\n<li>[target] 目标文件        </li>\n<li>[targetDir] 目标目录</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mkdir</td>\n<td>创建文件夹</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td>touch [new]</td>\n<td>创建文件</td>\n</tr>\n<tr>\n<td>rm [target]</td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td>rm -r [targetDir]</td>\n<td>删除文件夹</td>\n</tr>\n<tr>\n<td>rm -rf *</td>\n<td>删除所有内容(r递归, f强制)</td>\n</tr>\n<tr>\n<td>cp [old] [test/new]</td>\n<td>复制文件</td>\n</tr>\n<tr>\n<td>cp [old] -R [test/new]</td>\n<td>复制目录 </td>\n</tr>\n<tr>\n<td>ln -s old new</td>\n<td>建立软链</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"界面切换命令-init-number\"><a href=\"#界面切换命令-init-number\" class=\"headerlink\" title=\"界面切换命令 init [number]\"></a>界面切换命令 init [number]</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>关机</td>\n</tr>\n<tr>\n<td>1</td>\n<td>单用户</td>\n</tr>\n<tr>\n<td>2</td>\n<td>多用户状态没有网络服务</td>\n</tr>\n<tr>\n<td>3</td>\n<td>多用户状态有网络服务(就是平时的小黑窗)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>系统未使用保留给用户</td>\n</tr>\n<tr>\n<td>5</td>\n<td>图形界面</td>\n</tr>\n<tr>\n<td>6</td>\n<td>系统重启</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"服务-进程管理命令\"><a href=\"#服务-进程管理命令\" class=\"headerlink\" title=\"服务 / 进程管理命令\"></a>服务 / 进程管理命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>systemctl</td>\n<td>查看进程</td>\n</tr>\n<tr>\n<td>ststemctl [ status , start , stop , restart ] nginx</td>\n<td>如对 nginx 执行相关命令 </td>\n</tr>\n<tr>\n<td>top</td>\n<td>进程资源实时状态</td>\n</tr>\n<tr>\n<td>ps  [aux]</td>\n<td>进程快照</td>\n</tr>\n<tr>\n<td>kill [-9] pid</td>\n<td>杀死进程</td>\n</tr>\n<tr>\n<td>pkill [name]</td>\n<td>根据进程名杀死进程</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"网络管理命令\"><a href=\"#网络管理命令\" class=\"headerlink\" title=\"网络管理命令\"></a>网络管理命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ifconfig</td>\n<td>查看网络接口（ interface）</td>\n</tr>\n<tr>\n<td>ip</td>\n<td>网络配置工具箱</td>\n</tr>\n<tr>\n<td>route</td>\n<td>诊断网络</td>\n</tr>\n<tr>\n<td> ipdown eth0</td>\n<td>关闭<code>eth0</code>网卡</td>\n</tr>\n<tr>\n<td>ipup eth0</td>\n<td>开启<code>eth0</code>网卡</td>\n</tr>\n<tr>\n<td>ss -anp , grep :22</td>\n<td>查找占用端口情况</td>\n</tr>\n<tr>\n<td>netstat -anp , grep :22</td>\n<td>查找占用端口情况</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"命令行下载命令\"><a href=\"#命令行下载命令\" class=\"headerlink\" title=\"命令行下载命令\"></a>命令行下载命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>curl</td>\n<td>查看网络接口（ interface）</td>\n</tr>\n<tr>\n<td>wget</td>\n<td>网络配置工具箱</td>\n</tr>\n<tr>\n<td>wget -c</td>\n<td>断点续传</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"vi-vim-行编辑器\"><a href=\"#vi-vim-行编辑器\" class=\"headerlink\" title=\"vi / vim 行编辑器\"></a>vi / vim 行编辑器</h2><blockquote>\n<p>vim是vi的增强版</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>vi [target]</td>\n<td>编辑目标文件</td>\n</tr>\n<tr>\n<td>cat [target]</td>\n<td>查看文件内容</td>\n</tr>\n<tr>\n<td>i (insert)</td>\n<td>在当前光标所在字符的前面，转为编辑模式；</td>\n</tr>\n<tr>\n<td>a (append)</td>\n<td>在当前光标所在字符的后面，转为编辑模式；</td>\n</tr>\n<tr>\n<td>o</td>\n<td>在当前光标所在行的下方，新建一行，并转为输入模式；</td>\n</tr>\n<tr>\n<td>I</td>\n<td>在当前光标所在行的行首，转换为输入模式</td>\n</tr>\n<tr>\n<td>A</td>\n<td>在当前光标所在行的行尾，转换为输入模式</td>\n</tr>\n<tr>\n<td>O</td>\n<td>在当前光标所在行的上方，新建一行，并转为输入模式；</td>\n</tr>\n<tr>\n<td>esc</td>\n<td>退出编辑, ubuntu 需要 <code>esc + :</code></td>\n</tr>\n<tr>\n<td>:q</td>\n<td>退出编辑</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>强制退出</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td>退出并保存</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"系统操作命令\"><a href=\"#系统操作命令\" class=\"headerlink\" title=\"系统操作命令\"></a>系统操作命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>！</td>\n<td>强制执行命令</td>\n</tr>\n<tr>\n<td>shutdown -h now</td>\n<td>立刻关机</td>\n</tr>\n<tr>\n<td>shutdown -r now /reboot</td>\n<td>立刻重启计算机</td>\n</tr>\n<tr>\n<td>su - root</td>\n<td>先用普通账户登录再切换 sudo临时已管理员操作</td>\n</tr>\n<tr>\n<td>logout</td>\n<td>用户注销</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>–help</td>\n<td>查看命令帮助</td>\n</tr>\n<tr>\n<td>man xxx</td>\n<td>查看详细手册</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"辅助命令\"><a href=\"#辅助命令\" class=\"headerlink\" title=\"辅助命令\"></a>辅助命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>关机</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>linux 只有区的概念</p>\n<h2 id=\"终端快捷键\"><a href=\"#终端快捷键\" class=\"headerlink\" title=\"终端快捷键\"></a>终端快捷键</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl + c</td>\n<td>结束正在运行的程序 【 ping 、 teInet等】</td>\n</tr>\n<tr>\n<td>ctrl + d</td>\n<td>结束输入或退出shell</td>\n</tr>\n<tr>\n<td>ctrl + s</td>\n<td>暂停屏幕输出</td>\n</tr>\n<tr>\n<td>ctrl + q</td>\n<td>恢复屏幕输出</td>\n</tr>\n<tr>\n<td>ctrl + l</td>\n<td>清屏， 等同于Clear</td>\n</tr>\n<tr>\n<td>ctrl + a / ctrl + e</td>\n<td>快速移动光标到行首 / 行尾</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"身份命令\"><a href=\"#身份命令\" class=\"headerlink\" title=\"身份命令\"></a>身份命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sudo</td>\n<td>暂时以root 用户身份运行命令</td>\n</tr>\n<tr>\n<td>su</td>\n<td>切换用户身份, root身份切换不需要密码</td>\n</tr>\n<tr>\n<td>exit</td>\n<td>退出当前身份或退出连接</td>\n</tr>\n<tr>\n<td>w</td>\n<td>查看正在登录用户</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"路径知识\"><a href=\"#路径知识\" class=\"headerlink\" title=\"路径知识\"></a>路径知识</h3><ul>\n<li>Linux下文件前带<code>.</code>表示隐藏文件</li>\n<li>一个<code>.</code>代表当前目录, 两个<code>..</code>代表上级目录</li>\n</ul>\n<h2 id=\"资源目录相关命令\"><a href=\"#资源目录相关命令\" class=\"headerlink\" title=\"资源目录相关命令\"></a>资源目录相关命令</h2><blockquote>\n<p>a是显示隐藏文件, l是显示长列表格</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ls 或 dir</td>\n<td>查看当前目录内容</td>\n</tr>\n<tr>\n<td>ls -l</td>\n<td>显示长格式目录, 有创建时间,修改信息, 文件大小</td>\n</tr>\n<tr>\n<td>ls -a</td>\n<td>显示隐藏文件</td>\n</tr>\n<tr>\n<td>ls -al</td>\n<td>查看目录所有对应的权限( )</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>宣誓当前目录的全部路径</td>\n</tr>\n<tr>\n<td>cd ~</td>\n<td>进入到当前分配<code>home</code>目录下的用户区域, 比如<code>/home/nxl</code></td>\n</tr>\n<tr>\n<td>cd /</td>\n<td>进入系统的根目录</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"文件命令\"><a href=\"#文件命令\" class=\"headerlink\" title=\"文件命令\"></a>文件命令</h2><ul>\n<li>[old] 表示旧文件       </li>\n<li>[new] 表示操作后的文件     </li>\n<li>[target] 目标文件        </li>\n<li>[targetDir] 目标目录</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mkdir</td>\n<td>创建文件夹</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td>touch [new]</td>\n<td>创建文件</td>\n</tr>\n<tr>\n<td>rm [target]</td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td>rm -r [targetDir]</td>\n<td>删除文件夹</td>\n</tr>\n<tr>\n<td>rm -rf *</td>\n<td>删除所有内容(r递归, f强制)</td>\n</tr>\n<tr>\n<td>cp [old] [test/new]</td>\n<td>复制文件</td>\n</tr>\n<tr>\n<td>cp [old] -R [test/new]</td>\n<td>复制目录 </td>\n</tr>\n<tr>\n<td>ln -s old new</td>\n<td>建立软链</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"界面切换命令-init-number\"><a href=\"#界面切换命令-init-number\" class=\"headerlink\" title=\"界面切换命令 init [number]\"></a>界面切换命令 init [number]</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>关机</td>\n</tr>\n<tr>\n<td>1</td>\n<td>单用户</td>\n</tr>\n<tr>\n<td>2</td>\n<td>多用户状态没有网络服务</td>\n</tr>\n<tr>\n<td>3</td>\n<td>多用户状态有网络服务(就是平时的小黑窗)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>系统未使用保留给用户</td>\n</tr>\n<tr>\n<td>5</td>\n<td>图形界面</td>\n</tr>\n<tr>\n<td>6</td>\n<td>系统重启</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"服务-进程管理命令\"><a href=\"#服务-进程管理命令\" class=\"headerlink\" title=\"服务 / 进程管理命令\"></a>服务 / 进程管理命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>systemctl</td>\n<td>查看进程</td>\n</tr>\n<tr>\n<td>ststemctl [ status , start , stop , restart ] nginx</td>\n<td>如对 nginx 执行相关命令 </td>\n</tr>\n<tr>\n<td>top</td>\n<td>进程资源实时状态</td>\n</tr>\n<tr>\n<td>ps  [aux]</td>\n<td>进程快照</td>\n</tr>\n<tr>\n<td>kill [-9] pid</td>\n<td>杀死进程</td>\n</tr>\n<tr>\n<td>pkill [name]</td>\n<td>根据进程名杀死进程</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"网络管理命令\"><a href=\"#网络管理命令\" class=\"headerlink\" title=\"网络管理命令\"></a>网络管理命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ifconfig</td>\n<td>查看网络接口（ interface）</td>\n</tr>\n<tr>\n<td>ip</td>\n<td>网络配置工具箱</td>\n</tr>\n<tr>\n<td>route</td>\n<td>诊断网络</td>\n</tr>\n<tr>\n<td> ipdown eth0</td>\n<td>关闭<code>eth0</code>网卡</td>\n</tr>\n<tr>\n<td>ipup eth0</td>\n<td>开启<code>eth0</code>网卡</td>\n</tr>\n<tr>\n<td>ss -anp , grep :22</td>\n<td>查找占用端口情况</td>\n</tr>\n<tr>\n<td>netstat -anp , grep :22</td>\n<td>查找占用端口情况</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"命令行下载命令\"><a href=\"#命令行下载命令\" class=\"headerlink\" title=\"命令行下载命令\"></a>命令行下载命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>curl</td>\n<td>查看网络接口（ interface）</td>\n</tr>\n<tr>\n<td>wget</td>\n<td>网络配置工具箱</td>\n</tr>\n<tr>\n<td>wget -c</td>\n<td>断点续传</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"vi-vim-行编辑器\"><a href=\"#vi-vim-行编辑器\" class=\"headerlink\" title=\"vi / vim 行编辑器\"></a>vi / vim 行编辑器</h2><blockquote>\n<p>vim是vi的增强版</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>vi [target]</td>\n<td>编辑目标文件</td>\n</tr>\n<tr>\n<td>cat [target]</td>\n<td>查看文件内容</td>\n</tr>\n<tr>\n<td>i (insert)</td>\n<td>在当前光标所在字符的前面，转为编辑模式；</td>\n</tr>\n<tr>\n<td>a (append)</td>\n<td>在当前光标所在字符的后面，转为编辑模式；</td>\n</tr>\n<tr>\n<td>o</td>\n<td>在当前光标所在行的下方，新建一行，并转为输入模式；</td>\n</tr>\n<tr>\n<td>I</td>\n<td>在当前光标所在行的行首，转换为输入模式</td>\n</tr>\n<tr>\n<td>A</td>\n<td>在当前光标所在行的行尾，转换为输入模式</td>\n</tr>\n<tr>\n<td>O</td>\n<td>在当前光标所在行的上方，新建一行，并转为输入模式；</td>\n</tr>\n<tr>\n<td>esc</td>\n<td>退出编辑, ubuntu 需要 <code>esc + :</code></td>\n</tr>\n<tr>\n<td>:q</td>\n<td>退出编辑</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>强制退出</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td>退出并保存</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"系统操作命令\"><a href=\"#系统操作命令\" class=\"headerlink\" title=\"系统操作命令\"></a>系统操作命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>！</td>\n<td>强制执行命令</td>\n</tr>\n<tr>\n<td>shutdown -h now</td>\n<td>立刻关机</td>\n</tr>\n<tr>\n<td>shutdown -r now /reboot</td>\n<td>立刻重启计算机</td>\n</tr>\n<tr>\n<td>su - root</td>\n<td>先用普通账户登录再切换 sudo临时已管理员操作</td>\n</tr>\n<tr>\n<td>logout</td>\n<td>用户注销</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>–help</td>\n<td>查看命令帮助</td>\n</tr>\n<tr>\n<td>man xxx</td>\n<td>查看详细手册</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"辅助命令\"><a href=\"#辅助命令\" class=\"headerlink\" title=\"辅助命令\"></a>辅助命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>关机</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"【NodeJs】异步IO与EventLoop","date":"2019-03-26T14:49:27.000Z","_content":"\nIO密集型就是需要频繁请求的程序，高访问量，  CPU密集型就是需要进行大量计算的 \n\n\n## 异步IO的好处\n\n* 前端通过异步IO可以消除UI堵塞。\n* 假设请求资源A的时间为M,请求资源B的时间为N.那么同步的请求耗时为M+N.如果采用异步方式占用时间为Max(M,N)。\n* 随着业务的复杂，会引入分布式系统，时间会线性的增加，M+N+...和Max(M,N…)，这会放大同步和异步之间的差异。\n* I/O是昂贵的，分布式I/O是更昂贵的。\n  * 分布式因为你读取到了这个值， 但并没有在你这台机器上， 远程的机器想要读取到那就必须要走网络， 这个过程就变长了\n* NodeJS 适用于IO密集型不适用CPU密集型\n\n\n\n\n## Node对异步IO的实现\n> 完美的异步IO应该是应该是应用程序发起非阻塞调用，无需通过遍历或者事件幻想等方式轮询。\n\nNode.js 的事件循环和在浏览器中的实现不太一样， 在Node.js 中事件循环交给了Libuv托管，  Libuv 和 v8 是分别独立的线程， 辅助Node.js 进行事件轮询\n\nNode.js 依靠v8运行javascript, 并且绑定了底层的操作系统\n\n当V8接收到用户的请求进入， 通过绑定系统接口，将事件交给Libuv处理， Libuv 将事件加入事件队列( event queue)， EventLoop 不行的旋转并执行同步事件，当遇到异步事件时，将其交给 worker Threads 线程， 比如操作文件就是交给工作线程去同步完成， 当文件操作完毕后， 根据文件描述符去获取数据， 然后将结果作为参数返回给事件队列中等候的回调函数\n\n\n![EventLoop](http://img.nixiaolei.com/2019-03-29-22-50-40.png)\n\n\n\n## 常用的Node控制异步技术手段\n> Promise 是一个语法， 规范， js只是实现了这个规范，  Promise 是一个高级接口， 创建一次，不容易修改， then就是 低级接口， 可以一直then ,处理逻辑\n\n1. Step、wind（提供等待的异步库）、Bigpipe、Q.js\n2. Async、Await\n3. Promise/Defferred 是一种先执行异步调用，延迟传递的处理方式。Promise是高级接口，事件是低级接口。低级接口可以构建更多复杂的场景，高级接口一旦定义，不太容易变化，不再有低级接口的灵活性，但对于解决问题非常有效\n4. 由于Node基于V8的原因，目前还不支持协程。协程不是进程或线程，其执行过程更类似于子例程，或者说不带返回值的函数调用。一个程序可以包含多个协程，可以对比与一个进程包含多个线程，因而下面我们来比较协程和线程。我们知道多个线程相对独立，有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制。\n\n\n\n##  底层的知识\n1. CPU时钟周期：1/cpu主频 -> 1s/3.1 GHz\n![底层知识](http://img.nixiaolei.com/2019-03-29-22-54-03.png)\n\n\n3. 操作系统对计算机进行了抽象，将所有输入输出设备抽象为文件。内核在进行文件I/O操作时，通过文件描述符进行管理。应用程序如果需要进行IO需要打开文件描述符，在进行文件和数据的读写。异步IO不带数据直接返回，要获取数据还需要通过文件描述符再次读取。\n\n![文件操作](http://img.nixiaolei.com/2019-03-29-22-54-36.png)\n\n\n","source":"_posts/【NodeJs】异步IO与EventLoop.md","raw":"---\ntitle: 【NodeJs】异步IO与EventLoop\ndate: 2019-03-26 22:49:27\ncategories: NodeJs\ntags: [ NodeJs, JavaScript ]\n---\n\nIO密集型就是需要频繁请求的程序，高访问量，  CPU密集型就是需要进行大量计算的 \n\n\n## 异步IO的好处\n\n* 前端通过异步IO可以消除UI堵塞。\n* 假设请求资源A的时间为M,请求资源B的时间为N.那么同步的请求耗时为M+N.如果采用异步方式占用时间为Max(M,N)。\n* 随着业务的复杂，会引入分布式系统，时间会线性的增加，M+N+...和Max(M,N…)，这会放大同步和异步之间的差异。\n* I/O是昂贵的，分布式I/O是更昂贵的。\n  * 分布式因为你读取到了这个值， 但并没有在你这台机器上， 远程的机器想要读取到那就必须要走网络， 这个过程就变长了\n* NodeJS 适用于IO密集型不适用CPU密集型\n\n\n\n\n## Node对异步IO的实现\n> 完美的异步IO应该是应该是应用程序发起非阻塞调用，无需通过遍历或者事件幻想等方式轮询。\n\nNode.js 的事件循环和在浏览器中的实现不太一样， 在Node.js 中事件循环交给了Libuv托管，  Libuv 和 v8 是分别独立的线程， 辅助Node.js 进行事件轮询\n\nNode.js 依靠v8运行javascript, 并且绑定了底层的操作系统\n\n当V8接收到用户的请求进入， 通过绑定系统接口，将事件交给Libuv处理， Libuv 将事件加入事件队列( event queue)， EventLoop 不行的旋转并执行同步事件，当遇到异步事件时，将其交给 worker Threads 线程， 比如操作文件就是交给工作线程去同步完成， 当文件操作完毕后， 根据文件描述符去获取数据， 然后将结果作为参数返回给事件队列中等候的回调函数\n\n\n![EventLoop](http://img.nixiaolei.com/2019-03-29-22-50-40.png)\n\n\n\n## 常用的Node控制异步技术手段\n> Promise 是一个语法， 规范， js只是实现了这个规范，  Promise 是一个高级接口， 创建一次，不容易修改， then就是 低级接口， 可以一直then ,处理逻辑\n\n1. Step、wind（提供等待的异步库）、Bigpipe、Q.js\n2. Async、Await\n3. Promise/Defferred 是一种先执行异步调用，延迟传递的处理方式。Promise是高级接口，事件是低级接口。低级接口可以构建更多复杂的场景，高级接口一旦定义，不太容易变化，不再有低级接口的灵活性，但对于解决问题非常有效\n4. 由于Node基于V8的原因，目前还不支持协程。协程不是进程或线程，其执行过程更类似于子例程，或者说不带返回值的函数调用。一个程序可以包含多个协程，可以对比与一个进程包含多个线程，因而下面我们来比较协程和线程。我们知道多个线程相对独立，有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制。\n\n\n\n##  底层的知识\n1. CPU时钟周期：1/cpu主频 -> 1s/3.1 GHz\n![底层知识](http://img.nixiaolei.com/2019-03-29-22-54-03.png)\n\n\n3. 操作系统对计算机进行了抽象，将所有输入输出设备抽象为文件。内核在进行文件I/O操作时，通过文件描述符进行管理。应用程序如果需要进行IO需要打开文件描述符，在进行文件和数据的读写。异步IO不带数据直接返回，要获取数据还需要通过文件描述符再次读取。\n\n![文件操作](http://img.nixiaolei.com/2019-03-29-22-54-36.png)\n\n\n","slug":"【NodeJs】异步IO与EventLoop","published":1,"updated":"2019-03-29T14:55:41.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wan0011ssuwvcthfuik","content":"<p>IO密集型就是需要频繁请求的程序，高访问量，  CPU密集型就是需要进行大量计算的 </p>\n<h2 id=\"异步IO的好处\"><a href=\"#异步IO的好处\" class=\"headerlink\" title=\"异步IO的好处\"></a>异步IO的好处</h2><ul>\n<li>前端通过异步IO可以消除UI堵塞。</li>\n<li>假设请求资源A的时间为M,请求资源B的时间为N.那么同步的请求耗时为M+N.如果采用异步方式占用时间为Max(M,N)。</li>\n<li>随着业务的复杂，会引入分布式系统，时间会线性的增加，M+N+…和Max(M,N…)，这会放大同步和异步之间的差异。</li>\n<li>I/O是昂贵的，分布式I/O是更昂贵的。<ul>\n<li>分布式因为你读取到了这个值， 但并没有在你这台机器上， 远程的机器想要读取到那就必须要走网络， 这个过程就变长了</li>\n</ul>\n</li>\n<li>NodeJS 适用于IO密集型不适用CPU密集型</li>\n</ul>\n<h2 id=\"Node对异步IO的实现\"><a href=\"#Node对异步IO的实现\" class=\"headerlink\" title=\"Node对异步IO的实现\"></a>Node对异步IO的实现</h2><blockquote>\n<p>完美的异步IO应该是应该是应用程序发起非阻塞调用，无需通过遍历或者事件幻想等方式轮询。</p>\n</blockquote>\n<p>Node.js 的事件循环和在浏览器中的实现不太一样， 在Node.js 中事件循环交给了Libuv托管，  Libuv 和 v8 是分别独立的线程， 辅助Node.js 进行事件轮询</p>\n<p>Node.js 依靠v8运行javascript, 并且绑定了底层的操作系统</p>\n<p>当V8接收到用户的请求进入， 通过绑定系统接口，将事件交给Libuv处理， Libuv 将事件加入事件队列( event queue)， EventLoop 不行的旋转并执行同步事件，当遇到异步事件时，将其交给 worker Threads 线程， 比如操作文件就是交给工作线程去同步完成， 当文件操作完毕后， 根据文件描述符去获取数据， 然后将结果作为参数返回给事件队列中等候的回调函数</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-50-40.png\" alt=\"EventLoop\"></p>\n<h2 id=\"常用的Node控制异步技术手段\"><a href=\"#常用的Node控制异步技术手段\" class=\"headerlink\" title=\"常用的Node控制异步技术手段\"></a>常用的Node控制异步技术手段</h2><blockquote>\n<p>Promise 是一个语法， 规范， js只是实现了这个规范，  Promise 是一个高级接口， 创建一次，不容易修改， then就是 低级接口， 可以一直then ,处理逻辑</p>\n</blockquote>\n<ol>\n<li>Step、wind（提供等待的异步库）、Bigpipe、Q.js</li>\n<li>Async、Await</li>\n<li>Promise/Defferred 是一种先执行异步调用，延迟传递的处理方式。Promise是高级接口，事件是低级接口。低级接口可以构建更多复杂的场景，高级接口一旦定义，不太容易变化，不再有低级接口的灵活性，但对于解决问题非常有效</li>\n<li>由于Node基于V8的原因，目前还不支持协程。协程不是进程或线程，其执行过程更类似于子例程，或者说不带返回值的函数调用。一个程序可以包含多个协程，可以对比与一个进程包含多个线程，因而下面我们来比较协程和线程。我们知道多个线程相对独立，有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制。</li>\n</ol>\n<h2 id=\"底层的知识\"><a href=\"#底层的知识\" class=\"headerlink\" title=\"底层的知识\"></a>底层的知识</h2><ol>\n<li>CPU时钟周期：1/cpu主频 -&gt; 1s/3.1 GHz<br><img src=\"http://img.nixiaolei.com/2019-03-29-22-54-03.png\" alt=\"底层知识\"></li>\n</ol>\n<ol start=\"3\">\n<li>操作系统对计算机进行了抽象，将所有输入输出设备抽象为文件。内核在进行文件I/O操作时，通过文件描述符进行管理。应用程序如果需要进行IO需要打开文件描述符，在进行文件和数据的读写。异步IO不带数据直接返回，要获取数据还需要通过文件描述符再次读取。</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-54-36.png\" alt=\"文件操作\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>IO密集型就是需要频繁请求的程序，高访问量，  CPU密集型就是需要进行大量计算的 </p>\n<h2 id=\"异步IO的好处\"><a href=\"#异步IO的好处\" class=\"headerlink\" title=\"异步IO的好处\"></a>异步IO的好处</h2><ul>\n<li>前端通过异步IO可以消除UI堵塞。</li>\n<li>假设请求资源A的时间为M,请求资源B的时间为N.那么同步的请求耗时为M+N.如果采用异步方式占用时间为Max(M,N)。</li>\n<li>随着业务的复杂，会引入分布式系统，时间会线性的增加，M+N+…和Max(M,N…)，这会放大同步和异步之间的差异。</li>\n<li>I/O是昂贵的，分布式I/O是更昂贵的。<ul>\n<li>分布式因为你读取到了这个值， 但并没有在你这台机器上， 远程的机器想要读取到那就必须要走网络， 这个过程就变长了</li>\n</ul>\n</li>\n<li>NodeJS 适用于IO密集型不适用CPU密集型</li>\n</ul>\n<h2 id=\"Node对异步IO的实现\"><a href=\"#Node对异步IO的实现\" class=\"headerlink\" title=\"Node对异步IO的实现\"></a>Node对异步IO的实现</h2><blockquote>\n<p>完美的异步IO应该是应该是应用程序发起非阻塞调用，无需通过遍历或者事件幻想等方式轮询。</p>\n</blockquote>\n<p>Node.js 的事件循环和在浏览器中的实现不太一样， 在Node.js 中事件循环交给了Libuv托管，  Libuv 和 v8 是分别独立的线程， 辅助Node.js 进行事件轮询</p>\n<p>Node.js 依靠v8运行javascript, 并且绑定了底层的操作系统</p>\n<p>当V8接收到用户的请求进入， 通过绑定系统接口，将事件交给Libuv处理， Libuv 将事件加入事件队列( event queue)， EventLoop 不行的旋转并执行同步事件，当遇到异步事件时，将其交给 worker Threads 线程， 比如操作文件就是交给工作线程去同步完成， 当文件操作完毕后， 根据文件描述符去获取数据， 然后将结果作为参数返回给事件队列中等候的回调函数</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-50-40.png\" alt=\"EventLoop\"></p>\n<h2 id=\"常用的Node控制异步技术手段\"><a href=\"#常用的Node控制异步技术手段\" class=\"headerlink\" title=\"常用的Node控制异步技术手段\"></a>常用的Node控制异步技术手段</h2><blockquote>\n<p>Promise 是一个语法， 规范， js只是实现了这个规范，  Promise 是一个高级接口， 创建一次，不容易修改， then就是 低级接口， 可以一直then ,处理逻辑</p>\n</blockquote>\n<ol>\n<li>Step、wind（提供等待的异步库）、Bigpipe、Q.js</li>\n<li>Async、Await</li>\n<li>Promise/Defferred 是一种先执行异步调用，延迟传递的处理方式。Promise是高级接口，事件是低级接口。低级接口可以构建更多复杂的场景，高级接口一旦定义，不太容易变化，不再有低级接口的灵活性，但对于解决问题非常有效</li>\n<li>由于Node基于V8的原因，目前还不支持协程。协程不是进程或线程，其执行过程更类似于子例程，或者说不带返回值的函数调用。一个程序可以包含多个协程，可以对比与一个进程包含多个线程，因而下面我们来比较协程和线程。我们知道多个线程相对独立，有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制。</li>\n</ol>\n<h2 id=\"底层的知识\"><a href=\"#底层的知识\" class=\"headerlink\" title=\"底层的知识\"></a>底层的知识</h2><ol>\n<li>CPU时钟周期：1/cpu主频 -&gt; 1s/3.1 GHz<br><img src=\"http://img.nixiaolei.com/2019-03-29-22-54-03.png\" alt=\"底层知识\"></li>\n</ol>\n<ol start=\"3\">\n<li>操作系统对计算机进行了抽象，将所有输入输出设备抽象为文件。内核在进行文件I/O操作时，通过文件描述符进行管理。应用程序如果需要进行IO需要打开文件描述符，在进行文件和数据的读写。异步IO不带数据直接返回，要获取数据还需要通过文件描述符再次读取。</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-54-36.png\" alt=\"文件操作\"></p>\n"},{"title":"vue-cli3脚手架配置px2rem适配方案","date":"2019-04-24T06:26:51.000Z","_content":"\n## 安装\n```\nnpm i lib-flexible --save\nnpm install px2rem-loader\n```\n\n## 引入\n> main.js\n\n```\nimport 'lib-flexible/flexible'\n```\n> index.html\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n\n## 根目录新建 vue.config.js 文件\n> 复制如下代码， 重启， 搞定\n\n```\n// vue.config.js\nmodule.exports = {\n  chainWebpack: config => {\n    config.module\n      .rule('css')\n        .test(/\\.css$/)\n        .oneOf('vue')\n        .resourceQuery(/\\?vue/)\n        .use('px2rem')\n          .loader('px2rem-loader')\n          .options({\n            remUnit: 75\n          })\n  }\n}\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue-cli3脚手架配置px2rem适配方案.md","raw":"---\ntitle: vue-cli3脚手架配置px2rem适配方案\ndate: 2019-04-24 14:26:51\ncategories: Vue\ntags: [适配, Vue]\n---\n\n## 安装\n```\nnpm i lib-flexible --save\nnpm install px2rem-loader\n```\n\n## 引入\n> main.js\n\n```\nimport 'lib-flexible/flexible'\n```\n> index.html\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n\n## 根目录新建 vue.config.js 文件\n> 复制如下代码， 重启， 搞定\n\n```\n// vue.config.js\nmodule.exports = {\n  chainWebpack: config => {\n    config.module\n      .rule('css')\n        .test(/\\.css$/)\n        .oneOf('vue')\n        .resourceQuery(/\\?vue/)\n        .use('px2rem')\n          .loader('px2rem-loader')\n          .options({\n            remUnit: 75\n          })\n  }\n}\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue-cli3脚手架配置px2rem适配方案","published":1,"updated":"2019-04-07T02:50:36.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wap0014ssuwrwshz2ae","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lib-flexible --save</span><br><span class=\"line\">npm install px2rem-loader</span><br></pre></td></tr></table></figure>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><blockquote>\n<p>main.js</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;lib-flexible/flexible&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index.html</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"根目录新建-vue-config-js-文件\"><a href=\"#根目录新建-vue-config-js-文件\" class=\"headerlink\" title=\"根目录新建 vue.config.js 文件\"></a>根目录新建 vue.config.js 文件</h2><blockquote>\n<p>复制如下代码， 重启， 搞定</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  chainWebpack: config =&gt; &#123;</span><br><span class=\"line\">    config.module</span><br><span class=\"line\">      .rule(&apos;css&apos;)</span><br><span class=\"line\">        .test(/\\.css$/)</span><br><span class=\"line\">        .oneOf(&apos;vue&apos;)</span><br><span class=\"line\">        .resourceQuery(/\\?vue/)</span><br><span class=\"line\">        .use(&apos;px2rem&apos;)</span><br><span class=\"line\">          .loader(&apos;px2rem-loader&apos;)</span><br><span class=\"line\">          .options(&#123;</span><br><span class=\"line\">            remUnit: 75</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i lib-flexible --save</span><br><span class=\"line\">npm install px2rem-loader</span><br></pre></td></tr></table></figure>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><blockquote>\n<p>main.js</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;lib-flexible/flexible&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index.html</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"根目录新建-vue-config-js-文件\"><a href=\"#根目录新建-vue-config-js-文件\" class=\"headerlink\" title=\"根目录新建 vue.config.js 文件\"></a>根目录新建 vue.config.js 文件</h2><blockquote>\n<p>复制如下代码， 重启， 搞定</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vue.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  chainWebpack: config =&gt; &#123;</span><br><span class=\"line\">    config.module</span><br><span class=\"line\">      .rule(&apos;css&apos;)</span><br><span class=\"line\">        .test(/\\.css$/)</span><br><span class=\"line\">        .oneOf(&apos;vue&apos;)</span><br><span class=\"line\">        .resourceQuery(/\\?vue/)</span><br><span class=\"line\">        .use(&apos;px2rem&apos;)</span><br><span class=\"line\">          .loader(&apos;px2rem-loader&apos;)</span><br><span class=\"line\">          .options(&#123;</span><br><span class=\"line\">            remUnit: 75</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"【React】从高阶函数到理解高阶组件","date":"2019-04-09T14:13:49.000Z","_content":"\n高阶组件其实就是高阶函数\n\n高阶函数的概念千万别和普通回调搞混， 高阶函数的必要条件：\n* 一定要返回一个新函数\n* 非入侵\n\n\n## 一句话理解高阶函数\n本来我没有的，我很垃圾，  通过把我交给别人， 在我身上装了额外的东西， 使我变的拥有了某种能力\n\n举个例子:  人和坦克， 本来人是不能发射炮弹的， 但是人钻进了坦克， 就可以发射炮弹了， 人还是人（自身未变）， 只是在坦克里了\n\n\n## 一个例子理解高阶函数\n\n一个简单的不能再简单的高阶函数\n```JavaScript\nfunction hoc(fn) {\n  return () => {\n    console.log('start')\n    fn()\n    console.log('end')\n  }\n}\n```\n\n## 一个例子理解高阶组件\n在不修改原有组件的情况下， 为其添加一个生命周期\n\n```JavaScript\nconst MyContainer = (WrappedComponent) => {\n  return class extends Component {\n\n    // 新增的生命周期\n    componentwillmount() {\n      console.log('增加一个生命周期')\n    }\n\n    render() {\n      return (\n        <WrappedComponent />\n      )\n    }\n  }\n}\nexport default MyContainer;\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【React】从高阶函数到理解高阶组件.md","raw":"---\ntitle: 【React】从高阶函数到理解高阶组件\ndate: 2019-04-09 22:13:49\ncategories: React\ntags: React\n---\n\n高阶组件其实就是高阶函数\n\n高阶函数的概念千万别和普通回调搞混， 高阶函数的必要条件：\n* 一定要返回一个新函数\n* 非入侵\n\n\n## 一句话理解高阶函数\n本来我没有的，我很垃圾，  通过把我交给别人， 在我身上装了额外的东西， 使我变的拥有了某种能力\n\n举个例子:  人和坦克， 本来人是不能发射炮弹的， 但是人钻进了坦克， 就可以发射炮弹了， 人还是人（自身未变）， 只是在坦克里了\n\n\n## 一个例子理解高阶函数\n\n一个简单的不能再简单的高阶函数\n```JavaScript\nfunction hoc(fn) {\n  return () => {\n    console.log('start')\n    fn()\n    console.log('end')\n  }\n}\n```\n\n## 一个例子理解高阶组件\n在不修改原有组件的情况下， 为其添加一个生命周期\n\n```JavaScript\nconst MyContainer = (WrappedComponent) => {\n  return class extends Component {\n\n    // 新增的生命周期\n    componentwillmount() {\n      console.log('增加一个生命周期')\n    }\n\n    render() {\n      return (\n        <WrappedComponent />\n      )\n    }\n  }\n}\nexport default MyContainer;\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【React】从高阶函数到理解高阶组件","published":1,"updated":"2019-04-09T14:36:23.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wau0017ssuw5y27k5w3","content":"<p>高阶组件其实就是高阶函数</p>\n<p>高阶函数的概念千万别和普通回调搞混， 高阶函数的必要条件：</p>\n<ul>\n<li>一定要返回一个新函数</li>\n<li>非入侵</li>\n</ul>\n<h2 id=\"一句话理解高阶函数\"><a href=\"#一句话理解高阶函数\" class=\"headerlink\" title=\"一句话理解高阶函数\"></a>一句话理解高阶函数</h2><p>本来我没有的，我很垃圾，  通过把我交给别人， 在我身上装了额外的东西， 使我变的拥有了某种能力</p>\n<p>举个例子:  人和坦克， 本来人是不能发射炮弹的， 但是人钻进了坦克， 就可以发射炮弹了， 人还是人（自身未变）， 只是在坦克里了</p>\n<h2 id=\"一个例子理解高阶函数\"><a href=\"#一个例子理解高阶函数\" class=\"headerlink\" title=\"一个例子理解高阶函数\"></a>一个例子理解高阶函数</h2><p>一个简单的不能再简单的高阶函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hoc</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一个例子理解高阶组件\"><a href=\"#一个例子理解高阶组件\" class=\"headerlink\" title=\"一个例子理解高阶组件\"></a>一个例子理解高阶组件</h2><p>在不修改原有组件的情况下， 为其添加一个生命周期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyContainer = <span class=\"function\">(<span class=\"params\">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新增的生命周期</span></span><br><span class=\"line\">    componentwillmount() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'增加一个生命周期'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;WrappedComponent /&gt;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> MyContainer;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>高阶组件其实就是高阶函数</p>\n<p>高阶函数的概念千万别和普通回调搞混， 高阶函数的必要条件：</p>\n<ul>\n<li>一定要返回一个新函数</li>\n<li>非入侵</li>\n</ul>\n<h2 id=\"一句话理解高阶函数\"><a href=\"#一句话理解高阶函数\" class=\"headerlink\" title=\"一句话理解高阶函数\"></a>一句话理解高阶函数</h2><p>本来我没有的，我很垃圾，  通过把我交给别人， 在我身上装了额外的东西， 使我变的拥有了某种能力</p>\n<p>举个例子:  人和坦克， 本来人是不能发射炮弹的， 但是人钻进了坦克， 就可以发射炮弹了， 人还是人（自身未变）， 只是在坦克里了</p>\n<h2 id=\"一个例子理解高阶函数\"><a href=\"#一个例子理解高阶函数\" class=\"headerlink\" title=\"一个例子理解高阶函数\"></a>一个例子理解高阶函数</h2><p>一个简单的不能再简单的高阶函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hoc</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>)</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"一个例子理解高阶组件\"><a href=\"#一个例子理解高阶组件\" class=\"headerlink\" title=\"一个例子理解高阶组件\"></a>一个例子理解高阶组件</h2><p>在不修改原有组件的情况下， 为其添加一个生命周期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyContainer = <span class=\"function\">(<span class=\"params\">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新增的生命周期</span></span><br><span class=\"line\">    componentwillmount() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'增加一个生命周期'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;WrappedComponent /&gt;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> MyContainer;</span><br></pre></td></tr></table></figure>\n"},{"title":"【PostCss】使用明天的CSS","date":"2019-03-16T05:30:24.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法\n\n当然国内的情况有点不一样\n\n## 新特性举例\n\n比如这个CSS变量:\n他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了\n```CSS\n@custom-media --viewport-medium (width <= 50rem);\n\n@media (--viewport-medium) {\n  body { font-size: calc(var(--fontSize) * 1.2); }\n}\n\n```\n\n那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码\n\n```CSS\n@media (max-width: 50rem) {\n  body { font-size: 1.2rem; }\n}\n```\n\n## 更多演示\n> 编译前后以 ------ 分割\n\n\n自定义选择器\n```CSS\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n:--heading { margin-top: 0 }\n/* ------------------------------------ */\nh1,h2,h3,h4,h5,h6 { margin-top: 0 }\n```\n\n自动一倍图(1X)和二倍图(2X)\n```CSS\n/* image-set function */\n.foo {\n  background-image:\n    image-set(\n      url(img/test.png) 1x,\n      url(img/test-2x.png) 2x\n    );\n}\n\n/* ------------------------------------ */\n\n/* 默认状态 */\n.foo {\n    background-image:\n      url(img/test.png);\n}\n\n/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n.foo {\n    background-image:\n      url(img/test-2x.png);\n}\n}\n```\n\n\n`any-link`, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效\n```CSS\na {\ncolor: var(--highlightColor);\ntransition: color 1s; /* autoprefixed ! */\n}\na:hover { color: gray(255, 50%) }\na:active { color: rebeccapurple }\na:focus { background-color: rgb(255 153 0 / 33%); outline: 3px solid hsl(1turn 60% 50%); }\na:any-link { color: color(var(--highlightColor) blackness(+20%)) }\n\n/* --------------------------------- */\n\na {\n  color: rgb(89, 185, 204);\n  -webkit-transition: color 1s;\n  transition: color 1s; /* autoprefixed ! */\n}\na:hover { color: rgba(255, 255, 255, 0.5) }\na:active { color: #639 }\na:focus { \n  background-color: rgba(255, 153, 0, .33); \n  outline: 3px solid hsl(360, 60%, 50%); \n}\na:link,a:visited { color: rgb(89, 142, 153) }\n```\n\n\n还有很多， 不一一举例了， 比如：\n* 各个浏览器的滤镜`filter`兼容\n* 选择器正则\n* css嵌套\n\n## 如何让PostCS支持嵌套\n> 本环境基于webpack\n\nnpm地址:\n* https://www.npmjs.com/package/postcss\n* https://www.npmjs.com/package/postcss-loader\n\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n  & .menu {\n    height: 40px;\n    background: sandybrown; \n    & .menu--item {\n      height: 40px;\n      color: skyblue;\n      & .menu--item__active {\n        color: pink;\n      }\n    }\n  }\n}\n```\n\n\n\n\n首先在项目的根目录中创建一个文件`postcss.config.js`\n\n相关依赖安装就不说了， 真的缺了也会报错提示的\n\n我们将会在里面做`PostCSS`的相关配置\n\n```JavaScript\nmodule.exports = {\n  plugins: [\n    require('postcss-nested')\n  ]\n}\n```\n\n然后接下来是配置 Loader ，\n\n进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader\n```JavaScript\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      {\n        loader: 'css-loader',\n      },\n      // --------------新增区域---------------\n      {\n        loader: 'postcss-loader',\n        options: {\n          ident: 'postcss',\n          plugins: (loader) => [\n            require('postcss-preset-env')({\n              /* 这里要改成 0  否则不一定编译嵌套 */\n              stage: 0,\n              features: {\n                'nesting-rules': true\n              }\n            })\n          ]\n        }\n      }\n      // --------------新增区域---------------\n    ]\n  }\n]\n```\n\n像这样，记得把 `stage` 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。\n\n\n我们运行一下看看\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n}\n.container .menu {\n  height: 40px;\n  background: sandybrown\n}\n.container .menu .menu--item {\n  height: 40px;\n  color: skyblue\n}\n.container .menu .menu--item .menu--item__active {\n  color: pink;\n}\n```\n\n大功告成😄~\n\n想知道有用的PostCSS的插件大纲，可以在本站内搜索: `CSS插件` \n\n\n\n\n\n\n## 相关的网站\n> PostCss: https://postcss.org/\n> css next: http://cssnext.io/\n\n","source":"_posts/【PostCss】使用明天的CSS.md","raw":"---\ntitle: 【PostCss】使用明天的CSS\ndate: 2019-03-16 13:30:24\ncategories: CSS\ntags: [css, PostCss]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法\n\n当然国内的情况有点不一样\n\n## 新特性举例\n\n比如这个CSS变量:\n他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了\n```CSS\n@custom-media --viewport-medium (width <= 50rem);\n\n@media (--viewport-medium) {\n  body { font-size: calc(var(--fontSize) * 1.2); }\n}\n\n```\n\n那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码\n\n```CSS\n@media (max-width: 50rem) {\n  body { font-size: 1.2rem; }\n}\n```\n\n## 更多演示\n> 编译前后以 ------ 分割\n\n\n自定义选择器\n```CSS\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n:--heading { margin-top: 0 }\n/* ------------------------------------ */\nh1,h2,h3,h4,h5,h6 { margin-top: 0 }\n```\n\n自动一倍图(1X)和二倍图(2X)\n```CSS\n/* image-set function */\n.foo {\n  background-image:\n    image-set(\n      url(img/test.png) 1x,\n      url(img/test-2x.png) 2x\n    );\n}\n\n/* ------------------------------------ */\n\n/* 默认状态 */\n.foo {\n    background-image:\n      url(img/test.png);\n}\n\n/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n.foo {\n    background-image:\n      url(img/test-2x.png);\n}\n}\n```\n\n\n`any-link`, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效\n```CSS\na {\ncolor: var(--highlightColor);\ntransition: color 1s; /* autoprefixed ! */\n}\na:hover { color: gray(255, 50%) }\na:active { color: rebeccapurple }\na:focus { background-color: rgb(255 153 0 / 33%); outline: 3px solid hsl(1turn 60% 50%); }\na:any-link { color: color(var(--highlightColor) blackness(+20%)) }\n\n/* --------------------------------- */\n\na {\n  color: rgb(89, 185, 204);\n  -webkit-transition: color 1s;\n  transition: color 1s; /* autoprefixed ! */\n}\na:hover { color: rgba(255, 255, 255, 0.5) }\na:active { color: #639 }\na:focus { \n  background-color: rgba(255, 153, 0, .33); \n  outline: 3px solid hsl(360, 60%, 50%); \n}\na:link,a:visited { color: rgb(89, 142, 153) }\n```\n\n\n还有很多， 不一一举例了， 比如：\n* 各个浏览器的滤镜`filter`兼容\n* 选择器正则\n* css嵌套\n\n## 如何让PostCS支持嵌套\n> 本环境基于webpack\n\nnpm地址:\n* https://www.npmjs.com/package/postcss\n* https://www.npmjs.com/package/postcss-loader\n\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n  & .menu {\n    height: 40px;\n    background: sandybrown; \n    & .menu--item {\n      height: 40px;\n      color: skyblue;\n      & .menu--item__active {\n        color: pink;\n      }\n    }\n  }\n}\n```\n\n\n\n\n首先在项目的根目录中创建一个文件`postcss.config.js`\n\n相关依赖安装就不说了， 真的缺了也会报错提示的\n\n我们将会在里面做`PostCSS`的相关配置\n\n```JavaScript\nmodule.exports = {\n  plugins: [\n    require('postcss-nested')\n  ]\n}\n```\n\n然后接下来是配置 Loader ，\n\n进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader\n```JavaScript\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      {\n        loader: 'css-loader',\n      },\n      // --------------新增区域---------------\n      {\n        loader: 'postcss-loader',\n        options: {\n          ident: 'postcss',\n          plugins: (loader) => [\n            require('postcss-preset-env')({\n              /* 这里要改成 0  否则不一定编译嵌套 */\n              stage: 0,\n              features: {\n                'nesting-rules': true\n              }\n            })\n          ]\n        }\n      }\n      // --------------新增区域---------------\n    ]\n  }\n]\n```\n\n像这样，记得把 `stage` 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。\n\n\n我们运行一下看看\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n}\n.container .menu {\n  height: 40px;\n  background: sandybrown\n}\n.container .menu .menu--item {\n  height: 40px;\n  color: skyblue\n}\n.container .menu .menu--item .menu--item__active {\n  color: pink;\n}\n```\n\n大功告成😄~\n\n想知道有用的PostCSS的插件大纲，可以在本站内搜索: `CSS插件` \n\n\n\n\n\n\n## 相关的网站\n> PostCss: https://postcss.org/\n> css next: http://cssnext.io/\n\n","slug":"【PostCss】使用明天的CSS","published":1,"updated":"2019-03-22T13:49:32.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wb9001cssuwx781gbif","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法</p>\n<p>当然国内的情况有点不一样</p>\n<h2 id=\"新特性举例\"><a href=\"#新特性举例\" class=\"headerlink\" title=\"新特性举例\"></a>新特性举例</h2><p>比如这个CSS变量:<br>他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">custom</span>-<span class=\"keyword\">media</span> --viewport-medium (width &lt;= <span class=\"number\">50rem</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (--viewport-medium) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(var(--fontSize) * <span class=\"number\">1.2</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">50rem</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多演示\"><a href=\"#更多演示\" class=\"headerlink\" title=\"更多演示\"></a>更多演示</h2><blockquote>\n<p>编译前后以 —— 分割</p>\n</blockquote>\n<p>自定义选择器<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">custom</span>-<span class=\"keyword\">selector</span> :--heading h1, h2, h3, h4, h5, h6;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:--heading</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------ */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>自动一倍图(1X)和二倍图(2X)<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* image-set function */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">    <span class=\"built_in\">image-set</span>(</span><br><span class=\"line\">      url(img/test.png) <span class=\"number\">1</span>x,</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test-2x.png) <span class=\"number\">2</span>x</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------ */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 默认状态 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test.png);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>), (min-resolution: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test-2x.png);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>any-link</code>, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--highlightColor);</span><br><span class=\"line\"><span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>; <span class=\"comment\">/* autoprefixed ! */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">gray</span>(255, 50%) &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: rebeccapurple &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(255 153 0 / 33%); <span class=\"attribute\">outline</span>: <span class=\"number\">3px</span> solid <span class=\"built_in\">hsl</span>(1turn 60% 50%); &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:any-link</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">color</span>(var(--highlightColor) <span class=\"built_in\">blackness</span>(+20%)) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --------------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(89, 185, 204);</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>; <span class=\"comment\">/* autoprefixed ! */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0.5) &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#639</span> &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 153, 0, .33); </span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">3px</span> solid <span class=\"built_in\">hsl</span>(360, 60%, 50%); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>,<span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(89, 142, 153) &#125;</span><br></pre></td></tr></table></figure></p>\n<p>还有很多， 不一一举例了， 比如：</p>\n<ul>\n<li>各个浏览器的滤镜<code>filter</code>兼容</li>\n<li>选择器正则</li>\n<li>css嵌套</li>\n</ul>\n<h2 id=\"如何让PostCS支持嵌套\"><a href=\"#如何让PostCS支持嵌套\" class=\"headerlink\" title=\"如何让PostCS支持嵌套\"></a>如何让PostCS支持嵌套</h2><blockquote>\n<p>本环境基于webpack</p>\n</blockquote>\n<p>npm地址:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/postcss\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/postcss</a></li>\n<li><a href=\"https://www.npmjs.com/package/postcss-loader\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/postcss-loader</a></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 一定要带上 &amp; 才会编译 */</span></span><br><span class=\"line\">  &amp; .menu &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span>: 40<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">sandybrown</span>; </span><br><span class=\"line\">    &amp; <span class=\"selector-class\">.menu--item</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: skyblue;</span><br><span class=\"line\">      &amp; .menu--item__active &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">pink</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先在项目的根目录中创建一个文件<code>postcss.config.js</code></p>\n<p>相关依赖安装就不说了， 真的缺了也会报错提示的</p>\n<p>我们将会在里面做<code>PostCSS</code>的相关配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-nested'</span>)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后接下来是配置 Loader ，</p>\n<p>进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// --------------新增区域---------------</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          ident: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">          plugins: <span class=\"function\">(<span class=\"params\">loader</span>) =&gt;</span> [</span><br><span class=\"line\">            <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-preset-env'</span>)(&#123;</span><br><span class=\"line\">              <span class=\"comment\">/* 这里要改成 0  否则不一定编译嵌套 */</span></span><br><span class=\"line\">              stage: <span class=\"number\">0</span>,</span><br><span class=\"line\">              features: &#123;</span><br><span class=\"line\">                <span class=\"string\">'nesting-rules'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// --------------新增区域---------------</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>像这样，记得把 <code>stage</code> 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。</p>\n<p>我们运行一下看看</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 一定要带上 &amp; 才会编译 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: sandybrown</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> <span class=\"selector-class\">.menu--item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: skyblue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> <span class=\"selector-class\">.menu--item</span> <span class=\"selector-class\">.menu--item__active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大功告成😄~</p>\n<p>想知道有用的PostCSS的插件大纲，可以在本站内搜索: <code>CSS插件</code> </p>\n<h2 id=\"相关的网站\"><a href=\"#相关的网站\" class=\"headerlink\" title=\"相关的网站\"></a>相关的网站</h2><blockquote>\n<p>PostCss: <a href=\"https://postcss.org/\" target=\"_blank\" rel=\"noopener\">https://postcss.org/</a><br>css next: <a href=\"http://cssnext.io/\" target=\"_blank\" rel=\"noopener\">http://cssnext.io/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法</p>\n<p>当然国内的情况有点不一样</p>\n<h2 id=\"新特性举例\"><a href=\"#新特性举例\" class=\"headerlink\" title=\"新特性举例\"></a>新特性举例</h2><p>比如这个CSS变量:<br>他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">custom</span>-<span class=\"keyword\">media</span> --viewport-medium (width &lt;= <span class=\"number\">50rem</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (--viewport-medium) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(var(--fontSize) * <span class=\"number\">1.2</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">50rem</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多演示\"><a href=\"#更多演示\" class=\"headerlink\" title=\"更多演示\"></a>更多演示</h2><blockquote>\n<p>编译前后以 —— 分割</p>\n</blockquote>\n<p>自定义选择器<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">custom</span>-<span class=\"keyword\">selector</span> :--heading h1, h2, h3, h4, h5, h6;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:--heading</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------ */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>自动一倍图(1X)和二倍图(2X)<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* image-set function */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">    <span class=\"built_in\">image-set</span>(</span><br><span class=\"line\">      url(img/test.png) <span class=\"number\">1</span>x,</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test-2x.png) <span class=\"number\">2</span>x</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------------------------ */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 默认状态 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test.png);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>), (min-resolution: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>:</span><br><span class=\"line\">      <span class=\"built_in\">url</span>(img/test-2x.png);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>any-link</code>, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--highlightColor);</span><br><span class=\"line\"><span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>; <span class=\"comment\">/* autoprefixed ! */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">gray</span>(255, 50%) &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: rebeccapurple &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(255 153 0 / 33%); <span class=\"attribute\">outline</span>: <span class=\"number\">3px</span> solid <span class=\"built_in\">hsl</span>(1turn 60% 50%); &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:any-link</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">color</span>(var(--highlightColor) <span class=\"built_in\">blackness</span>(+20%)) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --------------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(89, 185, 204);</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transition</span>: color <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: color <span class=\"number\">1s</span>; <span class=\"comment\">/* autoprefixed ! */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0.5) &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#639</span> &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 153, 0, .33); </span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">3px</span> solid <span class=\"built_in\">hsl</span>(360, 60%, 50%); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>,<span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123; <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(89, 142, 153) &#125;</span><br></pre></td></tr></table></figure></p>\n<p>还有很多， 不一一举例了， 比如：</p>\n<ul>\n<li>各个浏览器的滤镜<code>filter</code>兼容</li>\n<li>选择器正则</li>\n<li>css嵌套</li>\n</ul>\n<h2 id=\"如何让PostCS支持嵌套\"><a href=\"#如何让PostCS支持嵌套\" class=\"headerlink\" title=\"如何让PostCS支持嵌套\"></a>如何让PostCS支持嵌套</h2><blockquote>\n<p>本环境基于webpack</p>\n</blockquote>\n<p>npm地址:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/postcss\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/postcss</a></li>\n<li><a href=\"https://www.npmjs.com/package/postcss-loader\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/postcss-loader</a></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 一定要带上 &amp; 才会编译 */</span></span><br><span class=\"line\">  &amp; .menu &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span>: 40<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">sandybrown</span>; </span><br><span class=\"line\">    &amp; <span class=\"selector-class\">.menu--item</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: skyblue;</span><br><span class=\"line\">      &amp; .menu--item__active &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">pink</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先在项目的根目录中创建一个文件<code>postcss.config.js</code></p>\n<p>相关依赖安装就不说了， 真的缺了也会报错提示的</p>\n<p>我们将会在里面做<code>PostCSS</code>的相关配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-nested'</span>)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后接下来是配置 Loader ，</p>\n<p>进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// --------------新增区域---------------</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          ident: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">          plugins: <span class=\"function\">(<span class=\"params\">loader</span>) =&gt;</span> [</span><br><span class=\"line\">            <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-preset-env'</span>)(&#123;</span><br><span class=\"line\">              <span class=\"comment\">/* 这里要改成 0  否则不一定编译嵌套 */</span></span><br><span class=\"line\">              stage: <span class=\"number\">0</span>,</span><br><span class=\"line\">              features: &#123;</span><br><span class=\"line\">                <span class=\"string\">'nesting-rules'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// --------------新增区域---------------</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>像这样，记得把 <code>stage</code> 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。</p>\n<p>我们运行一下看看</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 一定要带上 &amp; 才会编译 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: sandybrown</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> <span class=\"selector-class\">.menu--item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: skyblue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.menu</span> <span class=\"selector-class\">.menu--item</span> <span class=\"selector-class\">.menu--item__active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大功告成😄~</p>\n<p>想知道有用的PostCSS的插件大纲，可以在本站内搜索: <code>CSS插件</code> </p>\n<h2 id=\"相关的网站\"><a href=\"#相关的网站\" class=\"headerlink\" title=\"相关的网站\"></a>相关的网站</h2><blockquote>\n<p>PostCss: <a href=\"https://postcss.org/\" target=\"_blank\" rel=\"noopener\">https://postcss.org/</a><br>css next: <a href=\"http://cssnext.io/\" target=\"_blank\" rel=\"noopener\">http://cssnext.io/</a></p>\n</blockquote>\n"},{"title":"【React】高阶用法","date":"2019-04-02T02:55:50.000Z","_content":"\n\n\n## 默认参数\n> 当未传入props时使用预设的默认值\n\n使用静态属性`defaultProps`来定义`props`的默认值, 避免未传`props`报错的情况\n```JavaScript\nstatic defaultProps = {\n  thing: \"这是默认的props参数\"\n}\n```\n\n### demo\n```JavaScript\n// todoList.jsx\nclass TodoList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      todoList: [\n        { thing: '喝可乐' },\n        { thing: '打游戏' },\n        // 故意留空一个\n        {  },\n        { thing: '看电影' },\n        { thing: '看剧' },\n        { thing: '刷抖音' },\n        { thing: '吃饭' }\n      ] \n    }\n  }\n\n  render() {\n    const { todoList } = this.state\n    return (\n      <div className=\"wrap\">\n        {\n          todoList.map( item => <TodoItem  thing={item.thing} />)\n        }\n      </div>\n    )\n  }\n}\n\n// todoItem.jsx\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props)\n  }\n  static defaultProps = {\n    thing: \"这是默认的props参数\"\n  }\n  render() {\n    return (\n      <div>\n        { this.props.thing }\n      </div>\n    )\n  }\n}\n```\n\n实际显示:\n![props默认值](http://img.nixiaolei.com/2019-04-07-11-28-59.png)\n\n\n\n## 自由的render返回值类型\n> `render`函数的要求没有以前严格了， 不用固定返回`dom` 以及 免除必须使用`()`包裹\n\n### 返回dom\n```JavaScript\nclass Demo extends Component {\n  render() {\n    return <div>Hello React</div>\n  }\n}\n```\n\n### 返回字符串\n```JavaScript\nclass Demo extends Component {\n  render() {\n    return 'Hello React'\n  }\n}\n```\n\n### 返回数组\n```JavaScript\nclass Demo extends Component {\n  render() {\n    return [\n      <li>1111</li>,\n      <li>2222</li>,\n      <li>3333</li>,\n    ]\n  }\n}\n```\n\n\n\n## 空的根节点\n> 避免了无故地嵌套\n\n写法一： \n```JavaScript\nclass Demo extends Component {\n  render() {\n    return <>\n      <li>hello world1</li>\n      <li>hello world2</li>\n      <li>hello world3</li>\n    </>\n  }\n}\n```\n\n写法二 ：\n```JavaScript\n// 使用文档片段\nimport React, { Component, Fragment } from 'react'\n\nclass Demo extends Component {\n  render() {\n    return <Fragment>\n      <li>hello world1</li>\n      <li>hello world2</li>\n      <li>hello world3</li>\n    </Fragment>\n  }\n}\n```\n\n两种写法的效果是一样的：\n![空地根节点](http://img.nixiaolei.com/2019-04-07-12-57-12.png)\n\n## PureComponent\n> 自动为状态组件添加`shouldComponentUpdate`函数\n\n```JavaScript\nimport React, { PureComponent } from 'react'\nclass TodoItem extends PureComponent {\n  \n}\n```\n\n\n\n\n\n","source":"_posts/【React】高阶用法.md","raw":"---\ntitle: 【React】高阶用法\ndate: 2019-04-02 10:55:50\ncategories: React\ntags: React\n---\n\n\n\n## 默认参数\n> 当未传入props时使用预设的默认值\n\n使用静态属性`defaultProps`来定义`props`的默认值, 避免未传`props`报错的情况\n```JavaScript\nstatic defaultProps = {\n  thing: \"这是默认的props参数\"\n}\n```\n\n### demo\n```JavaScript\n// todoList.jsx\nclass TodoList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      todoList: [\n        { thing: '喝可乐' },\n        { thing: '打游戏' },\n        // 故意留空一个\n        {  },\n        { thing: '看电影' },\n        { thing: '看剧' },\n        { thing: '刷抖音' },\n        { thing: '吃饭' }\n      ] \n    }\n  }\n\n  render() {\n    const { todoList } = this.state\n    return (\n      <div className=\"wrap\">\n        {\n          todoList.map( item => <TodoItem  thing={item.thing} />)\n        }\n      </div>\n    )\n  }\n}\n\n// todoItem.jsx\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props)\n  }\n  static defaultProps = {\n    thing: \"这是默认的props参数\"\n  }\n  render() {\n    return (\n      <div>\n        { this.props.thing }\n      </div>\n    )\n  }\n}\n```\n\n实际显示:\n![props默认值](http://img.nixiaolei.com/2019-04-07-11-28-59.png)\n\n\n\n## 自由的render返回值类型\n> `render`函数的要求没有以前严格了， 不用固定返回`dom` 以及 免除必须使用`()`包裹\n\n### 返回dom\n```JavaScript\nclass Demo extends Component {\n  render() {\n    return <div>Hello React</div>\n  }\n}\n```\n\n### 返回字符串\n```JavaScript\nclass Demo extends Component {\n  render() {\n    return 'Hello React'\n  }\n}\n```\n\n### 返回数组\n```JavaScript\nclass Demo extends Component {\n  render() {\n    return [\n      <li>1111</li>,\n      <li>2222</li>,\n      <li>3333</li>,\n    ]\n  }\n}\n```\n\n\n\n## 空的根节点\n> 避免了无故地嵌套\n\n写法一： \n```JavaScript\nclass Demo extends Component {\n  render() {\n    return <>\n      <li>hello world1</li>\n      <li>hello world2</li>\n      <li>hello world3</li>\n    </>\n  }\n}\n```\n\n写法二 ：\n```JavaScript\n// 使用文档片段\nimport React, { Component, Fragment } from 'react'\n\nclass Demo extends Component {\n  render() {\n    return <Fragment>\n      <li>hello world1</li>\n      <li>hello world2</li>\n      <li>hello world3</li>\n    </Fragment>\n  }\n}\n```\n\n两种写法的效果是一样的：\n![空地根节点](http://img.nixiaolei.com/2019-04-07-12-57-12.png)\n\n## PureComponent\n> 自动为状态组件添加`shouldComponentUpdate`函数\n\n```JavaScript\nimport React, { PureComponent } from 'react'\nclass TodoItem extends PureComponent {\n  \n}\n```\n\n\n\n\n\n","slug":"【React】高阶用法","published":1,"updated":"2019-04-09T14:13:19.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wbe001dssuwmjsilsnj","content":"<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><blockquote>\n<p>当未传入props时使用预设的默认值</p>\n</blockquote>\n<p>使用静态属性<code>defaultProps</code>来定义<code>props</code>的默认值, 避免未传<code>props</code>报错的情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">  thing: <span class=\"string\">\"这是默认的props参数\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// todoList.jsx</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; </span><br><span class=\"line\">      todoList: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'喝可乐'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'打游戏'</span> &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 故意留空一个</span></span><br><span class=\"line\">        &#123;  &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'看电影'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'看剧'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'刷抖音'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'吃饭'</span> &#125;</span><br><span class=\"line\">      ] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoList &#125; = <span class=\"keyword\">this</span>.state</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          todoList.map( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &lt;TodoItem  thing=&#123;item.thing&#125; /&gt;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ todoItem.jsx</span></span><br><span class=\"line\"><span class=\"regexp\">class TodoItem extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  constructor(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    super(props)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  static defaultProps = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    thing: \"这是默认的props参数\"</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123; this.props.thing &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际显示:<br><img src=\"http://img.nixiaolei.com/2019-04-07-11-28-59.png\" alt=\"props默认值\"></p>\n<h2 id=\"自由的render返回值类型\"><a href=\"#自由的render返回值类型\" class=\"headerlink\" title=\"自由的render返回值类型\"></a>自由的render返回值类型</h2><blockquote>\n<p><code>render</code>函数的要求没有以前严格了， 不用固定返回<code>dom</code> 以及 免除必须使用<code>()</code>包裹</p>\n</blockquote>\n<h3 id=\"返回dom\"><a href=\"#返回dom\" class=\"headerlink\" title=\"返回dom\"></a>返回dom</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"返回字符串\"><a href=\"#返回字符串\" class=\"headerlink\" title=\"返回字符串\"></a>返回字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello React'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"返回数组\"><a href=\"#返回数组\" class=\"headerlink\" title=\"返回数组\"></a>返回数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">      &lt;li&gt;<span class=\"number\">1111</span>&lt;<span class=\"regexp\">/li&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;li&gt;2222&lt;/</span>li&gt;,</span><br><span class=\"line\">      &lt;li&gt;<span class=\"number\">3333</span>&lt;<span class=\"regexp\">/li&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">    ]</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"空的根节点\"><a href=\"#空的根节点\" class=\"headerlink\" title=\"空的根节点\"></a>空的根节点</h2><blockquote>\n<p>避免了无故地嵌套</p>\n</blockquote>\n<p>写法一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>写法二 ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用文档片段</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, Fragment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两种写法的效果是一样的：<br><img src=\"http://img.nixiaolei.com/2019-04-07-12-57-12.png\" alt=\"空地根节点\"></p>\n<h2 id=\"PureComponent\"><a href=\"#PureComponent\" class=\"headerlink\" title=\"PureComponent\"></a>PureComponent</h2><blockquote>\n<p>自动为状态组件添加<code>shouldComponentUpdate</code>函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><blockquote>\n<p>当未传入props时使用预设的默认值</p>\n</blockquote>\n<p>使用静态属性<code>defaultProps</code>来定义<code>props</code>的默认值, 避免未传<code>props</code>报错的情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">  thing: <span class=\"string\">\"这是默认的props参数\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// todoList.jsx</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; </span><br><span class=\"line\">      todoList: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'喝可乐'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'打游戏'</span> &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 故意留空一个</span></span><br><span class=\"line\">        &#123;  &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'看电影'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'看剧'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'刷抖音'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">thing</span>: <span class=\"string\">'吃饭'</span> &#125;</span><br><span class=\"line\">      ] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoList &#125; = <span class=\"keyword\">this</span>.state</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          todoList.map( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &lt;TodoItem  thing=&#123;item.thing&#125; /&gt;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ todoItem.jsx</span></span><br><span class=\"line\"><span class=\"regexp\">class TodoItem extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  constructor(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    super(props)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  static defaultProps = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    thing: \"这是默认的props参数\"</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123; this.props.thing &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际显示:<br><img src=\"http://img.nixiaolei.com/2019-04-07-11-28-59.png\" alt=\"props默认值\"></p>\n<h2 id=\"自由的render返回值类型\"><a href=\"#自由的render返回值类型\" class=\"headerlink\" title=\"自由的render返回值类型\"></a>自由的render返回值类型</h2><blockquote>\n<p><code>render</code>函数的要求没有以前严格了， 不用固定返回<code>dom</code> 以及 免除必须使用<code>()</code>包裹</p>\n</blockquote>\n<h3 id=\"返回dom\"><a href=\"#返回dom\" class=\"headerlink\" title=\"返回dom\"></a>返回dom</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"返回字符串\"><a href=\"#返回字符串\" class=\"headerlink\" title=\"返回字符串\"></a>返回字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello React'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"返回数组\"><a href=\"#返回数组\" class=\"headerlink\" title=\"返回数组\"></a>返回数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">      &lt;li&gt;<span class=\"number\">1111</span>&lt;<span class=\"regexp\">/li&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;li&gt;2222&lt;/</span>li&gt;,</span><br><span class=\"line\">      &lt;li&gt;<span class=\"number\">3333</span>&lt;<span class=\"regexp\">/li&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">    ]</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"空的根节点\"><a href=\"#空的根节点\" class=\"headerlink\" title=\"空的根节点\"></a>空的根节点</h2><blockquote>\n<p>避免了无故地嵌套</p>\n</blockquote>\n<p>写法一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>写法二 ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用文档片段</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, Fragment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>hello world3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两种写法的效果是一样的：<br><img src=\"http://img.nixiaolei.com/2019-04-07-12-57-12.png\" alt=\"空地根节点\"></p>\n<h2 id=\"PureComponent\"><a href=\"#PureComponent\" class=\"headerlink\" title=\"PureComponent\"></a>PureComponent</h2><blockquote>\n<p>自动为状态组件添加<code>shouldComponentUpdate</code>函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"【React】PureComponent解决了什么问题","date":"2019-04-04T07:10:16.000Z","_content":"\n`PureComponent` 是和 `shouldComponentUpdate`这个生命周期息息相关的\n\n## React 重新渲染问题\n\n`React`中，当父组件中触发`setState`， 尽管未修改任何 `state` 中的值也会引起所有子组件的重新渲染， 更何况是修改了某个`state`\n\n还有， 当父组件传给子组件的`props` 发生改变， 不管该`props`是否被子组件用到， 都会去重新渲染子组件。\n\n\n> 其实我们也可以想得到， setState 会去触发 render， 所以父组件`render`函数中的子组件都会被重新渲染， 因此也就无关 `state` 与 `props`了\n\n\n针对这个问题我实现了个例子， 来看一下下面这个例子\n\n### 实现下问题\n> setState但未修改任何state\n\n父组件触发 `setState` 方法, 但未更新任何`state`\n\n```JsX\nimport TodoItem from './components/todoItem/todoItem'\n// 父组件代码\nclass TodoList extends Component {\n  noChange() {\n    console.log('触发setState')\n    this.setState(() => ({\n    }))\n  }\n  render() {\n    const { todoList } = this.state\n    return (\n      <div className=\"wrap\">\n        <button onClick={() => this.noChange()}>没有变化的setState</button>\n        {\n          todoList.map( (item,index) => <TodoItem key={index}  data={item} /> )\n        }\n      </div>\n    )\n  }\n}\n\n// 子组件代码\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentWillUpdate() {\n    console.log('我被更新了')\n  }\n\n  render() {\n    return (\n      <div>\n        { this.props.data.thing }\n      </div>\n    )\n  }\n}\n```\n\n\n\n我们在子组件中预留了`componentWillUpdate` 方法， 用来监测子组件是否被跟新\n\n```JavaScript\ncomponentWillUpdate() {\n  console.log('我被更新了')\n}\n```\n\n实验结果: \n\n![noChangeState](http://img.nixiaolei.com/noChangeState.gif)\n\n\n\n我们可以看到, 每一次的点击都引起了子组件的`update`\n\n\n### 冷静分析问题\n\n无故的重复`update`, 这会导致业务规模扩大后十分的影响性能.\n\n为此我监测了一下页面的重绘事件:\n> 绿色区域是浏览器发成重绘的地方\n\n![noRePaint](http://img.nixiaolei.com/noRePaint.gif)\n\n可以看到`todoList`其实并没有引起浏览器的`repaint` , 因此可以推测, 实际`dom`并没有更新这在渲染页面前被`dom diff`给排除掉了, 因此性能损耗在了转换成`Virtual DOM`的过程中 \n\n\n\n## shouldComponentUpdate\n> shouldComponentUpdate(nextProps, nextState)， 默认返回true\n\n`shouldComponentUpdate` 是 `React` 中做性能优化的重要手段， 看这个英文翻译我们大概也能猜出个一二来 --- '组件是否跟新？'\n\n`React` 会根据 `shouldComponentUpdate` 的返回结果来决定该组件是否重新渲染， 如果返回`True`就渲染，  如果返回`False`就重新渲染\n\n基于这个特性, 我们来修改一下上面问题中的代码\n\n```JavaScript\n// 父组件无变化, 因此省略\n\n// 子组件代码\nclass TodoItem extends Component {\n\n  // ...省略其他原有的代码\n\n\n  // --------- 新增代码 -------------\n  shouldComponentUpdate(nextProps, nextState) {\n    // 判断下 当前 props传入的data.thing  是否和新传入的  data.thing 相同\n    return  this.props.data.thing !== nextProps.data.thing\n  }\n  // --------- 新增代码 -------------\n}\n```\n\n实验结果:\n![addShouUpdate](http://img.nixiaolei.com/addShouUpdate.gif)\n\n我们可以看到`update`事件确实消失了\n\n\n\n## PureComponent\n看了`shouldComponentUpdate`函数的作用, 就能够理解`PureComponent`了?  它其实就是在帮我们做这样一件事:\n\n**自动的帮我们编写 `shouldComponentUpdate` 方法, 避免我们为每个组件都编写一次的麻烦**\n\n我们只需要这样, 就可以一步到位\n```JavaScript\nimport React, { PureComponent } from 'react'\nclass TodoItem extends PureComponent {\n}\n```\n\n\n***\n\n是不是感觉`PureComponent`很强大, 但`PureComponent`并不完美, \n\n其实它还有一些潜藏的问题, 如果您想要继续了解, 请在站内搜索 `immutable`\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【React】PureComponent解决了什么问题.md","raw":"---\ntitle: 【React】PureComponent解决了什么问题\ndate: 2019-04-04 15:10:16\ncategories: React\ntags: React\n---\n\n`PureComponent` 是和 `shouldComponentUpdate`这个生命周期息息相关的\n\n## React 重新渲染问题\n\n`React`中，当父组件中触发`setState`， 尽管未修改任何 `state` 中的值也会引起所有子组件的重新渲染， 更何况是修改了某个`state`\n\n还有， 当父组件传给子组件的`props` 发生改变， 不管该`props`是否被子组件用到， 都会去重新渲染子组件。\n\n\n> 其实我们也可以想得到， setState 会去触发 render， 所以父组件`render`函数中的子组件都会被重新渲染， 因此也就无关 `state` 与 `props`了\n\n\n针对这个问题我实现了个例子， 来看一下下面这个例子\n\n### 实现下问题\n> setState但未修改任何state\n\n父组件触发 `setState` 方法, 但未更新任何`state`\n\n```JsX\nimport TodoItem from './components/todoItem/todoItem'\n// 父组件代码\nclass TodoList extends Component {\n  noChange() {\n    console.log('触发setState')\n    this.setState(() => ({\n    }))\n  }\n  render() {\n    const { todoList } = this.state\n    return (\n      <div className=\"wrap\">\n        <button onClick={() => this.noChange()}>没有变化的setState</button>\n        {\n          todoList.map( (item,index) => <TodoItem key={index}  data={item} /> )\n        }\n      </div>\n    )\n  }\n}\n\n// 子组件代码\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentWillUpdate() {\n    console.log('我被更新了')\n  }\n\n  render() {\n    return (\n      <div>\n        { this.props.data.thing }\n      </div>\n    )\n  }\n}\n```\n\n\n\n我们在子组件中预留了`componentWillUpdate` 方法， 用来监测子组件是否被跟新\n\n```JavaScript\ncomponentWillUpdate() {\n  console.log('我被更新了')\n}\n```\n\n实验结果: \n\n![noChangeState](http://img.nixiaolei.com/noChangeState.gif)\n\n\n\n我们可以看到, 每一次的点击都引起了子组件的`update`\n\n\n### 冷静分析问题\n\n无故的重复`update`, 这会导致业务规模扩大后十分的影响性能.\n\n为此我监测了一下页面的重绘事件:\n> 绿色区域是浏览器发成重绘的地方\n\n![noRePaint](http://img.nixiaolei.com/noRePaint.gif)\n\n可以看到`todoList`其实并没有引起浏览器的`repaint` , 因此可以推测, 实际`dom`并没有更新这在渲染页面前被`dom diff`给排除掉了, 因此性能损耗在了转换成`Virtual DOM`的过程中 \n\n\n\n## shouldComponentUpdate\n> shouldComponentUpdate(nextProps, nextState)， 默认返回true\n\n`shouldComponentUpdate` 是 `React` 中做性能优化的重要手段， 看这个英文翻译我们大概也能猜出个一二来 --- '组件是否跟新？'\n\n`React` 会根据 `shouldComponentUpdate` 的返回结果来决定该组件是否重新渲染， 如果返回`True`就渲染，  如果返回`False`就重新渲染\n\n基于这个特性, 我们来修改一下上面问题中的代码\n\n```JavaScript\n// 父组件无变化, 因此省略\n\n// 子组件代码\nclass TodoItem extends Component {\n\n  // ...省略其他原有的代码\n\n\n  // --------- 新增代码 -------------\n  shouldComponentUpdate(nextProps, nextState) {\n    // 判断下 当前 props传入的data.thing  是否和新传入的  data.thing 相同\n    return  this.props.data.thing !== nextProps.data.thing\n  }\n  // --------- 新增代码 -------------\n}\n```\n\n实验结果:\n![addShouUpdate](http://img.nixiaolei.com/addShouUpdate.gif)\n\n我们可以看到`update`事件确实消失了\n\n\n\n## PureComponent\n看了`shouldComponentUpdate`函数的作用, 就能够理解`PureComponent`了?  它其实就是在帮我们做这样一件事:\n\n**自动的帮我们编写 `shouldComponentUpdate` 方法, 避免我们为每个组件都编写一次的麻烦**\n\n我们只需要这样, 就可以一步到位\n```JavaScript\nimport React, { PureComponent } from 'react'\nclass TodoItem extends PureComponent {\n}\n```\n\n\n***\n\n是不是感觉`PureComponent`很强大, 但`PureComponent`并不完美, \n\n其实它还有一些潜藏的问题, 如果您想要继续了解, 请在站内搜索 `immutable`\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【React】PureComponent解决了什么问题","published":1,"updated":"2019-04-07T08:45:13.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wbl001hssuwnzfpmwiy","content":"<p><code>PureComponent</code> 是和 <code>shouldComponentUpdate</code>这个生命周期息息相关的</p>\n<h2 id=\"React-重新渲染问题\"><a href=\"#React-重新渲染问题\" class=\"headerlink\" title=\"React 重新渲染问题\"></a>React 重新渲染问题</h2><p><code>React</code>中，当父组件中触发<code>setState</code>， 尽管未修改任何 <code>state</code> 中的值也会引起所有子组件的重新渲染， 更何况是修改了某个<code>state</code></p>\n<p>还有， 当父组件传给子组件的<code>props</code> 发生改变， 不管该<code>props</code>是否被子组件用到， 都会去重新渲染子组件。</p>\n<blockquote>\n<p>其实我们也可以想得到， setState 会去触发 render， 所以父组件<code>render</code>函数中的子组件都会被重新渲染， 因此也就无关 <code>state</code> 与 <code>props</code>了</p>\n</blockquote>\n<p>针对这个问题我实现了个例子， 来看一下下面这个例子</p>\n<h3 id=\"实现下问题\"><a href=\"#实现下问题\" class=\"headerlink\" title=\"实现下问题\"></a>实现下问题</h3><blockquote>\n<p>setState但未修改任何state</p>\n</blockquote>\n<p>父组件触发 <code>setState</code> 方法, 但未更新任何<code>state</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">'./components/todoItem/todoItem'</span></span><br><span class=\"line\"><span class=\"comment\">// 父组件代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  noChange() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发setState'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoList &#125; = <span class=\"keyword\">this</span>.state</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.noChange()&#125;&gt;没有变化的setState&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">          todoList.map( (item,index) =&gt; &lt;TodoItem key=&#123;index&#125;  data=&#123;item&#125; /</span>&gt; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 子组件代码</span></span><br><span class=\"line\"><span class=\"regexp\">class TodoItem extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  constructor(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    super(props)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  componentWillUpdate() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    console.log('我被更新了')</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123; this.props.data.thing &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在子组件中预留了<code>componentWillUpdate</code> 方法， 用来监测子组件是否被跟新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillUpdate() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我被更新了'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实验结果: </p>\n<p><img src=\"http://img.nixiaolei.com/noChangeState.gif\" alt=\"noChangeState\"></p>\n<p>我们可以看到, 每一次的点击都引起了子组件的<code>update</code></p>\n<h3 id=\"冷静分析问题\"><a href=\"#冷静分析问题\" class=\"headerlink\" title=\"冷静分析问题\"></a>冷静分析问题</h3><p>无故的重复<code>update</code>, 这会导致业务规模扩大后十分的影响性能.</p>\n<p>为此我监测了一下页面的重绘事件:</p>\n<blockquote>\n<p>绿色区域是浏览器发成重绘的地方</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/noRePaint.gif\" alt=\"noRePaint\"></p>\n<p>可以看到<code>todoList</code>其实并没有引起浏览器的<code>repaint</code> , 因此可以推测, 实际<code>dom</code>并没有更新这在渲染页面前被<code>dom diff</code>给排除掉了, 因此性能损耗在了转换成<code>Virtual DOM</code>的过程中 </p>\n<h2 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h2><blockquote>\n<p>shouldComponentUpdate(nextProps, nextState)， 默认返回true</p>\n</blockquote>\n<p><code>shouldComponentUpdate</code> 是 <code>React</code> 中做性能优化的重要手段， 看这个英文翻译我们大概也能猜出个一二来 — ‘组件是否跟新？’</p>\n<p><code>React</code> 会根据 <code>shouldComponentUpdate</code> 的返回结果来决定该组件是否重新渲染， 如果返回<code>True</code>就渲染，  如果返回<code>False</code>就重新渲染</p>\n<p>基于这个特性, 我们来修改一下上面问题中的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件无变化, 因此省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...省略其他原有的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// --------- 新增代码 -------------</span></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断下 当前 props传入的data.thing  是否和新传入的  data.thing 相同</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span>.props.data.thing !== nextProps.data.thing</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// --------- 新增代码 -------------</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实验结果:<br><img src=\"http://img.nixiaolei.com/addShouUpdate.gif\" alt=\"addShouUpdate\"></p>\n<p>我们可以看到<code>update</code>事件确实消失了</p>\n<h2 id=\"PureComponent\"><a href=\"#PureComponent\" class=\"headerlink\" title=\"PureComponent\"></a>PureComponent</h2><p>看了<code>shouldComponentUpdate</code>函数的作用, 就能够理解<code>PureComponent</code>了?  它其实就是在帮我们做这样一件事:</p>\n<p><strong>自动的帮我们编写 <code>shouldComponentUpdate</code> 方法, 避免我们为每个组件都编写一次的麻烦</strong></p>\n<p>我们只需要这样, 就可以一步到位<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>是不是感觉<code>PureComponent</code>很强大, 但<code>PureComponent</code>并不完美, </p>\n<p>其实它还有一些潜藏的问题, 如果您想要继续了解, 请在站内搜索 <code>immutable</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>PureComponent</code> 是和 <code>shouldComponentUpdate</code>这个生命周期息息相关的</p>\n<h2 id=\"React-重新渲染问题\"><a href=\"#React-重新渲染问题\" class=\"headerlink\" title=\"React 重新渲染问题\"></a>React 重新渲染问题</h2><p><code>React</code>中，当父组件中触发<code>setState</code>， 尽管未修改任何 <code>state</code> 中的值也会引起所有子组件的重新渲染， 更何况是修改了某个<code>state</code></p>\n<p>还有， 当父组件传给子组件的<code>props</code> 发生改变， 不管该<code>props</code>是否被子组件用到， 都会去重新渲染子组件。</p>\n<blockquote>\n<p>其实我们也可以想得到， setState 会去触发 render， 所以父组件<code>render</code>函数中的子组件都会被重新渲染， 因此也就无关 <code>state</code> 与 <code>props</code>了</p>\n</blockquote>\n<p>针对这个问题我实现了个例子， 来看一下下面这个例子</p>\n<h3 id=\"实现下问题\"><a href=\"#实现下问题\" class=\"headerlink\" title=\"实现下问题\"></a>实现下问题</h3><blockquote>\n<p>setState但未修改任何state</p>\n</blockquote>\n<p>父组件触发 <code>setState</code> 方法, 但未更新任何<code>state</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">'./components/todoItem/todoItem'</span></span><br><span class=\"line\"><span class=\"comment\">// 父组件代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  noChange() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发setState'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoList &#125; = <span class=\"keyword\">this</span>.state</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.noChange()&#125;&gt;没有变化的setState&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">          todoList.map( (item,index) =&gt; &lt;TodoItem key=&#123;index&#125;  data=&#123;item&#125; /</span>&gt; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 子组件代码</span></span><br><span class=\"line\"><span class=\"regexp\">class TodoItem extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  constructor(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    super(props)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  componentWillUpdate() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    console.log('我被更新了')</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123; this.props.data.thing &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在子组件中预留了<code>componentWillUpdate</code> 方法， 用来监测子组件是否被跟新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillUpdate() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我被更新了'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实验结果: </p>\n<p><img src=\"http://img.nixiaolei.com/noChangeState.gif\" alt=\"noChangeState\"></p>\n<p>我们可以看到, 每一次的点击都引起了子组件的<code>update</code></p>\n<h3 id=\"冷静分析问题\"><a href=\"#冷静分析问题\" class=\"headerlink\" title=\"冷静分析问题\"></a>冷静分析问题</h3><p>无故的重复<code>update</code>, 这会导致业务规模扩大后十分的影响性能.</p>\n<p>为此我监测了一下页面的重绘事件:</p>\n<blockquote>\n<p>绿色区域是浏览器发成重绘的地方</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/noRePaint.gif\" alt=\"noRePaint\"></p>\n<p>可以看到<code>todoList</code>其实并没有引起浏览器的<code>repaint</code> , 因此可以推测, 实际<code>dom</code>并没有更新这在渲染页面前被<code>dom diff</code>给排除掉了, 因此性能损耗在了转换成<code>Virtual DOM</code>的过程中 </p>\n<h2 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h2><blockquote>\n<p>shouldComponentUpdate(nextProps, nextState)， 默认返回true</p>\n</blockquote>\n<p><code>shouldComponentUpdate</code> 是 <code>React</code> 中做性能优化的重要手段， 看这个英文翻译我们大概也能猜出个一二来 — ‘组件是否跟新？’</p>\n<p><code>React</code> 会根据 <code>shouldComponentUpdate</code> 的返回结果来决定该组件是否重新渲染， 如果返回<code>True</code>就渲染，  如果返回<code>False</code>就重新渲染</p>\n<p>基于这个特性, 我们来修改一下上面问题中的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件无变化, 因此省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...省略其他原有的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// --------- 新增代码 -------------</span></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断下 当前 props传入的data.thing  是否和新传入的  data.thing 相同</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span>.props.data.thing !== nextProps.data.thing</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// --------- 新增代码 -------------</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实验结果:<br><img src=\"http://img.nixiaolei.com/addShouUpdate.gif\" alt=\"addShouUpdate\"></p>\n<p>我们可以看到<code>update</code>事件确实消失了</p>\n<h2 id=\"PureComponent\"><a href=\"#PureComponent\" class=\"headerlink\" title=\"PureComponent\"></a>PureComponent</h2><p>看了<code>shouldComponentUpdate</code>函数的作用, 就能够理解<code>PureComponent</code>了?  它其实就是在帮我们做这样一件事:</p>\n<p><strong>自动的帮我们编写 <code>shouldComponentUpdate</code> 方法, 避免我们为每个组件都编写一次的麻烦</strong></p>\n<p>我们只需要这样, 就可以一步到位<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>是不是感觉<code>PureComponent</code>很强大, 但<code>PureComponent</code>并不完美, </p>\n<p>其实它还有一些潜藏的问题, 如果您想要继续了解, 请在站内搜索 <code>immutable</code></p>\n"},{"title":"【容器】Docker入门教程","date":"2019-03-16T10:00:14.000Z","_content":"\n## 1.1 Docker简介\n\n\n* Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。\n* Docker通常用于如下场景：\n  * web应用的自动化打包和发布；\n  * 自动化测试和持续集成、发布；\n  * 在服务型环境中部署和调整数据库或其他的后台应用；\n  * 从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。\n\n\n\n## 2.1 Docker vs. VM\n* VM：\n  * 运行在宿主机之上的完整的操作系统\n  * 运行自身操作系统会占用较多的资源\n* Docker：\n  * Docker更加轻量高效\n  * 对系统资源的利用率很高\n  * 比虚拟机技术更为轻便、快捷\n  * 隔离效果不如VM\n\n\n![Docker与VM](http://img.nixiaolei.com/2019-04-06-22-42-11.png)\n\n*** \n总的来说， 虚拟机是在操作系统上又装了一个操作系统，运行操作系统特别消耗资源\n\n而`Docker`是一种类似于隔离的技术， 由`CPU` 和`Linux`内核提供的虚拟化技术， 公用你宿主机上的内核， 在`Docker`中再装了一层`shell`, 并且`Docker`和其他`Docker`之间是可以通过内核相互进行通信的(`Linux`进程之间必须经过内核)\n\n\n## 3.1 镜像与容器\n\nimage是静态的概念， 比如： 你的`exe`文件\n\ncontainer是动态的概念， 比如： 你执行`exe`后的进程\n\n## 4.1 Docker相关概念\n* Docker是CS架构，主要有两个概念：\n* Docker daemon:\n  * 运行在宿主机上\n  * Docker守护进程\n  * 用户通过Docker client(Docker命令)与Docker daemon交互\n* Docker client:\n  * Docker 命令行工具，是用户使用Docker的主要方式\n  * Docker client与Docker daemon通信并将结果返回给用户\n  * Docker client也可以通过socket或者RESTful api访问远程的\n  * Docker daemon\n\n## 4.2 相关概念详解\n\n`Docker`最底层是宿主的操作系统内核， \n\n再上层就是底包， 底包就是存放`bash`以及`bash`所依赖的基本环境， 每个系统都有不一样的底包， 你可以自己去做底包， 也可以到[dockerHub](https://www.docker.com/products/docker-hub)里找\n\n![Docker结构](http://img.nixiaolei.com/2019-04-06-22-56-37.png)\n\n\n在此之上一层一层的往上累加，比如`Node`、`Mysql`啥的, 最后扔到容器里跑, 就像下面这张图， 一层一层的往上叠加，跟码头的集装箱一样\n\n![Docker上层结构](http://img.nixiaolei.com/2019-04-06-23-14-37.png)\n\n\n## 5.1 Dockerfile 脚本\n> 规定了如何创建Image\n\n* Dockerfile 概念\n* Dockerfile 文件格式\n* 构建镜像\n* 镜像标签\n* 修改容器内容\n\n\n![配置文件](http://img.nixiaolei.com/2019-04-07-10-26-12.png)\n\n\n## 6.1 配置文件分析\n\n```DockerFile\n# 前两行固定写法~\n# 你的底包来源\nFROM centos\n# 作者(用于上传时使用)\nMAINTAINER nxl <nxl3477@foxmail.com>\n\n# RUN构建命令--只在构建镜像中使用    ( -y 表示全部yes)\nRUN yum install gcc automake autoconf libtool make -y  \n# python 依赖于 zlib\nRUN yum install zlib zlib-devel libffi-devel -y\n# 安装 wget\nRUN yum install wget -y\n# 下载python安装包\nRUN wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\n# 解压缩\nRUN tar -zxvf Python-3.7.0.tgz\n# 切换目录\nWORKDIR Python-3.7.0\n\n# 编译安装\nRUN ./configure\nRUN ls -al\nRUN make && make install \n\n# CMD 运行命令， 唤起python自带的服务器\nCMD python3 -m http.server\n```","source":"_posts/【容器】Docker入门教程.md","raw":"---\ntitle: 【容器】Docker入门教程\ndate: 2019-03-16 18:00:14\ncategories: 容器\ntags: [Docker, 容器]\n---\n\n## 1.1 Docker简介\n\n\n* Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。\n* Docker通常用于如下场景：\n  * web应用的自动化打包和发布；\n  * 自动化测试和持续集成、发布；\n  * 在服务型环境中部署和调整数据库或其他的后台应用；\n  * 从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。\n\n\n\n## 2.1 Docker vs. VM\n* VM：\n  * 运行在宿主机之上的完整的操作系统\n  * 运行自身操作系统会占用较多的资源\n* Docker：\n  * Docker更加轻量高效\n  * 对系统资源的利用率很高\n  * 比虚拟机技术更为轻便、快捷\n  * 隔离效果不如VM\n\n\n![Docker与VM](http://img.nixiaolei.com/2019-04-06-22-42-11.png)\n\n*** \n总的来说， 虚拟机是在操作系统上又装了一个操作系统，运行操作系统特别消耗资源\n\n而`Docker`是一种类似于隔离的技术， 由`CPU` 和`Linux`内核提供的虚拟化技术， 公用你宿主机上的内核， 在`Docker`中再装了一层`shell`, 并且`Docker`和其他`Docker`之间是可以通过内核相互进行通信的(`Linux`进程之间必须经过内核)\n\n\n## 3.1 镜像与容器\n\nimage是静态的概念， 比如： 你的`exe`文件\n\ncontainer是动态的概念， 比如： 你执行`exe`后的进程\n\n## 4.1 Docker相关概念\n* Docker是CS架构，主要有两个概念：\n* Docker daemon:\n  * 运行在宿主机上\n  * Docker守护进程\n  * 用户通过Docker client(Docker命令)与Docker daemon交互\n* Docker client:\n  * Docker 命令行工具，是用户使用Docker的主要方式\n  * Docker client与Docker daemon通信并将结果返回给用户\n  * Docker client也可以通过socket或者RESTful api访问远程的\n  * Docker daemon\n\n## 4.2 相关概念详解\n\n`Docker`最底层是宿主的操作系统内核， \n\n再上层就是底包， 底包就是存放`bash`以及`bash`所依赖的基本环境， 每个系统都有不一样的底包， 你可以自己去做底包， 也可以到[dockerHub](https://www.docker.com/products/docker-hub)里找\n\n![Docker结构](http://img.nixiaolei.com/2019-04-06-22-56-37.png)\n\n\n在此之上一层一层的往上累加，比如`Node`、`Mysql`啥的, 最后扔到容器里跑, 就像下面这张图， 一层一层的往上叠加，跟码头的集装箱一样\n\n![Docker上层结构](http://img.nixiaolei.com/2019-04-06-23-14-37.png)\n\n\n## 5.1 Dockerfile 脚本\n> 规定了如何创建Image\n\n* Dockerfile 概念\n* Dockerfile 文件格式\n* 构建镜像\n* 镜像标签\n* 修改容器内容\n\n\n![配置文件](http://img.nixiaolei.com/2019-04-07-10-26-12.png)\n\n\n## 6.1 配置文件分析\n\n```DockerFile\n# 前两行固定写法~\n# 你的底包来源\nFROM centos\n# 作者(用于上传时使用)\nMAINTAINER nxl <nxl3477@foxmail.com>\n\n# RUN构建命令--只在构建镜像中使用    ( -y 表示全部yes)\nRUN yum install gcc automake autoconf libtool make -y  \n# python 依赖于 zlib\nRUN yum install zlib zlib-devel libffi-devel -y\n# 安装 wget\nRUN yum install wget -y\n# 下载python安装包\nRUN wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\n# 解压缩\nRUN tar -zxvf Python-3.7.0.tgz\n# 切换目录\nWORKDIR Python-3.7.0\n\n# 编译安装\nRUN ./configure\nRUN ls -al\nRUN make && make install \n\n# CMD 运行命令， 唤起python自带的服务器\nCMD python3 -m http.server\n```","slug":"【容器】Docker入门教程","published":1,"updated":"2019-04-07T05:02:55.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wbw001kssuwqgjk6gdm","content":"<h2 id=\"1-1-Docker简介\"><a href=\"#1-1-Docker简介\" class=\"headerlink\" title=\"1.1 Docker简介\"></a>1.1 Docker简介</h2><ul>\n<li>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</li>\n<li>Docker通常用于如下场景：<ul>\n<li>web应用的自动化打包和发布；</li>\n<li>自动化测试和持续集成、发布；</li>\n<li>在服务型环境中部署和调整数据库或其他的后台应用；</li>\n<li>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-1-Docker-vs-VM\"><a href=\"#2-1-Docker-vs-VM\" class=\"headerlink\" title=\"2.1 Docker vs. VM\"></a>2.1 Docker vs. VM</h2><ul>\n<li>VM：<ul>\n<li>运行在宿主机之上的完整的操作系统</li>\n<li>运行自身操作系统会占用较多的资源</li>\n</ul>\n</li>\n<li>Docker：<ul>\n<li>Docker更加轻量高效</li>\n<li>对系统资源的利用率很高</li>\n<li>比虚拟机技术更为轻便、快捷</li>\n<li>隔离效果不如VM</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-22-42-11.png\" alt=\"Docker与VM\"></p>\n<hr>\n<p>总的来说， 虚拟机是在操作系统上又装了一个操作系统，运行操作系统特别消耗资源</p>\n<p>而<code>Docker</code>是一种类似于隔离的技术， 由<code>CPU</code> 和<code>Linux</code>内核提供的虚拟化技术， 公用你宿主机上的内核， 在<code>Docker</code>中再装了一层<code>shell</code>, 并且<code>Docker</code>和其他<code>Docker</code>之间是可以通过内核相互进行通信的(<code>Linux</code>进程之间必须经过内核)</p>\n<h2 id=\"3-1-镜像与容器\"><a href=\"#3-1-镜像与容器\" class=\"headerlink\" title=\"3.1 镜像与容器\"></a>3.1 镜像与容器</h2><p>image是静态的概念， 比如： 你的<code>exe</code>文件</p>\n<p>container是动态的概念， 比如： 你执行<code>exe</code>后的进程</p>\n<h2 id=\"4-1-Docker相关概念\"><a href=\"#4-1-Docker相关概念\" class=\"headerlink\" title=\"4.1 Docker相关概念\"></a>4.1 Docker相关概念</h2><ul>\n<li>Docker是CS架构，主要有两个概念：</li>\n<li>Docker daemon:<ul>\n<li>运行在宿主机上</li>\n<li>Docker守护进程</li>\n<li>用户通过Docker client(Docker命令)与Docker daemon交互</li>\n</ul>\n</li>\n<li>Docker client:<ul>\n<li>Docker 命令行工具，是用户使用Docker的主要方式</li>\n<li>Docker client与Docker daemon通信并将结果返回给用户</li>\n<li>Docker client也可以通过socket或者RESTful api访问远程的</li>\n<li>Docker daemon</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-2-相关概念详解\"><a href=\"#4-2-相关概念详解\" class=\"headerlink\" title=\"4.2 相关概念详解\"></a>4.2 相关概念详解</h2><p><code>Docker</code>最底层是宿主的操作系统内核， </p>\n<p>再上层就是底包， 底包就是存放<code>bash</code>以及<code>bash</code>所依赖的基本环境， 每个系统都有不一样的底包， 你可以自己去做底包， 也可以到<a href=\"https://www.docker.com/products/docker-hub\" target=\"_blank\" rel=\"noopener\">dockerHub</a>里找</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-22-56-37.png\" alt=\"Docker结构\"></p>\n<p>在此之上一层一层的往上累加，比如<code>Node</code>、<code>Mysql</code>啥的, 最后扔到容器里跑, 就像下面这张图， 一层一层的往上叠加，跟码头的集装箱一样</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-23-14-37.png\" alt=\"Docker上层结构\"></p>\n<h2 id=\"5-1-Dockerfile-脚本\"><a href=\"#5-1-Dockerfile-脚本\" class=\"headerlink\" title=\"5.1 Dockerfile 脚本\"></a>5.1 Dockerfile 脚本</h2><blockquote>\n<p>规定了如何创建Image</p>\n</blockquote>\n<ul>\n<li>Dockerfile 概念</li>\n<li>Dockerfile 文件格式</li>\n<li>构建镜像</li>\n<li>镜像标签</li>\n<li>修改容器内容</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-07-10-26-12.png\" alt=\"配置文件\"></p>\n<h2 id=\"6-1-配置文件分析\"><a href=\"#6-1-配置文件分析\" class=\"headerlink\" title=\"6.1 配置文件分析\"></a>6.1 配置文件分析</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前两行固定写法~</span></span><br><span class=\"line\"><span class=\"comment\"># 你的底包来源</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"comment\"># 作者(用于上传时使用)</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> nxl &lt;nxl3477@foxmail.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RUN构建命令--只在构建镜像中使用    ( -y 表示全部yes)</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install gcc automake autoconf libtool make -y  </span><br><span class=\"line\"><span class=\"comment\"># python 依赖于 zlib</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install zlib zlib-devel libffi-devel -y</span><br><span class=\"line\"><span class=\"comment\"># 安装 wget</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install wget -y</span><br><span class=\"line\"><span class=\"comment\"># 下载python安装包</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压缩</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> tar -zxvf Python-3.7.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> Python-3.7.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> ./configure</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> ls -al</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> make &amp;&amp; make install </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CMD 运行命令， 唤起python自带的服务器</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span> python3 -m http.server</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-1-Docker简介\"><a href=\"#1-1-Docker简介\" class=\"headerlink\" title=\"1.1 Docker简介\"></a>1.1 Docker简介</h2><ul>\n<li>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</li>\n<li>Docker通常用于如下场景：<ul>\n<li>web应用的自动化打包和发布；</li>\n<li>自动化测试和持续集成、发布；</li>\n<li>在服务型环境中部署和调整数据库或其他的后台应用；</li>\n<li>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-1-Docker-vs-VM\"><a href=\"#2-1-Docker-vs-VM\" class=\"headerlink\" title=\"2.1 Docker vs. VM\"></a>2.1 Docker vs. VM</h2><ul>\n<li>VM：<ul>\n<li>运行在宿主机之上的完整的操作系统</li>\n<li>运行自身操作系统会占用较多的资源</li>\n</ul>\n</li>\n<li>Docker：<ul>\n<li>Docker更加轻量高效</li>\n<li>对系统资源的利用率很高</li>\n<li>比虚拟机技术更为轻便、快捷</li>\n<li>隔离效果不如VM</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-22-42-11.png\" alt=\"Docker与VM\"></p>\n<hr>\n<p>总的来说， 虚拟机是在操作系统上又装了一个操作系统，运行操作系统特别消耗资源</p>\n<p>而<code>Docker</code>是一种类似于隔离的技术， 由<code>CPU</code> 和<code>Linux</code>内核提供的虚拟化技术， 公用你宿主机上的内核， 在<code>Docker</code>中再装了一层<code>shell</code>, 并且<code>Docker</code>和其他<code>Docker</code>之间是可以通过内核相互进行通信的(<code>Linux</code>进程之间必须经过内核)</p>\n<h2 id=\"3-1-镜像与容器\"><a href=\"#3-1-镜像与容器\" class=\"headerlink\" title=\"3.1 镜像与容器\"></a>3.1 镜像与容器</h2><p>image是静态的概念， 比如： 你的<code>exe</code>文件</p>\n<p>container是动态的概念， 比如： 你执行<code>exe</code>后的进程</p>\n<h2 id=\"4-1-Docker相关概念\"><a href=\"#4-1-Docker相关概念\" class=\"headerlink\" title=\"4.1 Docker相关概念\"></a>4.1 Docker相关概念</h2><ul>\n<li>Docker是CS架构，主要有两个概念：</li>\n<li>Docker daemon:<ul>\n<li>运行在宿主机上</li>\n<li>Docker守护进程</li>\n<li>用户通过Docker client(Docker命令)与Docker daemon交互</li>\n</ul>\n</li>\n<li>Docker client:<ul>\n<li>Docker 命令行工具，是用户使用Docker的主要方式</li>\n<li>Docker client与Docker daemon通信并将结果返回给用户</li>\n<li>Docker client也可以通过socket或者RESTful api访问远程的</li>\n<li>Docker daemon</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-2-相关概念详解\"><a href=\"#4-2-相关概念详解\" class=\"headerlink\" title=\"4.2 相关概念详解\"></a>4.2 相关概念详解</h2><p><code>Docker</code>最底层是宿主的操作系统内核， </p>\n<p>再上层就是底包， 底包就是存放<code>bash</code>以及<code>bash</code>所依赖的基本环境， 每个系统都有不一样的底包， 你可以自己去做底包， 也可以到<a href=\"https://www.docker.com/products/docker-hub\" target=\"_blank\" rel=\"noopener\">dockerHub</a>里找</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-22-56-37.png\" alt=\"Docker结构\"></p>\n<p>在此之上一层一层的往上累加，比如<code>Node</code>、<code>Mysql</code>啥的, 最后扔到容器里跑, 就像下面这张图， 一层一层的往上叠加，跟码头的集装箱一样</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-23-14-37.png\" alt=\"Docker上层结构\"></p>\n<h2 id=\"5-1-Dockerfile-脚本\"><a href=\"#5-1-Dockerfile-脚本\" class=\"headerlink\" title=\"5.1 Dockerfile 脚本\"></a>5.1 Dockerfile 脚本</h2><blockquote>\n<p>规定了如何创建Image</p>\n</blockquote>\n<ul>\n<li>Dockerfile 概念</li>\n<li>Dockerfile 文件格式</li>\n<li>构建镜像</li>\n<li>镜像标签</li>\n<li>修改容器内容</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-07-10-26-12.png\" alt=\"配置文件\"></p>\n<h2 id=\"6-1-配置文件分析\"><a href=\"#6-1-配置文件分析\" class=\"headerlink\" title=\"6.1 配置文件分析\"></a>6.1 配置文件分析</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前两行固定写法~</span></span><br><span class=\"line\"><span class=\"comment\"># 你的底包来源</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"comment\"># 作者(用于上传时使用)</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> nxl &lt;nxl3477@foxmail.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RUN构建命令--只在构建镜像中使用    ( -y 表示全部yes)</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install gcc automake autoconf libtool make -y  </span><br><span class=\"line\"><span class=\"comment\"># python 依赖于 zlib</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install zlib zlib-devel libffi-devel -y</span><br><span class=\"line\"><span class=\"comment\"># 安装 wget</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install wget -y</span><br><span class=\"line\"><span class=\"comment\"># 下载python安装包</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压缩</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> tar -zxvf Python-3.7.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> Python-3.7.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> ./configure</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> ls -al</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> make &amp;&amp; make install </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CMD 运行命令， 唤起python自带的服务器</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span> python3 -m http.server</span><br></pre></td></tr></table></figure>"},{"title":"【容器】docker命令手册","date":"2019-03-17T02:33:00.000Z","_content":"\n\n\n**使用`docker` 查看所有命令**\n\n\n## 基本命令\n\n\n| 命令 | 功能 | 示例 |\n| :------:| :------: | :------: |\n| FROM | 声明底包来源 | FROM centos | \n| RUN | 构建命令--只在构建镜像中使用  | RUN yum install wget -y |\n| WORKDIR | docker中必须用此切换目录  | WORKDIR Python-3.7.0 |\n| CMD | 运行命令  | CMD python3 -m http.server |\n| docker build 'dockerfile的路径' | 构建新镜像  |  |\n\n## 进程相关命令\n> 在docker client中使用\n\n| 命令 | 功能 | 示例 |\n| :------:| :------: | :------: |\n| docker ps | 查看进城 | docker ps | \n| docker kill 'id' | 杀死指定容器 | docker kill 123 | \n| docker rename | 容器改名 |  | \n| docker restart  | 重启容器 |  | \n| docker rm  | 移除一个或多个'容器'(停止状态的容器) |  |\n| docker rmi  | 移除一个或多个'镜像' |  |\n\n\n\n\n\n\n\n## python项目配置文件分析\n\n```DockerFile\n# 前两行固定写法~\n# 你的底包来源\nFROM centos\n# 作者(用于上传时使用)\nMAINTAINER nxl <nxl3477@foxmail.com>\n\n# RUN构建命令--只在构建镜像中使用    ( -y 表示全部yes)\nRUN yum install gcc automake autoconf libtool make -y  \n# python 依赖于 zlib\nRUN yum install zlib zlib-devel libffi-devel -y\n# 安装 wget\nRUN yum install wget -y\n# 下载python安装包\nRUN wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\n# 解压缩\nRUN tar -zxvf Python-3.7.0.tgz\n# 切换目录\nWORKDIR Python-3.7.0\n\n# 编译安装\nRUN ./configure\nRUN ls -al\nRUN make && make install \n\n# CMD 运行命令， 唤起python自带的服务器\nCMD python3 -m http.server\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【容器】docker命令手册.md","raw":"---\ntitle: 【容器】docker命令手册\ndate: 2019-03-17 10:33:00\ncategories: 容器\ntags: [Docker, 容器]\n---\n\n\n\n**使用`docker` 查看所有命令**\n\n\n## 基本命令\n\n\n| 命令 | 功能 | 示例 |\n| :------:| :------: | :------: |\n| FROM | 声明底包来源 | FROM centos | \n| RUN | 构建命令--只在构建镜像中使用  | RUN yum install wget -y |\n| WORKDIR | docker中必须用此切换目录  | WORKDIR Python-3.7.0 |\n| CMD | 运行命令  | CMD python3 -m http.server |\n| docker build 'dockerfile的路径' | 构建新镜像  |  |\n\n## 进程相关命令\n> 在docker client中使用\n\n| 命令 | 功能 | 示例 |\n| :------:| :------: | :------: |\n| docker ps | 查看进城 | docker ps | \n| docker kill 'id' | 杀死指定容器 | docker kill 123 | \n| docker rename | 容器改名 |  | \n| docker restart  | 重启容器 |  | \n| docker rm  | 移除一个或多个'容器'(停止状态的容器) |  |\n| docker rmi  | 移除一个或多个'镜像' |  |\n\n\n\n\n\n\n\n## python项目配置文件分析\n\n```DockerFile\n# 前两行固定写法~\n# 你的底包来源\nFROM centos\n# 作者(用于上传时使用)\nMAINTAINER nxl <nxl3477@foxmail.com>\n\n# RUN构建命令--只在构建镜像中使用    ( -y 表示全部yes)\nRUN yum install gcc automake autoconf libtool make -y  \n# python 依赖于 zlib\nRUN yum install zlib zlib-devel libffi-devel -y\n# 安装 wget\nRUN yum install wget -y\n# 下载python安装包\nRUN wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\n# 解压缩\nRUN tar -zxvf Python-3.7.0.tgz\n# 切换目录\nWORKDIR Python-3.7.0\n\n# 编译安装\nRUN ./configure\nRUN ls -al\nRUN make && make install \n\n# CMD 运行命令， 唤起python自带的服务器\nCMD python3 -m http.server\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【容器】docker命令手册","published":1,"updated":"2019-04-07T05:02:50.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wca001ossuw21vnasa0","content":"<p><strong>使用<code>docker</code> 查看所有命令</strong></p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">FROM</td>\n<td style=\"text-align:center\">声明底包来源</td>\n<td style=\"text-align:center\">FROM centos</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RUN</td>\n<td style=\"text-align:center\">构建命令–只在构建镜像中使用</td>\n<td style=\"text-align:center\">RUN yum install wget -y</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WORKDIR</td>\n<td style=\"text-align:center\">docker中必须用此切换目录</td>\n<td style=\"text-align:center\">WORKDIR Python-3.7.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD</td>\n<td style=\"text-align:center\">运行命令</td>\n<td style=\"text-align:center\">CMD python3 -m http.server</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker build ‘dockerfile的路径’</td>\n<td style=\"text-align:center\">构建新镜像</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"进程相关命令\"><a href=\"#进程相关命令\" class=\"headerlink\" title=\"进程相关命令\"></a>进程相关命令</h2><blockquote>\n<p>在docker client中使用</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">docker ps</td>\n<td style=\"text-align:center\">查看进城</td>\n<td style=\"text-align:center\">docker ps</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker kill ‘id’</td>\n<td style=\"text-align:center\">杀死指定容器</td>\n<td style=\"text-align:center\">docker kill 123</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker rename</td>\n<td style=\"text-align:center\">容器改名</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker restart</td>\n<td style=\"text-align:center\">重启容器</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker rm</td>\n<td style=\"text-align:center\">移除一个或多个’容器’(停止状态的容器)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker rmi</td>\n<td style=\"text-align:center\">移除一个或多个’镜像’</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"python项目配置文件分析\"><a href=\"#python项目配置文件分析\" class=\"headerlink\" title=\"python项目配置文件分析\"></a>python项目配置文件分析</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前两行固定写法~</span></span><br><span class=\"line\"><span class=\"comment\"># 你的底包来源</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"comment\"># 作者(用于上传时使用)</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> nxl &lt;nxl3477@foxmail.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RUN构建命令--只在构建镜像中使用    ( -y 表示全部yes)</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install gcc automake autoconf libtool make -y  </span><br><span class=\"line\"><span class=\"comment\"># python 依赖于 zlib</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install zlib zlib-devel libffi-devel -y</span><br><span class=\"line\"><span class=\"comment\"># 安装 wget</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install wget -y</span><br><span class=\"line\"><span class=\"comment\"># 下载python安装包</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压缩</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> tar -zxvf Python-3.7.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> Python-3.7.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> ./configure</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> ls -al</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> make &amp;&amp; make install </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CMD 运行命令， 唤起python自带的服务器</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span> python3 -m http.server</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>使用<code>docker</code> 查看所有命令</strong></p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">FROM</td>\n<td style=\"text-align:center\">声明底包来源</td>\n<td style=\"text-align:center\">FROM centos</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RUN</td>\n<td style=\"text-align:center\">构建命令–只在构建镜像中使用</td>\n<td style=\"text-align:center\">RUN yum install wget -y</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WORKDIR</td>\n<td style=\"text-align:center\">docker中必须用此切换目录</td>\n<td style=\"text-align:center\">WORKDIR Python-3.7.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CMD</td>\n<td style=\"text-align:center\">运行命令</td>\n<td style=\"text-align:center\">CMD python3 -m http.server</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker build ‘dockerfile的路径’</td>\n<td style=\"text-align:center\">构建新镜像</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"进程相关命令\"><a href=\"#进程相关命令\" class=\"headerlink\" title=\"进程相关命令\"></a>进程相关命令</h2><blockquote>\n<p>在docker client中使用</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">docker ps</td>\n<td style=\"text-align:center\">查看进城</td>\n<td style=\"text-align:center\">docker ps</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker kill ‘id’</td>\n<td style=\"text-align:center\">杀死指定容器</td>\n<td style=\"text-align:center\">docker kill 123</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker rename</td>\n<td style=\"text-align:center\">容器改名</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker restart</td>\n<td style=\"text-align:center\">重启容器</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker rm</td>\n<td style=\"text-align:center\">移除一个或多个’容器’(停止状态的容器)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docker rmi</td>\n<td style=\"text-align:center\">移除一个或多个’镜像’</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"python项目配置文件分析\"><a href=\"#python项目配置文件分析\" class=\"headerlink\" title=\"python项目配置文件分析\"></a>python项目配置文件分析</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前两行固定写法~</span></span><br><span class=\"line\"><span class=\"comment\"># 你的底包来源</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"comment\"># 作者(用于上传时使用)</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> nxl &lt;nxl3477@foxmail.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RUN构建命令--只在构建镜像中使用    ( -y 表示全部yes)</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install gcc automake autoconf libtool make -y  </span><br><span class=\"line\"><span class=\"comment\"># python 依赖于 zlib</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install zlib zlib-devel libffi-devel -y</span><br><span class=\"line\"><span class=\"comment\"># 安装 wget</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> yum install wget -y</span><br><span class=\"line\"><span class=\"comment\"># 下载python安装包</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压缩</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> tar -zxvf Python-3.7.0.tgz</span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> Python-3.7.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> ./configure</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> ls -al</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> make &amp;&amp; make install </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CMD 运行命令， 唤起python自带的服务器</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span> python3 -m http.server</span><br></pre></td></tr></table></figure>\n"},{"title":"了解CPU工作原理","date":"2019-04-01T14:40:26.000Z","_content":"\n计算机在被发明出来之后， 结构基本上没有怎么改变， 目前使用最广泛的结构是“冯诺依曼结构”\n\n## 冯诺依曼结构\n> [维基百科传送门](https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84)\n\n简单而言的冯诺依曼结构处理器具有以下几个特点:\n\n1. 必须有一个存储器；\n2. 必须有一个控制器；\n3. 必须有一个运算器，用于完成算术运算和逻辑运算；\n4. 必须有输入和输出设备，用于进行人机通信。\n\n![冯诺依曼结构处理器](http://img.nixiaolei.com/2019-04-04-22-51-57.png)\n\n并且还有和冯诺依曼不一样的另一种结构: [哈佛结构](https://zh.wikipedia.org/wiki/%E5%93%88%E4%BD%9B%E7%BB%93%E6%9E%84)\n\n\n\n## CPU的指令集\n指令集是存储在CPU内部，对CPU运算进行指导和优化的硬程序\n\n说人话:\n指令集就是你驱动`CPU`运算发送的指令\n\n\n\n### x86/x64指令集\n\n这两种是我们目前最普遍的台式机和笔记本的`CPU`种类，\n\n### ARM指令集\n在我们的移动设备上、 智能手表上、只能音响上\n\n### MIPS指令集\n一般用在服务器上， 并且是大型的服务器\n\n### RISC指令集\n这属于一种精简指令， 也可以认为是一种开源的指令集\n\n中国曾经自己研发的芯片 `龙芯`， 还有中国的超级计算机也是使用的这个指令集\n\n\n#### 🌗如何兼容各指令集\n指令集是CPU原生支持的语言，不同的指令集之间是不能互换的，\n\n所以C语言在编译的时候有一种方式叫`交叉编译`：\n\n你在`X64`系列的CPU上去给`ARM`的CPU去编译程序，这就是交叉编译。\n\n这也是做嵌入式的就比较常用这些东西。\n\n## CPU的组成\n\n* 控制器\n* 运算器\n* 存储器\n\n![CPU结构](http://img.nixiaolei.com/2019-04-04-23-02-40.png)\n\n\n### 存储器\n存储器的主要功能是存储程序和各种数据，并能在计算机运行过程中高速、自动地完成程序或数据的存取。\n\n他是CPU上的缓存， 它相当于是我们考试时的`草稿纸`, 在上面写的只是运算过程， 而最终答案是写到答题纸上的(内存)\n\n\n\n### 运算器\n\n算术逻辑运算单元（ALU）的基本功能为加、减、乘、除四则运算，与、或、非、异或等逻辑操作，以及移位、求补等操作。\n\n### 控制器\n控制单元又分为： 指令计数器、 指令寄存器\n\n控制负责协调运算器和存储器之间的工作\n\n\n*** \n总之，控制器相当于指挥官, 运算单元相当于士兵， 存储器相当于仓库， \n\n指挥官指挥士兵在存库中搬弹药，做工作\n\n\n## CPU如何与内存沟通\n\n\n\n\n\n\n计算机中的数据分为两种\n1. 代码段 ---- 指令数据（我们写的代码）\n2. 数据段 ---- 纯粹的数据（比如电影文件）\n\n\n代码段和数据段一般是分开存放的， 一定要放一起也不是不可以， 但是很有可能回引起很严重的安全问题-- 缓冲区溢出，看下面的安全问题区域 👇\n\n\n***\n指令计数器从代码段中找出一段指令， 放到指令寄存器中(指令寄存器可以理解为CPU中一块特殊的内存, 但是它只能放指令， 如果存数据就会宕机)， 放到指令寄存器中后， 控制器就开始根据这个指令具体的内容，把数据送入运算器， 数据从哪里来， 控制器通过数据总线从内存中拿到数据然后送入存储单元，供运算器使用\n\n\n\n\n\n\n### 🔥安全问题\n\n#### 🌊 缓冲区溢出\n在代码段插入一些数据， 或是插入一些异常的跳转指令， 本来程序中的跳转是体现在`if``else`或者是`for`循环， 这些跳转语句在计算机底层会被转换成`jmp`指令，从这个地方跳转到另一个地方去执行， 当你跳到另一段代码那， 这段代码就开始执行了，  也就是如果代码是经过精心设计的， 跳转到的目标代码段不是你原本想要的代码段， 而目标代码段要做危险操作， 那就危险大了， 这就是缓冲区溢出。\n\n比如前两年的漏洞： 心脏滴血\n\n\n![如何与内存沟通](http://img.nixiaolei.com/2019-04-06-11-53-40.png)\n\n\n## 经典的8086CPU结构体系\n8086是一种比较早的商业化处理器芯片\n![8086CPU结构](http://img.nixiaolei.com/2019-04-06-12-32-53.png)","source":"_posts/了解CPU工作原理.md","raw":"---\ntitle: 了解CPU工作原理\ndate: 2019-04-01 22:40:26\ncategories: 计算机基础\ntags: [计算机基础, CPU]\n---\n\n计算机在被发明出来之后， 结构基本上没有怎么改变， 目前使用最广泛的结构是“冯诺依曼结构”\n\n## 冯诺依曼结构\n> [维基百科传送门](https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84)\n\n简单而言的冯诺依曼结构处理器具有以下几个特点:\n\n1. 必须有一个存储器；\n2. 必须有一个控制器；\n3. 必须有一个运算器，用于完成算术运算和逻辑运算；\n4. 必须有输入和输出设备，用于进行人机通信。\n\n![冯诺依曼结构处理器](http://img.nixiaolei.com/2019-04-04-22-51-57.png)\n\n并且还有和冯诺依曼不一样的另一种结构: [哈佛结构](https://zh.wikipedia.org/wiki/%E5%93%88%E4%BD%9B%E7%BB%93%E6%9E%84)\n\n\n\n## CPU的指令集\n指令集是存储在CPU内部，对CPU运算进行指导和优化的硬程序\n\n说人话:\n指令集就是你驱动`CPU`运算发送的指令\n\n\n\n### x86/x64指令集\n\n这两种是我们目前最普遍的台式机和笔记本的`CPU`种类，\n\n### ARM指令集\n在我们的移动设备上、 智能手表上、只能音响上\n\n### MIPS指令集\n一般用在服务器上， 并且是大型的服务器\n\n### RISC指令集\n这属于一种精简指令， 也可以认为是一种开源的指令集\n\n中国曾经自己研发的芯片 `龙芯`， 还有中国的超级计算机也是使用的这个指令集\n\n\n#### 🌗如何兼容各指令集\n指令集是CPU原生支持的语言，不同的指令集之间是不能互换的，\n\n所以C语言在编译的时候有一种方式叫`交叉编译`：\n\n你在`X64`系列的CPU上去给`ARM`的CPU去编译程序，这就是交叉编译。\n\n这也是做嵌入式的就比较常用这些东西。\n\n## CPU的组成\n\n* 控制器\n* 运算器\n* 存储器\n\n![CPU结构](http://img.nixiaolei.com/2019-04-04-23-02-40.png)\n\n\n### 存储器\n存储器的主要功能是存储程序和各种数据，并能在计算机运行过程中高速、自动地完成程序或数据的存取。\n\n他是CPU上的缓存， 它相当于是我们考试时的`草稿纸`, 在上面写的只是运算过程， 而最终答案是写到答题纸上的(内存)\n\n\n\n### 运算器\n\n算术逻辑运算单元（ALU）的基本功能为加、减、乘、除四则运算，与、或、非、异或等逻辑操作，以及移位、求补等操作。\n\n### 控制器\n控制单元又分为： 指令计数器、 指令寄存器\n\n控制负责协调运算器和存储器之间的工作\n\n\n*** \n总之，控制器相当于指挥官, 运算单元相当于士兵， 存储器相当于仓库， \n\n指挥官指挥士兵在存库中搬弹药，做工作\n\n\n## CPU如何与内存沟通\n\n\n\n\n\n\n计算机中的数据分为两种\n1. 代码段 ---- 指令数据（我们写的代码）\n2. 数据段 ---- 纯粹的数据（比如电影文件）\n\n\n代码段和数据段一般是分开存放的， 一定要放一起也不是不可以， 但是很有可能回引起很严重的安全问题-- 缓冲区溢出，看下面的安全问题区域 👇\n\n\n***\n指令计数器从代码段中找出一段指令， 放到指令寄存器中(指令寄存器可以理解为CPU中一块特殊的内存, 但是它只能放指令， 如果存数据就会宕机)， 放到指令寄存器中后， 控制器就开始根据这个指令具体的内容，把数据送入运算器， 数据从哪里来， 控制器通过数据总线从内存中拿到数据然后送入存储单元，供运算器使用\n\n\n\n\n\n\n### 🔥安全问题\n\n#### 🌊 缓冲区溢出\n在代码段插入一些数据， 或是插入一些异常的跳转指令， 本来程序中的跳转是体现在`if``else`或者是`for`循环， 这些跳转语句在计算机底层会被转换成`jmp`指令，从这个地方跳转到另一个地方去执行， 当你跳到另一段代码那， 这段代码就开始执行了，  也就是如果代码是经过精心设计的， 跳转到的目标代码段不是你原本想要的代码段， 而目标代码段要做危险操作， 那就危险大了， 这就是缓冲区溢出。\n\n比如前两年的漏洞： 心脏滴血\n\n\n![如何与内存沟通](http://img.nixiaolei.com/2019-04-06-11-53-40.png)\n\n\n## 经典的8086CPU结构体系\n8086是一种比较早的商业化处理器芯片\n![8086CPU结构](http://img.nixiaolei.com/2019-04-06-12-32-53.png)","slug":"了解CPU工作原理","published":1,"updated":"2019-04-06T11:24:45.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wcm001qssuwnvjwh91e","content":"<p>计算机在被发明出来之后， 结构基本上没有怎么改变， 目前使用最广泛的结构是“冯诺依曼结构”</p>\n<h2 id=\"冯诺依曼结构\"><a href=\"#冯诺依曼结构\" class=\"headerlink\" title=\"冯诺依曼结构\"></a>冯诺依曼结构</h2><blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84\" target=\"_blank\" rel=\"noopener\">维基百科传送门</a></p>\n</blockquote>\n<p>简单而言的冯诺依曼结构处理器具有以下几个特点:</p>\n<ol>\n<li>必须有一个存储器；</li>\n<li>必须有一个控制器；</li>\n<li>必须有一个运算器，用于完成算术运算和逻辑运算；</li>\n<li>必须有输入和输出设备，用于进行人机通信。</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-04-04-22-51-57.png\" alt=\"冯诺依曼结构处理器\"></p>\n<p>并且还有和冯诺依曼不一样的另一种结构: <a href=\"https://zh.wikipedia.org/wiki/%E5%93%88%E4%BD%9B%E7%BB%93%E6%9E%84\" target=\"_blank\" rel=\"noopener\">哈佛结构</a></p>\n<h2 id=\"CPU的指令集\"><a href=\"#CPU的指令集\" class=\"headerlink\" title=\"CPU的指令集\"></a>CPU的指令集</h2><p>指令集是存储在CPU内部，对CPU运算进行指导和优化的硬程序</p>\n<p>说人话:<br>指令集就是你驱动<code>CPU</code>运算发送的指令</p>\n<h3 id=\"x86-x64指令集\"><a href=\"#x86-x64指令集\" class=\"headerlink\" title=\"x86/x64指令集\"></a>x86/x64指令集</h3><p>这两种是我们目前最普遍的台式机和笔记本的<code>CPU</code>种类，</p>\n<h3 id=\"ARM指令集\"><a href=\"#ARM指令集\" class=\"headerlink\" title=\"ARM指令集\"></a>ARM指令集</h3><p>在我们的移动设备上、 智能手表上、只能音响上</p>\n<h3 id=\"MIPS指令集\"><a href=\"#MIPS指令集\" class=\"headerlink\" title=\"MIPS指令集\"></a>MIPS指令集</h3><p>一般用在服务器上， 并且是大型的服务器</p>\n<h3 id=\"RISC指令集\"><a href=\"#RISC指令集\" class=\"headerlink\" title=\"RISC指令集\"></a>RISC指令集</h3><p>这属于一种精简指令， 也可以认为是一种开源的指令集</p>\n<p>中国曾经自己研发的芯片 <code>龙芯</code>， 还有中国的超级计算机也是使用的这个指令集</p>\n<h4 id=\"🌗如何兼容各指令集\"><a href=\"#🌗如何兼容各指令集\" class=\"headerlink\" title=\"🌗如何兼容各指令集\"></a>🌗如何兼容各指令集</h4><p>指令集是CPU原生支持的语言，不同的指令集之间是不能互换的，</p>\n<p>所以C语言在编译的时候有一种方式叫<code>交叉编译</code>：</p>\n<p>你在<code>X64</code>系列的CPU上去给<code>ARM</code>的CPU去编译程序，这就是交叉编译。</p>\n<p>这也是做嵌入式的就比较常用这些东西。</p>\n<h2 id=\"CPU的组成\"><a href=\"#CPU的组成\" class=\"headerlink\" title=\"CPU的组成\"></a>CPU的组成</h2><ul>\n<li>控制器</li>\n<li>运算器</li>\n<li>存储器</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-04-23-02-40.png\" alt=\"CPU结构\"></p>\n<h3 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h3><p>存储器的主要功能是存储程序和各种数据，并能在计算机运行过程中高速、自动地完成程序或数据的存取。</p>\n<p>他是CPU上的缓存， 它相当于是我们考试时的<code>草稿纸</code>, 在上面写的只是运算过程， 而最终答案是写到答题纸上的(内存)</p>\n<h3 id=\"运算器\"><a href=\"#运算器\" class=\"headerlink\" title=\"运算器\"></a>运算器</h3><p>算术逻辑运算单元（ALU）的基本功能为加、减、乘、除四则运算，与、或、非、异或等逻辑操作，以及移位、求补等操作。</p>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><p>控制单元又分为： 指令计数器、 指令寄存器</p>\n<p>控制负责协调运算器和存储器之间的工作</p>\n<hr>\n<p>总之，控制器相当于指挥官, 运算单元相当于士兵， 存储器相当于仓库， </p>\n<p>指挥官指挥士兵在存库中搬弹药，做工作</p>\n<h2 id=\"CPU如何与内存沟通\"><a href=\"#CPU如何与内存沟通\" class=\"headerlink\" title=\"CPU如何与内存沟通\"></a>CPU如何与内存沟通</h2><p>计算机中的数据分为两种</p>\n<ol>\n<li>代码段 —- 指令数据（我们写的代码）</li>\n<li>数据段 —- 纯粹的数据（比如电影文件）</li>\n</ol>\n<p>代码段和数据段一般是分开存放的， 一定要放一起也不是不可以， 但是很有可能回引起很严重的安全问题– 缓冲区溢出，看下面的安全问题区域 👇</p>\n<hr>\n<p>指令计数器从代码段中找出一段指令， 放到指令寄存器中(指令寄存器可以理解为CPU中一块特殊的内存, 但是它只能放指令， 如果存数据就会宕机)， 放到指令寄存器中后， 控制器就开始根据这个指令具体的内容，把数据送入运算器， 数据从哪里来， 控制器通过数据总线从内存中拿到数据然后送入存储单元，供运算器使用</p>\n<h3 id=\"🔥安全问题\"><a href=\"#🔥安全问题\" class=\"headerlink\" title=\"🔥安全问题\"></a>🔥安全问题</h3><h4 id=\"🌊-缓冲区溢出\"><a href=\"#🌊-缓冲区溢出\" class=\"headerlink\" title=\"🌊 缓冲区溢出\"></a>🌊 缓冲区溢出</h4><p>在代码段插入一些数据， 或是插入一些异常的跳转指令， 本来程序中的跳转是体现在<code>if`</code>else<code>或者是</code>for<code>循环， 这些跳转语句在计算机底层会被转换成</code>jmp`指令，从这个地方跳转到另一个地方去执行， 当你跳到另一段代码那， 这段代码就开始执行了，  也就是如果代码是经过精心设计的， 跳转到的目标代码段不是你原本想要的代码段， 而目标代码段要做危险操作， 那就危险大了， 这就是缓冲区溢出。</p>\n<p>比如前两年的漏洞： 心脏滴血</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-11-53-40.png\" alt=\"如何与内存沟通\"></p>\n<h2 id=\"经典的8086CPU结构体系\"><a href=\"#经典的8086CPU结构体系\" class=\"headerlink\" title=\"经典的8086CPU结构体系\"></a>经典的8086CPU结构体系</h2><p>8086是一种比较早的商业化处理器芯片<br><img src=\"http://img.nixiaolei.com/2019-04-06-12-32-53.png\" alt=\"8086CPU结构\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>计算机在被发明出来之后， 结构基本上没有怎么改变， 目前使用最广泛的结构是“冯诺依曼结构”</p>\n<h2 id=\"冯诺依曼结构\"><a href=\"#冯诺依曼结构\" class=\"headerlink\" title=\"冯诺依曼结构\"></a>冯诺依曼结构</h2><blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84\" target=\"_blank\" rel=\"noopener\">维基百科传送门</a></p>\n</blockquote>\n<p>简单而言的冯诺依曼结构处理器具有以下几个特点:</p>\n<ol>\n<li>必须有一个存储器；</li>\n<li>必须有一个控制器；</li>\n<li>必须有一个运算器，用于完成算术运算和逻辑运算；</li>\n<li>必须有输入和输出设备，用于进行人机通信。</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-04-04-22-51-57.png\" alt=\"冯诺依曼结构处理器\"></p>\n<p>并且还有和冯诺依曼不一样的另一种结构: <a href=\"https://zh.wikipedia.org/wiki/%E5%93%88%E4%BD%9B%E7%BB%93%E6%9E%84\" target=\"_blank\" rel=\"noopener\">哈佛结构</a></p>\n<h2 id=\"CPU的指令集\"><a href=\"#CPU的指令集\" class=\"headerlink\" title=\"CPU的指令集\"></a>CPU的指令集</h2><p>指令集是存储在CPU内部，对CPU运算进行指导和优化的硬程序</p>\n<p>说人话:<br>指令集就是你驱动<code>CPU</code>运算发送的指令</p>\n<h3 id=\"x86-x64指令集\"><a href=\"#x86-x64指令集\" class=\"headerlink\" title=\"x86/x64指令集\"></a>x86/x64指令集</h3><p>这两种是我们目前最普遍的台式机和笔记本的<code>CPU</code>种类，</p>\n<h3 id=\"ARM指令集\"><a href=\"#ARM指令集\" class=\"headerlink\" title=\"ARM指令集\"></a>ARM指令集</h3><p>在我们的移动设备上、 智能手表上、只能音响上</p>\n<h3 id=\"MIPS指令集\"><a href=\"#MIPS指令集\" class=\"headerlink\" title=\"MIPS指令集\"></a>MIPS指令集</h3><p>一般用在服务器上， 并且是大型的服务器</p>\n<h3 id=\"RISC指令集\"><a href=\"#RISC指令集\" class=\"headerlink\" title=\"RISC指令集\"></a>RISC指令集</h3><p>这属于一种精简指令， 也可以认为是一种开源的指令集</p>\n<p>中国曾经自己研发的芯片 <code>龙芯</code>， 还有中国的超级计算机也是使用的这个指令集</p>\n<h4 id=\"🌗如何兼容各指令集\"><a href=\"#🌗如何兼容各指令集\" class=\"headerlink\" title=\"🌗如何兼容各指令集\"></a>🌗如何兼容各指令集</h4><p>指令集是CPU原生支持的语言，不同的指令集之间是不能互换的，</p>\n<p>所以C语言在编译的时候有一种方式叫<code>交叉编译</code>：</p>\n<p>你在<code>X64</code>系列的CPU上去给<code>ARM</code>的CPU去编译程序，这就是交叉编译。</p>\n<p>这也是做嵌入式的就比较常用这些东西。</p>\n<h2 id=\"CPU的组成\"><a href=\"#CPU的组成\" class=\"headerlink\" title=\"CPU的组成\"></a>CPU的组成</h2><ul>\n<li>控制器</li>\n<li>运算器</li>\n<li>存储器</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-04-23-02-40.png\" alt=\"CPU结构\"></p>\n<h3 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h3><p>存储器的主要功能是存储程序和各种数据，并能在计算机运行过程中高速、自动地完成程序或数据的存取。</p>\n<p>他是CPU上的缓存， 它相当于是我们考试时的<code>草稿纸</code>, 在上面写的只是运算过程， 而最终答案是写到答题纸上的(内存)</p>\n<h3 id=\"运算器\"><a href=\"#运算器\" class=\"headerlink\" title=\"运算器\"></a>运算器</h3><p>算术逻辑运算单元（ALU）的基本功能为加、减、乘、除四则运算，与、或、非、异或等逻辑操作，以及移位、求补等操作。</p>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><p>控制单元又分为： 指令计数器、 指令寄存器</p>\n<p>控制负责协调运算器和存储器之间的工作</p>\n<hr>\n<p>总之，控制器相当于指挥官, 运算单元相当于士兵， 存储器相当于仓库， </p>\n<p>指挥官指挥士兵在存库中搬弹药，做工作</p>\n<h2 id=\"CPU如何与内存沟通\"><a href=\"#CPU如何与内存沟通\" class=\"headerlink\" title=\"CPU如何与内存沟通\"></a>CPU如何与内存沟通</h2><p>计算机中的数据分为两种</p>\n<ol>\n<li>代码段 —- 指令数据（我们写的代码）</li>\n<li>数据段 —- 纯粹的数据（比如电影文件）</li>\n</ol>\n<p>代码段和数据段一般是分开存放的， 一定要放一起也不是不可以， 但是很有可能回引起很严重的安全问题– 缓冲区溢出，看下面的安全问题区域 👇</p>\n<hr>\n<p>指令计数器从代码段中找出一段指令， 放到指令寄存器中(指令寄存器可以理解为CPU中一块特殊的内存, 但是它只能放指令， 如果存数据就会宕机)， 放到指令寄存器中后， 控制器就开始根据这个指令具体的内容，把数据送入运算器， 数据从哪里来， 控制器通过数据总线从内存中拿到数据然后送入存储单元，供运算器使用</p>\n<h3 id=\"🔥安全问题\"><a href=\"#🔥安全问题\" class=\"headerlink\" title=\"🔥安全问题\"></a>🔥安全问题</h3><h4 id=\"🌊-缓冲区溢出\"><a href=\"#🌊-缓冲区溢出\" class=\"headerlink\" title=\"🌊 缓冲区溢出\"></a>🌊 缓冲区溢出</h4><p>在代码段插入一些数据， 或是插入一些异常的跳转指令， 本来程序中的跳转是体现在<code>if`</code>else<code>或者是</code>for<code>循环， 这些跳转语句在计算机底层会被转换成</code>jmp`指令，从这个地方跳转到另一个地方去执行， 当你跳到另一段代码那， 这段代码就开始执行了，  也就是如果代码是经过精心设计的， 跳转到的目标代码段不是你原本想要的代码段， 而目标代码段要做危险操作， 那就危险大了， 这就是缓冲区溢出。</p>\n<p>比如前两年的漏洞： 心脏滴血</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-11-53-40.png\" alt=\"如何与内存沟通\"></p>\n<h2 id=\"经典的8086CPU结构体系\"><a href=\"#经典的8086CPU结构体系\" class=\"headerlink\" title=\"经典的8086CPU结构体系\"></a>经典的8086CPU结构体系</h2><p>8086是一种比较早的商业化处理器芯片<br><img src=\"http://img.nixiaolei.com/2019-04-06-12-32-53.png\" alt=\"8086CPU结构\"></p>\n"},{"title":"了解汇编语言","date":"2019-03-24T05:02:22.000Z","_content":"\n* 汇编语言是最贴近底层的计算机语言\n* 汇编语言是直接操作硬件的，没有任何抽象\n* 汇编语言由指令与数据组成，没有任何语句\n* 汇编指令受到硬件平台限制，可移植性很低\n* 了解一些底层语言知识，对理解计算机的运作机制和内存管理大有好处\n\n\n\n\n## 体验一下汇编语言\n\n来看一下一个简单的汇编语言代码， 这段代码只是为了输出一个\"hello world\"\n\n![Helloworld](http://img.nixiaolei.com/2019-04-06-13-07-06.png)\n\n\n\n\n上面部分也就是程序的数据段:\n![代码段](http://img.nixiaolei.com/2019-04-06-13-10-58.png)\n\n下面这部分是程序的代码段:\n![数据段](http://img.nixiaolei.com/2019-04-06-13-11-29.png)\n\n代码段和数据段是严格分开的， \n\n汇编语言最原始的方式是：当这段代码转换为机器指令后， 数据和代码是相邻在一起的.\n\n![存储结构](http://img.nixiaolei.com/2019-04-06-13-13-58.png)\n\n\n但其实放在一起是不太安全的！\n\n\n\n现代计算机的做法是， 将代码段和数据段严格区分开来， 如果越界，在数据段的地方取代码， 操作系统就会给你抛出错误， 也就是经典的`蓝屏`\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/了解汇编语言.md","raw":"---\ntitle: 了解汇编语言\ndate: 2019-03-24 13:02:22\ncategories: 计算机基础\ntags: [计算机基础, 汇编]\n---\n\n* 汇编语言是最贴近底层的计算机语言\n* 汇编语言是直接操作硬件的，没有任何抽象\n* 汇编语言由指令与数据组成，没有任何语句\n* 汇编指令受到硬件平台限制，可移植性很低\n* 了解一些底层语言知识，对理解计算机的运作机制和内存管理大有好处\n\n\n\n\n## 体验一下汇编语言\n\n来看一下一个简单的汇编语言代码， 这段代码只是为了输出一个\"hello world\"\n\n![Helloworld](http://img.nixiaolei.com/2019-04-06-13-07-06.png)\n\n\n\n\n上面部分也就是程序的数据段:\n![代码段](http://img.nixiaolei.com/2019-04-06-13-10-58.png)\n\n下面这部分是程序的代码段:\n![数据段](http://img.nixiaolei.com/2019-04-06-13-11-29.png)\n\n代码段和数据段是严格分开的， \n\n汇编语言最原始的方式是：当这段代码转换为机器指令后， 数据和代码是相邻在一起的.\n\n![存储结构](http://img.nixiaolei.com/2019-04-06-13-13-58.png)\n\n\n但其实放在一起是不太安全的！\n\n\n\n现代计算机的做法是， 将代码段和数据段严格区分开来， 如果越界，在数据段的地方取代码， 操作系统就会给你抛出错误， 也就是经典的`蓝屏`\n\n\n\n\n\n\n\n\n\n\n\n","slug":"了解汇编语言","published":1,"updated":"2019-04-06T05:24:16.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wcw001ussuwrlsi544m","content":"<ul>\n<li>汇编语言是最贴近底层的计算机语言</li>\n<li>汇编语言是直接操作硬件的，没有任何抽象</li>\n<li>汇编语言由指令与数据组成，没有任何语句</li>\n<li>汇编指令受到硬件平台限制，可移植性很低</li>\n<li>了解一些底层语言知识，对理解计算机的运作机制和内存管理大有好处</li>\n</ul>\n<h2 id=\"体验一下汇编语言\"><a href=\"#体验一下汇编语言\" class=\"headerlink\" title=\"体验一下汇编语言\"></a>体验一下汇编语言</h2><p>来看一下一个简单的汇编语言代码， 这段代码只是为了输出一个”hello world”</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-07-06.png\" alt=\"Helloworld\"></p>\n<p>上面部分也就是程序的数据段:<br><img src=\"http://img.nixiaolei.com/2019-04-06-13-10-58.png\" alt=\"代码段\"></p>\n<p>下面这部分是程序的代码段:<br><img src=\"http://img.nixiaolei.com/2019-04-06-13-11-29.png\" alt=\"数据段\"></p>\n<p>代码段和数据段是严格分开的， </p>\n<p>汇编语言最原始的方式是：当这段代码转换为机器指令后， 数据和代码是相邻在一起的.</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-13-58.png\" alt=\"存储结构\"></p>\n<p>但其实放在一起是不太安全的！</p>\n<p>现代计算机的做法是， 将代码段和数据段严格区分开来， 如果越界，在数据段的地方取代码， 操作系统就会给你抛出错误， 也就是经典的<code>蓝屏</code></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>汇编语言是最贴近底层的计算机语言</li>\n<li>汇编语言是直接操作硬件的，没有任何抽象</li>\n<li>汇编语言由指令与数据组成，没有任何语句</li>\n<li>汇编指令受到硬件平台限制，可移植性很低</li>\n<li>了解一些底层语言知识，对理解计算机的运作机制和内存管理大有好处</li>\n</ul>\n<h2 id=\"体验一下汇编语言\"><a href=\"#体验一下汇编语言\" class=\"headerlink\" title=\"体验一下汇编语言\"></a>体验一下汇编语言</h2><p>来看一下一个简单的汇编语言代码， 这段代码只是为了输出一个”hello world”</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-07-06.png\" alt=\"Helloworld\"></p>\n<p>上面部分也就是程序的数据段:<br><img src=\"http://img.nixiaolei.com/2019-04-06-13-10-58.png\" alt=\"代码段\"></p>\n<p>下面这部分是程序的代码段:<br><img src=\"http://img.nixiaolei.com/2019-04-06-13-11-29.png\" alt=\"数据段\"></p>\n<p>代码段和数据段是严格分开的， </p>\n<p>汇编语言最原始的方式是：当这段代码转换为机器指令后， 数据和代码是相邻在一起的.</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-13-58.png\" alt=\"存储结构\"></p>\n<p>但其实放在一起是不太安全的！</p>\n<p>现代计算机的做法是， 将代码段和数据段严格区分开来， 如果越界，在数据段的地方取代码， 操作系统就会给你抛出错误， 也就是经典的<code>蓝屏</code></p>\n"},{"title":"【容器】搭建第一个docker环境","date":"2019-03-28T13:01:02.000Z","_content":"\n\n## 初始化一个NodeJs程序\n\n以下操作必须已经安装了了NodeJS。\n首先创建一个空文件夹。并创建以下⽂文件：\n* server.js\n* package.json\n* Dockerfile\n* .dockerignore\n\n```shell\nmkdir docker_demo\ncd docker_demo\ntouch server.js\ntouch package.json\ntouch Dockerfile\ntouch .dockerignore\n```\n\n然后在server.js写⼊入\n\n```JavaScript\nconst Koa = require('koa');\nconst app = new Koa();\napp.use(async ctx => {\n  ctx.body = 'Hello docker';\n});\napp.listen(3000);\n```\n\n在package.json中写入\n\n```Json\n{\n  \"name\": \"docker_demo\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"koa\": \"^2.5.0\"\n  }\n}\n```\n\n测试程序。控制台输⼊\n```Shell\nnpm start \n```\n浏览器打开本地测试,如果如图所示。表示demo创建成功。请继续往下。\n\n\n![本地测试](http://img.nixiaolei.com/2019-04-08-21-05-28.png)\n\n\n\n## 创建dockerfile文件\n\nDockerfile是由一系列命令和参数构成的脚本，一个Dockerfile⾥里里⾯面包含了构建整个image的完整命令。Docker通过docker build执行Dockerfile中的一系列列命令自动构建image. 在.dockerignore文件里面写入代码。表示过滤该类型的文件。类似git的.gitignore\n\n```docker\n# Logs\nlogs\n*.log\nnpm-debug.log*\n# Runtime data\npids\n*.pid\n*.seed\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n# Coverage directory used by tools like istanbul\n\ncoverage\n# nyc test coverage\n.nyc_output\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n# node-waf configuration\n.lock-wscript\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n# Dependency directories\nnode_modules\njspm_packages\n# Optional npm cache directory\n.npm\n# Optional REPL history\n.node_repl_history\n.idea\n.node_modules\nnode_modules\n.vscode\n```\n\n在Dockerfile文件中写入以下代码：\n```docker\n#制定node镜像的版本\nFROM node:8.9-alpine\n#声明作者\nMAINTAINER evilboy\n#移动当前⽬目录下⾯面的⽂文件到app⽬目录下\nADD . /app/\n#进⼊入到app⽬目录下⾯面，类似cd\nWORKDIR /app\n#安装依赖\nRUN npm install\n#对外暴暴露露的端⼝口\nEXPOSE 3000\n#程序启动脚本\nCMD [\"npm\", \"start\"]\n```\n\n\n## 构建镜像\n> 使用build命令构造镜像,注意后⾯面那个“.”不不能少。\n\n```shell\n[root@Sandbox-N ~]# docker build -t docker_demo .\nSending build context to Docker daemon 39.94kB\nStep 1/7 : FROM node:8.9-alpine\n---> 406f227b21f5\nStep 2/7 : MAINTAINER robin\n---> Using cache\n---> 78d6cdbcfee2\nStep 3/7 : ADD . /app/\n---> 2cb30678612d\nStep 4/7 : WORKDIR /app\nRemoving intermediate container e51377081039\n---> c2b7d0f37d2d\nStep 5/7 : RUN npm install\n---> Running in da0c3946ca8d\nnpm notice created a lockfile as package-lock.json. You should commit\nthis file.\nadded 38 packages in 3.323s\nRemoving intermediate container da0c3946ca8d\n---> eecee87f10e2\nStep 6/7 : EXPOSE 3000\n---> Running in f3973cc168a4\nRemoving intermediate container f3973cc168a4\n---> 2671a4c6deb4\nStep 7/7 : CMD [\"npm\", \"start\"]\n---> Running in dec529f754aa\nRemoving intermediate container dec529f754aa\n---> 6ec73793d353\nSuccessfully built 6ec73793d353\nSuccessfully tagged docker_demo:latest\n```\n\n\n等待镜像构造完成。然后使用 images命令查看镜像。\n\n![查看镜像](http://img.nixiaolei.com/2019-04-08-21-08-27.png)\n\n\n此时可以看到images已经构造完成。现在开始启动images，并测试。\n\n```shell\n#启动镜像 -d表示后台执⾏行行，-p 9000:3000表示指定本地的9000端⼝口隐射到容器器内的3000端⼝口，\ndocker_demo为镜像名称\ndocker run -d -p 9000:3000 docker_demo\n#查看容器器\ndocker ps\n```\n\n![查看容器](http://img.nixiaolei.com/2019-04-08-21-09-13.png)\n\n\n此时浏览器打开http://localhost:9000/,如果如图所示。表示容器运行正常。\n\n![正常情况](http://img.nixiaolei.com/2019-04-08-21-10-04.png)\n\n\n\n\n\n如果此时本地无法打开。可以使用log命令查看日志。根据日志修改对应出现的对方。","source":"_posts/【容器】搭建第一个docker环境.md","raw":"---\ntitle: 【容器】搭建第一个docker环境\ndate: 2019-03-28 21:01:02\ncategories: 容器\ntags: [Docker, 容器]\n---\n\n\n## 初始化一个NodeJs程序\n\n以下操作必须已经安装了了NodeJS。\n首先创建一个空文件夹。并创建以下⽂文件：\n* server.js\n* package.json\n* Dockerfile\n* .dockerignore\n\n```shell\nmkdir docker_demo\ncd docker_demo\ntouch server.js\ntouch package.json\ntouch Dockerfile\ntouch .dockerignore\n```\n\n然后在server.js写⼊入\n\n```JavaScript\nconst Koa = require('koa');\nconst app = new Koa();\napp.use(async ctx => {\n  ctx.body = 'Hello docker';\n});\napp.listen(3000);\n```\n\n在package.json中写入\n\n```Json\n{\n  \"name\": \"docker_demo\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"koa\": \"^2.5.0\"\n  }\n}\n```\n\n测试程序。控制台输⼊\n```Shell\nnpm start \n```\n浏览器打开本地测试,如果如图所示。表示demo创建成功。请继续往下。\n\n\n![本地测试](http://img.nixiaolei.com/2019-04-08-21-05-28.png)\n\n\n\n## 创建dockerfile文件\n\nDockerfile是由一系列命令和参数构成的脚本，一个Dockerfile⾥里里⾯面包含了构建整个image的完整命令。Docker通过docker build执行Dockerfile中的一系列列命令自动构建image. 在.dockerignore文件里面写入代码。表示过滤该类型的文件。类似git的.gitignore\n\n```docker\n# Logs\nlogs\n*.log\nnpm-debug.log*\n# Runtime data\npids\n*.pid\n*.seed\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n# Coverage directory used by tools like istanbul\n\ncoverage\n# nyc test coverage\n.nyc_output\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n# node-waf configuration\n.lock-wscript\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n# Dependency directories\nnode_modules\njspm_packages\n# Optional npm cache directory\n.npm\n# Optional REPL history\n.node_repl_history\n.idea\n.node_modules\nnode_modules\n.vscode\n```\n\n在Dockerfile文件中写入以下代码：\n```docker\n#制定node镜像的版本\nFROM node:8.9-alpine\n#声明作者\nMAINTAINER evilboy\n#移动当前⽬目录下⾯面的⽂文件到app⽬目录下\nADD . /app/\n#进⼊入到app⽬目录下⾯面，类似cd\nWORKDIR /app\n#安装依赖\nRUN npm install\n#对外暴暴露露的端⼝口\nEXPOSE 3000\n#程序启动脚本\nCMD [\"npm\", \"start\"]\n```\n\n\n## 构建镜像\n> 使用build命令构造镜像,注意后⾯面那个“.”不不能少。\n\n```shell\n[root@Sandbox-N ~]# docker build -t docker_demo .\nSending build context to Docker daemon 39.94kB\nStep 1/7 : FROM node:8.9-alpine\n---> 406f227b21f5\nStep 2/7 : MAINTAINER robin\n---> Using cache\n---> 78d6cdbcfee2\nStep 3/7 : ADD . /app/\n---> 2cb30678612d\nStep 4/7 : WORKDIR /app\nRemoving intermediate container e51377081039\n---> c2b7d0f37d2d\nStep 5/7 : RUN npm install\n---> Running in da0c3946ca8d\nnpm notice created a lockfile as package-lock.json. You should commit\nthis file.\nadded 38 packages in 3.323s\nRemoving intermediate container da0c3946ca8d\n---> eecee87f10e2\nStep 6/7 : EXPOSE 3000\n---> Running in f3973cc168a4\nRemoving intermediate container f3973cc168a4\n---> 2671a4c6deb4\nStep 7/7 : CMD [\"npm\", \"start\"]\n---> Running in dec529f754aa\nRemoving intermediate container dec529f754aa\n---> 6ec73793d353\nSuccessfully built 6ec73793d353\nSuccessfully tagged docker_demo:latest\n```\n\n\n等待镜像构造完成。然后使用 images命令查看镜像。\n\n![查看镜像](http://img.nixiaolei.com/2019-04-08-21-08-27.png)\n\n\n此时可以看到images已经构造完成。现在开始启动images，并测试。\n\n```shell\n#启动镜像 -d表示后台执⾏行行，-p 9000:3000表示指定本地的9000端⼝口隐射到容器器内的3000端⼝口，\ndocker_demo为镜像名称\ndocker run -d -p 9000:3000 docker_demo\n#查看容器器\ndocker ps\n```\n\n![查看容器](http://img.nixiaolei.com/2019-04-08-21-09-13.png)\n\n\n此时浏览器打开http://localhost:9000/,如果如图所示。表示容器运行正常。\n\n![正常情况](http://img.nixiaolei.com/2019-04-08-21-10-04.png)\n\n\n\n\n\n如果此时本地无法打开。可以使用log命令查看日志。根据日志修改对应出现的对方。","slug":"【容器】搭建第一个docker环境","published":1,"updated":"2019-04-08T13:10:32.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wdc001wssuw3wqrf8se","content":"<h2 id=\"初始化一个NodeJs程序\"><a href=\"#初始化一个NodeJs程序\" class=\"headerlink\" title=\"初始化一个NodeJs程序\"></a>初始化一个NodeJs程序</h2><p>以下操作必须已经安装了了NodeJS。<br>首先创建一个空文件夹。并创建以下⽂文件：</p>\n<ul>\n<li>server.js</li>\n<li>package.json</li>\n<li>Dockerfile</li>\n<li>.dockerignore</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir docker_demo</span><br><span class=\"line\">cd docker_demo</span><br><span class=\"line\">touch server.js</span><br><span class=\"line\">touch package.json</span><br><span class=\"line\">touch Dockerfile</span><br><span class=\"line\">touch .dockerignore</span><br></pre></td></tr></table></figure>\n<p>然后在server.js写⼊入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> ctx =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">'Hello docker'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>在package.json中写入</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"docker_demo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"node server.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"koa\"</span>: <span class=\"string\">\"^2.5.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试程序。控制台输⼊<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure></p>\n<p>浏览器打开本地测试,如果如图所示。表示demo创建成功。请继续往下。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-21-05-28.png\" alt=\"本地测试\"></p>\n<h2 id=\"创建dockerfile文件\"><a href=\"#创建dockerfile文件\" class=\"headerlink\" title=\"创建dockerfile文件\"></a>创建dockerfile文件</h2><p>Dockerfile是由一系列命令和参数构成的脚本，一个Dockerfile⾥里里⾯面包含了构建整个image的完整命令。Docker通过docker build执行Dockerfile中的一系列列命令自动构建image. 在.dockerignore文件里面写入代码。表示过滤该类型的文件。类似git的.gitignore</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Logs</span></span><br><span class=\"line\">logs</span><br><span class=\"line\">*.log</span><br><span class=\"line\">npm-debug.log*</span><br><span class=\"line\"><span class=\"comment\"># Runtime data</span></span><br><span class=\"line\">pids</span><br><span class=\"line\">*.pid</span><br><span class=\"line\">*.seed</span><br><span class=\"line\"><span class=\"comment\"># Directory for instrumented libs generated by jscoverage/JSCover</span></span><br><span class=\"line\">lib-cov</span><br><span class=\"line\"><span class=\"comment\"># Coverage directory used by tools like istanbul</span></span><br><span class=\"line\"></span><br><span class=\"line\">coverage</span><br><span class=\"line\"><span class=\"comment\"># nyc test coverage</span></span><br><span class=\"line\">.nyc_output</span><br><span class=\"line\"><span class=\"comment\"># Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)</span></span><br><span class=\"line\">.grunt</span><br><span class=\"line\"><span class=\"comment\"># node-waf configuration</span></span><br><span class=\"line\">.lock-wscript</span><br><span class=\"line\"><span class=\"comment\"># Compiled binary addons (http://nodejs.org/api/addons.html)</span></span><br><span class=\"line\">build/Release</span><br><span class=\"line\"><span class=\"comment\"># Dependency directories</span></span><br><span class=\"line\">node_modules</span><br><span class=\"line\">jspm_packages</span><br><span class=\"line\"><span class=\"comment\"># Optional npm cache directory</span></span><br><span class=\"line\">.npm</span><br><span class=\"line\"><span class=\"comment\"># Optional REPL history</span></span><br><span class=\"line\">.node_repl_history</span><br><span class=\"line\">.idea</span><br><span class=\"line\">.node_modules</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">.vscode</span><br></pre></td></tr></table></figure>\n<p>在Dockerfile文件中写入以下代码：<br><figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#制定node镜像的版本</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">8.9</span>-alpine</span><br><span class=\"line\"><span class=\"comment\">#声明作者</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> evilboy</span><br><span class=\"line\"><span class=\"comment\">#移动当前⽬目录下⾯面的⽂文件到app⽬目录下</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span> . /app/</span><br><span class=\"line\"><span class=\"comment\">#进⼊入到app⽬目录下⾯面，类似cd</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> /app</span><br><span class=\"line\"><span class=\"comment\">#安装依赖</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> npm install</span><br><span class=\"line\"><span class=\"comment\">#对外暴暴露露的端⼝口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"comment\">#程序启动脚本</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span> [\"npm\", \"start\"]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><blockquote>\n<p>使用build命令构造镜像,注意后⾯面那个“.”不不能少。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Sandbox-N ~]# docker build -t docker_demo .</span><br><span class=\"line\">Sending build context to Docker daemon 39.94kB</span><br><span class=\"line\">Step 1/7 : FROM node:8.9-alpine</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 406f227b21f5</span><br><span class=\"line\">Step 2/7 : MAINTAINER robin</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> Using cache</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 78d6cdbcfee2</span><br><span class=\"line\">Step 3/7 : ADD . /app/</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 2cb30678612d</span><br><span class=\"line\">Step 4/7 : WORKDIR /app</span><br><span class=\"line\">Removing intermediate container e51377081039</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> c2b7d0f37d2d</span><br><span class=\"line\">Step 5/7 : RUN npm install</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> Running in da0c3946ca8d</span><br><span class=\"line\">npm notice created a lockfile as package-lock.json. You should commit</span><br><span class=\"line\">this file.</span><br><span class=\"line\">added 38 packages in 3.323s</span><br><span class=\"line\">Removing intermediate container da0c3946ca8d</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> eecee87f10e2</span><br><span class=\"line\">Step 6/7 : EXPOSE 3000</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> Running in f3973cc168a4</span><br><span class=\"line\">Removing intermediate container f3973cc168a4</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 2671a4c6deb4</span><br><span class=\"line\">Step 7/7 : CMD [\"npm\", \"start\"]</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> Running in dec529f754aa</span><br><span class=\"line\">Removing intermediate container dec529f754aa</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 6ec73793d353</span><br><span class=\"line\">Successfully built 6ec73793d353</span><br><span class=\"line\">Successfully tagged docker_demo:latest</span><br></pre></td></tr></table></figure>\n<p>等待镜像构造完成。然后使用 images命令查看镜像。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-21-08-27.png\" alt=\"查看镜像\"></p>\n<p>此时可以看到images已经构造完成。现在开始启动images，并测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>启动镜像 -d表示后台执⾏行行，-p 9000:3000表示指定本地的9000端⼝口隐射到容器器内的3000端⼝口，</span><br><span class=\"line\">docker_demo为镜像名称</span><br><span class=\"line\">docker run -d -p 9000:3000 docker_demo</span><br><span class=\"line\"><span class=\"meta\">#</span>查看容器器</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-21-09-13.png\" alt=\"查看容器\"></p>\n<p>此时浏览器打开<a href=\"http://localhost:9000/,如果如图所示。表示容器运行正常。\" target=\"_blank\" rel=\"noopener\">http://localhost:9000/,如果如图所示。表示容器运行正常。</a></p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-21-10-04.png\" alt=\"正常情况\"></p>\n<p>如果此时本地无法打开。可以使用log命令查看日志。根据日志修改对应出现的对方。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"初始化一个NodeJs程序\"><a href=\"#初始化一个NodeJs程序\" class=\"headerlink\" title=\"初始化一个NodeJs程序\"></a>初始化一个NodeJs程序</h2><p>以下操作必须已经安装了了NodeJS。<br>首先创建一个空文件夹。并创建以下⽂文件：</p>\n<ul>\n<li>server.js</li>\n<li>package.json</li>\n<li>Dockerfile</li>\n<li>.dockerignore</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir docker_demo</span><br><span class=\"line\">cd docker_demo</span><br><span class=\"line\">touch server.js</span><br><span class=\"line\">touch package.json</span><br><span class=\"line\">touch Dockerfile</span><br><span class=\"line\">touch .dockerignore</span><br></pre></td></tr></table></figure>\n<p>然后在server.js写⼊入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> ctx =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">'Hello docker'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>在package.json中写入</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"docker_demo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"node server.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"koa\"</span>: <span class=\"string\">\"^2.5.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试程序。控制台输⼊<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure></p>\n<p>浏览器打开本地测试,如果如图所示。表示demo创建成功。请继续往下。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-21-05-28.png\" alt=\"本地测试\"></p>\n<h2 id=\"创建dockerfile文件\"><a href=\"#创建dockerfile文件\" class=\"headerlink\" title=\"创建dockerfile文件\"></a>创建dockerfile文件</h2><p>Dockerfile是由一系列命令和参数构成的脚本，一个Dockerfile⾥里里⾯面包含了构建整个image的完整命令。Docker通过docker build执行Dockerfile中的一系列列命令自动构建image. 在.dockerignore文件里面写入代码。表示过滤该类型的文件。类似git的.gitignore</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Logs</span></span><br><span class=\"line\">logs</span><br><span class=\"line\">*.log</span><br><span class=\"line\">npm-debug.log*</span><br><span class=\"line\"><span class=\"comment\"># Runtime data</span></span><br><span class=\"line\">pids</span><br><span class=\"line\">*.pid</span><br><span class=\"line\">*.seed</span><br><span class=\"line\"><span class=\"comment\"># Directory for instrumented libs generated by jscoverage/JSCover</span></span><br><span class=\"line\">lib-cov</span><br><span class=\"line\"><span class=\"comment\"># Coverage directory used by tools like istanbul</span></span><br><span class=\"line\"></span><br><span class=\"line\">coverage</span><br><span class=\"line\"><span class=\"comment\"># nyc test coverage</span></span><br><span class=\"line\">.nyc_output</span><br><span class=\"line\"><span class=\"comment\"># Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)</span></span><br><span class=\"line\">.grunt</span><br><span class=\"line\"><span class=\"comment\"># node-waf configuration</span></span><br><span class=\"line\">.lock-wscript</span><br><span class=\"line\"><span class=\"comment\"># Compiled binary addons (http://nodejs.org/api/addons.html)</span></span><br><span class=\"line\">build/Release</span><br><span class=\"line\"><span class=\"comment\"># Dependency directories</span></span><br><span class=\"line\">node_modules</span><br><span class=\"line\">jspm_packages</span><br><span class=\"line\"><span class=\"comment\"># Optional npm cache directory</span></span><br><span class=\"line\">.npm</span><br><span class=\"line\"><span class=\"comment\"># Optional REPL history</span></span><br><span class=\"line\">.node_repl_history</span><br><span class=\"line\">.idea</span><br><span class=\"line\">.node_modules</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">.vscode</span><br></pre></td></tr></table></figure>\n<p>在Dockerfile文件中写入以下代码：<br><figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#制定node镜像的版本</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">8.9</span>-alpine</span><br><span class=\"line\"><span class=\"comment\">#声明作者</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> evilboy</span><br><span class=\"line\"><span class=\"comment\">#移动当前⽬目录下⾯面的⽂文件到app⽬目录下</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span> . /app/</span><br><span class=\"line\"><span class=\"comment\">#进⼊入到app⽬目录下⾯面，类似cd</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> /app</span><br><span class=\"line\"><span class=\"comment\">#安装依赖</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span> npm install</span><br><span class=\"line\"><span class=\"comment\">#对外暴暴露露的端⼝口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"comment\">#程序启动脚本</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span> [\"npm\", \"start\"]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><blockquote>\n<p>使用build命令构造镜像,注意后⾯面那个“.”不不能少。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Sandbox-N ~]# docker build -t docker_demo .</span><br><span class=\"line\">Sending build context to Docker daemon 39.94kB</span><br><span class=\"line\">Step 1/7 : FROM node:8.9-alpine</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 406f227b21f5</span><br><span class=\"line\">Step 2/7 : MAINTAINER robin</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> Using cache</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 78d6cdbcfee2</span><br><span class=\"line\">Step 3/7 : ADD . /app/</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 2cb30678612d</span><br><span class=\"line\">Step 4/7 : WORKDIR /app</span><br><span class=\"line\">Removing intermediate container e51377081039</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> c2b7d0f37d2d</span><br><span class=\"line\">Step 5/7 : RUN npm install</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> Running in da0c3946ca8d</span><br><span class=\"line\">npm notice created a lockfile as package-lock.json. You should commit</span><br><span class=\"line\">this file.</span><br><span class=\"line\">added 38 packages in 3.323s</span><br><span class=\"line\">Removing intermediate container da0c3946ca8d</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> eecee87f10e2</span><br><span class=\"line\">Step 6/7 : EXPOSE 3000</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> Running in f3973cc168a4</span><br><span class=\"line\">Removing intermediate container f3973cc168a4</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 2671a4c6deb4</span><br><span class=\"line\">Step 7/7 : CMD [\"npm\", \"start\"]</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> Running in dec529f754aa</span><br><span class=\"line\">Removing intermediate container dec529f754aa</span><br><span class=\"line\"><span class=\"meta\">---&gt;</span> 6ec73793d353</span><br><span class=\"line\">Successfully built 6ec73793d353</span><br><span class=\"line\">Successfully tagged docker_demo:latest</span><br></pre></td></tr></table></figure>\n<p>等待镜像构造完成。然后使用 images命令查看镜像。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-21-08-27.png\" alt=\"查看镜像\"></p>\n<p>此时可以看到images已经构造完成。现在开始启动images，并测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>启动镜像 -d表示后台执⾏行行，-p 9000:3000表示指定本地的9000端⼝口隐射到容器器内的3000端⼝口，</span><br><span class=\"line\">docker_demo为镜像名称</span><br><span class=\"line\">docker run -d -p 9000:3000 docker_demo</span><br><span class=\"line\"><span class=\"meta\">#</span>查看容器器</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-21-09-13.png\" alt=\"查看容器\"></p>\n<p>此时浏览器打开<a href=\"http://localhost:9000/,如果如图所示。表示容器运行正常。\" target=\"_blank\" rel=\"noopener\">http://localhost:9000/,如果如图所示。表示容器运行正常。</a></p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-21-10-04.png\" alt=\"正常情况\"></p>\n<p>如果此时本地无法打开。可以使用log命令查看日志。根据日志修改对应出现的对方。</p>\n"},{"title":"工具目录","date":"2019-03-17T06:59:02.000Z","_content":"\n这里存放各种可能用到的用不到的东西， 真用到时方便查找😄\n\n当然平日里经常用到的， 耳熟能详的， 我就不放进来了， 主要是起个备忘录的作用\n\n\n***\n## CSS\n### 兼容查询\n* https://caniuse.com/ \n* https://cssdb.org/\n\n### 动画\n* 贝塞尔: http://cubic-bezier.com/#.17,.67,.83,.67\n\n\n## 可生成matrix的网站\n名称 | 网址\n---|---\nmatrix3d | http://ds-overdesign.com/transform/matrix3d.html\nCSS-Matrix3d | https://github.com/Zhangdroid/CSS-Matrix3d\nmatrix | http://meyerweb.com/eric/tools/matrix/\ntools  | http://www.f2e.name/case/css3/tools.html\n\n\n### 高逼格\n* web component CSS: https://css-doodle.com/\n\n### PostCss 值得收藏的插件\n功能 | 插件名 \n---|---\n运行时变量 | POSTCSS-CUSTOM-PROPERTIES \n与SCSS一致的变量实现 | POSTCSS-SIMPLE-VARS  \n实现类似SASS的@MIXIN的功能 | POSTCSS-MIXINS \n实现类似SASS的继承功能 | POSTCSS-EXTEND   \n实现类似SASS的IMPORT | POSTCSS-IMPORT \n面向未来 | CSSNext  \n修复过去（兼容IE，zomm、一像素留白等） | CSS Grace \n\n\n\n***\n\n## Node\n### 框架\n功能 | 插件名 | 周边生态\n---|---\n帮助实现DI的库 | Awilix |  awilix-koa\n实现控制反转&构造注入的框架 | InversifyJS |  inversify-koa-utils\n\n***\n\n## webpack4\n\n### 功能性能类\n\n功能 | 插件名\n---|---\n自动插入html及静态文件 | HtmlWebpackPlugin【配置自动注入loading（监测资源）】\n抽离css文件  | MiniCssExtractPlugin\n清空指定目录 | CleanWebpackPlugin\njs 深度 tree sharking 基于ES6模块 | webpack-deep-scope-plugin \ncss tree sharking   | PurifyCSSPlugin\n多核打包件 [需要babel]  |  uglifyjs-webpack-plugin[官方], happypack\n前端缓存负载【自动生成缓存文件】 |  Webpack Manifest Plugin\njs 压缩 以及 es压缩 多核压缩 | webpack-parallel-uglify-plugin, happypack\nhint css 多核压缩css | css-nano, optimize-css-assets-webpack-plugin \njs 转 ast静态语法分析树 | acorn , acorn-walk\n能对html进行hint 以及 fix 的插件 | html-minifier, html-minifier-lint\n搬运静态文件 | copy-webpack-plugin |\n\n\n\n### 优化体验类\n功能 | 插件名\n---|---\n监测 webpack 打包速度  | speed-measure-webpack-plugin\n打包成功通知  | webpack-build-notifier\n显示打包进度 | progress-bar-webpack-plugin\n信息面板优化 | webpack-dashboard[需要配置Pagejson]， webpack-jarvis[网页中浏览]\n修改cmd 标题 | node-bash-title[ github ][cmder 无效]\n\n### loader\n功能 | 插件名\n---|---\n缓存Loader结果 | cache-loader\n\n\n\n\n\n\n\n\n\n\n\n***\n\n## TypeScript\n\n### 运行工具\n功能 | 插件名 | 周边生态\n---|---\n在node中不用编译就运行 | ts-node |  ts-node-dev 热重启\n\n\n\n***\n\n\n## Linux\n### vim\n* 快速学习vim的网站: https://vim-adventures.com/\n\n***\n\n## 算法\n### 学习帮助\n* 算法过程可视化: https://algorithm-visualizer.org/branch-and-bound/binary-search\n\n","source":"_posts/工具目录.md","raw":"---\ntitle: 工具目录\ndate: 2019-03-17 14:59:02\ncategories: 目录\ntags: [目录]\n---\n\n这里存放各种可能用到的用不到的东西， 真用到时方便查找😄\n\n当然平日里经常用到的， 耳熟能详的， 我就不放进来了， 主要是起个备忘录的作用\n\n\n***\n## CSS\n### 兼容查询\n* https://caniuse.com/ \n* https://cssdb.org/\n\n### 动画\n* 贝塞尔: http://cubic-bezier.com/#.17,.67,.83,.67\n\n\n## 可生成matrix的网站\n名称 | 网址\n---|---\nmatrix3d | http://ds-overdesign.com/transform/matrix3d.html\nCSS-Matrix3d | https://github.com/Zhangdroid/CSS-Matrix3d\nmatrix | http://meyerweb.com/eric/tools/matrix/\ntools  | http://www.f2e.name/case/css3/tools.html\n\n\n### 高逼格\n* web component CSS: https://css-doodle.com/\n\n### PostCss 值得收藏的插件\n功能 | 插件名 \n---|---\n运行时变量 | POSTCSS-CUSTOM-PROPERTIES \n与SCSS一致的变量实现 | POSTCSS-SIMPLE-VARS  \n实现类似SASS的@MIXIN的功能 | POSTCSS-MIXINS \n实现类似SASS的继承功能 | POSTCSS-EXTEND   \n实现类似SASS的IMPORT | POSTCSS-IMPORT \n面向未来 | CSSNext  \n修复过去（兼容IE，zomm、一像素留白等） | CSS Grace \n\n\n\n***\n\n## Node\n### 框架\n功能 | 插件名 | 周边生态\n---|---\n帮助实现DI的库 | Awilix |  awilix-koa\n实现控制反转&构造注入的框架 | InversifyJS |  inversify-koa-utils\n\n***\n\n## webpack4\n\n### 功能性能类\n\n功能 | 插件名\n---|---\n自动插入html及静态文件 | HtmlWebpackPlugin【配置自动注入loading（监测资源）】\n抽离css文件  | MiniCssExtractPlugin\n清空指定目录 | CleanWebpackPlugin\njs 深度 tree sharking 基于ES6模块 | webpack-deep-scope-plugin \ncss tree sharking   | PurifyCSSPlugin\n多核打包件 [需要babel]  |  uglifyjs-webpack-plugin[官方], happypack\n前端缓存负载【自动生成缓存文件】 |  Webpack Manifest Plugin\njs 压缩 以及 es压缩 多核压缩 | webpack-parallel-uglify-plugin, happypack\nhint css 多核压缩css | css-nano, optimize-css-assets-webpack-plugin \njs 转 ast静态语法分析树 | acorn , acorn-walk\n能对html进行hint 以及 fix 的插件 | html-minifier, html-minifier-lint\n搬运静态文件 | copy-webpack-plugin |\n\n\n\n### 优化体验类\n功能 | 插件名\n---|---\n监测 webpack 打包速度  | speed-measure-webpack-plugin\n打包成功通知  | webpack-build-notifier\n显示打包进度 | progress-bar-webpack-plugin\n信息面板优化 | webpack-dashboard[需要配置Pagejson]， webpack-jarvis[网页中浏览]\n修改cmd 标题 | node-bash-title[ github ][cmder 无效]\n\n### loader\n功能 | 插件名\n---|---\n缓存Loader结果 | cache-loader\n\n\n\n\n\n\n\n\n\n\n\n***\n\n## TypeScript\n\n### 运行工具\n功能 | 插件名 | 周边生态\n---|---\n在node中不用编译就运行 | ts-node |  ts-node-dev 热重启\n\n\n\n***\n\n\n## Linux\n### vim\n* 快速学习vim的网站: https://vim-adventures.com/\n\n***\n\n## 算法\n### 学习帮助\n* 算法过程可视化: https://algorithm-visualizer.org/branch-and-bound/binary-search\n\n","slug":"工具目录","published":1,"updated":"2019-03-28T11:58:35.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wdj0021ssuw47zdx793","content":"<p>这里存放各种可能用到的用不到的东西， 真用到时方便查找😄</p>\n<p>当然平日里经常用到的， 耳熟能详的， 我就不放进来了， 主要是起个备忘录的作用</p>\n<hr>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"兼容查询\"><a href=\"#兼容查询\" class=\"headerlink\" title=\"兼容查询\"></a>兼容查询</h3><ul>\n<li><a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/</a> </li>\n<li><a href=\"https://cssdb.org/\" target=\"_blank\" rel=\"noopener\">https://cssdb.org/</a></li>\n</ul>\n<h3 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h3><ul>\n<li>贝塞尔: <a href=\"http://cubic-bezier.com/#.17,.67,.83,.67\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com/#.17,.67,.83,.67</a></li>\n</ul>\n<h2 id=\"可生成matrix的网站\"><a href=\"#可生成matrix的网站\" class=\"headerlink\" title=\"可生成matrix的网站\"></a>可生成matrix的网站</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>matrix3d</td>\n<td><a href=\"http://ds-overdesign.com/transform/matrix3d.html\" target=\"_blank\" rel=\"noopener\">http://ds-overdesign.com/transform/matrix3d.html</a></td>\n</tr>\n<tr>\n<td>CSS-Matrix3d</td>\n<td><a href=\"https://github.com/Zhangdroid/CSS-Matrix3d\" target=\"_blank\" rel=\"noopener\">https://github.com/Zhangdroid/CSS-Matrix3d</a></td>\n</tr>\n<tr>\n<td>matrix</td>\n<td><a href=\"http://meyerweb.com/eric/tools/matrix/\" target=\"_blank\" rel=\"noopener\">http://meyerweb.com/eric/tools/matrix/</a></td>\n</tr>\n<tr>\n<td>tools</td>\n<td><a href=\"http://www.f2e.name/case/css3/tools.html\" target=\"_blank\" rel=\"noopener\">http://www.f2e.name/case/css3/tools.html</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"高逼格\"><a href=\"#高逼格\" class=\"headerlink\" title=\"高逼格\"></a>高逼格</h3><ul>\n<li>web component CSS: <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"noopener\">https://css-doodle.com/</a></li>\n</ul>\n<h3 id=\"PostCss-值得收藏的插件\"><a href=\"#PostCss-值得收藏的插件\" class=\"headerlink\" title=\"PostCss 值得收藏的插件\"></a>PostCss 值得收藏的插件</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>运行时变量</td>\n<td>POSTCSS-CUSTOM-PROPERTIES </td>\n</tr>\n<tr>\n<td>与SCSS一致的变量实现</td>\n<td>POSTCSS-SIMPLE-VARS  </td>\n</tr>\n<tr>\n<td>实现类似SASS的@MIXIN的功能</td>\n<td>POSTCSS-MIXINS </td>\n</tr>\n<tr>\n<td>实现类似SASS的继承功能</td>\n<td>POSTCSS-EXTEND   </td>\n</tr>\n<tr>\n<td>实现类似SASS的IMPORT</td>\n<td>POSTCSS-IMPORT </td>\n</tr>\n<tr>\n<td>面向未来</td>\n<td>CSSNext  </td>\n</tr>\n<tr>\n<td>修复过去（兼容IE，zomm、一像素留白等）</td>\n<td>CSS Grace </td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n<th>周边生态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>帮助实现DI的库</td>\n<td>Awilix</td>\n<td>awilix-koa</td>\n</tr>\n<tr>\n<td>实现控制反转&amp;构造注入的框架</td>\n<td>InversifyJS</td>\n<td>inversify-koa-utils</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"webpack4\"><a href=\"#webpack4\" class=\"headerlink\" title=\"webpack4\"></a>webpack4</h2><h3 id=\"功能性能类\"><a href=\"#功能性能类\" class=\"headerlink\" title=\"功能性能类\"></a>功能性能类</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>自动插入html及静态文件</td>\n<td>HtmlWebpackPlugin【配置自动注入loading（监测资源）】</td>\n</tr>\n<tr>\n<td>抽离css文件</td>\n<td>MiniCssExtractPlugin</td>\n</tr>\n<tr>\n<td>清空指定目录</td>\n<td>CleanWebpackPlugin</td>\n</tr>\n<tr>\n<td>js 深度 tree sharking 基于ES6模块</td>\n<td>webpack-deep-scope-plugin </td>\n</tr>\n<tr>\n<td>css tree sharking</td>\n<td>PurifyCSSPlugin</td>\n</tr>\n<tr>\n<td>多核打包件 [需要babel]</td>\n<td>uglifyjs-webpack-plugin[官方], happypack</td>\n</tr>\n<tr>\n<td>前端缓存负载【自动生成缓存文件】</td>\n<td>Webpack Manifest Plugin</td>\n</tr>\n<tr>\n<td>js 压缩 以及 es压缩 多核压缩</td>\n<td>webpack-parallel-uglify-plugin, happypack</td>\n</tr>\n<tr>\n<td>hint css 多核压缩css</td>\n<td>css-nano, optimize-css-assets-webpack-plugin </td>\n</tr>\n<tr>\n<td>js 转 ast静态语法分析树</td>\n<td>acorn , acorn-walk</td>\n</tr>\n<tr>\n<td>能对html进行hint 以及 fix 的插件</td>\n<td>html-minifier, html-minifier-lint</td>\n</tr>\n<tr>\n<td>搬运静态文件</td>\n<td>copy-webpack-plugin</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"优化体验类\"><a href=\"#优化体验类\" class=\"headerlink\" title=\"优化体验类\"></a>优化体验类</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>监测 webpack 打包速度</td>\n<td>speed-measure-webpack-plugin</td>\n</tr>\n<tr>\n<td>打包成功通知</td>\n<td>webpack-build-notifier</td>\n</tr>\n<tr>\n<td>显示打包进度</td>\n<td>progress-bar-webpack-plugin</td>\n</tr>\n<tr>\n<td>信息面板优化</td>\n<td>webpack-dashboard[需要配置Pagejson]， webpack-jarvis[网页中浏览]</td>\n</tr>\n<tr>\n<td>修改cmd 标题</td>\n<td>node-bash-title[ github ][cmder 无效]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>缓存Loader结果</td>\n<td>cache-loader</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><h3 id=\"运行工具\"><a href=\"#运行工具\" class=\"headerlink\" title=\"运行工具\"></a>运行工具</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n<th>周边生态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>在node中不用编译就运行</td>\n<td>ts-node</td>\n<td>ts-node-dev 热重启</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h3><ul>\n<li>快速学习vim的网站: <a href=\"https://vim-adventures.com/\" target=\"_blank\" rel=\"noopener\">https://vim-adventures.com/</a></li>\n</ul>\n<hr>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"学习帮助\"><a href=\"#学习帮助\" class=\"headerlink\" title=\"学习帮助\"></a>学习帮助</h3><ul>\n<li>算法过程可视化: <a href=\"https://algorithm-visualizer.org/branch-and-bound/binary-search\" target=\"_blank\" rel=\"noopener\">https://algorithm-visualizer.org/branch-and-bound/binary-search</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>这里存放各种可能用到的用不到的东西， 真用到时方便查找😄</p>\n<p>当然平日里经常用到的， 耳熟能详的， 我就不放进来了， 主要是起个备忘录的作用</p>\n<hr>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"兼容查询\"><a href=\"#兼容查询\" class=\"headerlink\" title=\"兼容查询\"></a>兼容查询</h3><ul>\n<li><a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/</a> </li>\n<li><a href=\"https://cssdb.org/\" target=\"_blank\" rel=\"noopener\">https://cssdb.org/</a></li>\n</ul>\n<h3 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h3><ul>\n<li>贝塞尔: <a href=\"http://cubic-bezier.com/#.17,.67,.83,.67\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com/#.17,.67,.83,.67</a></li>\n</ul>\n<h2 id=\"可生成matrix的网站\"><a href=\"#可生成matrix的网站\" class=\"headerlink\" title=\"可生成matrix的网站\"></a>可生成matrix的网站</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>matrix3d</td>\n<td><a href=\"http://ds-overdesign.com/transform/matrix3d.html\" target=\"_blank\" rel=\"noopener\">http://ds-overdesign.com/transform/matrix3d.html</a></td>\n</tr>\n<tr>\n<td>CSS-Matrix3d</td>\n<td><a href=\"https://github.com/Zhangdroid/CSS-Matrix3d\" target=\"_blank\" rel=\"noopener\">https://github.com/Zhangdroid/CSS-Matrix3d</a></td>\n</tr>\n<tr>\n<td>matrix</td>\n<td><a href=\"http://meyerweb.com/eric/tools/matrix/\" target=\"_blank\" rel=\"noopener\">http://meyerweb.com/eric/tools/matrix/</a></td>\n</tr>\n<tr>\n<td>tools</td>\n<td><a href=\"http://www.f2e.name/case/css3/tools.html\" target=\"_blank\" rel=\"noopener\">http://www.f2e.name/case/css3/tools.html</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"高逼格\"><a href=\"#高逼格\" class=\"headerlink\" title=\"高逼格\"></a>高逼格</h3><ul>\n<li>web component CSS: <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"noopener\">https://css-doodle.com/</a></li>\n</ul>\n<h3 id=\"PostCss-值得收藏的插件\"><a href=\"#PostCss-值得收藏的插件\" class=\"headerlink\" title=\"PostCss 值得收藏的插件\"></a>PostCss 值得收藏的插件</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>运行时变量</td>\n<td>POSTCSS-CUSTOM-PROPERTIES </td>\n</tr>\n<tr>\n<td>与SCSS一致的变量实现</td>\n<td>POSTCSS-SIMPLE-VARS  </td>\n</tr>\n<tr>\n<td>实现类似SASS的@MIXIN的功能</td>\n<td>POSTCSS-MIXINS </td>\n</tr>\n<tr>\n<td>实现类似SASS的继承功能</td>\n<td>POSTCSS-EXTEND   </td>\n</tr>\n<tr>\n<td>实现类似SASS的IMPORT</td>\n<td>POSTCSS-IMPORT </td>\n</tr>\n<tr>\n<td>面向未来</td>\n<td>CSSNext  </td>\n</tr>\n<tr>\n<td>修复过去（兼容IE，zomm、一像素留白等）</td>\n<td>CSS Grace </td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n<th>周边生态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>帮助实现DI的库</td>\n<td>Awilix</td>\n<td>awilix-koa</td>\n</tr>\n<tr>\n<td>实现控制反转&amp;构造注入的框架</td>\n<td>InversifyJS</td>\n<td>inversify-koa-utils</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"webpack4\"><a href=\"#webpack4\" class=\"headerlink\" title=\"webpack4\"></a>webpack4</h2><h3 id=\"功能性能类\"><a href=\"#功能性能类\" class=\"headerlink\" title=\"功能性能类\"></a>功能性能类</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>自动插入html及静态文件</td>\n<td>HtmlWebpackPlugin【配置自动注入loading（监测资源）】</td>\n</tr>\n<tr>\n<td>抽离css文件</td>\n<td>MiniCssExtractPlugin</td>\n</tr>\n<tr>\n<td>清空指定目录</td>\n<td>CleanWebpackPlugin</td>\n</tr>\n<tr>\n<td>js 深度 tree sharking 基于ES6模块</td>\n<td>webpack-deep-scope-plugin </td>\n</tr>\n<tr>\n<td>css tree sharking</td>\n<td>PurifyCSSPlugin</td>\n</tr>\n<tr>\n<td>多核打包件 [需要babel]</td>\n<td>uglifyjs-webpack-plugin[官方], happypack</td>\n</tr>\n<tr>\n<td>前端缓存负载【自动生成缓存文件】</td>\n<td>Webpack Manifest Plugin</td>\n</tr>\n<tr>\n<td>js 压缩 以及 es压缩 多核压缩</td>\n<td>webpack-parallel-uglify-plugin, happypack</td>\n</tr>\n<tr>\n<td>hint css 多核压缩css</td>\n<td>css-nano, optimize-css-assets-webpack-plugin </td>\n</tr>\n<tr>\n<td>js 转 ast静态语法分析树</td>\n<td>acorn , acorn-walk</td>\n</tr>\n<tr>\n<td>能对html进行hint 以及 fix 的插件</td>\n<td>html-minifier, html-minifier-lint</td>\n</tr>\n<tr>\n<td>搬运静态文件</td>\n<td>copy-webpack-plugin</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"优化体验类\"><a href=\"#优化体验类\" class=\"headerlink\" title=\"优化体验类\"></a>优化体验类</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>监测 webpack 打包速度</td>\n<td>speed-measure-webpack-plugin</td>\n</tr>\n<tr>\n<td>打包成功通知</td>\n<td>webpack-build-notifier</td>\n</tr>\n<tr>\n<td>显示打包进度</td>\n<td>progress-bar-webpack-plugin</td>\n</tr>\n<tr>\n<td>信息面板优化</td>\n<td>webpack-dashboard[需要配置Pagejson]， webpack-jarvis[网页中浏览]</td>\n</tr>\n<tr>\n<td>修改cmd 标题</td>\n<td>node-bash-title[ github ][cmder 无效]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>缓存Loader结果</td>\n<td>cache-loader</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><h3 id=\"运行工具\"><a href=\"#运行工具\" class=\"headerlink\" title=\"运行工具\"></a>运行工具</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>插件名</th>\n<th>周边生态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>在node中不用编译就运行</td>\n<td>ts-node</td>\n<td>ts-node-dev 热重启</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h3><ul>\n<li>快速学习vim的网站: <a href=\"https://vim-adventures.com/\" target=\"_blank\" rel=\"noopener\">https://vim-adventures.com/</a></li>\n</ul>\n<hr>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"学习帮助\"><a href=\"#学习帮助\" class=\"headerlink\" title=\"学习帮助\"></a>学习帮助</h3><ul>\n<li>算法过程可视化: <a href=\"https://algorithm-visualizer.org/branch-and-bound/binary-search\" target=\"_blank\" rel=\"noopener\">https://algorithm-visualizer.org/branch-and-bound/binary-search</a></li>\n</ul>\n"},{"title":"如何在伪元素中使用Iconfont","date":"2019-03-24T06:45:47.000Z","_content":"\n\n## 把iconfont 中的样式拷到 伪元素上\n```CSS\n.iconfont{\n  font-family:\"iconfont\" !important;\n  font-size:16px;font-style:normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n## 砍掉unicode 前面的字符\n\n## 如下 即可\n```CSS\n&::after{\n  content: '\\e60e';\n\n  font-family:\"iconfont\" !important;\n  font-size:16px;font-style:normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/如何在伪元素中使用Iconfont.md","raw":"---\ntitle: 如何在伪元素中使用Iconfont\ndate: 2019-03-24 14:45:47\ncategories: CSS\ntags: [css]\n---\n\n\n## 把iconfont 中的样式拷到 伪元素上\n```CSS\n.iconfont{\n  font-family:\"iconfont\" !important;\n  font-size:16px;font-style:normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n## 砍掉unicode 前面的字符\n\n## 如下 即可\n```CSS\n&::after{\n  content: '\\e60e';\n\n  font-family:\"iconfont\" !important;\n  font-size:16px;font-style:normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"如何在伪元素中使用Iconfont","published":1,"updated":"2019-03-24T06:46:39.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wdm0023ssuwq41gs32c","content":"<h2 id=\"把iconfont-中的样式拷到-伪元素上\"><a href=\"#把iconfont-中的样式拷到-伪元素上\" class=\"headerlink\" title=\"把iconfont 中的样式拷到 伪元素上\"></a>把iconfont 中的样式拷到 伪元素上</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.iconfont</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>:<span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;<span class=\"attribute\">font-style</span>:normal;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke-width</span>: <span class=\"number\">0.2px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"砍掉unicode-前面的字符\"><a href=\"#砍掉unicode-前面的字符\" class=\"headerlink\" title=\"砍掉unicode 前面的字符\"></a>砍掉unicode 前面的字符</h2><h2 id=\"如下-即可\"><a href=\"#如下-即可\" class=\"headerlink\" title=\"如下 即可\"></a>如下 即可</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;<span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'\\e60e'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>:<span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;<span class=\"attribute\">font-style</span>:normal;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke-width</span>: <span class=\"number\">0.2px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"把iconfont-中的样式拷到-伪元素上\"><a href=\"#把iconfont-中的样式拷到-伪元素上\" class=\"headerlink\" title=\"把iconfont 中的样式拷到 伪元素上\"></a>把iconfont 中的样式拷到 伪元素上</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.iconfont</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>:<span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;<span class=\"attribute\">font-style</span>:normal;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke-width</span>: <span class=\"number\">0.2px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"砍掉unicode-前面的字符\"><a href=\"#砍掉unicode-前面的字符\" class=\"headerlink\" title=\"砍掉unicode 前面的字符\"></a>砍掉unicode 前面的字符</h2><h2 id=\"如下-即可\"><a href=\"#如下-即可\" class=\"headerlink\" title=\"如下 即可\"></a>如下 即可</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;<span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'\\e60e'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>:<span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;<span class=\"attribute\">font-style</span>:normal;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-stroke-width</span>: <span class=\"number\">0.2px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"模拟实现一个bind","date":"2019-03-31T08:52:35.000Z","_content":"\n`bind`方法用来保留`JavaScript`的`this`指向， 和`apply`、`call`这两个方法不同的是，`bind`不会立即执行\n\n如何模拟实现一个`bind`方法\n\n初始函数，我们将对整个函数修改`this`指向\n```JavaScript\nfunction fn( name ) {\n  this.name = name\n}\n\nvar obj = { age: 18 }\n```\n## 最普通的实现\n创建一个函数\n```JavaScript\nfunction mybind(func ,context, ...args) {\n  return () => {\n    return func.apply(context, args  )\n  }\n}\n\nvar bindFn = mybind(fn, obj, '小明')\n```\n\n## 原型实现\n创建一个函数\n```JavaScript\nFunction.prototype.mybind = function(context, ...args) {\n  const _this = this\n  return  (...args2) => {\n    return _this.apply( context, [ ...args, ...args2] )\n  } \n}\n\nvar bindFn = fn.mybind(obj, '小明' )\n```\n\n\n\n实现很简单， 但是还差一步，就是`bind`后的函数， 拿来作为构造函数`new`时， `this`指向会出问题\n\n\n## 处理new 的指向\n\n```JavaScript\nFunction.prototype.mybind = function(context, ...args) {\n  const _this = this\n  function cbFn (...tempArgs) {\n    return this instanceof cbFn ? _this.apply(this, [ ...args, ...tempArgs]) : _this.apply( context, [ ...args, ...tempArgs] )\n  } \n  return cbFn\n}\nvar BindFn = fn.mybind(obj, '小明' )\nvar bfn = new BindFn()\n```\n\n\n参考文献\n* https://github.com/mqyqingfeng/Blog/issues/13\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/模拟实现一个bind.md","raw":"---\ntitle: 模拟实现一个bind\ndate: 2019-03-31 16:52:35\ncategories: JavaScript\ntags: JavaScript\n---\n\n`bind`方法用来保留`JavaScript`的`this`指向， 和`apply`、`call`这两个方法不同的是，`bind`不会立即执行\n\n如何模拟实现一个`bind`方法\n\n初始函数，我们将对整个函数修改`this`指向\n```JavaScript\nfunction fn( name ) {\n  this.name = name\n}\n\nvar obj = { age: 18 }\n```\n## 最普通的实现\n创建一个函数\n```JavaScript\nfunction mybind(func ,context, ...args) {\n  return () => {\n    return func.apply(context, args  )\n  }\n}\n\nvar bindFn = mybind(fn, obj, '小明')\n```\n\n## 原型实现\n创建一个函数\n```JavaScript\nFunction.prototype.mybind = function(context, ...args) {\n  const _this = this\n  return  (...args2) => {\n    return _this.apply( context, [ ...args, ...args2] )\n  } \n}\n\nvar bindFn = fn.mybind(obj, '小明' )\n```\n\n\n\n实现很简单， 但是还差一步，就是`bind`后的函数， 拿来作为构造函数`new`时， `this`指向会出问题\n\n\n## 处理new 的指向\n\n```JavaScript\nFunction.prototype.mybind = function(context, ...args) {\n  const _this = this\n  function cbFn (...tempArgs) {\n    return this instanceof cbFn ? _this.apply(this, [ ...args, ...tempArgs]) : _this.apply( context, [ ...args, ...tempArgs] )\n  } \n  return cbFn\n}\nvar BindFn = fn.mybind(obj, '小明' )\nvar bfn = new BindFn()\n```\n\n\n参考文献\n* https://github.com/mqyqingfeng/Blog/issues/13\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"模拟实现一个bind","published":1,"updated":"2019-03-31T09:37:47.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wdq0026ssuwvpgqrocz","content":"<p><code>bind</code>方法用来保留<code>JavaScript</code>的<code>this</code>指向， 和<code>apply</code>、<code>call</code>这两个方法不同的是，<code>bind</code>不会立即执行</p>\n<p>如何模拟实现一个<code>bind</code>方法</p>\n<p>初始函数，我们将对整个函数修改<code>this</code>指向<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最普通的实现\"><a href=\"#最普通的实现\" class=\"headerlink\" title=\"最普通的实现\"></a>最普通的实现</h2><p>创建一个函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mybind</span>(<span class=\"params\">func ,context, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func.apply(context, args  )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = mybind(fn, obj, <span class=\"string\">'小明'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"原型实现\"><a href=\"#原型实现\" class=\"headerlink\" title=\"原型实现\"></a>原型实现</h2><p>创建一个函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"function\">(<span class=\"params\">...args2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _this.apply( context, [ ...args, ...args2] )</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.mybind(obj, <span class=\"string\">'小明'</span> )</span><br></pre></td></tr></table></figure></p>\n<p>实现很简单， 但是还差一步，就是<code>bind</code>后的函数， 拿来作为构造函数<code>new</code>时， <code>this</code>指向会出问题</p>\n<h2 id=\"处理new-的指向\"><a href=\"#处理new-的指向\" class=\"headerlink\" title=\"处理new 的指向\"></a>处理new 的指向</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cbFn</span> (<span class=\"params\">...tempArgs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> cbFn ? _this.apply(<span class=\"keyword\">this</span>, [ ...args, ...tempArgs]) : _this.apply( context, [ ...args, ...tempArgs] )</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> cbFn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> BindFn = fn.mybind(obj, <span class=\"string\">'小明'</span> )</span><br><span class=\"line\"><span class=\"keyword\">var</span> bfn = <span class=\"keyword\">new</span> BindFn()</span><br></pre></td></tr></table></figure>\n<p>参考文献</p>\n<ul>\n<li><a href=\"https://github.com/mqyqingfeng/Blog/issues/13\" target=\"_blank\" rel=\"noopener\">https://github.com/mqyqingfeng/Blog/issues/13</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>bind</code>方法用来保留<code>JavaScript</code>的<code>this</code>指向， 和<code>apply</code>、<code>call</code>这两个方法不同的是，<code>bind</code>不会立即执行</p>\n<p>如何模拟实现一个<code>bind</code>方法</p>\n<p>初始函数，我们将对整个函数修改<code>this</code>指向<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最普通的实现\"><a href=\"#最普通的实现\" class=\"headerlink\" title=\"最普通的实现\"></a>最普通的实现</h2><p>创建一个函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mybind</span>(<span class=\"params\">func ,context, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func.apply(context, args  )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = mybind(fn, obj, <span class=\"string\">'小明'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"原型实现\"><a href=\"#原型实现\" class=\"headerlink\" title=\"原型实现\"></a>原型实现</h2><p>创建一个函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"function\">(<span class=\"params\">...args2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _this.apply( context, [ ...args, ...args2] )</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bindFn = fn.mybind(obj, <span class=\"string\">'小明'</span> )</span><br></pre></td></tr></table></figure></p>\n<p>实现很简单， 但是还差一步，就是<code>bind</code>后的函数， 拿来作为构造函数<code>new</code>时， <code>this</code>指向会出问题</p>\n<h2 id=\"处理new-的指向\"><a href=\"#处理new-的指向\" class=\"headerlink\" title=\"处理new 的指向\"></a>处理new 的指向</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cbFn</span> (<span class=\"params\">...tempArgs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> cbFn ? _this.apply(<span class=\"keyword\">this</span>, [ ...args, ...tempArgs]) : _this.apply( context, [ ...args, ...tempArgs] )</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> cbFn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> BindFn = fn.mybind(obj, <span class=\"string\">'小明'</span> )</span><br><span class=\"line\"><span class=\"keyword\">var</span> bfn = <span class=\"keyword\">new</span> BindFn()</span><br></pre></td></tr></table></figure>\n<p>参考文献</p>\n<ul>\n<li><a href=\"https://github.com/mqyqingfeng/Blog/issues/13\" target=\"_blank\" rel=\"noopener\">https://github.com/mqyqingfeng/Blog/issues/13</a></li>\n</ul>\n"},{"title":"利用CSS混合模式更改图片颜色","date":"2019-03-16T10:34:26.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\nCSS3 新增了一个很有意思的属性 `mix-blend-mode` ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。\n\n混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。\n\n\n\n开始动手吧 ~\n\n## 尝试修改图片物体颜色\n\n首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）\n```HTML\n<body>\n  <input type=\"color\" />\n  <img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553336864&di=2f41edc8eedbf09fb1d106545acaed5f&imgtype=jpg&er=1&src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\" alt=\"\">\n</body>\n```\n\n然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式`mix-blend-mode: hue;` \n> 因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效\n\n\n```CSS\n<style>\nhtml,body, input, img {\n  width: 100%;\n  height: 100%;\n}\ninput{ \n  position: absolute;\n  top: 0;\n  left: 0;\n  mix-blend-mode: hue;\n}\n</style>\n```\n\n\n### 过程记录\n原图:\n![原图](http://img.nixiaolei.com/2019-03-16-18-43-09.png)\n\n添加上了混合模式(变灰是因为color选择器默认是黑色):\n![添加上了混合模式](http://img.nixiaolei.com/2019-03-16-18-44-01.png)\n\n切换颜色中:\n![切换颜色中](http://img.nixiaolei.com/2019-03-16-18-45-53.png)\n\n切换后: \n\n![切换后](http://img.nixiaolei.com/2019-03-16-18-46-30.png)\n\n虽然有点丑但我们成功了~\n\n\n## 更多可能性\n\n利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错\n\n\n## 参考文献\n> https://www.cnblogs.com/coco1s/p/6829372.html","source":"_posts/利用CSS混合模式更改图片颜色.md","raw":"---\ntitle: 利用CSS混合模式更改图片颜色\ndate: 2019-03-16 18:34:26\ncategories: CSS\ntags: [css]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\nCSS3 新增了一个很有意思的属性 `mix-blend-mode` ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。\n\n混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。\n\n\n\n开始动手吧 ~\n\n## 尝试修改图片物体颜色\n\n首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）\n```HTML\n<body>\n  <input type=\"color\" />\n  <img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553336864&di=2f41edc8eedbf09fb1d106545acaed5f&imgtype=jpg&er=1&src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\" alt=\"\">\n</body>\n```\n\n然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式`mix-blend-mode: hue;` \n> 因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效\n\n\n```CSS\n<style>\nhtml,body, input, img {\n  width: 100%;\n  height: 100%;\n}\ninput{ \n  position: absolute;\n  top: 0;\n  left: 0;\n  mix-blend-mode: hue;\n}\n</style>\n```\n\n\n### 过程记录\n原图:\n![原图](http://img.nixiaolei.com/2019-03-16-18-43-09.png)\n\n添加上了混合模式(变灰是因为color选择器默认是黑色):\n![添加上了混合模式](http://img.nixiaolei.com/2019-03-16-18-44-01.png)\n\n切换颜色中:\n![切换颜色中](http://img.nixiaolei.com/2019-03-16-18-45-53.png)\n\n切换后: \n\n![切换后](http://img.nixiaolei.com/2019-03-16-18-46-30.png)\n\n虽然有点丑但我们成功了~\n\n\n## 更多可能性\n\n利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错\n\n\n## 参考文献\n> https://www.cnblogs.com/coco1s/p/6829372.html","slug":"利用CSS混合模式更改图片颜色","published":1,"updated":"2019-03-22T13:49:14.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1we00029ssuwjzevued4","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>CSS3 新增了一个很有意思的属性 <code>mix-blend-mode</code> ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。</p>\n<p>混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。</p>\n<p>开始动手吧 ~</p>\n<h2 id=\"尝试修改图片物体颜色\"><a href=\"#尝试修改图片物体颜色\" class=\"headerlink\" title=\"尝试修改图片物体颜色\"></a>尝试修改图片物体颜色</h2><p>首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1553336864&amp;di=2f41edc8eedbf09fb1d106545acaed5f&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式<code>mix-blend-mode: hue;</code> </p>\n<blockquote>\n<p>因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>&#123; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">mix-blend-mode</span>: hue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h3><p>原图:<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-43-09.png\" alt=\"原图\"></p>\n<p>添加上了混合模式(变灰是因为color选择器默认是黑色):<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-44-01.png\" alt=\"添加上了混合模式\"></p>\n<p>切换颜色中:<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-45-53.png\" alt=\"切换颜色中\"></p>\n<p>切换后: </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-18-46-30.png\" alt=\"切换后\"></p>\n<p>虽然有点丑但我们成功了~</p>\n<h2 id=\"更多可能性\"><a href=\"#更多可能性\" class=\"headerlink\" title=\"更多可能性\"></a>更多可能性</h2><p>利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/coco1s/p/6829372.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/coco1s/p/6829372.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<p>CSS3 新增了一个很有意思的属性 <code>mix-blend-mode</code> ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。</p>\n<p>混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。</p>\n<p>开始动手吧 ~</p>\n<h2 id=\"尝试修改图片物体颜色\"><a href=\"#尝试修改图片物体颜色\" class=\"headerlink\" title=\"尝试修改图片物体颜色\"></a>尝试修改图片物体颜色</h2><p>首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1553336864&amp;di=2f41edc8eedbf09fb1d106545acaed5f&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式<code>mix-blend-mode: hue;</code> </p>\n<blockquote>\n<p>因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span>&#123; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">mix-blend-mode</span>: hue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h3><p>原图:<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-43-09.png\" alt=\"原图\"></p>\n<p>添加上了混合模式(变灰是因为color选择器默认是黑色):<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-44-01.png\" alt=\"添加上了混合模式\"></p>\n<p>切换颜色中:<br><img src=\"http://img.nixiaolei.com/2019-03-16-18-45-53.png\" alt=\"切换颜色中\"></p>\n<p>切换后: </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-18-46-30.png\" alt=\"切换后\"></p>\n<p>虽然有点丑但我们成功了~</p>\n<h2 id=\"更多可能性\"><a href=\"#更多可能性\" class=\"headerlink\" title=\"更多可能性\"></a>更多可能性</h2><p>利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/coco1s/p/6829372.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/coco1s/p/6829372.html</a></p>\n</blockquote>\n"},{"title":"【React】为什么要使用immutableJs","date":"2019-04-08T14:10:17.000Z","_content":"\n\n## React自身的一些Bug\n在开发中对`React`应用做性能优化时， 我们通常会使用`shouldComponentUpdate` 这个生命周期钩子来决定该组件是否需要更新， 来过滤掉没有意义的更新修改。 \n\n并且，官方也贴心的为我们提供了 `PureComponent` 用来省去我们繁琐的判断， 自动生成`shouldComponentUpdate`\n\n\n\n但现实往往不是那么的完美， `PureComponent` 也有解决不了问题的时候， \n\n为了更好的理解， 我们先来显示的使用`shouldComponentUpdate`操作一遍\n\n```JavaScript\n// 父组件\nclass TodoList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      todoList: [\n       '喝可乐', \n       '打游戏'\n      ] \n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if( this.state.todoList != nextState.todoList ) {\n      console.log('两次不一致， 同意更新')\n      return true\n    }\n    console.log('更新前后todolist 一致， 所以不更新')\n    return false\n  }\n\n  // 数组concat操作， 会返回新数组\n  concatHandle() {\n    let todoList = this.state.todoList\n    const rd = Math.random() * 30\n    todoList = todoList.concat([ `搞事情:${rd}` ])\n    this.setState(() => ({\n      todoList\n    }))\n  }\n\n  // 数组Push操作， 未改变原数组\n  pushHandle() {\n    let todoList = this.state.todoList\n    const rd = Math.random() * 30\n    todoList.push( `搞事情:${rd}` )\n    this.setState(() => ({\n      todoList\n    }))\n  }\n\n  render() {\n    const { todoList } = this.state\n\n    return (\n      <div className=\"wrap\">\n        <button onClick={() => this.pushHandle()}>Push操作</button>\n        <button onClick={() => this.concatHandle()}>concat操作</button>\n        {\n          todoList.map( (item,index) => <TodoItem key={index}  thing={item} /> )\n        }\n      </div>\n    )\n  }\n}\n\n// 子组件\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <div>\n        { this.props.thing }\n      </div>\n    )\n  }\n}\n```\n\n我们在`shouldComponentUpdate` 进行了简单的判断， 但是可悲的是这只在对比普通类型时比较的奏效， 因为`JavaScript`中存在这引用类型的概念， 所以对于引用类型来说`==` 会变成判断该变量地址的操作\n\n口说无凭，我们来看看实际的情况。 \n\n![ReactBug](http://img.nixiaolei.com/pureCompoents.gif)\n\n\n我的天，这是怎么回事， 实际情况好像要更复杂一些！\n点击了两次`Push`没有反应， 然而在点击`concat`的时候， 一瞬间多出了`3`条\n\n\n### 冷静分析\n对于这种种非正常现象， 我们有必要保持清新的头脑去分析一下\n\n![别慌](http://img.nixiaolei.com/2019-04-08-22-39-14.png)\n\n我们可以看到， 第一次点击`push`操作， 页面没有任何反应， 只是在控制台打印了`更新前后todolist 一致， 所以不更新`,\n\n哦~， 看到这个我们知道了， 此次组件的更新被`shouldComponentUpdate`拦截了，  这怎么行呢， 我要更新的你给我拦截了， 我数组明明变化了啊， 我数组新增了内容， 你就该给我正常变化， 这不是坑人吗\n\n\n### PureComponent\n看到这，你可能会说， 官方不是提供了`PureComponent`吗，  官方给的还能跟你一样这么龊？  该更新的不更新？\n\n您还别不信， 它就这么龊， `PureComponent` 其实是很傻的， 他也只是单纯的帮我们做了上面我们那样的操作， 虽然这样针对基本类型来说已经非常够用了， 能够解决问题了， 但是一旦遇上了引用类型， 它可就歇菜了， 还会引起你页面的奇妙`Bug`\n\n不信咱们来测试下， 我们修改下父组件代码， 子组件保持一致: \n```JavaScript\n// 替换为 PureComponent\nclass TodoList extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = { \n      todoList: [\n       '喝可乐', \n       '打游戏'\n      ] \n    }\n  }\n\n  //  ------------ 删除掉 shouldComponentUpdate ------------------------\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   if( this.state.todoList != nextState.todoList ) {\n  //     console.log('两次不一致， 同意更新')\n  //     return true\n  //   }\n  //   console.log('更新前后todolist 一致， 所以不更新')\n  //   return false\n  // }\n\n  concatHandle() {\n    let todoList = this.state.todoList\n    const rd = Math.random() * 30\n    todoList = todoList.concat([ `concat操作: ${rd}` ])\n    this.setState(() => ({\n      todoList\n    }))\n  }\n\n  pushHandle() {\n    let todoList = this.state.todoList\n    const rd = Math.random() * 30\n    todoList.push( `push操作:${rd}` )\n    this.setState(() => ({\n      todoList\n    }))\n  }\n\n  render() {\n    const { todoList } = this.state\n\n    return (\n      <div className=\"wrap\">\n        <button onClick={() => this.pushHandle()}>Push操作</button>\n        <button onClick={() => this.concatHandle()}>concat操作</button>\n        {\n          todoList.map( (item,index) => <TodoItem key={index}  thing={item} /> )\n        }\n      </div>\n    )\n  }\n}\n```\n\n来看看结果\n\n![测试结果](http://img.nixiaolei.com/pureComponent02.gif)\n\n\n哎， 还是一样的坑\n\n那这个`Bug`怎么办， 这时候就请本文的主角`immutableJs`登场吧\n\n\n## immutableJs\n> Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）。它内部实现了一套完整的 Persistent Data Structure，还有很多易用的数据类型。像Collection、List、Map、Set、Record、Seq。有非常全面的map、filter、groupBy、reduce、find函数式操作方法。同时 API 也尽量与 Object 或 Array 类似。\n\n\n使用 `immutableJs` 避免这个副作用的一种实现是按值传递，也就是拷贝一份再传递过去，有深层结构就深拷贝。深拷贝在只做局部修改的时候做了很多无用功，于是`ImmutableJs`做了性能优化。\n\n\n### 使用它带来的好处\n\n网上找了个图，假如我们要修改左图中黄色节点的子节点4，那么Immutable.js只需要更新右图中的绿色节点，其余节点不需拷贝，继续复用。也就是说，Immutable.js会更新从根节点到所修改节点路径上的所有节点，由于修改了根节点，所以返回一个新对象，这也解释了为什么能控制副作用。\n\n![更新树](http://img.nixiaolei.com/2019-04-09-21-43-20.png)\n\n\n1. 假如你在组件state中保存了一份有深层结构的引用类型的数据，如果没有Immutable.js，你需要深拷贝一份再做修改。而用Immutable.js将state中的数据包装一下，不需深拷贝就可以直接修改。\n2. 由于修改后返回的是新对象，React.js只需要在oldState.obj === newState.obj这一层就能判断出obj产生了变化，不需要深入obj的深层结构。\n3. 带来几种操作方便的数据结构和API\n\n\n","source":"_posts/【React】为什么要使用immutableJs.md","raw":"---\ntitle: 【React】为什么要使用immutableJs\ndate: 2019-04-08 22:10:17\ncategories: React\ntags: React\n---\n\n\n## React自身的一些Bug\n在开发中对`React`应用做性能优化时， 我们通常会使用`shouldComponentUpdate` 这个生命周期钩子来决定该组件是否需要更新， 来过滤掉没有意义的更新修改。 \n\n并且，官方也贴心的为我们提供了 `PureComponent` 用来省去我们繁琐的判断， 自动生成`shouldComponentUpdate`\n\n\n\n但现实往往不是那么的完美， `PureComponent` 也有解决不了问题的时候， \n\n为了更好的理解， 我们先来显示的使用`shouldComponentUpdate`操作一遍\n\n```JavaScript\n// 父组件\nclass TodoList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      todoList: [\n       '喝可乐', \n       '打游戏'\n      ] \n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if( this.state.todoList != nextState.todoList ) {\n      console.log('两次不一致， 同意更新')\n      return true\n    }\n    console.log('更新前后todolist 一致， 所以不更新')\n    return false\n  }\n\n  // 数组concat操作， 会返回新数组\n  concatHandle() {\n    let todoList = this.state.todoList\n    const rd = Math.random() * 30\n    todoList = todoList.concat([ `搞事情:${rd}` ])\n    this.setState(() => ({\n      todoList\n    }))\n  }\n\n  // 数组Push操作， 未改变原数组\n  pushHandle() {\n    let todoList = this.state.todoList\n    const rd = Math.random() * 30\n    todoList.push( `搞事情:${rd}` )\n    this.setState(() => ({\n      todoList\n    }))\n  }\n\n  render() {\n    const { todoList } = this.state\n\n    return (\n      <div className=\"wrap\">\n        <button onClick={() => this.pushHandle()}>Push操作</button>\n        <button onClick={() => this.concatHandle()}>concat操作</button>\n        {\n          todoList.map( (item,index) => <TodoItem key={index}  thing={item} /> )\n        }\n      </div>\n    )\n  }\n}\n\n// 子组件\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <div>\n        { this.props.thing }\n      </div>\n    )\n  }\n}\n```\n\n我们在`shouldComponentUpdate` 进行了简单的判断， 但是可悲的是这只在对比普通类型时比较的奏效， 因为`JavaScript`中存在这引用类型的概念， 所以对于引用类型来说`==` 会变成判断该变量地址的操作\n\n口说无凭，我们来看看实际的情况。 \n\n![ReactBug](http://img.nixiaolei.com/pureCompoents.gif)\n\n\n我的天，这是怎么回事， 实际情况好像要更复杂一些！\n点击了两次`Push`没有反应， 然而在点击`concat`的时候， 一瞬间多出了`3`条\n\n\n### 冷静分析\n对于这种种非正常现象， 我们有必要保持清新的头脑去分析一下\n\n![别慌](http://img.nixiaolei.com/2019-04-08-22-39-14.png)\n\n我们可以看到， 第一次点击`push`操作， 页面没有任何反应， 只是在控制台打印了`更新前后todolist 一致， 所以不更新`,\n\n哦~， 看到这个我们知道了， 此次组件的更新被`shouldComponentUpdate`拦截了，  这怎么行呢， 我要更新的你给我拦截了， 我数组明明变化了啊， 我数组新增了内容， 你就该给我正常变化， 这不是坑人吗\n\n\n### PureComponent\n看到这，你可能会说， 官方不是提供了`PureComponent`吗，  官方给的还能跟你一样这么龊？  该更新的不更新？\n\n您还别不信， 它就这么龊， `PureComponent` 其实是很傻的， 他也只是单纯的帮我们做了上面我们那样的操作， 虽然这样针对基本类型来说已经非常够用了， 能够解决问题了， 但是一旦遇上了引用类型， 它可就歇菜了， 还会引起你页面的奇妙`Bug`\n\n不信咱们来测试下， 我们修改下父组件代码， 子组件保持一致: \n```JavaScript\n// 替换为 PureComponent\nclass TodoList extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = { \n      todoList: [\n       '喝可乐', \n       '打游戏'\n      ] \n    }\n  }\n\n  //  ------------ 删除掉 shouldComponentUpdate ------------------------\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   if( this.state.todoList != nextState.todoList ) {\n  //     console.log('两次不一致， 同意更新')\n  //     return true\n  //   }\n  //   console.log('更新前后todolist 一致， 所以不更新')\n  //   return false\n  // }\n\n  concatHandle() {\n    let todoList = this.state.todoList\n    const rd = Math.random() * 30\n    todoList = todoList.concat([ `concat操作: ${rd}` ])\n    this.setState(() => ({\n      todoList\n    }))\n  }\n\n  pushHandle() {\n    let todoList = this.state.todoList\n    const rd = Math.random() * 30\n    todoList.push( `push操作:${rd}` )\n    this.setState(() => ({\n      todoList\n    }))\n  }\n\n  render() {\n    const { todoList } = this.state\n\n    return (\n      <div className=\"wrap\">\n        <button onClick={() => this.pushHandle()}>Push操作</button>\n        <button onClick={() => this.concatHandle()}>concat操作</button>\n        {\n          todoList.map( (item,index) => <TodoItem key={index}  thing={item} /> )\n        }\n      </div>\n    )\n  }\n}\n```\n\n来看看结果\n\n![测试结果](http://img.nixiaolei.com/pureComponent02.gif)\n\n\n哎， 还是一样的坑\n\n那这个`Bug`怎么办， 这时候就请本文的主角`immutableJs`登场吧\n\n\n## immutableJs\n> Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）。它内部实现了一套完整的 Persistent Data Structure，还有很多易用的数据类型。像Collection、List、Map、Set、Record、Seq。有非常全面的map、filter、groupBy、reduce、find函数式操作方法。同时 API 也尽量与 Object 或 Array 类似。\n\n\n使用 `immutableJs` 避免这个副作用的一种实现是按值传递，也就是拷贝一份再传递过去，有深层结构就深拷贝。深拷贝在只做局部修改的时候做了很多无用功，于是`ImmutableJs`做了性能优化。\n\n\n### 使用它带来的好处\n\n网上找了个图，假如我们要修改左图中黄色节点的子节点4，那么Immutable.js只需要更新右图中的绿色节点，其余节点不需拷贝，继续复用。也就是说，Immutable.js会更新从根节点到所修改节点路径上的所有节点，由于修改了根节点，所以返回一个新对象，这也解释了为什么能控制副作用。\n\n![更新树](http://img.nixiaolei.com/2019-04-09-21-43-20.png)\n\n\n1. 假如你在组件state中保存了一份有深层结构的引用类型的数据，如果没有Immutable.js，你需要深拷贝一份再做修改。而用Immutable.js将state中的数据包装一下，不需深拷贝就可以直接修改。\n2. 由于修改后返回的是新对象，React.js只需要在oldState.obj === newState.obj这一层就能判断出obj产生了变化，不需要深入obj的深层结构。\n3. 带来几种操作方便的数据结构和API\n\n\n","slug":"【React】为什么要使用immutableJs","published":1,"updated":"2019-04-09T13:49:01.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wej002cssuwcrpvjc26","content":"<h2 id=\"React自身的一些Bug\"><a href=\"#React自身的一些Bug\" class=\"headerlink\" title=\"React自身的一些Bug\"></a>React自身的一些Bug</h2><p>在开发中对<code>React</code>应用做性能优化时， 我们通常会使用<code>shouldComponentUpdate</code> 这个生命周期钩子来决定该组件是否需要更新， 来过滤掉没有意义的更新修改。 </p>\n<p>并且，官方也贴心的为我们提供了 <code>PureComponent</code> 用来省去我们繁琐的判断， 自动生成<code>shouldComponentUpdate</code></p>\n<p>但现实往往不是那么的完美， <code>PureComponent</code> 也有解决不了问题的时候， </p>\n<p>为了更好的理解， 我们先来显示的使用<code>shouldComponentUpdate</code>操作一遍</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; </span><br><span class=\"line\">      todoList: [</span><br><span class=\"line\">       <span class=\"string\">'喝可乐'</span>, </span><br><span class=\"line\">       <span class=\"string\">'打游戏'</span></span><br><span class=\"line\">      ] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.state.todoList != nextState.todoList ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'两次不一致， 同意更新'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'更新前后todolist 一致， 所以不更新'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数组concat操作， 会返回新数组</span></span><br><span class=\"line\">  concatHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todoList = <span class=\"keyword\">this</span>.state.todoList</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rd = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">30</span></span><br><span class=\"line\">    todoList = todoList.concat([ <span class=\"string\">`搞事情:<span class=\"subst\">$&#123;rd&#125;</span>`</span> ])</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      todoList</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数组Push操作， 未改变原数组</span></span><br><span class=\"line\">  pushHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todoList = <span class=\"keyword\">this</span>.state.todoList</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rd = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">30</span></span><br><span class=\"line\">    todoList.push( <span class=\"string\">`搞事情:<span class=\"subst\">$&#123;rd&#125;</span>`</span> )</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      todoList</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoList &#125; = <span class=\"keyword\">this</span>.state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.pushHandle()&#125;&gt;Push操作&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; this.concatHandle()&#125;&gt;concat操作&lt;/</span>button&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          todoList.map( <span class=\"function\">(<span class=\"params\">item,index</span>) =&gt;</span> &lt;TodoItem key=&#123;index&#125;  thing=&#123;item&#125; /&gt; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 子组件</span></span><br><span class=\"line\"><span class=\"regexp\">class TodoItem extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  constructor(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    super(props)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123; this.props.thing &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在<code>shouldComponentUpdate</code> 进行了简单的判断， 但是可悲的是这只在对比普通类型时比较的奏效， 因为<code>JavaScript</code>中存在这引用类型的概念， 所以对于引用类型来说<code>==</code> 会变成判断该变量地址的操作</p>\n<p>口说无凭，我们来看看实际的情况。 </p>\n<p><img src=\"http://img.nixiaolei.com/pureCompoents.gif\" alt=\"ReactBug\"></p>\n<p>我的天，这是怎么回事， 实际情况好像要更复杂一些！<br>点击了两次<code>Push</code>没有反应， 然而在点击<code>concat</code>的时候， 一瞬间多出了<code>3</code>条</p>\n<h3 id=\"冷静分析\"><a href=\"#冷静分析\" class=\"headerlink\" title=\"冷静分析\"></a>冷静分析</h3><p>对于这种种非正常现象， 我们有必要保持清新的头脑去分析一下</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-22-39-14.png\" alt=\"别慌\"></p>\n<p>我们可以看到， 第一次点击<code>push</code>操作， 页面没有任何反应， 只是在控制台打印了<code>更新前后todolist 一致， 所以不更新</code>,</p>\n<p>哦~， 看到这个我们知道了， 此次组件的更新被<code>shouldComponentUpdate</code>拦截了，  这怎么行呢， 我要更新的你给我拦截了， 我数组明明变化了啊， 我数组新增了内容， 你就该给我正常变化， 这不是坑人吗</p>\n<h3 id=\"PureComponent\"><a href=\"#PureComponent\" class=\"headerlink\" title=\"PureComponent\"></a>PureComponent</h3><p>看到这，你可能会说， 官方不是提供了<code>PureComponent</code>吗，  官方给的还能跟你一样这么龊？  该更新的不更新？</p>\n<p>您还别不信， 它就这么龊， <code>PureComponent</code> 其实是很傻的， 他也只是单纯的帮我们做了上面我们那样的操作， 虽然这样针对基本类型来说已经非常够用了， 能够解决问题了， 但是一旦遇上了引用类型， 它可就歇菜了， 还会引起你页面的奇妙<code>Bug</code></p>\n<p>不信咱们来测试下， 我们修改下父组件代码， 子组件保持一致:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 替换为 PureComponent</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; </span><br><span class=\"line\">      todoList: [</span><br><span class=\"line\">       <span class=\"string\">'喝可乐'</span>, </span><br><span class=\"line\">       <span class=\"string\">'打游戏'</span></span><br><span class=\"line\">      ] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//  ------------ 删除掉 shouldComponentUpdate ------------------------</span></span><br><span class=\"line\">  <span class=\"comment\">// shouldComponentUpdate(nextProps, nextState) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   if( this.state.todoList != nextState.todoList ) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     console.log('两次不一致， 同意更新')</span></span><br><span class=\"line\">  <span class=\"comment\">//     return true</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   console.log('更新前后todolist 一致， 所以不更新')</span></span><br><span class=\"line\">  <span class=\"comment\">//   return false</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  concatHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todoList = <span class=\"keyword\">this</span>.state.todoList</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rd = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">30</span></span><br><span class=\"line\">    todoList = todoList.concat([ <span class=\"string\">`concat操作: <span class=\"subst\">$&#123;rd&#125;</span>`</span> ])</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      todoList</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pushHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todoList = <span class=\"keyword\">this</span>.state.todoList</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rd = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">30</span></span><br><span class=\"line\">    todoList.push( <span class=\"string\">`push操作:<span class=\"subst\">$&#123;rd&#125;</span>`</span> )</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      todoList</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoList &#125; = <span class=\"keyword\">this</span>.state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.pushHandle()&#125;&gt;Push操作&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; this.concatHandle()&#125;&gt;concat操作&lt;/</span>button&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          todoList.map( <span class=\"function\">(<span class=\"params\">item,index</span>) =&gt;</span> &lt;TodoItem key=&#123;index&#125;  thing=&#123;item&#125; /&gt; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>来看看结果</p>\n<p><img src=\"http://img.nixiaolei.com/pureComponent02.gif\" alt=\"测试结果\"></p>\n<p>哎， 还是一样的坑</p>\n<p>那这个<code>Bug</code>怎么办， 这时候就请本文的主角<code>immutableJs</code>登场吧</p>\n<h2 id=\"immutableJs\"><a href=\"#immutableJs\" class=\"headerlink\" title=\"immutableJs\"></a>immutableJs</h2><blockquote>\n<p>Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）。它内部实现了一套完整的 Persistent Data Structure，还有很多易用的数据类型。像Collection、List、Map、Set、Record、Seq。有非常全面的map、filter、groupBy、reduce、find函数式操作方法。同时 API 也尽量与 Object 或 Array 类似。</p>\n</blockquote>\n<p>使用 <code>immutableJs</code> 避免这个副作用的一种实现是按值传递，也就是拷贝一份再传递过去，有深层结构就深拷贝。深拷贝在只做局部修改的时候做了很多无用功，于是<code>ImmutableJs</code>做了性能优化。</p>\n<h3 id=\"使用它带来的好处\"><a href=\"#使用它带来的好处\" class=\"headerlink\" title=\"使用它带来的好处\"></a>使用它带来的好处</h3><p>网上找了个图，假如我们要修改左图中黄色节点的子节点4，那么Immutable.js只需要更新右图中的绿色节点，其余节点不需拷贝，继续复用。也就是说，Immutable.js会更新从根节点到所修改节点路径上的所有节点，由于修改了根节点，所以返回一个新对象，这也解释了为什么能控制副作用。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-09-21-43-20.png\" alt=\"更新树\"></p>\n<ol>\n<li>假如你在组件state中保存了一份有深层结构的引用类型的数据，如果没有Immutable.js，你需要深拷贝一份再做修改。而用Immutable.js将state中的数据包装一下，不需深拷贝就可以直接修改。</li>\n<li>由于修改后返回的是新对象，React.js只需要在oldState.obj === newState.obj这一层就能判断出obj产生了变化，不需要深入obj的深层结构。</li>\n<li>带来几种操作方便的数据结构和API</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"React自身的一些Bug\"><a href=\"#React自身的一些Bug\" class=\"headerlink\" title=\"React自身的一些Bug\"></a>React自身的一些Bug</h2><p>在开发中对<code>React</code>应用做性能优化时， 我们通常会使用<code>shouldComponentUpdate</code> 这个生命周期钩子来决定该组件是否需要更新， 来过滤掉没有意义的更新修改。 </p>\n<p>并且，官方也贴心的为我们提供了 <code>PureComponent</code> 用来省去我们繁琐的判断， 自动生成<code>shouldComponentUpdate</code></p>\n<p>但现实往往不是那么的完美， <code>PureComponent</code> 也有解决不了问题的时候， </p>\n<p>为了更好的理解， 我们先来显示的使用<code>shouldComponentUpdate</code>操作一遍</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; </span><br><span class=\"line\">      todoList: [</span><br><span class=\"line\">       <span class=\"string\">'喝可乐'</span>, </span><br><span class=\"line\">       <span class=\"string\">'打游戏'</span></span><br><span class=\"line\">      ] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.state.todoList != nextState.todoList ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'两次不一致， 同意更新'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'更新前后todolist 一致， 所以不更新'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数组concat操作， 会返回新数组</span></span><br><span class=\"line\">  concatHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todoList = <span class=\"keyword\">this</span>.state.todoList</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rd = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">30</span></span><br><span class=\"line\">    todoList = todoList.concat([ <span class=\"string\">`搞事情:<span class=\"subst\">$&#123;rd&#125;</span>`</span> ])</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      todoList</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数组Push操作， 未改变原数组</span></span><br><span class=\"line\">  pushHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todoList = <span class=\"keyword\">this</span>.state.todoList</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rd = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">30</span></span><br><span class=\"line\">    todoList.push( <span class=\"string\">`搞事情:<span class=\"subst\">$&#123;rd&#125;</span>`</span> )</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      todoList</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoList &#125; = <span class=\"keyword\">this</span>.state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.pushHandle()&#125;&gt;Push操作&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; this.concatHandle()&#125;&gt;concat操作&lt;/</span>button&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          todoList.map( <span class=\"function\">(<span class=\"params\">item,index</span>) =&gt;</span> &lt;TodoItem key=&#123;index&#125;  thing=&#123;item&#125; /&gt; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 子组件</span></span><br><span class=\"line\"><span class=\"regexp\">class TodoItem extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  constructor(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    super(props)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123; this.props.thing &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在<code>shouldComponentUpdate</code> 进行了简单的判断， 但是可悲的是这只在对比普通类型时比较的奏效， 因为<code>JavaScript</code>中存在这引用类型的概念， 所以对于引用类型来说<code>==</code> 会变成判断该变量地址的操作</p>\n<p>口说无凭，我们来看看实际的情况。 </p>\n<p><img src=\"http://img.nixiaolei.com/pureCompoents.gif\" alt=\"ReactBug\"></p>\n<p>我的天，这是怎么回事， 实际情况好像要更复杂一些！<br>点击了两次<code>Push</code>没有反应， 然而在点击<code>concat</code>的时候， 一瞬间多出了<code>3</code>条</p>\n<h3 id=\"冷静分析\"><a href=\"#冷静分析\" class=\"headerlink\" title=\"冷静分析\"></a>冷静分析</h3><p>对于这种种非正常现象， 我们有必要保持清新的头脑去分析一下</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-08-22-39-14.png\" alt=\"别慌\"></p>\n<p>我们可以看到， 第一次点击<code>push</code>操作， 页面没有任何反应， 只是在控制台打印了<code>更新前后todolist 一致， 所以不更新</code>,</p>\n<p>哦~， 看到这个我们知道了， 此次组件的更新被<code>shouldComponentUpdate</code>拦截了，  这怎么行呢， 我要更新的你给我拦截了， 我数组明明变化了啊， 我数组新增了内容， 你就该给我正常变化， 这不是坑人吗</p>\n<h3 id=\"PureComponent\"><a href=\"#PureComponent\" class=\"headerlink\" title=\"PureComponent\"></a>PureComponent</h3><p>看到这，你可能会说， 官方不是提供了<code>PureComponent</code>吗，  官方给的还能跟你一样这么龊？  该更新的不更新？</p>\n<p>您还别不信， 它就这么龊， <code>PureComponent</code> 其实是很傻的， 他也只是单纯的帮我们做了上面我们那样的操作， 虽然这样针对基本类型来说已经非常够用了， 能够解决问题了， 但是一旦遇上了引用类型， 它可就歇菜了， 还会引起你页面的奇妙<code>Bug</code></p>\n<p>不信咱们来测试下， 我们修改下父组件代码， 子组件保持一致:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 替换为 PureComponent</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; </span><br><span class=\"line\">      todoList: [</span><br><span class=\"line\">       <span class=\"string\">'喝可乐'</span>, </span><br><span class=\"line\">       <span class=\"string\">'打游戏'</span></span><br><span class=\"line\">      ] </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//  ------------ 删除掉 shouldComponentUpdate ------------------------</span></span><br><span class=\"line\">  <span class=\"comment\">// shouldComponentUpdate(nextProps, nextState) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   if( this.state.todoList != nextState.todoList ) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     console.log('两次不一致， 同意更新')</span></span><br><span class=\"line\">  <span class=\"comment\">//     return true</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   console.log('更新前后todolist 一致， 所以不更新')</span></span><br><span class=\"line\">  <span class=\"comment\">//   return false</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  concatHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todoList = <span class=\"keyword\">this</span>.state.todoList</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rd = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">30</span></span><br><span class=\"line\">    todoList = todoList.concat([ <span class=\"string\">`concat操作: <span class=\"subst\">$&#123;rd&#125;</span>`</span> ])</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      todoList</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pushHandle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todoList = <span class=\"keyword\">this</span>.state.todoList</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rd = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">30</span></span><br><span class=\"line\">    todoList.push( <span class=\"string\">`push操作:<span class=\"subst\">$&#123;rd&#125;</span>`</span> )</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      todoList</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoList &#125; = <span class=\"keyword\">this</span>.state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"wrap\"</span>&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.pushHandle()&#125;&gt;Push操作&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; this.concatHandle()&#125;&gt;concat操作&lt;/</span>button&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          todoList.map( <span class=\"function\">(<span class=\"params\">item,index</span>) =&gt;</span> &lt;TodoItem key=&#123;index&#125;  thing=&#123;item&#125; /&gt; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>来看看结果</p>\n<p><img src=\"http://img.nixiaolei.com/pureComponent02.gif\" alt=\"测试结果\"></p>\n<p>哎， 还是一样的坑</p>\n<p>那这个<code>Bug</code>怎么办， 这时候就请本文的主角<code>immutableJs</code>登场吧</p>\n<h2 id=\"immutableJs\"><a href=\"#immutableJs\" class=\"headerlink\" title=\"immutableJs\"></a>immutableJs</h2><blockquote>\n<p>Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）。它内部实现了一套完整的 Persistent Data Structure，还有很多易用的数据类型。像Collection、List、Map、Set、Record、Seq。有非常全面的map、filter、groupBy、reduce、find函数式操作方法。同时 API 也尽量与 Object 或 Array 类似。</p>\n</blockquote>\n<p>使用 <code>immutableJs</code> 避免这个副作用的一种实现是按值传递，也就是拷贝一份再传递过去，有深层结构就深拷贝。深拷贝在只做局部修改的时候做了很多无用功，于是<code>ImmutableJs</code>做了性能优化。</p>\n<h3 id=\"使用它带来的好处\"><a href=\"#使用它带来的好处\" class=\"headerlink\" title=\"使用它带来的好处\"></a>使用它带来的好处</h3><p>网上找了个图，假如我们要修改左图中黄色节点的子节点4，那么Immutable.js只需要更新右图中的绿色节点，其余节点不需拷贝，继续复用。也就是说，Immutable.js会更新从根节点到所修改节点路径上的所有节点，由于修改了根节点，所以返回一个新对象，这也解释了为什么能控制副作用。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-09-21-43-20.png\" alt=\"更新树\"></p>\n<ol>\n<li>假如你在组件state中保存了一份有深层结构的引用类型的数据，如果没有Immutable.js，你需要深拷贝一份再做修改。而用Immutable.js将state中的数据包装一下，不需深拷贝就可以直接修改。</li>\n<li>由于修改后返回的是新对象，React.js只需要在oldState.obj === newState.obj这一层就能判断出obj产生了变化，不需要深入obj的深层结构。</li>\n<li>带来几种操作方便的数据结构和API</li>\n</ol>\n"},{"title":"计算机语言的本源与发展","date":"2019-03-18T04:42:07.000Z","_content":"\n* 本源：二进制数据\n* 第一代语言：机器指令 （痛苦指数 ✮✮✮✮✮）\n* 第二代语言：汇编指令（痛苦指数 ✮✮✮✮✩）\n* 第三代语言：高级语言（主要特征：面向过程）\n* 第四代语言：面向对象语言（面向互联网、天然支持数据库）\n\n\n\n![语言发展史](http://img.nixiaolei.com/2019-04-06-13-46-58.png)\n\n\n","source":"_posts/计算机语言的本源与发展.md","raw":"---\ntitle: 计算机语言的本源与发展\ndate: 2019-03-18 12:42:07\ncategories: 计算机基础\ntags: 计算机基础\n---\n\n* 本源：二进制数据\n* 第一代语言：机器指令 （痛苦指数 ✮✮✮✮✮）\n* 第二代语言：汇编指令（痛苦指数 ✮✮✮✮✩）\n* 第三代语言：高级语言（主要特征：面向过程）\n* 第四代语言：面向对象语言（面向互联网、天然支持数据库）\n\n\n\n![语言发展史](http://img.nixiaolei.com/2019-04-06-13-46-58.png)\n\n\n","slug":"计算机语言的本源与发展","published":1,"updated":"2019-04-06T05:47:43.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wet002gssuwrtagd6ft","content":"<ul>\n<li>本源：二进制数据</li>\n<li>第一代语言：机器指令 （痛苦指数 ✮✮✮✮✮）</li>\n<li>第二代语言：汇编指令（痛苦指数 ✮✮✮✮✩）</li>\n<li>第三代语言：高级语言（主要特征：面向过程）</li>\n<li>第四代语言：面向对象语言（面向互联网、天然支持数据库）</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-46-58.png\" alt=\"语言发展史\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>本源：二进制数据</li>\n<li>第一代语言：机器指令 （痛苦指数 ✮✮✮✮✮）</li>\n<li>第二代语言：汇编指令（痛苦指数 ✮✮✮✮✩）</li>\n<li>第三代语言：高级语言（主要特征：面向过程）</li>\n<li>第四代语言：面向对象语言（面向互联网、天然支持数据库）</li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-13-46-58.png\" alt=\"语言发展史\"></p>\n"},{"title":"简单理解微服务架构","date":"2019-03-26T08:18:57.000Z","_content":"\n![微服务](http://img.nixiaolei.com/2019-04-06-16-21-09.png)\n\n## 1.1 单体应用与微服务\n> 微服务对应的是传统架构， 传统的软件架构是把所有都打在一个包里面， 也就是单体应用。\n\n\n单体应用在部署上和后期管理维护上会愈来愈越庞大和难以管理， 而且约束开发成员使用的技术栈， `JAVA`的程序必须使用`JAVA`, 但是可能团队里有的擅长`PHP`，有的擅长`Go`。 针对这些问题就有人提出了微服务的概念， 可以让适合的语言干适合的事情。\n\n\n单体应用想要增加服务器只能把整个项目都丢到一台新的服务器上，但每个模块对并发的要求不一样， 比如产品服务模块是需求较多的，压力比较大， 但是订单模块需求就比较少，你也无法拆开，   而微服务不一样， 可以单独对`产品服务` 这个需求比较大的微服务进行增加服务器， 并且在功能升级时可以实现部分升级， 让用户感觉不到什么异样。\n\n\n![单体应用与微服务](http://img.nixiaolei.com/2019-04-06-17-25-10.png)\n\n## 2.1 微服务到底是什么\n> 微服务只是业务层面上的架构， 技术层面的架构属于你选用某框架\n\n* ✅微服务属于架构层面的设计模式【结构层面的设计模式】\n* ✅微服务的设计概念以**业务功能为主**\n* ✅微服务独立提供对应的业务功能\n* ✅微服务不拘泥于具体的实现语言\n* ✅微服务架构 ≈ 模块化开发 + 分布式计算\n\n\n### 2.1 易于扩展的分布式\n微服务的架构不管是横向扩展还是纵向扩展都比较的友好\n\n#### 2.1.1 横向扩展\n针对业务进行扩展， 当需要新增业务时只需要增加一个微服务即可\n\n#### 2.1.2 纵向扩展\n纵向扩展是对计算压力上的扩展， 针对某一块增加服务器，增强其计算能力， 然后使用`Nginx`进行反向代理\n\n\n\n## 3.1 微服务的特点\n* 小, 且专注于做⼀件事情\n* 处于独立的进程中\n* 轻量级的通信机制\n* 松耦合、独立部署\n\n\n## 4.1 合理使用微服务\n微服务不是灵丹妙药，并不能适应所有的情况。 微服务需要在范围内被合理的使用。\n\n* 业务复杂度高\n* 团队规模大\n* 业务需要长期演进\n* 最后——没有银弹【人月神话】\n\n\n## 5.1 微服务——集成与部署\n* 持续集成——jekins\n* 虚拟化——虚拟机\n* 容器——Docker\n","source":"_posts/简单理解微服务架构.md","raw":"---\ntitle: 简单理解微服务架构\ndate: 2019-03-26 16:18:57\ncategories: 架构\ntags: [架构, 微服务]\n---\n\n![微服务](http://img.nixiaolei.com/2019-04-06-16-21-09.png)\n\n## 1.1 单体应用与微服务\n> 微服务对应的是传统架构， 传统的软件架构是把所有都打在一个包里面， 也就是单体应用。\n\n\n单体应用在部署上和后期管理维护上会愈来愈越庞大和难以管理， 而且约束开发成员使用的技术栈， `JAVA`的程序必须使用`JAVA`, 但是可能团队里有的擅长`PHP`，有的擅长`Go`。 针对这些问题就有人提出了微服务的概念， 可以让适合的语言干适合的事情。\n\n\n单体应用想要增加服务器只能把整个项目都丢到一台新的服务器上，但每个模块对并发的要求不一样， 比如产品服务模块是需求较多的，压力比较大， 但是订单模块需求就比较少，你也无法拆开，   而微服务不一样， 可以单独对`产品服务` 这个需求比较大的微服务进行增加服务器， 并且在功能升级时可以实现部分升级， 让用户感觉不到什么异样。\n\n\n![单体应用与微服务](http://img.nixiaolei.com/2019-04-06-17-25-10.png)\n\n## 2.1 微服务到底是什么\n> 微服务只是业务层面上的架构， 技术层面的架构属于你选用某框架\n\n* ✅微服务属于架构层面的设计模式【结构层面的设计模式】\n* ✅微服务的设计概念以**业务功能为主**\n* ✅微服务独立提供对应的业务功能\n* ✅微服务不拘泥于具体的实现语言\n* ✅微服务架构 ≈ 模块化开发 + 分布式计算\n\n\n### 2.1 易于扩展的分布式\n微服务的架构不管是横向扩展还是纵向扩展都比较的友好\n\n#### 2.1.1 横向扩展\n针对业务进行扩展， 当需要新增业务时只需要增加一个微服务即可\n\n#### 2.1.2 纵向扩展\n纵向扩展是对计算压力上的扩展， 针对某一块增加服务器，增强其计算能力， 然后使用`Nginx`进行反向代理\n\n\n\n## 3.1 微服务的特点\n* 小, 且专注于做⼀件事情\n* 处于独立的进程中\n* 轻量级的通信机制\n* 松耦合、独立部署\n\n\n## 4.1 合理使用微服务\n微服务不是灵丹妙药，并不能适应所有的情况。 微服务需要在范围内被合理的使用。\n\n* 业务复杂度高\n* 团队规模大\n* 业务需要长期演进\n* 最后——没有银弹【人月神话】\n\n\n## 5.1 微服务——集成与部署\n* 持续集成——jekins\n* 虚拟化——虚拟机\n* 容器——Docker\n","slug":"简单理解微服务架构","published":1,"updated":"2019-04-06T09:56:52.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wew002jssuwnuvcxled","content":"<p><img src=\"http://img.nixiaolei.com/2019-04-06-16-21-09.png\" alt=\"微服务\"></p>\n<h2 id=\"1-1-单体应用与微服务\"><a href=\"#1-1-单体应用与微服务\" class=\"headerlink\" title=\"1.1 单体应用与微服务\"></a>1.1 单体应用与微服务</h2><blockquote>\n<p>微服务对应的是传统架构， 传统的软件架构是把所有都打在一个包里面， 也就是单体应用。</p>\n</blockquote>\n<p>单体应用在部署上和后期管理维护上会愈来愈越庞大和难以管理， 而且约束开发成员使用的技术栈， <code>JAVA</code>的程序必须使用<code>JAVA</code>, 但是可能团队里有的擅长<code>PHP</code>，有的擅长<code>Go</code>。 针对这些问题就有人提出了微服务的概念， 可以让适合的语言干适合的事情。</p>\n<p>单体应用想要增加服务器只能把整个项目都丢到一台新的服务器上，但每个模块对并发的要求不一样， 比如产品服务模块是需求较多的，压力比较大， 但是订单模块需求就比较少，你也无法拆开，   而微服务不一样， 可以单独对<code>产品服务</code> 这个需求比较大的微服务进行增加服务器， 并且在功能升级时可以实现部分升级， 让用户感觉不到什么异样。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-17-25-10.png\" alt=\"单体应用与微服务\"></p>\n<h2 id=\"2-1-微服务到底是什么\"><a href=\"#2-1-微服务到底是什么\" class=\"headerlink\" title=\"2.1 微服务到底是什么\"></a>2.1 微服务到底是什么</h2><blockquote>\n<p>微服务只是业务层面上的架构， 技术层面的架构属于你选用某框架</p>\n</blockquote>\n<ul>\n<li>✅微服务属于架构层面的设计模式【结构层面的设计模式】</li>\n<li>✅微服务的设计概念以<strong>业务功能为主</strong></li>\n<li>✅微服务独立提供对应的业务功能</li>\n<li>✅微服务不拘泥于具体的实现语言</li>\n<li>✅微服务架构 ≈ 模块化开发 + 分布式计算</li>\n</ul>\n<h3 id=\"2-1-易于扩展的分布式\"><a href=\"#2-1-易于扩展的分布式\" class=\"headerlink\" title=\"2.1 易于扩展的分布式\"></a>2.1 易于扩展的分布式</h3><p>微服务的架构不管是横向扩展还是纵向扩展都比较的友好</p>\n<h4 id=\"2-1-1-横向扩展\"><a href=\"#2-1-1-横向扩展\" class=\"headerlink\" title=\"2.1.1 横向扩展\"></a>2.1.1 横向扩展</h4><p>针对业务进行扩展， 当需要新增业务时只需要增加一个微服务即可</p>\n<h4 id=\"2-1-2-纵向扩展\"><a href=\"#2-1-2-纵向扩展\" class=\"headerlink\" title=\"2.1.2 纵向扩展\"></a>2.1.2 纵向扩展</h4><p>纵向扩展是对计算压力上的扩展， 针对某一块增加服务器，增强其计算能力， 然后使用<code>Nginx</code>进行反向代理</p>\n<h2 id=\"3-1-微服务的特点\"><a href=\"#3-1-微服务的特点\" class=\"headerlink\" title=\"3.1 微服务的特点\"></a>3.1 微服务的特点</h2><ul>\n<li>小, 且专注于做⼀件事情</li>\n<li>处于独立的进程中</li>\n<li>轻量级的通信机制</li>\n<li>松耦合、独立部署</li>\n</ul>\n<h2 id=\"4-1-合理使用微服务\"><a href=\"#4-1-合理使用微服务\" class=\"headerlink\" title=\"4.1 合理使用微服务\"></a>4.1 合理使用微服务</h2><p>微服务不是灵丹妙药，并不能适应所有的情况。 微服务需要在范围内被合理的使用。</p>\n<ul>\n<li>业务复杂度高</li>\n<li>团队规模大</li>\n<li>业务需要长期演进</li>\n<li>最后——没有银弹【人月神话】</li>\n</ul>\n<h2 id=\"5-1-微服务——集成与部署\"><a href=\"#5-1-微服务——集成与部署\" class=\"headerlink\" title=\"5.1 微服务——集成与部署\"></a>5.1 微服务——集成与部署</h2><ul>\n<li>持续集成——jekins</li>\n<li>虚拟化——虚拟机</li>\n<li>容器——Docker</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://img.nixiaolei.com/2019-04-06-16-21-09.png\" alt=\"微服务\"></p>\n<h2 id=\"1-1-单体应用与微服务\"><a href=\"#1-1-单体应用与微服务\" class=\"headerlink\" title=\"1.1 单体应用与微服务\"></a>1.1 单体应用与微服务</h2><blockquote>\n<p>微服务对应的是传统架构， 传统的软件架构是把所有都打在一个包里面， 也就是单体应用。</p>\n</blockquote>\n<p>单体应用在部署上和后期管理维护上会愈来愈越庞大和难以管理， 而且约束开发成员使用的技术栈， <code>JAVA</code>的程序必须使用<code>JAVA</code>, 但是可能团队里有的擅长<code>PHP</code>，有的擅长<code>Go</code>。 针对这些问题就有人提出了微服务的概念， 可以让适合的语言干适合的事情。</p>\n<p>单体应用想要增加服务器只能把整个项目都丢到一台新的服务器上，但每个模块对并发的要求不一样， 比如产品服务模块是需求较多的，压力比较大， 但是订单模块需求就比较少，你也无法拆开，   而微服务不一样， 可以单独对<code>产品服务</code> 这个需求比较大的微服务进行增加服务器， 并且在功能升级时可以实现部分升级， 让用户感觉不到什么异样。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-04-06-17-25-10.png\" alt=\"单体应用与微服务\"></p>\n<h2 id=\"2-1-微服务到底是什么\"><a href=\"#2-1-微服务到底是什么\" class=\"headerlink\" title=\"2.1 微服务到底是什么\"></a>2.1 微服务到底是什么</h2><blockquote>\n<p>微服务只是业务层面上的架构， 技术层面的架构属于你选用某框架</p>\n</blockquote>\n<ul>\n<li>✅微服务属于架构层面的设计模式【结构层面的设计模式】</li>\n<li>✅微服务的设计概念以<strong>业务功能为主</strong></li>\n<li>✅微服务独立提供对应的业务功能</li>\n<li>✅微服务不拘泥于具体的实现语言</li>\n<li>✅微服务架构 ≈ 模块化开发 + 分布式计算</li>\n</ul>\n<h3 id=\"2-1-易于扩展的分布式\"><a href=\"#2-1-易于扩展的分布式\" class=\"headerlink\" title=\"2.1 易于扩展的分布式\"></a>2.1 易于扩展的分布式</h3><p>微服务的架构不管是横向扩展还是纵向扩展都比较的友好</p>\n<h4 id=\"2-1-1-横向扩展\"><a href=\"#2-1-1-横向扩展\" class=\"headerlink\" title=\"2.1.1 横向扩展\"></a>2.1.1 横向扩展</h4><p>针对业务进行扩展， 当需要新增业务时只需要增加一个微服务即可</p>\n<h4 id=\"2-1-2-纵向扩展\"><a href=\"#2-1-2-纵向扩展\" class=\"headerlink\" title=\"2.1.2 纵向扩展\"></a>2.1.2 纵向扩展</h4><p>纵向扩展是对计算压力上的扩展， 针对某一块增加服务器，增强其计算能力， 然后使用<code>Nginx</code>进行反向代理</p>\n<h2 id=\"3-1-微服务的特点\"><a href=\"#3-1-微服务的特点\" class=\"headerlink\" title=\"3.1 微服务的特点\"></a>3.1 微服务的特点</h2><ul>\n<li>小, 且专注于做⼀件事情</li>\n<li>处于独立的进程中</li>\n<li>轻量级的通信机制</li>\n<li>松耦合、独立部署</li>\n</ul>\n<h2 id=\"4-1-合理使用微服务\"><a href=\"#4-1-合理使用微服务\" class=\"headerlink\" title=\"4.1 合理使用微服务\"></a>4.1 合理使用微服务</h2><p>微服务不是灵丹妙药，并不能适应所有的情况。 微服务需要在范围内被合理的使用。</p>\n<ul>\n<li>业务复杂度高</li>\n<li>团队规模大</li>\n<li>业务需要长期演进</li>\n<li>最后——没有银弹【人月神话】</li>\n</ul>\n<h2 id=\"5-1-微服务——集成与部署\"><a href=\"#5-1-微服务——集成与部署\" class=\"headerlink\" title=\"5.1 微服务——集成与部署\"></a>5.1 微服务——集成与部署</h2><ul>\n<li>持续集成——jekins</li>\n<li>虚拟化——虚拟机</li>\n<li>容器——Docker</li>\n</ul>\n"},{"title":"理解Iaas、PaaS、SaaS的区别","date":"2019-03-29T11:29:13.000Z","_content":"\n如果你是一个网站站长，想要建立一个网站。不采用云服务，你所需要的投入大概是：\n买服务器，安装服务器软件，编写网站程序。\n\n## 😦Iaas\n> 比如: 普通的云服务器\n\n现在你追随潮流，采用流行的云计算，如果你采用IaaS服务，那么意味着你就不用自己买服务器了，随便在哪家购买虚拟机，但是还是需要自己装服务器软件。\n\n## 😧PaaS\n> 比如: 阿里云的虚拟机\n\n而如果你采用PaaS的服务，那么意味着你既不需要买服务器，也不需要自己装服务器软件，只需要自己开发网站程序\n\n## 😨SaaS\n> 如淘宝对于商家\n\n如果你再进一步，购买某些在线论坛或者在线网店的服务,这意味着你也不用自己开发网站程序，只需要使用它们开发好的程序，而且他们会负责程序的升级、维护、增加服务器等，而你只需要专心运营即可，此即为SaaS。\n\n\n\n参考文献\n* https://www.zhihu.com/question/20387284\n\n\n\n\n\n\n","source":"_posts/理解Iaas、PaaS、SaaS的区别.md","raw":"---\ntitle: 理解Iaas、PaaS、SaaS的区别\ndate: 2019-03-29 19:29:13\ncategories: 专业术语\ntags: 专业术语\n---\n\n如果你是一个网站站长，想要建立一个网站。不采用云服务，你所需要的投入大概是：\n买服务器，安装服务器软件，编写网站程序。\n\n## 😦Iaas\n> 比如: 普通的云服务器\n\n现在你追随潮流，采用流行的云计算，如果你采用IaaS服务，那么意味着你就不用自己买服务器了，随便在哪家购买虚拟机，但是还是需要自己装服务器软件。\n\n## 😧PaaS\n> 比如: 阿里云的虚拟机\n\n而如果你采用PaaS的服务，那么意味着你既不需要买服务器，也不需要自己装服务器软件，只需要自己开发网站程序\n\n## 😨SaaS\n> 如淘宝对于商家\n\n如果你再进一步，购买某些在线论坛或者在线网店的服务,这意味着你也不用自己开发网站程序，只需要使用它们开发好的程序，而且他们会负责程序的升级、维护、增加服务器等，而你只需要专心运营即可，此即为SaaS。\n\n\n\n参考文献\n* https://www.zhihu.com/question/20387284\n\n\n\n\n\n\n","slug":"理解Iaas、PaaS、SaaS的区别","published":1,"updated":"2019-04-08T13:12:50.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wf5002ossuwns8n1d56","content":"<p>如果你是一个网站站长，想要建立一个网站。不采用云服务，你所需要的投入大概是：<br>买服务器，安装服务器软件，编写网站程序。</p>\n<h2 id=\"😦Iaas\"><a href=\"#😦Iaas\" class=\"headerlink\" title=\"😦Iaas\"></a>😦Iaas</h2><blockquote>\n<p>比如: 普通的云服务器</p>\n</blockquote>\n<p>现在你追随潮流，采用流行的云计算，如果你采用IaaS服务，那么意味着你就不用自己买服务器了，随便在哪家购买虚拟机，但是还是需要自己装服务器软件。</p>\n<h2 id=\"😧PaaS\"><a href=\"#😧PaaS\" class=\"headerlink\" title=\"😧PaaS\"></a>😧PaaS</h2><blockquote>\n<p>比如: 阿里云的虚拟机</p>\n</blockquote>\n<p>而如果你采用PaaS的服务，那么意味着你既不需要买服务器，也不需要自己装服务器软件，只需要自己开发网站程序</p>\n<h2 id=\"😨SaaS\"><a href=\"#😨SaaS\" class=\"headerlink\" title=\"😨SaaS\"></a>😨SaaS</h2><blockquote>\n<p>如淘宝对于商家</p>\n</blockquote>\n<p>如果你再进一步，购买某些在线论坛或者在线网店的服务,这意味着你也不用自己开发网站程序，只需要使用它们开发好的程序，而且他们会负责程序的升级、维护、增加服务器等，而你只需要专心运营即可，此即为SaaS。</p>\n<p>参考文献</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/20387284\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20387284</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>如果你是一个网站站长，想要建立一个网站。不采用云服务，你所需要的投入大概是：<br>买服务器，安装服务器软件，编写网站程序。</p>\n<h2 id=\"😦Iaas\"><a href=\"#😦Iaas\" class=\"headerlink\" title=\"😦Iaas\"></a>😦Iaas</h2><blockquote>\n<p>比如: 普通的云服务器</p>\n</blockquote>\n<p>现在你追随潮流，采用流行的云计算，如果你采用IaaS服务，那么意味着你就不用自己买服务器了，随便在哪家购买虚拟机，但是还是需要自己装服务器软件。</p>\n<h2 id=\"😧PaaS\"><a href=\"#😧PaaS\" class=\"headerlink\" title=\"😧PaaS\"></a>😧PaaS</h2><blockquote>\n<p>比如: 阿里云的虚拟机</p>\n</blockquote>\n<p>而如果你采用PaaS的服务，那么意味着你既不需要买服务器，也不需要自己装服务器软件，只需要自己开发网站程序</p>\n<h2 id=\"😨SaaS\"><a href=\"#😨SaaS\" class=\"headerlink\" title=\"😨SaaS\"></a>😨SaaS</h2><blockquote>\n<p>如淘宝对于商家</p>\n</blockquote>\n<p>如果你再进一步，购买某些在线论坛或者在线网店的服务,这意味着你也不用自己开发网站程序，只需要使用它们开发好的程序，而且他们会负责程序的升级、维护、增加服务器等，而你只需要专心运营即可，此即为SaaS。</p>\n<p>参考文献</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/20387284\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20387284</a></li>\n</ul>\n"},{"title":"面向对象设计原则之IOC控制反转","date":"2019-03-24T05:39:45.000Z","_content":"\n\n# IOC （控制反转）\n> Inversion of Control\n\nIoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。\n\n\n## 什么是控制反转\n\n控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。\n\n\n> DI是IOC的一种表现形式\n\n\n\n## 两种方式\n\n### 依赖查找\n容器提供回调接口和上下文条件给组件。\n\n### 依赖注入\n组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。\n\n\n\n\n## IOC概念图\n\n在未使用IOC的时候 各个 `Object` 之间的耦合度很高， 谁也离不开谁\n\n在使用 IOC 后， 各个 `Object` 之间通过 `IOC容器` 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度\n\n![IOC概念图](http://img.nixiaolei.com/2019-03-24-13-49-37.png)\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/面向对象设计原则之IOC控制反转.md","raw":"---\ntitle: 面向对象设计原则之IOC控制反转\ndate: 2019-03-24 13:39:45\ncategories: [编程思想]\ntags: [oop, IOC, 编程原则]\n---\n\n\n# IOC （控制反转）\n> Inversion of Control\n\nIoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。\n\n\n## 什么是控制反转\n\n控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。\n\n\n> DI是IOC的一种表现形式\n\n\n\n## 两种方式\n\n### 依赖查找\n容器提供回调接口和上下文条件给组件。\n\n### 依赖注入\n组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。\n\n\n\n\n## IOC概念图\n\n在未使用IOC的时候 各个 `Object` 之间的耦合度很高， 谁也离不开谁\n\n在使用 IOC 后， 各个 `Object` 之间通过 `IOC容器` 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度\n\n![IOC概念图](http://img.nixiaolei.com/2019-03-24-13-49-37.png)\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"面向对象设计原则之IOC控制反转","published":1,"updated":"2019-03-24T05:57:42.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wfe002rssuwitylcadx","content":"<h1 id=\"IOC-（控制反转）\"><a href=\"#IOC-（控制反转）\" class=\"headerlink\" title=\"IOC （控制反转）\"></a>IOC （控制反转）</h1><blockquote>\n<p>Inversion of Control</p>\n</blockquote>\n<p>IoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。</p>\n<h2 id=\"什么是控制反转\"><a href=\"#什么是控制反转\" class=\"headerlink\" title=\"什么是控制反转\"></a>什么是控制反转</h2><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。</p>\n<blockquote>\n<p>DI是IOC的一种表现形式</p>\n</blockquote>\n<h2 id=\"两种方式\"><a href=\"#两种方式\" class=\"headerlink\" title=\"两种方式\"></a>两种方式</h2><h3 id=\"依赖查找\"><a href=\"#依赖查找\" class=\"headerlink\" title=\"依赖查找\"></a>依赖查找</h3><p>容器提供回调接口和上下文条件给组件。</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。</p>\n<h2 id=\"IOC概念图\"><a href=\"#IOC概念图\" class=\"headerlink\" title=\"IOC概念图\"></a>IOC概念图</h2><p>在未使用IOC的时候 各个 <code>Object</code> 之间的耦合度很高， 谁也离不开谁</p>\n<p>在使用 IOC 后， 各个 <code>Object</code> 之间通过 <code>IOC容器</code> 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-13-49-37.png\" alt=\"IOC概念图\"></p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"IOC-（控制反转）\"><a href=\"#IOC-（控制反转）\" class=\"headerlink\" title=\"IOC （控制反转）\"></a>IOC （控制反转）</h1><blockquote>\n<p>Inversion of Control</p>\n</blockquote>\n<p>IoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。</p>\n<h2 id=\"什么是控制反转\"><a href=\"#什么是控制反转\" class=\"headerlink\" title=\"什么是控制反转\"></a>什么是控制反转</h2><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。</p>\n<blockquote>\n<p>DI是IOC的一种表现形式</p>\n</blockquote>\n<h2 id=\"两种方式\"><a href=\"#两种方式\" class=\"headerlink\" title=\"两种方式\"></a>两种方式</h2><h3 id=\"依赖查找\"><a href=\"#依赖查找\" class=\"headerlink\" title=\"依赖查找\"></a>依赖查找</h3><p>容器提供回调接口和上下文条件给组件。</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。</p>\n<h2 id=\"IOC概念图\"><a href=\"#IOC概念图\" class=\"headerlink\" title=\"IOC概念图\"></a>IOC概念图</h2><p>在未使用IOC的时候 各个 <code>Object</code> 之间的耦合度很高， 谁也离不开谁</p>\n<p>在使用 IOC 后， 各个 <code>Object</code> 之间通过 <code>IOC容器</code> 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-13-49-37.png\" alt=\"IOC概念图\"></p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"手摸手AngularJs入门教程","date":"2019-03-16T04:00:36.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\nAngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。\n\n这里我们用AngularJs7的练手吧\n\n## 起步\n> 请确保电脑已安装了`Node.js`\n\n首先是全局安装脚手架\n```shell\nnpm install -g @angular/cli\n```\n安装好后查看一下版本\n> ng --version\n\n![查看版本](http://img.nixiaolei.com/2019-03-17-15-54-41.png)\n\n\n确认`ng`命令存在后就可以开始创建我们的第一个 Angular 项目了\n```shell\n# 创建项目  project 替换为你的项目名称\nng new project\n```\n\n当你输入命令后他会问你需要的配置，  \n\n这里附上我的选择， 大家可以参照\n\n1. 你是否需要添加路由？ ---- yes\n2. 选择你喜欢的css 风格 ---- SCSS\n\n![选择配置](http://img.nixiaolei.com/2019-03-17-15-36-01.png)\n\n\n选择好后， 就会进入漫长的安装了\n![安装中](http://img.nixiaolei.com/2019-03-17-15-39-53.png)\n\n安装好后， cd 进入到项目所在的目录， 运行 `ng serve` 命令， 并打开`http://localhost:4200/` 查看我们第一个 `Angular`项目\n```shell\n# 进入你的项目目录\ncd project\n\n# 启动项目\nng serve\n\n# 如果你需要 可以生产环境运行\nng serve --prod --aot \n```\n\n## 基本的路由配置\n> 如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能\n因为之前我们在构建项目时就选择了加入`路由`， 因此也省去了很多配置过程， \n\n现在，我们来看看怎么用吧， \n\n首先想使用路由， 得需要再创建一个\"页面\"（这里指组件）， 这样才能通过切换看出是否实现了路由， \n\n**那如何创建一个组件呢？**\n\nAngular 给我们提供了非常多的创建命令， 组件也可以一键的生成\n\n我们来创建一个 `Demo` 组件\n> ng g c Demo\n\n等待片刻， 安装好后\n\n我们发现项目文件中的 `app` 目录下多了一个文件夹\n![Demo组件创建](http://img.nixiaolei.com/2019-03-17-17-01-55.png)\n\n里面有配套的\n* 模板文件\n* 样式文件\n* 测试文件\n* ts 脚本文件\n\n\n既然有了组件， 那我们现在需要为这个路由分配相应的访问路径\n\n进入 `app/app-routing.module.ts` 这个文件\n\n我们首先导入刚刚创建的`Demo`组件， 再 `routes`数组中，分配一个用于访问的`path`, 并和导入的`DemoComponent`关联上\n\n如下:\n\n```JavaScript\n// ------------新增区域------------\nimport { DemoComponent } from './demo/demo.component';\n// ------------新增区域------------\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  // -----------新增区域-------------\n  {\n    path: \"demo\",\n    component: DemoComponent\n  }\n  // ------------新增区域------------\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n\n然后进入 `app/app.component.html` 文件中找到 `<router-outlet></router-outlet>`\n\n刚才配置的路由就会显示在这个标签所在的位置，\n为了减少一点干扰，我们把没有用的信息删除\n\n!component19html\n切换后](http://img.nixiaolei.com/2019-03--17-17-27-25.png app.我只留了一张图片,\n\n然后我们进入 `app/demo/demo.component.html` 文件中\n\n原本是\n```HTML\n<p>\n  demo works!\n</p>\n```\n\n我们改成明显一点的内容\n> 千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息\n\n```HTML\n<div>\n  <h1>我是Demo 页面</h1>\n</div>\n```\n\n我们看看是否配置成功了\n\n\n首先，刚进入， 只有一张图片\n\n![根路由](http://img.nixiaolei.com/2019-03-17-17-34-37.png)\n\n\n让我们切换至`/demo`\n\n我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 `app/app.component.html` 中所做的配置一样\n\n![切换至demo](http://img.nixiaolei.com/2019-03-17-17-35-14.png)\n\n\n\n--------------------待完善-------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 常用的命令\n> 把 XXX 替换成你要的名字\n\n* ng g cl xxx // 创建一个新类\n* ng g c xxx // 创建一个新组件\n* ng g d xxx // 创建一个新指令\n* ng g e xxx // 创建一个新枚举\n* ng g m xxx // 创建一个新模块\n* ng g p xxx // 创建一个新管道\n* ng g s xxx // 创建一个新的指服务\n\n\n \n## 参考文献\n> https://github.com/angular/angular-cli/wiki\n\n","source":"_posts/手摸手AngularJs入门教程.md","raw":"---\ntitle: 手摸手AngularJs入门教程\ndate: 2019-03-16 12:00:36\ncategories: JavaScript\ntags: [Angular]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\nAngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。\n\n这里我们用AngularJs7的练手吧\n\n## 起步\n> 请确保电脑已安装了`Node.js`\n\n首先是全局安装脚手架\n```shell\nnpm install -g @angular/cli\n```\n安装好后查看一下版本\n> ng --version\n\n![查看版本](http://img.nixiaolei.com/2019-03-17-15-54-41.png)\n\n\n确认`ng`命令存在后就可以开始创建我们的第一个 Angular 项目了\n```shell\n# 创建项目  project 替换为你的项目名称\nng new project\n```\n\n当你输入命令后他会问你需要的配置，  \n\n这里附上我的选择， 大家可以参照\n\n1. 你是否需要添加路由？ ---- yes\n2. 选择你喜欢的css 风格 ---- SCSS\n\n![选择配置](http://img.nixiaolei.com/2019-03-17-15-36-01.png)\n\n\n选择好后， 就会进入漫长的安装了\n![安装中](http://img.nixiaolei.com/2019-03-17-15-39-53.png)\n\n安装好后， cd 进入到项目所在的目录， 运行 `ng serve` 命令， 并打开`http://localhost:4200/` 查看我们第一个 `Angular`项目\n```shell\n# 进入你的项目目录\ncd project\n\n# 启动项目\nng serve\n\n# 如果你需要 可以生产环境运行\nng serve --prod --aot \n```\n\n## 基本的路由配置\n> 如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能\n因为之前我们在构建项目时就选择了加入`路由`， 因此也省去了很多配置过程， \n\n现在，我们来看看怎么用吧， \n\n首先想使用路由， 得需要再创建一个\"页面\"（这里指组件）， 这样才能通过切换看出是否实现了路由， \n\n**那如何创建一个组件呢？**\n\nAngular 给我们提供了非常多的创建命令， 组件也可以一键的生成\n\n我们来创建一个 `Demo` 组件\n> ng g c Demo\n\n等待片刻， 安装好后\n\n我们发现项目文件中的 `app` 目录下多了一个文件夹\n![Demo组件创建](http://img.nixiaolei.com/2019-03-17-17-01-55.png)\n\n里面有配套的\n* 模板文件\n* 样式文件\n* 测试文件\n* ts 脚本文件\n\n\n既然有了组件， 那我们现在需要为这个路由分配相应的访问路径\n\n进入 `app/app-routing.module.ts` 这个文件\n\n我们首先导入刚刚创建的`Demo`组件， 再 `routes`数组中，分配一个用于访问的`path`, 并和导入的`DemoComponent`关联上\n\n如下:\n\n```JavaScript\n// ------------新增区域------------\nimport { DemoComponent } from './demo/demo.component';\n// ------------新增区域------------\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  // -----------新增区域-------------\n  {\n    path: \"demo\",\n    component: DemoComponent\n  }\n  // ------------新增区域------------\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n\n然后进入 `app/app.component.html` 文件中找到 `<router-outlet></router-outlet>`\n\n刚才配置的路由就会显示在这个标签所在的位置，\n为了减少一点干扰，我们把没有用的信息删除\n\n!component19html\n切换后](http://img.nixiaolei.com/2019-03--17-17-27-25.png app.我只留了一张图片,\n\n然后我们进入 `app/demo/demo.component.html` 文件中\n\n原本是\n```HTML\n<p>\n  demo works!\n</p>\n```\n\n我们改成明显一点的内容\n> 千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息\n\n```HTML\n<div>\n  <h1>我是Demo 页面</h1>\n</div>\n```\n\n我们看看是否配置成功了\n\n\n首先，刚进入， 只有一张图片\n\n![根路由](http://img.nixiaolei.com/2019-03-17-17-34-37.png)\n\n\n让我们切换至`/demo`\n\n我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 `app/app.component.html` 中所做的配置一样\n\n![切换至demo](http://img.nixiaolei.com/2019-03-17-17-35-14.png)\n\n\n\n--------------------待完善-------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 常用的命令\n> 把 XXX 替换成你要的名字\n\n* ng g cl xxx // 创建一个新类\n* ng g c xxx // 创建一个新组件\n* ng g d xxx // 创建一个新指令\n* ng g e xxx // 创建一个新枚举\n* ng g m xxx // 创建一个新模块\n* ng g p xxx // 创建一个新管道\n* ng g s xxx // 创建一个新的指服务\n\n\n \n## 参考文献\n> https://github.com/angular/angular-cli/wiki\n\n","slug":"手摸手AngularJs入门教程","published":1,"updated":"2019-03-20T14:55:14.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wfl002wssuwsddv2xhb","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>AngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。</p>\n<p>这里我们用AngularJs7的练手吧</p>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><blockquote>\n<p>请确保电脑已安装了<code>Node.js</code></p>\n</blockquote>\n<p>首先是全局安装脚手架<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular/cli</span><br></pre></td></tr></table></figure></p>\n<p>安装好后查看一下版本</p>\n<blockquote>\n<p>ng –version</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-15-54-41.png\" alt=\"查看版本\"></p>\n<p>确认<code>ng</code>命令存在后就可以开始创建我们的第一个 Angular 项目了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 创建项目  project 替换为你的项目名称</span><br><span class=\"line\">ng new project</span><br></pre></td></tr></table></figure></p>\n<p>当你输入命令后他会问你需要的配置，  </p>\n<p>这里附上我的选择， 大家可以参照</p>\n<ol>\n<li>你是否需要添加路由？ —- yes</li>\n<li>选择你喜欢的css 风格 —- SCSS</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-15-36-01.png\" alt=\"选择配置\"></p>\n<p>选择好后， 就会进入漫长的安装了<br><img src=\"http://img.nixiaolei.com/2019-03-17-15-39-53.png\" alt=\"安装中\"></p>\n<p>安装好后， cd 进入到项目所在的目录， 运行 <code>ng serve</code> 命令， 并打开<code>http://localhost:4200/</code> 查看我们第一个 <code>Angular</code>项目<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 进入你的项目目录</span><br><span class=\"line\">cd project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 启动项目</span><br><span class=\"line\">ng serve</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 如果你需要 可以生产环境运行</span><br><span class=\"line\">ng serve --prod --aot</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基本的路由配置\"><a href=\"#基本的路由配置\" class=\"headerlink\" title=\"基本的路由配置\"></a>基本的路由配置</h2><blockquote>\n<p>如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能<br>因为之前我们在构建项目时就选择了加入<code>路由</code>， 因此也省去了很多配置过程， </p>\n</blockquote>\n<p>现在，我们来看看怎么用吧， </p>\n<p>首先想使用路由， 得需要再创建一个”页面”（这里指组件）， 这样才能通过切换看出是否实现了路由， </p>\n<p><strong>那如何创建一个组件呢？</strong></p>\n<p>Angular 给我们提供了非常多的创建命令， 组件也可以一键的生成</p>\n<p>我们来创建一个 <code>Demo</code> 组件</p>\n<blockquote>\n<p>ng g c Demo</p>\n</blockquote>\n<p>等待片刻， 安装好后</p>\n<p>我们发现项目文件中的 <code>app</code> 目录下多了一个文件夹<br><img src=\"http://img.nixiaolei.com/2019-03-17-17-01-55.png\" alt=\"Demo组件创建\"></p>\n<p>里面有配套的</p>\n<ul>\n<li>模板文件</li>\n<li>样式文件</li>\n<li>测试文件</li>\n<li>ts 脚本文件</li>\n</ul>\n<p>既然有了组件， 那我们现在需要为这个路由分配相应的访问路径</p>\n<p>进入 <code>app/app-routing.module.ts</code> 这个文件</p>\n<p>我们首先导入刚刚创建的<code>Demo</code>组件， 再 <code>routes</code>数组中，分配一个用于访问的<code>path</code>, 并和导入的<code>DemoComponent</code>关联上</p>\n<p>如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; DemoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./demo/demo.component'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  <span class=\"comment\">// -----------新增区域-------------</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"demo\"</span>,</span><br><span class=\"line\">    component: DemoComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>然后进入 <code>app/app.component.html</code> 文件中找到 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code></p>\n<p>刚才配置的路由就会显示在这个标签所在的位置，<br>为了减少一点干扰，我们把没有用的信息删除</p>\n<p>!component19html<br>切换后](<a href=\"http://img.nixiaolei.com/2019-03--17-17-27-25.png\" target=\"_blank\" rel=\"noopener\">http://img.nixiaolei.com/2019-03--17-17-27-25.png</a> app.我只留了一张图片,</p>\n<p>然后我们进入 <code>app/demo/demo.component.html</code> 文件中</p>\n<p>原本是<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  demo works!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们改成明显一点的内容</p>\n<blockquote>\n<p>千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是Demo 页面<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们看看是否配置成功了</p>\n<p>首先，刚进入， 只有一张图片</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-17-34-37.png\" alt=\"根路由\"></p>\n<p>让我们切换至<code>/demo</code></p>\n<p>我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 <code>app/app.component.html</code> 中所做的配置一样</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-17-35-14.png\" alt=\"切换至demo\"></p>\n<p>——————–待完善————————-</p>\n<h2 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h2><blockquote>\n<p>把 XXX 替换成你要的名字</p>\n</blockquote>\n<ul>\n<li>ng g cl xxx // 创建一个新类</li>\n<li>ng g c xxx // 创建一个新组件</li>\n<li>ng g d xxx // 创建一个新指令</li>\n<li>ng g e xxx // 创建一个新枚举</li>\n<li>ng g m xxx // 创建一个新模块</li>\n<li>ng g p xxx // 创建一个新管道</li>\n<li>ng g s xxx // 创建一个新的指服务</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><blockquote>\n<p><a href=\"https://github.com/angular/angular-cli/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/angular/angular-cli/wiki</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>AngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。</p>\n<p>这里我们用AngularJs7的练手吧</p>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><blockquote>\n<p>请确保电脑已安装了<code>Node.js</code></p>\n</blockquote>\n<p>首先是全局安装脚手架<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular/cli</span><br></pre></td></tr></table></figure></p>\n<p>安装好后查看一下版本</p>\n<blockquote>\n<p>ng –version</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-15-54-41.png\" alt=\"查看版本\"></p>\n<p>确认<code>ng</code>命令存在后就可以开始创建我们的第一个 Angular 项目了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 创建项目  project 替换为你的项目名称</span><br><span class=\"line\">ng new project</span><br></pre></td></tr></table></figure></p>\n<p>当你输入命令后他会问你需要的配置，  </p>\n<p>这里附上我的选择， 大家可以参照</p>\n<ol>\n<li>你是否需要添加路由？ —- yes</li>\n<li>选择你喜欢的css 风格 —- SCSS</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-15-36-01.png\" alt=\"选择配置\"></p>\n<p>选择好后， 就会进入漫长的安装了<br><img src=\"http://img.nixiaolei.com/2019-03-17-15-39-53.png\" alt=\"安装中\"></p>\n<p>安装好后， cd 进入到项目所在的目录， 运行 <code>ng serve</code> 命令， 并打开<code>http://localhost:4200/</code> 查看我们第一个 <code>Angular</code>项目<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 进入你的项目目录</span><br><span class=\"line\">cd project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 启动项目</span><br><span class=\"line\">ng serve</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 如果你需要 可以生产环境运行</span><br><span class=\"line\">ng serve --prod --aot</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基本的路由配置\"><a href=\"#基本的路由配置\" class=\"headerlink\" title=\"基本的路由配置\"></a>基本的路由配置</h2><blockquote>\n<p>如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能<br>因为之前我们在构建项目时就选择了加入<code>路由</code>， 因此也省去了很多配置过程， </p>\n</blockquote>\n<p>现在，我们来看看怎么用吧， </p>\n<p>首先想使用路由， 得需要再创建一个”页面”（这里指组件）， 这样才能通过切换看出是否实现了路由， </p>\n<p><strong>那如何创建一个组件呢？</strong></p>\n<p>Angular 给我们提供了非常多的创建命令， 组件也可以一键的生成</p>\n<p>我们来创建一个 <code>Demo</code> 组件</p>\n<blockquote>\n<p>ng g c Demo</p>\n</blockquote>\n<p>等待片刻， 安装好后</p>\n<p>我们发现项目文件中的 <code>app</code> 目录下多了一个文件夹<br><img src=\"http://img.nixiaolei.com/2019-03-17-17-01-55.png\" alt=\"Demo组件创建\"></p>\n<p>里面有配套的</p>\n<ul>\n<li>模板文件</li>\n<li>样式文件</li>\n<li>测试文件</li>\n<li>ts 脚本文件</li>\n</ul>\n<p>既然有了组件， 那我们现在需要为这个路由分配相应的访问路径</p>\n<p>进入 <code>app/app-routing.module.ts</code> 这个文件</p>\n<p>我们首先导入刚刚创建的<code>Demo</code>组件， 再 <code>routes</code>数组中，分配一个用于访问的<code>path</code>, 并和导入的<code>DemoComponent</code>关联上</p>\n<p>如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; DemoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./demo/demo.component'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  <span class=\"comment\">// -----------新增区域-------------</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"demo\"</span>,</span><br><span class=\"line\">    component: DemoComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ------------新增区域------------</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>然后进入 <code>app/app.component.html</code> 文件中找到 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code></p>\n<p>刚才配置的路由就会显示在这个标签所在的位置，<br>为了减少一点干扰，我们把没有用的信息删除</p>\n<p>!component19html<br>切换后](<a href=\"http://img.nixiaolei.com/2019-03--17-17-27-25.png\" target=\"_blank\" rel=\"noopener\">http://img.nixiaolei.com/2019-03--17-17-27-25.png</a> app.我只留了一张图片,</p>\n<p>然后我们进入 <code>app/demo/demo.component.html</code> 文件中</p>\n<p>原本是<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  demo works!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们改成明显一点的内容</p>\n<blockquote>\n<p>千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是Demo 页面<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们看看是否配置成功了</p>\n<p>首先，刚进入， 只有一张图片</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-17-34-37.png\" alt=\"根路由\"></p>\n<p>让我们切换至<code>/demo</code></p>\n<p>我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 <code>app/app.component.html</code> 中所做的配置一样</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-17-17-35-14.png\" alt=\"切换至demo\"></p>\n<p>——————–待完善————————-</p>\n<h2 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h2><blockquote>\n<p>把 XXX 替换成你要的名字</p>\n</blockquote>\n<ul>\n<li>ng g cl xxx // 创建一个新类</li>\n<li>ng g c xxx // 创建一个新组件</li>\n<li>ng g d xxx // 创建一个新指令</li>\n<li>ng g e xxx // 创建一个新枚举</li>\n<li>ng g m xxx // 创建一个新模块</li>\n<li>ng g p xxx // 创建一个新管道</li>\n<li>ng g s xxx // 创建一个新的指服务</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><blockquote>\n<p><a href=\"https://github.com/angular/angular-cli/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/angular/angular-cli/wiki</a></p>\n</blockquote>\n"},{"title":"面试题集合","date":"2019-03-20T09:40:34.000Z","_content":"\n## 事件机制\n\n### Promise\n\n#### 题目一: \n```JavaScript\nsetTimeout(() => {\n  console.log(4)\n}, 0)\nnew Promise(resolve => {\n  console.log(1)\n  setTimeout(() => {\n    resolve(\"done\")\n    console.log(6)\n  }, 0)\n  resolve(5)\n}).then((res) => {\n  // 微任务\n  console.log(res)\n})\nconsole.log(2)\n```\n\n**答案:**\n> 1 , 2 , 5 , 4, 6\n\n注意， 没有`done`！\n\n\n**分析:**\n`Promise` 的`resolve`只会触发一次， 因为`Promise`的状态已经被修改为`resolve`\n\n所以第二次的`resolve` 不会触发\n\n\n#### 题目二:\n```JavaScript\nsetTimeout(() => {\n  console.log(4)\n}, 0)\nnew Promise(resolve => {\n  console.log(1)\n  new Promise(resolve => {\n    console.log(7)\n    setTimeout(() => {\n      resolve(\"done\")\n      console.log(\"aa\")\n    }, 0)\n    resolve(8)\n  }).then((res) => {\n    console.log(res)\n  })\n  resolve(5)\n}).then((res) => {\n  console.log(res)\n})\nconsole.log(2)\n```\n\n**答案:**\n> 1, 7, 2, 8 , 5 , 4 , aa\n\n\n**分析:**\n`Promise`的完成先后还得看谁先挂载了 `then`， 并不是谁先`new`就是谁\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## ES6系列\n\n### async await:\n#### 题目一: async 什么原理 ?\n\n**例子:**\n```JavaScript\nasync function  test () {\n  let result = await 10 \n}\ntest()\n```\n\n经过 Babel 转换\n```JavaScript\nwhile (1) {\n  switch (_context.prev = _context.next) {\n    case 0:\n      _context.next = 2;\n      return 10;\n\n    case 2:\n      result = _context.sent;\n\n    case 3:\n    case \"end\":\n      return _context.stop();\n  }\n```\n\n**分析**\n我们可以看到，经过`babel` 转换过的 `async await` 代码中关键的这句， `while`循环， 并且是一个死循环， `babel` 就是这样来模拟 `async await`的， 当`await`返回结果时， `_context.stop`抛出异常退出死循环 , `babel`这样做也是为了更好的捕获异常\n\n\n\n#### 题目二: 请问result输出几 ?\n```JavaScript\nvar a = 0\nasync function  test () {\n  let result = a + await 10\n  console.log(result)\n}\ntest()\na = a + 1\ntest()\n```\n**答案:**\n> 10  , 11\n\n**分析:**\n1. `await` 后如果是一个常量, 将作为 `Promise.resolve`的结果返回\n2. 因为 `async await` 是 `generator`的语法糖， 当执行 `test` 方法时， 变量`a`的值会被锁住\n\n所以第一个结果是`10`， 第二个结果是 `11`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/面试题集合.md","raw":"---\ntitle: 面试题集合\ndate: 2019-03-20 17:40:34\ncategories: 面试\ntags: [面试]\n---\n\n## 事件机制\n\n### Promise\n\n#### 题目一: \n```JavaScript\nsetTimeout(() => {\n  console.log(4)\n}, 0)\nnew Promise(resolve => {\n  console.log(1)\n  setTimeout(() => {\n    resolve(\"done\")\n    console.log(6)\n  }, 0)\n  resolve(5)\n}).then((res) => {\n  // 微任务\n  console.log(res)\n})\nconsole.log(2)\n```\n\n**答案:**\n> 1 , 2 , 5 , 4, 6\n\n注意， 没有`done`！\n\n\n**分析:**\n`Promise` 的`resolve`只会触发一次， 因为`Promise`的状态已经被修改为`resolve`\n\n所以第二次的`resolve` 不会触发\n\n\n#### 题目二:\n```JavaScript\nsetTimeout(() => {\n  console.log(4)\n}, 0)\nnew Promise(resolve => {\n  console.log(1)\n  new Promise(resolve => {\n    console.log(7)\n    setTimeout(() => {\n      resolve(\"done\")\n      console.log(\"aa\")\n    }, 0)\n    resolve(8)\n  }).then((res) => {\n    console.log(res)\n  })\n  resolve(5)\n}).then((res) => {\n  console.log(res)\n})\nconsole.log(2)\n```\n\n**答案:**\n> 1, 7, 2, 8 , 5 , 4 , aa\n\n\n**分析:**\n`Promise`的完成先后还得看谁先挂载了 `then`， 并不是谁先`new`就是谁\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## ES6系列\n\n### async await:\n#### 题目一: async 什么原理 ?\n\n**例子:**\n```JavaScript\nasync function  test () {\n  let result = await 10 \n}\ntest()\n```\n\n经过 Babel 转换\n```JavaScript\nwhile (1) {\n  switch (_context.prev = _context.next) {\n    case 0:\n      _context.next = 2;\n      return 10;\n\n    case 2:\n      result = _context.sent;\n\n    case 3:\n    case \"end\":\n      return _context.stop();\n  }\n```\n\n**分析**\n我们可以看到，经过`babel` 转换过的 `async await` 代码中关键的这句， `while`循环， 并且是一个死循环， `babel` 就是这样来模拟 `async await`的， 当`await`返回结果时， `_context.stop`抛出异常退出死循环 , `babel`这样做也是为了更好的捕获异常\n\n\n\n#### 题目二: 请问result输出几 ?\n```JavaScript\nvar a = 0\nasync function  test () {\n  let result = a + await 10\n  console.log(result)\n}\ntest()\na = a + 1\ntest()\n```\n**答案:**\n> 10  , 11\n\n**分析:**\n1. `await` 后如果是一个常量, 将作为 `Promise.resolve`的结果返回\n2. 因为 `async await` 是 `generator`的语法糖， 当执行 `test` 方法时， 变量`a`的值会被锁住\n\n所以第一个结果是`10`， 第二个结果是 `11`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"面试题集合","published":1,"updated":"2019-03-31T12:00:05.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wfq002zssuwlvzgb3qb","content":"<h2 id=\"事件机制\"><a href=\"#事件机制\" class=\"headerlink\" title=\"事件机制\"></a>事件机制</h2><h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><h4 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一:\"></a>题目一:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">\"done\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>答案:</strong></p>\n<blockquote>\n<p>1 , 2 , 5 , 4, 6</p>\n</blockquote>\n<p>注意， 没有<code>done</code>！</p>\n<p><strong>分析:</strong><br><code>Promise</code> 的<code>resolve</code>只会触发一次， 因为<code>Promise</code>的状态已经被修改为<code>resolve</code></p>\n<p>所以第二次的<code>resolve</code> 不会触发</p>\n<h4 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二:\"></a>题目二:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">\"done\"</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"aa\"</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    resolve(<span class=\"number\">8</span>)</span><br><span class=\"line\">  &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>答案:</strong></p>\n<blockquote>\n<p>1, 7, 2, 8 , 5 , 4 , aa</p>\n</blockquote>\n<p><strong>分析:</strong><br><code>Promise</code>的完成先后还得看谁先挂载了 <code>then</code>， 并不是谁先<code>new</code>就是谁</p>\n<h2 id=\"ES6系列\"><a href=\"#ES6系列\" class=\"headerlink\" title=\"ES6系列\"></a>ES6系列</h2><h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async await:\"></a>async await:</h3><h4 id=\"题目一-async-什么原理\"><a href=\"#题目一-async-什么原理\" class=\"headerlink\" title=\"题目一: async 什么原理 ?\"></a>题目一: async 什么原理 ?</h4><p><strong>例子:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"number\">10</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure></p>\n<p>经过 Babel 转换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (_context.prev = _context.next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      _context.next = <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      result = _context.sent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"end\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _context.stop();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析</strong><br>我们可以看到，经过<code>babel</code> 转换过的 <code>async await</code> 代码中关键的这句， <code>while</code>循环， 并且是一个死循环， <code>babel</code> 就是这样来模拟 <code>async await</code>的， 当<code>await</code>返回结果时， <code>_context.stop</code>抛出异常退出死循环 , <code>babel</code>这样做也是为了更好的捕获异常</p>\n<h4 id=\"题目二-请问result输出几\"><a href=\"#题目二-请问result输出几\" class=\"headerlink\" title=\"题目二: 请问result输出几 ?\"></a>题目二: 请问result输出几 ?</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = a + <span class=\"keyword\">await</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br><span class=\"line\">a = a + <span class=\"number\">1</span></span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n<p><strong>答案:</strong></p>\n<blockquote>\n<p>10  , 11</p>\n</blockquote>\n<p><strong>分析:</strong></p>\n<ol>\n<li><code>await</code> 后如果是一个常量, 将作为 <code>Promise.resolve</code>的结果返回</li>\n<li>因为 <code>async await</code> 是 <code>generator</code>的语法糖， 当执行 <code>test</code> 方法时， 变量<code>a</code>的值会被锁住</li>\n</ol>\n<p>所以第一个结果是<code>10</code>， 第二个结果是 <code>11</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"事件机制\"><a href=\"#事件机制\" class=\"headerlink\" title=\"事件机制\"></a>事件机制</h2><h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><h4 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一:\"></a>题目一:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">\"done\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>答案:</strong></p>\n<blockquote>\n<p>1 , 2 , 5 , 4, 6</p>\n</blockquote>\n<p>注意， 没有<code>done</code>！</p>\n<p><strong>分析:</strong><br><code>Promise</code> 的<code>resolve</code>只会触发一次， 因为<code>Promise</code>的状态已经被修改为<code>resolve</code></p>\n<p>所以第二次的<code>resolve</code> 不会触发</p>\n<h4 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二:\"></a>题目二:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">\"done\"</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"aa\"</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    resolve(<span class=\"number\">8</span>)</span><br><span class=\"line\">  &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>答案:</strong></p>\n<blockquote>\n<p>1, 7, 2, 8 , 5 , 4 , aa</p>\n</blockquote>\n<p><strong>分析:</strong><br><code>Promise</code>的完成先后还得看谁先挂载了 <code>then</code>， 并不是谁先<code>new</code>就是谁</p>\n<h2 id=\"ES6系列\"><a href=\"#ES6系列\" class=\"headerlink\" title=\"ES6系列\"></a>ES6系列</h2><h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async await:\"></a>async await:</h3><h4 id=\"题目一-async-什么原理\"><a href=\"#题目一-async-什么原理\" class=\"headerlink\" title=\"题目一: async 什么原理 ?\"></a>题目一: async 什么原理 ?</h4><p><strong>例子:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"number\">10</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure></p>\n<p>经过 Babel 转换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (_context.prev = _context.next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      _context.next = <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      result = _context.sent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"end\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _context.stop();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析</strong><br>我们可以看到，经过<code>babel</code> 转换过的 <code>async await</code> 代码中关键的这句， <code>while</code>循环， 并且是一个死循环， <code>babel</code> 就是这样来模拟 <code>async await</code>的， 当<code>await</code>返回结果时， <code>_context.stop</code>抛出异常退出死循环 , <code>babel</code>这样做也是为了更好的捕获异常</p>\n<h4 id=\"题目二-请问result输出几\"><a href=\"#题目二-请问result输出几\" class=\"headerlink\" title=\"题目二: 请问result输出几 ?\"></a>题目二: 请问result输出几 ?</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = a + <span class=\"keyword\">await</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br><span class=\"line\">a = a + <span class=\"number\">1</span></span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n<p><strong>答案:</strong></p>\n<blockquote>\n<p>10  , 11</p>\n</blockquote>\n<p><strong>分析:</strong></p>\n<ol>\n<li><code>await</code> 后如果是一个常量, 将作为 <code>Promise.resolve</code>的结果返回</li>\n<li>因为 <code>async await</code> 是 <code>generator</code>的语法糖， 当执行 <code>test</code> 方法时， 变量<code>a</code>的值会被锁住</li>\n</ol>\n<p>所以第一个结果是<code>10</code>， 第二个结果是 <code>11</code></p>\n"},{"title":"【Linux】理解权限命令-chown","date":"2019-03-22T12:38:50.000Z","_content":"\n```Python\n# 更改文件属组\nchgrp [-R] 属组名  文件名\n\n# 更改文件属主 或 属组\nchown [-R] 属主名 文件名\nchown [-R] 属主名：属组名 文件名\n\n# 修改文件权限 9 个属性\n# 有两种设置方式， 一种是数字 一种是符号\n# 基本身份 owner/group/others 的各自三种权限\n# read(r 4)/write(w 2)/execute(x 1): -rwxr-xr-- = [4+2+1][4+0+1][4+0+0]=754\nchmod [-R] xyz 文件或目录\n\n# 符号修改权限\nchmod u(user)        +(加入)    r 文件或目录\n      g(group)       -(减去)    w \n      o(others)      =(设定)    x\n      a(all 全部身份)      \n\nchmod u=rwx,g=rx, o=r 文件名\nchmod a-x test1\n```\n\n\n## 图解\n![chmod命令](http://img.nixiaolei.com/2019-04-02-20-47-10.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【Linux】理解chown命令.md","raw":"---\ntitle: 【Linux】理解权限命令-chown\ndate: 2019-03-22 20:38:50\ncategories: Linux\ntags:  Linux\n---\n\n```Python\n# 更改文件属组\nchgrp [-R] 属组名  文件名\n\n# 更改文件属主 或 属组\nchown [-R] 属主名 文件名\nchown [-R] 属主名：属组名 文件名\n\n# 修改文件权限 9 个属性\n# 有两种设置方式， 一种是数字 一种是符号\n# 基本身份 owner/group/others 的各自三种权限\n# read(r 4)/write(w 2)/execute(x 1): -rwxr-xr-- = [4+2+1][4+0+1][4+0+0]=754\nchmod [-R] xyz 文件或目录\n\n# 符号修改权限\nchmod u(user)        +(加入)    r 文件或目录\n      g(group)       -(减去)    w \n      o(others)      =(设定)    x\n      a(all 全部身份)      \n\nchmod u=rwx,g=rx, o=r 文件名\nchmod a-x test1\n```\n\n\n## 图解\n![chmod命令](http://img.nixiaolei.com/2019-04-02-20-47-10.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【Linux】理解chown命令","published":1,"updated":"2019-04-03T13:57:15.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wfu0033ssuwcqwik4sl","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更改文件属组</span></span><br><span class=\"line\">chgrp [-R] 属组名  文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更改文件属主 或 属组</span></span><br><span class=\"line\">chown [-R] 属主名 文件名</span><br><span class=\"line\">chown [-R] 属主名：属组名 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改文件权限 9 个属性</span></span><br><span class=\"line\"><span class=\"comment\"># 有两种设置方式， 一种是数字 一种是符号</span></span><br><span class=\"line\"><span class=\"comment\"># 基本身份 owner/group/others 的各自三种权限</span></span><br><span class=\"line\"><span class=\"comment\"># read(r 4)/write(w 2)/execute(x 1): -rwxr-xr-- = [4+2+1][4+0+1][4+0+0]=754</span></span><br><span class=\"line\">chmod [-R] xyz 文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 符号修改权限</span></span><br><span class=\"line\">chmod u(user)        +(加入)    r 文件或目录</span><br><span class=\"line\">      g(group)       -(减去)    w </span><br><span class=\"line\">      o(others)      =(设定)    x</span><br><span class=\"line\">      a(all 全部身份)      </span><br><span class=\"line\"></span><br><span class=\"line\">chmod u=rwx,g=rx, o=r 文件名</span><br><span class=\"line\">chmod a-x test1</span><br></pre></td></tr></table></figure>\n<h2 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h2><p><img src=\"http://img.nixiaolei.com/2019-04-02-20-47-10.png\" alt=\"chmod命令\"></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更改文件属组</span></span><br><span class=\"line\">chgrp [-R] 属组名  文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更改文件属主 或 属组</span></span><br><span class=\"line\">chown [-R] 属主名 文件名</span><br><span class=\"line\">chown [-R] 属主名：属组名 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改文件权限 9 个属性</span></span><br><span class=\"line\"><span class=\"comment\"># 有两种设置方式， 一种是数字 一种是符号</span></span><br><span class=\"line\"><span class=\"comment\"># 基本身份 owner/group/others 的各自三种权限</span></span><br><span class=\"line\"><span class=\"comment\"># read(r 4)/write(w 2)/execute(x 1): -rwxr-xr-- = [4+2+1][4+0+1][4+0+0]=754</span></span><br><span class=\"line\">chmod [-R] xyz 文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 符号修改权限</span></span><br><span class=\"line\">chmod u(user)        +(加入)    r 文件或目录</span><br><span class=\"line\">      g(group)       -(减去)    w </span><br><span class=\"line\">      o(others)      =(设定)    x</span><br><span class=\"line\">      a(all 全部身份)      </span><br><span class=\"line\"></span><br><span class=\"line\">chmod u=rwx,g=rx, o=r 文件名</span><br><span class=\"line\">chmod a-x test1</span><br></pre></td></tr></table></figure>\n<h2 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h2><p><img src=\"http://img.nixiaolei.com/2019-04-02-20-47-10.png\" alt=\"chmod命令\"></p>\n"},{"title":"【css-doodle】 css web-component入门","date":"2019-03-16T12:36:22.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效\n> https://css-doodle.com/\n\n\n`<css-doodle />`基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。\n该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。\n\n\n\n既然它这么牛逼， 那怎么用呢？\n\n我们一起来搭几个demo\n\n## css-doodle入门\n> 此处用到的语法或api有不了解的 请看页面下方的“释义” 区域\n\n动手过程中需要注意， 不要在`css-doodle`内部写注释， 会导致样式无效\n\n\n首先搭建好运行`css-doodle`的环境\n```HTML\n<!-- 引入CDN -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"></script>\n\n<!-- 页面上加入 css-doodle -->\n\n<css-doodle>\n<!-- 我们将在这里写代码 -->\n</css-doodle>\n```\n\n此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。\n\n现在我们给他加点料。\n\n```HTML\n<css-doodle>\n  width: 100px;\n  height: 100px;\n  background: red;\n</css-doodle>\n```\n\n此时我们再看看页面， 就出现了一个`100 x 100`的红色小方块，\n\n![红色方块](http://img.nixiaolei.com/2019-03-16-21-22-36.png)\n\n\n好，这个相当于hello world 级别的练习就完成了， \n\n\n我们再来点难的：\n\n**我想要一个10 x 10 个的小方块组成的大正方形!**\n\n正好我们可以借此尝试使用一下它提供的API\n\n\n```\n<css-doodle>\n  :doodle {\n    @grid: 10x10 / 500px;\n  }\n  background: #60569e;\n</css-doodle>\n```\n\n出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色\n\n\n![10x10的大正方](http://img.nixiaolei.com/2019-03-16-21-28-29.png)\n\n\n好既然实现了， 那现在需求升级了\n\n**那我要10个长方形怎么办， 并且我还要长短不一的！**\n\n我去，还要长短不一， 咋整呢\n\n别慌\n\n机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数 \n`@index` 严格的来说他会返回当前单元格的索引值\n\n既然有方法了那我们也有思路了， 二话不说开始动手。\n\n```HTML\n<!-- 首先把 10 x 10 小方块变为10个长方形 -->\n<!-- 然后根据 @index 获取当前单元格的索引 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  background: #60569e;\n  @size: calc(@index() * 1vmin);\n</css-doodle>\n<!-- 根据 index 这个索引值乘以高度 -->\n```\n\nduang!\n\n这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了\n\n\n![10个长方形](http://img.nixiaolei.com/2019-03-16-21-45-14.png)\n\n\n我们再给他加上`border-radius: 50%;` 它就变成10个球了\n\n\n![10个球](http://img.nixiaolei.com/2019-03-16-21-50-12.png)\n\n\n此时需求又来了\n\n**甲方：可不可以弄10个光环？还是渐变的那种?**\n\n行吧， 试试喽谁怕谁\n\n我们可以举一反三， 利用`@index`这个好东西来修改`hsla`产生不同的颜色， 当然修改`rgba` 也是可以的\n\n```\n<!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n</css-doodle>\n```\n\n好， 甲方爸爸， 你的需求我做到了\n\n\n\n![渐变光环](http://img.nixiaolei.com/2019-03-16-22-11-38.png)\n\n\n**甲方: 还不够，我要的是同心圆**\n\n我。。。。。\n\n得嘞，您说是啥就是啥\n\n同心圆， 你第一反应想到的是不是使用`position: absolute;` ? \n不 ，那太low 了\n我们只需要 `@place-cell: center;` 这个参数就搞定了， 它会将每个单元格都摆放至中间\n\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n\n  @place-cell: center;\n  <!-- ...省略之前的代码 -->\n</css-doodle>\n```\n然后去看一下效果， 卧槽\n\n![我把背景色调成深色方便大家观看](http://img.nixiaolei.com/2019-03-16-22-20-13.png)\n\n\n\n### 进阶\n基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧\n\n既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下\n\n我们先让光环变粗一点， 让他呈现扇叶的形状\n\n```\nborder-width: calc(@index() * 10px);\n```\n\n\n然后让我们用上 `keyframes` ， 为他添加动画\n\n为每个单元格注册几个css变量（css的新特性），  \n\n* 变量`--speed`控制动画的持续时间，也就是速度。\n* `--start` 控制当前光环的起始角度\n* `--direction`: 控制方向， 因为`turn`表示一圈， 所以 `1turn` 就是正的转一圈,`-1turn` 就是反着转一圈， 利用`@pick`方法来随机取一个值\n\n\n\n\n```HTML\n<css-doodle>\n  <!-- ...省略之前的代码 -->\n\n  <!-- 动画执行时间在20秒 - 40秒之间取值-->\n  --speed: @rand(20s, 40s);\n  <!-- 360度里取随机数 -->\n  --start: @rand(360deg);\n  <!-- 顺时针 或 逆时针 -->\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n\n  animation: demo var(--speed) linear infinite;\n\n  @keyframes demo {\n    form {\n      <!-- 填入起始角度 -->\n      transform: rotate(var(--start));\n    }\n    to {\n      <!-- 随机顺时针和逆时针旋转 -->\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```\n\n看看效果\n\n\n![随机旋转效果](http://img.nixiaolei.com/KUXh4tYGe4.gif)\n\n\n炫酷不？\n\n能不能再酷一点？\n\n可以， 我们再给他添一笔， \n\n给他加上一个自定义的贝塞尔\n\n贝塞尔可以去这个网站，根据需要生成\n> http://cubic-bezier.com/#1,.25,.83,.67\n\n\n![贝塞尔](http://img.nixiaolei.com/2019-03-16-23-11-46.png)\n\n\n\n然后我们你所需要的贝塞尔去更改`animation` 的参数\n```HTML\nanimation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n```\n\n根据贝塞尔曲线完成了加速减速的动画效果\n\n\n![添加了贝塞尔曲线的动画](http://img.nixiaolei.com/ApPKe0brCf.gif )\n\n\n\n😎cool~\n\n还有更多更酷的特效等着大家去探索~\n\n\n\n\n**切记`css-doodle` 中不能写注释，大家拷贝的时候记得删掉**\n\n## 释义\n* `:doodle` 选择器会创建一个`display: grid;` 的布局\n* `@grid`提供布局， 用法为 `@grid: 行 x 列 /  总宽高` \n* `@index` 返回当前单元格的索引\n* `hsla` 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。\n  * H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  * S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  * L：Lightness(亮度)。取值为：0.0% - 100.0%\n  * A：Alpha透明度。取值0~1之间。\n* `@place-cell` 调整单元格相对于网格放置。\n* `@pick`： 从给定列表中随机选择一个值。\n* `turn`: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )\n  * `1turn` 就是1圈\n\n\n\n\n\n\n## 完整的代码\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  @place-cell: center;\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  border-width: calc(@index() * 10px);\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n  --speed: @rand(20s, 40s);\n  --start: @rand(360deg);\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n\n  @keyframes demo {\n    form {\n      transform: rotate(var(--start));\n    }\n    to {\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```","source":"_posts/【css-doodle】css-web-component入门.md","raw":"---\ntitle: 【css-doodle】 css web-component入门\ndate: 2019-03-16 20:36:22\ncategories: CSS\ntags: [css, web-component, 特效]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效\n> https://css-doodle.com/\n\n\n`<css-doodle />`基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。\n该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。\n\n\n\n既然它这么牛逼， 那怎么用呢？\n\n我们一起来搭几个demo\n\n## css-doodle入门\n> 此处用到的语法或api有不了解的 请看页面下方的“释义” 区域\n\n动手过程中需要注意， 不要在`css-doodle`内部写注释， 会导致样式无效\n\n\n首先搭建好运行`css-doodle`的环境\n```HTML\n<!-- 引入CDN -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"></script>\n\n<!-- 页面上加入 css-doodle -->\n\n<css-doodle>\n<!-- 我们将在这里写代码 -->\n</css-doodle>\n```\n\n此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。\n\n现在我们给他加点料。\n\n```HTML\n<css-doodle>\n  width: 100px;\n  height: 100px;\n  background: red;\n</css-doodle>\n```\n\n此时我们再看看页面， 就出现了一个`100 x 100`的红色小方块，\n\n![红色方块](http://img.nixiaolei.com/2019-03-16-21-22-36.png)\n\n\n好，这个相当于hello world 级别的练习就完成了， \n\n\n我们再来点难的：\n\n**我想要一个10 x 10 个的小方块组成的大正方形!**\n\n正好我们可以借此尝试使用一下它提供的API\n\n\n```\n<css-doodle>\n  :doodle {\n    @grid: 10x10 / 500px;\n  }\n  background: #60569e;\n</css-doodle>\n```\n\n出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色\n\n\n![10x10的大正方](http://img.nixiaolei.com/2019-03-16-21-28-29.png)\n\n\n好既然实现了， 那现在需求升级了\n\n**那我要10个长方形怎么办， 并且我还要长短不一的！**\n\n我去，还要长短不一， 咋整呢\n\n别慌\n\n机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数 \n`@index` 严格的来说他会返回当前单元格的索引值\n\n既然有方法了那我们也有思路了， 二话不说开始动手。\n\n```HTML\n<!-- 首先把 10 x 10 小方块变为10个长方形 -->\n<!-- 然后根据 @index 获取当前单元格的索引 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  background: #60569e;\n  @size: calc(@index() * 1vmin);\n</css-doodle>\n<!-- 根据 index 这个索引值乘以高度 -->\n```\n\nduang!\n\n这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了\n\n\n![10个长方形](http://img.nixiaolei.com/2019-03-16-21-45-14.png)\n\n\n我们再给他加上`border-radius: 50%;` 它就变成10个球了\n\n\n![10个球](http://img.nixiaolei.com/2019-03-16-21-50-12.png)\n\n\n此时需求又来了\n\n**甲方：可不可以弄10个光环？还是渐变的那种?**\n\n行吧， 试试喽谁怕谁\n\n我们可以举一反三， 利用`@index`这个好东西来修改`hsla`产生不同的颜色， 当然修改`rgba` 也是可以的\n\n```\n<!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n</css-doodle>\n```\n\n好， 甲方爸爸， 你的需求我做到了\n\n\n\n![渐变光环](http://img.nixiaolei.com/2019-03-16-22-11-38.png)\n\n\n**甲方: 还不够，我要的是同心圆**\n\n我。。。。。\n\n得嘞，您说是啥就是啥\n\n同心圆， 你第一反应想到的是不是使用`position: absolute;` ? \n不 ，那太low 了\n我们只需要 `@place-cell: center;` 这个参数就搞定了， 它会将每个单元格都摆放至中间\n\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n\n  @place-cell: center;\n  <!-- ...省略之前的代码 -->\n</css-doodle>\n```\n然后去看一下效果， 卧槽\n\n![我把背景色调成深色方便大家观看](http://img.nixiaolei.com/2019-03-16-22-20-13.png)\n\n\n\n### 进阶\n基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧\n\n既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下\n\n我们先让光环变粗一点， 让他呈现扇叶的形状\n\n```\nborder-width: calc(@index() * 10px);\n```\n\n\n然后让我们用上 `keyframes` ， 为他添加动画\n\n为每个单元格注册几个css变量（css的新特性），  \n\n* 变量`--speed`控制动画的持续时间，也就是速度。\n* `--start` 控制当前光环的起始角度\n* `--direction`: 控制方向， 因为`turn`表示一圈， 所以 `1turn` 就是正的转一圈,`-1turn` 就是反着转一圈， 利用`@pick`方法来随机取一个值\n\n\n\n\n```HTML\n<css-doodle>\n  <!-- ...省略之前的代码 -->\n\n  <!-- 动画执行时间在20秒 - 40秒之间取值-->\n  --speed: @rand(20s, 40s);\n  <!-- 360度里取随机数 -->\n  --start: @rand(360deg);\n  <!-- 顺时针 或 逆时针 -->\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n\n  animation: demo var(--speed) linear infinite;\n\n  @keyframes demo {\n    form {\n      <!-- 填入起始角度 -->\n      transform: rotate(var(--start));\n    }\n    to {\n      <!-- 随机顺时针和逆时针旋转 -->\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```\n\n看看效果\n\n\n![随机旋转效果](http://img.nixiaolei.com/KUXh4tYGe4.gif)\n\n\n炫酷不？\n\n能不能再酷一点？\n\n可以， 我们再给他添一笔， \n\n给他加上一个自定义的贝塞尔\n\n贝塞尔可以去这个网站，根据需要生成\n> http://cubic-bezier.com/#1,.25,.83,.67\n\n\n![贝塞尔](http://img.nixiaolei.com/2019-03-16-23-11-46.png)\n\n\n\n然后我们你所需要的贝塞尔去更改`animation` 的参数\n```HTML\nanimation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n```\n\n根据贝塞尔曲线完成了加速减速的动画效果\n\n\n![添加了贝塞尔曲线的动画](http://img.nixiaolei.com/ApPKe0brCf.gif )\n\n\n\n😎cool~\n\n还有更多更酷的特效等着大家去探索~\n\n\n\n\n**切记`css-doodle` 中不能写注释，大家拷贝的时候记得删掉**\n\n## 释义\n* `:doodle` 选择器会创建一个`display: grid;` 的布局\n* `@grid`提供布局， 用法为 `@grid: 行 x 列 /  总宽高` \n* `@index` 返回当前单元格的索引\n* `hsla` 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。\n  * H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  * S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  * L：Lightness(亮度)。取值为：0.0% - 100.0%\n  * A：Alpha透明度。取值0~1之间。\n* `@place-cell` 调整单元格相对于网格放置。\n* `@pick`： 从给定列表中随机选择一个值。\n* `turn`: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )\n  * `1turn` 就是1圈\n\n\n\n\n\n\n## 完整的代码\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  @place-cell: center;\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  border-width: calc(@index() * 10px);\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n  --speed: @rand(20s, 40s);\n  --start: @rand(360deg);\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n\n  @keyframes demo {\n    form {\n      transform: rotate(var(--start));\n    }\n    to {\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```","slug":"【css-doodle】css-web-component入门","published":1,"updated":"2019-03-22T13:49:25.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wfy0036ssuw690njioj","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效</p>\n<blockquote>\n<p><a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"noopener\">https://css-doodle.com/</a></p>\n</blockquote>\n<p><code>&lt;css-doodle /&gt;</code>基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。<br>该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。</p>\n<p>既然它这么牛逼， 那怎么用呢？</p>\n<p>我们一起来搭几个demo</p>\n<h2 id=\"css-doodle入门\"><a href=\"#css-doodle入门\" class=\"headerlink\" title=\"css-doodle入门\"></a>css-doodle入门</h2><blockquote>\n<p>此处用到的语法或api有不了解的 请看页面下方的“释义” 区域</p>\n</blockquote>\n<p>动手过程中需要注意， 不要在<code>css-doodle</code>内部写注释， 会导致样式无效</p>\n<p>首先搭建好运行<code>css-doodle</code>的环境<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入CDN --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面上加入 css-doodle --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 我们将在这里写代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。</p>\n<p>现在我们给他加点料。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时我们再看看页面， 就出现了一个<code>100 x 100</code>的红色小方块，</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-22-36.png\" alt=\"红色方块\"></p>\n<p>好，这个相当于hello world 级别的练习就完成了， </p>\n<p>我们再来点难的：</p>\n<p><strong>我想要一个10 x 10 个的小方块组成的大正方形!</strong></p>\n<p>正好我们可以借此尝试使用一下它提供的API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;css-doodle&gt;</span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 10x10 / 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  background: #60569e;</span><br><span class=\"line\">&lt;/css-doodle&gt;</span><br></pre></td></tr></table></figure>\n<p>出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-28-29.png\" alt=\"10x10的大正方\"></p>\n<p>好既然实现了， 那现在需求升级了</p>\n<p><strong>那我要10个长方形怎么办， 并且我还要长短不一的！</strong></p>\n<p>我去，还要长短不一， 咋整呢</p>\n<p>别慌</p>\n<p>机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数<br><code>@index</code> 严格的来说他会返回当前单元格的索引值</p>\n<p>既然有方法了那我们也有思路了， 二话不说开始动手。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 首先把 10 x 10 小方块变为10个长方形 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 然后根据 @index 获取当前单元格的索引 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  background: #60569e;</span><br><span class=\"line\">  @size: calc(@index() * 1vmin);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 根据 index 这个索引值乘以高度 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>duang!</p>\n<p>这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-45-14.png\" alt=\"10个长方形\"></p>\n<p>我们再给他加上<code>border-radius: 50%;</code> 它就变成10个球了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-50-12.png\" alt=\"10个球\"></p>\n<p>此时需求又来了</p>\n<p><strong>甲方：可不可以弄10个光环？还是渐变的那种?</strong></p>\n<p>行吧， 试试喽谁怕谁</p>\n<p>我们可以举一反三， 利用<code>@index</code>这个好东西来修改<code>hsla</code>产生不同的颜色， 当然修改<code>rgba</code> 也是可以的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 --&gt;</span><br><span class=\"line\">&lt;css-doodle&gt;</span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  border-color: hsla(</span><br><span class=\"line\">    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  @size: calc(@index() * 10%);</span><br><span class=\"line\">  border-style: dashed;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">&lt;/css-doodle&gt;</span><br></pre></td></tr></table></figure>\n<p>好， 甲方爸爸， 你的需求我做到了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-22-11-38.png\" alt=\"渐变光环\"></p>\n<p><strong>甲方: 还不够，我要的是同心圆</strong></p>\n<p>我。。。。。</p>\n<p>得嘞，您说是啥就是啥</p>\n<p>同心圆， 你第一反应想到的是不是使用<code>position: absolute;</code> ?<br>不 ，那太low 了<br>我们只需要 <code>@place-cell: center;</code> 这个参数就搞定了， 它会将每个单元格都摆放至中间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @place-cell: center;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- ...省略之前的代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后去看一下效果， 卧槽</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-22-20-13.png\" alt=\"我把背景色调成深色方便大家观看\"></p>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><p>基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧</p>\n<p>既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下</p>\n<p>我们先让光环变粗一点， 让他呈现扇叶的形状</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-width: calc(@index() * 10px);</span><br></pre></td></tr></table></figure>\n<p>然后让我们用上 <code>keyframes</code> ， 为他添加动画</p>\n<p>为每个单元格注册几个css变量（css的新特性），  </p>\n<ul>\n<li>变量<code>--speed</code>控制动画的持续时间，也就是速度。</li>\n<li><code>--start</code> 控制当前光环的起始角度</li>\n<li><code>--direction</code>: 控制方向， 因为<code>turn</code>表示一圈， 所以 <code>1turn</code> 就是正的转一圈,<code>-1turn</code> 就是反着转一圈， 利用<code>@pick</code>方法来随机取一个值</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- ...省略之前的代码 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 动画执行时间在20秒 - 40秒之间取值--&gt;</span></span><br><span class=\"line\">  --speed: @rand(20s, 40s);</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 360度里取随机数 --&gt;</span></span><br><span class=\"line\">  --start: @rand(360deg);</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 顺时针 或 逆时针 --&gt;</span></span><br><span class=\"line\">  --direction: calc(var(--start) + @pick(1turn, -1turn));</span><br><span class=\"line\"></span><br><span class=\"line\">  animation: demo var(--speed) linear infinite;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes demo &#123;</span><br><span class=\"line\">    form &#123;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 填入起始角度 --&gt;</span></span><br><span class=\"line\">      transform: rotate(var(--start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 随机顺时针和逆时针旋转 --&gt;</span></span><br><span class=\"line\">      transform: rotate(var(--direction));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看看效果</p>\n<p><img src=\"http://img.nixiaolei.com/KUXh4tYGe4.gif\" alt=\"随机旋转效果\"></p>\n<p>炫酷不？</p>\n<p>能不能再酷一点？</p>\n<p>可以， 我们再给他添一笔， </p>\n<p>给他加上一个自定义的贝塞尔</p>\n<p>贝塞尔可以去这个网站，根据需要生成</p>\n<blockquote>\n<p><a href=\"http://cubic-bezier.com/#1,.25,.83,.67\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com/#1,.25,.83,.67</a></p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-23-11-46.png\" alt=\"贝塞尔\"></p>\n<p>然后我们你所需要的贝塞尔去更改<code>animation</code> 的参数<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;</span><br></pre></td></tr></table></figure></p>\n<p>根据贝塞尔曲线完成了加速减速的动画效果</p>\n<p><img src=\"http://img.nixiaolei.com/ApPKe0brCf.gif\" alt=\"添加了贝塞尔曲线的动画\"></p>\n<p>😎cool~</p>\n<p>还有更多更酷的特效等着大家去探索~</p>\n<p><strong>切记<code>css-doodle</code> 中不能写注释，大家拷贝的时候记得删掉</strong></p>\n<h2 id=\"释义\"><a href=\"#释义\" class=\"headerlink\" title=\"释义\"></a>释义</h2><ul>\n<li><code>:doodle</code> 选择器会创建一个<code>display: grid;</code> 的布局</li>\n<li><code>@grid</code>提供布局， 用法为 <code>@grid: 行 x 列 /  总宽高</code> </li>\n<li><code>@index</code> 返回当前单元格的索引</li>\n<li><code>hsla</code> 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。<ul>\n<li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li>\n<li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li>\n<li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li>\n<li>A：Alpha透明度。取值0~1之间。</li>\n</ul>\n</li>\n<li><code>@place-cell</code> 调整单元格相对于网格放置。</li>\n<li><code>@pick</code>： 从给定列表中随机选择一个值。</li>\n<li><code>turn</code>: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )<ul>\n<li><code>1turn</code> 就是1圈</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"完整的代码\"><a href=\"#完整的代码\" class=\"headerlink\" title=\"完整的代码\"></a>完整的代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @place-cell: center;</span><br><span class=\"line\">  border-color: hsla(</span><br><span class=\"line\">    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  border-width: calc(@index() * 10px);</span><br><span class=\"line\">  @size: calc(@index() * 10%);</span><br><span class=\"line\">  border-style: dashed;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">  --speed: @rand(20s, 40s);</span><br><span class=\"line\">  --start: @rand(360deg);</span><br><span class=\"line\">  --direction: calc(var(--start) + @pick(1turn, -1turn));</span><br><span class=\"line\">  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes demo &#123;</span><br><span class=\"line\">    form &#123;</span><br><span class=\"line\">      transform: rotate(var(--start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">      transform: rotate(var(--direction));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效</p>\n<blockquote>\n<p><a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"noopener\">https://css-doodle.com/</a></p>\n</blockquote>\n<p><code>&lt;css-doodle /&gt;</code>基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。<br>该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。</p>\n<p>既然它这么牛逼， 那怎么用呢？</p>\n<p>我们一起来搭几个demo</p>\n<h2 id=\"css-doodle入门\"><a href=\"#css-doodle入门\" class=\"headerlink\" title=\"css-doodle入门\"></a>css-doodle入门</h2><blockquote>\n<p>此处用到的语法或api有不了解的 请看页面下方的“释义” 区域</p>\n</blockquote>\n<p>动手过程中需要注意， 不要在<code>css-doodle</code>内部写注释， 会导致样式无效</p>\n<p>首先搭建好运行<code>css-doodle</code>的环境<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入CDN --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面上加入 css-doodle --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 我们将在这里写代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。</p>\n<p>现在我们给他加点料。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时我们再看看页面， 就出现了一个<code>100 x 100</code>的红色小方块，</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-22-36.png\" alt=\"红色方块\"></p>\n<p>好，这个相当于hello world 级别的练习就完成了， </p>\n<p>我们再来点难的：</p>\n<p><strong>我想要一个10 x 10 个的小方块组成的大正方形!</strong></p>\n<p>正好我们可以借此尝试使用一下它提供的API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;css-doodle&gt;</span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 10x10 / 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  background: #60569e;</span><br><span class=\"line\">&lt;/css-doodle&gt;</span><br></pre></td></tr></table></figure>\n<p>出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-28-29.png\" alt=\"10x10的大正方\"></p>\n<p>好既然实现了， 那现在需求升级了</p>\n<p><strong>那我要10个长方形怎么办， 并且我还要长短不一的！</strong></p>\n<p>我去，还要长短不一， 咋整呢</p>\n<p>别慌</p>\n<p>机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数<br><code>@index</code> 严格的来说他会返回当前单元格的索引值</p>\n<p>既然有方法了那我们也有思路了， 二话不说开始动手。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 首先把 10 x 10 小方块变为10个长方形 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 然后根据 @index 获取当前单元格的索引 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  background: #60569e;</span><br><span class=\"line\">  @size: calc(@index() * 1vmin);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 根据 index 这个索引值乘以高度 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>duang!</p>\n<p>这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-45-14.png\" alt=\"10个长方形\"></p>\n<p>我们再给他加上<code>border-radius: 50%;</code> 它就变成10个球了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-21-50-12.png\" alt=\"10个球\"></p>\n<p>此时需求又来了</p>\n<p><strong>甲方：可不可以弄10个光环？还是渐变的那种?</strong></p>\n<p>行吧， 试试喽谁怕谁</p>\n<p>我们可以举一反三， 利用<code>@index</code>这个好东西来修改<code>hsla</code>产生不同的颜色， 当然修改<code>rgba</code> 也是可以的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 --&gt;</span><br><span class=\"line\">&lt;css-doodle&gt;</span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  border-color: hsla(</span><br><span class=\"line\">    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  @size: calc(@index() * 10%);</span><br><span class=\"line\">  border-style: dashed;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">&lt;/css-doodle&gt;</span><br></pre></td></tr></table></figure>\n<p>好， 甲方爸爸， 你的需求我做到了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-22-11-38.png\" alt=\"渐变光环\"></p>\n<p><strong>甲方: 还不够，我要的是同心圆</strong></p>\n<p>我。。。。。</p>\n<p>得嘞，您说是啥就是啥</p>\n<p>同心圆， 你第一反应想到的是不是使用<code>position: absolute;</code> ?<br>不 ，那太low 了<br>我们只需要 <code>@place-cell: center;</code> 这个参数就搞定了， 它会将每个单元格都摆放至中间</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @place-cell: center;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- ...省略之前的代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后去看一下效果， 卧槽</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-22-20-13.png\" alt=\"我把背景色调成深色方便大家观看\"></p>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><p>基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧</p>\n<p>既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下</p>\n<p>我们先让光环变粗一点， 让他呈现扇叶的形状</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-width: calc(@index() * 10px);</span><br></pre></td></tr></table></figure>\n<p>然后让我们用上 <code>keyframes</code> ， 为他添加动画</p>\n<p>为每个单元格注册几个css变量（css的新特性），  </p>\n<ul>\n<li>变量<code>--speed</code>控制动画的持续时间，也就是速度。</li>\n<li><code>--start</code> 控制当前光环的起始角度</li>\n<li><code>--direction</code>: 控制方向， 因为<code>turn</code>表示一圈， 所以 <code>1turn</code> 就是正的转一圈,<code>-1turn</code> 就是反着转一圈， 利用<code>@pick</code>方法来随机取一个值</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- ...省略之前的代码 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 动画执行时间在20秒 - 40秒之间取值--&gt;</span></span><br><span class=\"line\">  --speed: @rand(20s, 40s);</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 360度里取随机数 --&gt;</span></span><br><span class=\"line\">  --start: @rand(360deg);</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 顺时针 或 逆时针 --&gt;</span></span><br><span class=\"line\">  --direction: calc(var(--start) + @pick(1turn, -1turn));</span><br><span class=\"line\"></span><br><span class=\"line\">  animation: demo var(--speed) linear infinite;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes demo &#123;</span><br><span class=\"line\">    form &#123;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 填入起始角度 --&gt;</span></span><br><span class=\"line\">      transform: rotate(var(--start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 随机顺时针和逆时针旋转 --&gt;</span></span><br><span class=\"line\">      transform: rotate(var(--direction));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看看效果</p>\n<p><img src=\"http://img.nixiaolei.com/KUXh4tYGe4.gif\" alt=\"随机旋转效果\"></p>\n<p>炫酷不？</p>\n<p>能不能再酷一点？</p>\n<p>可以， 我们再给他添一笔， </p>\n<p>给他加上一个自定义的贝塞尔</p>\n<p>贝塞尔可以去这个网站，根据需要生成</p>\n<blockquote>\n<p><a href=\"http://cubic-bezier.com/#1,.25,.83,.67\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com/#1,.25,.83,.67</a></p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-23-11-46.png\" alt=\"贝塞尔\"></p>\n<p>然后我们你所需要的贝塞尔去更改<code>animation</code> 的参数<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;</span><br></pre></td></tr></table></figure></p>\n<p>根据贝塞尔曲线完成了加速减速的动画效果</p>\n<p><img src=\"http://img.nixiaolei.com/ApPKe0brCf.gif\" alt=\"添加了贝塞尔曲线的动画\"></p>\n<p>😎cool~</p>\n<p>还有更多更酷的特效等着大家去探索~</p>\n<p><strong>切记<code>css-doodle</code> 中不能写注释，大家拷贝的时候记得删掉</strong></p>\n<h2 id=\"释义\"><a href=\"#释义\" class=\"headerlink\" title=\"释义\"></a>释义</h2><ul>\n<li><code>:doodle</code> 选择器会创建一个<code>display: grid;</code> 的布局</li>\n<li><code>@grid</code>提供布局， 用法为 <code>@grid: 行 x 列 /  总宽高</code> </li>\n<li><code>@index</code> 返回当前单元格的索引</li>\n<li><code>hsla</code> 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。<ul>\n<li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li>\n<li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li>\n<li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li>\n<li>A：Alpha透明度。取值0~1之间。</li>\n</ul>\n</li>\n<li><code>@place-cell</code> 调整单元格相对于网格放置。</li>\n<li><code>@pick</code>： 从给定列表中随机选择一个值。</li>\n<li><code>turn</code>: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )<ul>\n<li><code>1turn</code> 就是1圈</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"完整的代码\"><a href=\"#完整的代码\" class=\"headerlink\" title=\"完整的代码\"></a>完整的代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">css-doodle</span>&gt;</span></span><br><span class=\"line\">  :doodle &#123;</span><br><span class=\"line\">    @grid: 1x10 / 61.8vmin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @place-cell: center;</span><br><span class=\"line\">  border-color: hsla(</span><br><span class=\"line\">    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  border-width: calc(@index() * 10px);</span><br><span class=\"line\">  @size: calc(@index() * 10%);</span><br><span class=\"line\">  border-style: dashed;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">  --speed: @rand(20s, 40s);</span><br><span class=\"line\">  --start: @rand(360deg);</span><br><span class=\"line\">  --direction: calc(var(--start) + @pick(1turn, -1turn));</span><br><span class=\"line\">  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;</span><br><span class=\"line\"></span><br><span class=\"line\">  @keyframes demo &#123;</span><br><span class=\"line\">    form &#123;</span><br><span class=\"line\">      transform: rotate(var(--start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">      transform: rotate(var(--direction));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">css-doodle</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"简单理解破解与脱壳","date":"2019-03-28T07:41:01.000Z","_content":"\n## 什么是壳\n想要破解别人的程序， 必然要对别人代码进行分析， 分析手段无非两种:\n1. 静态分析\n2. 动态分析\n\n利用动态分析就可以绕过类似注册码的步骤\n\n如何避免别人通过分析绕过注册码等步骤呢， 就需要对程序加一层壳， \n\n当你程序在载入到内存的时候， 要先去检查一下环境，看看自身是否跑在调试器的环境里， 如果在调试器的环境，就要把调试器的环境破坏掉，不让你进行动态分析，\n\n这就是加壳的一种手段\n\n\n或者还有其他的手段， 例如，把真正的程序压缩到其他地方， 当启动`exe`程序时再将真正的程序解压缩， 用来防止动态分析\n\n\n\n> 脱壳就是扒掉这层防护\n\n\n\n### 静态分析\n静态分析就是直接去看别人的源代码， 当然别人写的C的源代码你是看不到的， 必须进行反编译， 但是反编译也不是那么的完美， 无法恢复回原来的样子， 会非常难以理解。\n\n### 动态分析\n类似于`debugger`, 借助调试器，  可以看到代码的当前执行状况， 跳转地址、内存当中的状态\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/简单理解破解与脱壳.md","raw":"---\ntitle: 简单理解破解与脱壳\ndate: 2019-03-28 15:41:01\ncategories: 计算机基础\ntags: [计算机基础, 破解]\n---\n\n## 什么是壳\n想要破解别人的程序， 必然要对别人代码进行分析， 分析手段无非两种:\n1. 静态分析\n2. 动态分析\n\n利用动态分析就可以绕过类似注册码的步骤\n\n如何避免别人通过分析绕过注册码等步骤呢， 就需要对程序加一层壳， \n\n当你程序在载入到内存的时候， 要先去检查一下环境，看看自身是否跑在调试器的环境里， 如果在调试器的环境，就要把调试器的环境破坏掉，不让你进行动态分析，\n\n这就是加壳的一种手段\n\n\n或者还有其他的手段， 例如，把真正的程序压缩到其他地方， 当启动`exe`程序时再将真正的程序解压缩， 用来防止动态分析\n\n\n\n> 脱壳就是扒掉这层防护\n\n\n\n### 静态分析\n静态分析就是直接去看别人的源代码， 当然别人写的C的源代码你是看不到的， 必须进行反编译， 但是反编译也不是那么的完美， 无法恢复回原来的样子， 会非常难以理解。\n\n### 动态分析\n类似于`debugger`, 借助调试器，  可以看到代码的当前执行状况， 跳转地址、内存当中的状态\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"简单理解破解与脱壳","published":1,"updated":"2019-04-06T07:59:31.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wg8003bssuwiomcphz1","content":"<h2 id=\"什么是壳\"><a href=\"#什么是壳\" class=\"headerlink\" title=\"什么是壳\"></a>什么是壳</h2><p>想要破解别人的程序， 必然要对别人代码进行分析， 分析手段无非两种:</p>\n<ol>\n<li>静态分析</li>\n<li>动态分析</li>\n</ol>\n<p>利用动态分析就可以绕过类似注册码的步骤</p>\n<p>如何避免别人通过分析绕过注册码等步骤呢， 就需要对程序加一层壳， </p>\n<p>当你程序在载入到内存的时候， 要先去检查一下环境，看看自身是否跑在调试器的环境里， 如果在调试器的环境，就要把调试器的环境破坏掉，不让你进行动态分析，</p>\n<p>这就是加壳的一种手段</p>\n<p>或者还有其他的手段， 例如，把真正的程序压缩到其他地方， 当启动<code>exe</code>程序时再将真正的程序解压缩， 用来防止动态分析</p>\n<blockquote>\n<p>脱壳就是扒掉这层防护</p>\n</blockquote>\n<h3 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h3><p>静态分析就是直接去看别人的源代码， 当然别人写的C的源代码你是看不到的， 必须进行反编译， 但是反编译也不是那么的完美， 无法恢复回原来的样子， 会非常难以理解。</p>\n<h3 id=\"动态分析\"><a href=\"#动态分析\" class=\"headerlink\" title=\"动态分析\"></a>动态分析</h3><p>类似于<code>debugger</code>, 借助调试器，  可以看到代码的当前执行状况， 跳转地址、内存当中的状态</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是壳\"><a href=\"#什么是壳\" class=\"headerlink\" title=\"什么是壳\"></a>什么是壳</h2><p>想要破解别人的程序， 必然要对别人代码进行分析， 分析手段无非两种:</p>\n<ol>\n<li>静态分析</li>\n<li>动态分析</li>\n</ol>\n<p>利用动态分析就可以绕过类似注册码的步骤</p>\n<p>如何避免别人通过分析绕过注册码等步骤呢， 就需要对程序加一层壳， </p>\n<p>当你程序在载入到内存的时候， 要先去检查一下环境，看看自身是否跑在调试器的环境里， 如果在调试器的环境，就要把调试器的环境破坏掉，不让你进行动态分析，</p>\n<p>这就是加壳的一种手段</p>\n<p>或者还有其他的手段， 例如，把真正的程序压缩到其他地方， 当启动<code>exe</code>程序时再将真正的程序解压缩， 用来防止动态分析</p>\n<blockquote>\n<p>脱壳就是扒掉这层防护</p>\n</blockquote>\n<h3 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h3><p>静态分析就是直接去看别人的源代码， 当然别人写的C的源代码你是看不到的， 必须进行反编译， 但是反编译也不是那么的完美， 无法恢复回原来的样子， 会非常难以理解。</p>\n<h3 id=\"动态分析\"><a href=\"#动态分析\" class=\"headerlink\" title=\"动态分析\"></a>动态分析</h3><p>类似于<code>debugger</code>, 借助调试器，  可以看到代码的当前执行状况， 跳转地址、内存当中的状态</p>\n"},{"title":"JavaScript事件机制","date":"2019-03-26T15:20:40.000Z","_content":"\n\n首先我们都知道JavaScript是单线程的， 当然现在浏览器中 HTML5 为我们提供了`Web-Worker`, 但JavaScript本质上还是一门单线程的语言，\n\n这也是为了保持JavaScript 的简单易学，并且这也和DOM有关，因为如果 JavaScript 是多线程的， 一个县城增加了 DOM，一个删除了DOM， 那该听哪个线程的\n\n所以JavaScript 放弃了多线程\n\n\n\n\n\n\n## 事件机制\n\n单线程当遇到比较费事的操作带来的后果就是浏览器卡死， 那怎么办？\n为了应对这些问题， JavaScript将事件分为了\n\n* 同步任务\n* 异步任务\n\n\n\n所有的事件任务都被加入到栈内,  栈的特点是先入后出， 如下图\n\n![js事件执行栈](http://img.nixiaolei.com/js-stack.gif)\n\n看图中， 最开始调用的函数被压在了最下面， 直到最后才出栈\n\n当我们递归书写不规范时， 就会撑爆函数的执行栈， 也就是`爆栈`\n\n\n\n\n\n## 微任务与宏任务的区别\n\n我们可以把事件处理机制想象成银行柜台的柜员， 柜员每次只能处理接待一个客户， 就和JS一样是单线程的， 每一次的事件循环就是一个来办理业务的客户， 这个客户就是宏任务， \n\n当前的客户结束之后， 柜员叫号，继续接待下一个客户， 也就是开始下一个宏任务\n\n能进入任务队列的都是已完成的异步操作， 当你注册了异步事件，但还未完成， 就好比你取了排队的票子， 但是人离开了，有可能先去吃饭，有可能先去逛街， 于是当轮到你的号码时， 银行柜员会先跳过你， 当你回来时， 你依旧需要重新排队\n\n在宏任务期间， 可以追加微任务的， 或者说微任务是可以插队的，  就像在柜台办理业务中， 一位大爷在办完自己的本来的业务后，  柜员通常都会问还有什么需要办理的业务， 这时老大爷想了一下：“最近P2P爆雷有点儿多，是不是要选择稳一些的理财呢”，然后告诉柜员说，要办一些理财的业务，这时候柜员肯定不能告诉老大爷说：“您再上后边取个号去，重新排队”。 \n\n所以本来快轮到你来办理业务，会因为老大爷临时添加的“理财业务”而往后推。 \n也许老大爷在办完理财以后还想 再办一个信用卡？或者 再买点儿纪念币？ \n无论是什么需求，只要是柜员能够帮她办理的，都会在处理你的业务之前来做这些事情，这些都可以认为是微任务。\n\n所以\n**在当前的微任务没有执行完成时，是不会执行下一个宏任务的**\n\n\n\n### 优先级\n\n不管是微任务还是宏任务， 都是异步任务， 当他们的事件处理完成后， 最终都是要归回到同步事件队列处理的， 也就是主进程， \n\n\n既然是主进程，主进程又要负责浏览器的渲染， 那这三者之间的优先级是什么呢\n\n\n因为微任务实际上是宏任务的其中一个步骤， 也就是下一次的宏任务到来之前必然得先执行完当前的宏任务的微任务, 所以可以这么看:\n> 浏览器渲染 > 微任务 > 宏任务\n\n微任务会插队， 插入每一次的执行栈末尾， 宏任务比较可怜， 只要存在微任务，就会被插队，顺序就会往后\n\n\n***\n\n看下图， 我们可以理解微任务和微任务分别维护着一个队列， 微任务的箭头指向靠前， 表示微任务会优先于宏任务加入事件队列，  宏任务会延迟加入\n\n理论上UI渲染的优先级是比较高的， 但实际上如果你的微任务或宏任务之内， 出现了死循环或大量计算的情况， UI渲染就会被阻塞住， 无法进行，也就是页面卡死状态， 毕竟js单线程\n\n\n![事件关系](http://img.nixiaolei.com/2019-03-29-22-31-43.png)\n\n\n\n\n## EventLoop\n\n每办理完一个业务，柜员就会问当前的客户，是否还有其他需要办理的业务。_（检查还有没有微任务需要处理）_ \n而客户明确告知说没有事情以后，柜员就去查看后边还有没有等着办理业务的人。_（结束本次宏任务、检查还有没有宏任务需要处理）_ \n这个检查的过程是持续进行的，每完成一个任务都会进行一次，而这样的操作就被称为Event Loop。_(这是个非常简易的描述了，实际上会复杂很多)_\n\n而且就如同上边所说的，一个柜员同一时间只能处理一件事情，即便这些事情是一个客户所提出的，所以可以认为微任务也存在一个队列，大致是这样的一个逻辑：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 宏任务例子\n| API        | 浏览器    |  Node  |\n| --------   | :-----:   | :----: |\n| I/O      | ✅     |  ✅  |\n| setTimeout        | ✅     |   ✅    |\n| setInterval        | ✅      |  ✅  |\n| setImmediate        |❌     |  ✅    |\n| requestAnimationFrame        | ✅     |  ❌  |\n\n\nI/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。\n\n\n有些地方会列出来UI Rendering，说这个也是宏任务，可是在读了[HTML规范文档](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model)以后，发现这很显然是和微任务平行的一个操作步骤 \n\n\n\nrequestAnimationFrame姑且也算是宏任务吧，requestAnimationFrame在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)的定义为，下次页面重绘前所执行的操作，而重绘也是作为宏任务的一个步骤来存在的，且该步骤晚于微任务的执行\n\n\n\n\n### 微任务例子\n| API        | 浏览器    |  Node  |\n| --------   | :-----:   | :----: |\n| process.nextTick      | ❌     |  ✅  |\n| MutationObserver        | ✅     |  ❌   |\n| Promise.then catch finally       | ✅      |  ✅  |\n| MessageChannel 消息队列    |      |    |\n\n\n\n## 浏览器中的情况\n\n在上边简单的说明了两种任务的差别，以及Event Loop的作用，那么在真实的浏览器中是什么表现呢？ \n首先要明确的一点是，宏任务必然是在微任务之后才执行的（因为微任务实际上是宏任务的其中一个步骤）\n\nI/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。\n\n假设有这样的一些DOM结构：\n```HTML\n<style>\n  #outer {\n    padding: 20px;\n    background: #616161;\n  }\n\n  #inner {\n    width: 100px;\n    height: 100px;\n    background: #757575;\n  }\n</style>\n<div id=\"outer\">\n  <div id=\"inner\"></div>\n</div>\n```\n\n```JavaScript\nconst $inner = document.querySelector('#inner')\nconst $outer = document.querySelector('#outer')\n\nfunction handler () {\n  console.log('click') // 直接输出\n\n  Promise.resolve().then(_ => console.log('promise')) // 注册微任务\n\n  setTimeout(_ => console.log('timeout')) // 注册宏任务\n\n  requestAnimationFrame(_ => console.log('animationFrame')) // 注册宏任务\n\n  $outer.setAttribute('data-random', Math.random()) // DOM属性修改，触发微任务\n}\n\nnew MutationObserver(_ => {\n  console.log('observer')\n}).observe($outer, {\n  attributes: true\n})\n\n$inner.addEventListener('click', handler)\n$outer.addEventListener('click', handler)\n\n```\n\n如果点击#inner，其执行顺序一定是：click -> promise -> observer -> click -> promise -> observer -> animationFrame -> animationFrame -> timeout -> timeout。\n\n因为一次I/O创建了一个宏任务，也就是说在这次任务中会去触发handler。 \n按照代码中的注释，在同步的代码已经执行完以后，这时就会去查看是否有微任务可以执行，然后发现了Promise和MutationObserver两个微任务，遂执行之。 \n因为click事件会冒泡，所以对应的这次I/O会触发两次handler函数(_一次在inner、一次在outer_)，所以会优先执行冒泡的事件(_早于其他的宏任务_)，也就是说会重复上述的逻辑。 \n在执行完同步代码与微任务以后，这时继续向后查找有木有宏任务。 \n需要注意的一点是，因为我们触发了setAttribute，实际上修改了DOM的属性，这会导致页面的重绘，而这个set的操作是同步执行的，也就是说requestAnimationFrame的回调会早于setTimeout所执行。\n\n\n## Node Js中的情况\nNode也是单线程，但是在处理Event Loop上与浏览器稍微有些不同，这里是[Node官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained)的地址。\n\n\n就单从API层面上来理解，Node新增了两个方法可以用来使用：微任务的process.nextTick以及宏任务的setImmediate。\n\n\n### 几个特殊的API\n1. SetTimeout和SetInterval 线程池不参与\n2. process.nextTick() 实现类似SetTimeout(function(){},0);每次调用放入队列中，在下一轮循环中取出。\n3. setImmediate();比process.nextTick()优先级低\n\n\n来看看这段代码\n\n```JavaScript\nsetTimeout(() => {\n  console.log(1)\n}, 0)\n\nsetImmediate(() => {\n  console.log(2)\n})\n\nprocess.nextTick(() => {\n  console.log(3)\n})\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(4)\n}).then(() => {\n  console.log(5)\n})\n\nconsole.log(6)\n```\n\n这道题目的答案是 463512\n\n这里有几个注意点， 第一就是 nextTick ，它的优先级比 promise.then 要高， 如下图， 它加入队列的方式属于插队行为, 它直接加入到了当前执行栈（同步队列）与 下一次的等待执行栈之间\n\n![nextTick](http://img.nixiaolei.com/2019-03-29-22-45-02.png)\n\n\n我们都知道 then 比 setTimeout 优先级高\n\n然后就是 setTimeout 和 setImmediate 的问题了，\n\nsetImmediate与setTimeout的区别，在官方文档中的定义，setImmediate为一次Event Loop执行完毕后调用。 setTimeout则是通过计算一个延迟时间后进行执行。\n\n但是在实际使用中， 当setTimeout 设置为0时， 他们都是放在队列最后,  所以执行顺序就是谁先写就先执行谁了， 但当setTimeout 设置的时间大于0 时（最低延迟会被忽略）， 情况就不一样了， setTmmediate 会先被执行\n\n![setImmediate](http://img.nixiaolei.com/2019-03-29-22-45-25.png)\n\n\n\n\n参考文献(原文写的不错， 所以我大部分是复制，方便之后自己回顾理解)\n* https://segmentfault.com/a/1190000016022069\n\n\n\n\n\n\n\n\n","source":"_posts/JavaScript事件机制.md","raw":"---\ntitle: JavaScript事件机制\ndate: 2019-03-26 23:20:40\ncategories: JavaScript\ntags: JavaScript\n---\n\n\n首先我们都知道JavaScript是单线程的， 当然现在浏览器中 HTML5 为我们提供了`Web-Worker`, 但JavaScript本质上还是一门单线程的语言，\n\n这也是为了保持JavaScript 的简单易学，并且这也和DOM有关，因为如果 JavaScript 是多线程的， 一个县城增加了 DOM，一个删除了DOM， 那该听哪个线程的\n\n所以JavaScript 放弃了多线程\n\n\n\n\n\n\n## 事件机制\n\n单线程当遇到比较费事的操作带来的后果就是浏览器卡死， 那怎么办？\n为了应对这些问题， JavaScript将事件分为了\n\n* 同步任务\n* 异步任务\n\n\n\n所有的事件任务都被加入到栈内,  栈的特点是先入后出， 如下图\n\n![js事件执行栈](http://img.nixiaolei.com/js-stack.gif)\n\n看图中， 最开始调用的函数被压在了最下面， 直到最后才出栈\n\n当我们递归书写不规范时， 就会撑爆函数的执行栈， 也就是`爆栈`\n\n\n\n\n\n## 微任务与宏任务的区别\n\n我们可以把事件处理机制想象成银行柜台的柜员， 柜员每次只能处理接待一个客户， 就和JS一样是单线程的， 每一次的事件循环就是一个来办理业务的客户， 这个客户就是宏任务， \n\n当前的客户结束之后， 柜员叫号，继续接待下一个客户， 也就是开始下一个宏任务\n\n能进入任务队列的都是已完成的异步操作， 当你注册了异步事件，但还未完成， 就好比你取了排队的票子， 但是人离开了，有可能先去吃饭，有可能先去逛街， 于是当轮到你的号码时， 银行柜员会先跳过你， 当你回来时， 你依旧需要重新排队\n\n在宏任务期间， 可以追加微任务的， 或者说微任务是可以插队的，  就像在柜台办理业务中， 一位大爷在办完自己的本来的业务后，  柜员通常都会问还有什么需要办理的业务， 这时老大爷想了一下：“最近P2P爆雷有点儿多，是不是要选择稳一些的理财呢”，然后告诉柜员说，要办一些理财的业务，这时候柜员肯定不能告诉老大爷说：“您再上后边取个号去，重新排队”。 \n\n所以本来快轮到你来办理业务，会因为老大爷临时添加的“理财业务”而往后推。 \n也许老大爷在办完理财以后还想 再办一个信用卡？或者 再买点儿纪念币？ \n无论是什么需求，只要是柜员能够帮她办理的，都会在处理你的业务之前来做这些事情，这些都可以认为是微任务。\n\n所以\n**在当前的微任务没有执行完成时，是不会执行下一个宏任务的**\n\n\n\n### 优先级\n\n不管是微任务还是宏任务， 都是异步任务， 当他们的事件处理完成后， 最终都是要归回到同步事件队列处理的， 也就是主进程， \n\n\n既然是主进程，主进程又要负责浏览器的渲染， 那这三者之间的优先级是什么呢\n\n\n因为微任务实际上是宏任务的其中一个步骤， 也就是下一次的宏任务到来之前必然得先执行完当前的宏任务的微任务, 所以可以这么看:\n> 浏览器渲染 > 微任务 > 宏任务\n\n微任务会插队， 插入每一次的执行栈末尾， 宏任务比较可怜， 只要存在微任务，就会被插队，顺序就会往后\n\n\n***\n\n看下图， 我们可以理解微任务和微任务分别维护着一个队列， 微任务的箭头指向靠前， 表示微任务会优先于宏任务加入事件队列，  宏任务会延迟加入\n\n理论上UI渲染的优先级是比较高的， 但实际上如果你的微任务或宏任务之内， 出现了死循环或大量计算的情况， UI渲染就会被阻塞住， 无法进行，也就是页面卡死状态， 毕竟js单线程\n\n\n![事件关系](http://img.nixiaolei.com/2019-03-29-22-31-43.png)\n\n\n\n\n## EventLoop\n\n每办理完一个业务，柜员就会问当前的客户，是否还有其他需要办理的业务。_（检查还有没有微任务需要处理）_ \n而客户明确告知说没有事情以后，柜员就去查看后边还有没有等着办理业务的人。_（结束本次宏任务、检查还有没有宏任务需要处理）_ \n这个检查的过程是持续进行的，每完成一个任务都会进行一次，而这样的操作就被称为Event Loop。_(这是个非常简易的描述了，实际上会复杂很多)_\n\n而且就如同上边所说的，一个柜员同一时间只能处理一件事情，即便这些事情是一个客户所提出的，所以可以认为微任务也存在一个队列，大致是这样的一个逻辑：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 宏任务例子\n| API        | 浏览器    |  Node  |\n| --------   | :-----:   | :----: |\n| I/O      | ✅     |  ✅  |\n| setTimeout        | ✅     |   ✅    |\n| setInterval        | ✅      |  ✅  |\n| setImmediate        |❌     |  ✅    |\n| requestAnimationFrame        | ✅     |  ❌  |\n\n\nI/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。\n\n\n有些地方会列出来UI Rendering，说这个也是宏任务，可是在读了[HTML规范文档](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model)以后，发现这很显然是和微任务平行的一个操作步骤 \n\n\n\nrequestAnimationFrame姑且也算是宏任务吧，requestAnimationFrame在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)的定义为，下次页面重绘前所执行的操作，而重绘也是作为宏任务的一个步骤来存在的，且该步骤晚于微任务的执行\n\n\n\n\n### 微任务例子\n| API        | 浏览器    |  Node  |\n| --------   | :-----:   | :----: |\n| process.nextTick      | ❌     |  ✅  |\n| MutationObserver        | ✅     |  ❌   |\n| Promise.then catch finally       | ✅      |  ✅  |\n| MessageChannel 消息队列    |      |    |\n\n\n\n## 浏览器中的情况\n\n在上边简单的说明了两种任务的差别，以及Event Loop的作用，那么在真实的浏览器中是什么表现呢？ \n首先要明确的一点是，宏任务必然是在微任务之后才执行的（因为微任务实际上是宏任务的其中一个步骤）\n\nI/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。\n\n假设有这样的一些DOM结构：\n```HTML\n<style>\n  #outer {\n    padding: 20px;\n    background: #616161;\n  }\n\n  #inner {\n    width: 100px;\n    height: 100px;\n    background: #757575;\n  }\n</style>\n<div id=\"outer\">\n  <div id=\"inner\"></div>\n</div>\n```\n\n```JavaScript\nconst $inner = document.querySelector('#inner')\nconst $outer = document.querySelector('#outer')\n\nfunction handler () {\n  console.log('click') // 直接输出\n\n  Promise.resolve().then(_ => console.log('promise')) // 注册微任务\n\n  setTimeout(_ => console.log('timeout')) // 注册宏任务\n\n  requestAnimationFrame(_ => console.log('animationFrame')) // 注册宏任务\n\n  $outer.setAttribute('data-random', Math.random()) // DOM属性修改，触发微任务\n}\n\nnew MutationObserver(_ => {\n  console.log('observer')\n}).observe($outer, {\n  attributes: true\n})\n\n$inner.addEventListener('click', handler)\n$outer.addEventListener('click', handler)\n\n```\n\n如果点击#inner，其执行顺序一定是：click -> promise -> observer -> click -> promise -> observer -> animationFrame -> animationFrame -> timeout -> timeout。\n\n因为一次I/O创建了一个宏任务，也就是说在这次任务中会去触发handler。 \n按照代码中的注释，在同步的代码已经执行完以后，这时就会去查看是否有微任务可以执行，然后发现了Promise和MutationObserver两个微任务，遂执行之。 \n因为click事件会冒泡，所以对应的这次I/O会触发两次handler函数(_一次在inner、一次在outer_)，所以会优先执行冒泡的事件(_早于其他的宏任务_)，也就是说会重复上述的逻辑。 \n在执行完同步代码与微任务以后，这时继续向后查找有木有宏任务。 \n需要注意的一点是，因为我们触发了setAttribute，实际上修改了DOM的属性，这会导致页面的重绘，而这个set的操作是同步执行的，也就是说requestAnimationFrame的回调会早于setTimeout所执行。\n\n\n## Node Js中的情况\nNode也是单线程，但是在处理Event Loop上与浏览器稍微有些不同，这里是[Node官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained)的地址。\n\n\n就单从API层面上来理解，Node新增了两个方法可以用来使用：微任务的process.nextTick以及宏任务的setImmediate。\n\n\n### 几个特殊的API\n1. SetTimeout和SetInterval 线程池不参与\n2. process.nextTick() 实现类似SetTimeout(function(){},0);每次调用放入队列中，在下一轮循环中取出。\n3. setImmediate();比process.nextTick()优先级低\n\n\n来看看这段代码\n\n```JavaScript\nsetTimeout(() => {\n  console.log(1)\n}, 0)\n\nsetImmediate(() => {\n  console.log(2)\n})\n\nprocess.nextTick(() => {\n  console.log(3)\n})\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(4)\n}).then(() => {\n  console.log(5)\n})\n\nconsole.log(6)\n```\n\n这道题目的答案是 463512\n\n这里有几个注意点， 第一就是 nextTick ，它的优先级比 promise.then 要高， 如下图， 它加入队列的方式属于插队行为, 它直接加入到了当前执行栈（同步队列）与 下一次的等待执行栈之间\n\n![nextTick](http://img.nixiaolei.com/2019-03-29-22-45-02.png)\n\n\n我们都知道 then 比 setTimeout 优先级高\n\n然后就是 setTimeout 和 setImmediate 的问题了，\n\nsetImmediate与setTimeout的区别，在官方文档中的定义，setImmediate为一次Event Loop执行完毕后调用。 setTimeout则是通过计算一个延迟时间后进行执行。\n\n但是在实际使用中， 当setTimeout 设置为0时， 他们都是放在队列最后,  所以执行顺序就是谁先写就先执行谁了， 但当setTimeout 设置的时间大于0 时（最低延迟会被忽略）， 情况就不一样了， setTmmediate 会先被执行\n\n![setImmediate](http://img.nixiaolei.com/2019-03-29-22-45-25.png)\n\n\n\n\n参考文献(原文写的不错， 所以我大部分是复制，方便之后自己回顾理解)\n* https://segmentfault.com/a/1190000016022069\n\n\n\n\n\n\n\n\n","slug":"JavaScript事件机制","published":1,"updated":"2019-03-31T10:04:38.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wmh005zssuww8ajnqb5","content":"<p>首先我们都知道JavaScript是单线程的， 当然现在浏览器中 HTML5 为我们提供了<code>Web-Worker</code>, 但JavaScript本质上还是一门单线程的语言，</p>\n<p>这也是为了保持JavaScript 的简单易学，并且这也和DOM有关，因为如果 JavaScript 是多线程的， 一个县城增加了 DOM，一个删除了DOM， 那该听哪个线程的</p>\n<p>所以JavaScript 放弃了多线程</p>\n<h2 id=\"事件机制\"><a href=\"#事件机制\" class=\"headerlink\" title=\"事件机制\"></a>事件机制</h2><p>单线程当遇到比较费事的操作带来的后果就是浏览器卡死， 那怎么办？<br>为了应对这些问题， JavaScript将事件分为了</p>\n<ul>\n<li>同步任务</li>\n<li>异步任务</li>\n</ul>\n<p>所有的事件任务都被加入到栈内,  栈的特点是先入后出， 如下图</p>\n<p><img src=\"http://img.nixiaolei.com/js-stack.gif\" alt=\"js事件执行栈\"></p>\n<p>看图中， 最开始调用的函数被压在了最下面， 直到最后才出栈</p>\n<p>当我们递归书写不规范时， 就会撑爆函数的执行栈， 也就是<code>爆栈</code></p>\n<h2 id=\"微任务与宏任务的区别\"><a href=\"#微任务与宏任务的区别\" class=\"headerlink\" title=\"微任务与宏任务的区别\"></a>微任务与宏任务的区别</h2><p>我们可以把事件处理机制想象成银行柜台的柜员， 柜员每次只能处理接待一个客户， 就和JS一样是单线程的， 每一次的事件循环就是一个来办理业务的客户， 这个客户就是宏任务， </p>\n<p>当前的客户结束之后， 柜员叫号，继续接待下一个客户， 也就是开始下一个宏任务</p>\n<p>能进入任务队列的都是已完成的异步操作， 当你注册了异步事件，但还未完成， 就好比你取了排队的票子， 但是人离开了，有可能先去吃饭，有可能先去逛街， 于是当轮到你的号码时， 银行柜员会先跳过你， 当你回来时， 你依旧需要重新排队</p>\n<p>在宏任务期间， 可以追加微任务的， 或者说微任务是可以插队的，  就像在柜台办理业务中， 一位大爷在办完自己的本来的业务后，  柜员通常都会问还有什么需要办理的业务， 这时老大爷想了一下：“最近P2P爆雷有点儿多，是不是要选择稳一些的理财呢”，然后告诉柜员说，要办一些理财的业务，这时候柜员肯定不能告诉老大爷说：“您再上后边取个号去，重新排队”。 </p>\n<p>所以本来快轮到你来办理业务，会因为老大爷临时添加的“理财业务”而往后推。<br>也许老大爷在办完理财以后还想 再办一个信用卡？或者 再买点儿纪念币？<br>无论是什么需求，只要是柜员能够帮她办理的，都会在处理你的业务之前来做这些事情，这些都可以认为是微任务。</p>\n<p>所以<br><strong>在当前的微任务没有执行完成时，是不会执行下一个宏任务的</strong></p>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>不管是微任务还是宏任务， 都是异步任务， 当他们的事件处理完成后， 最终都是要归回到同步事件队列处理的， 也就是主进程， </p>\n<p>既然是主进程，主进程又要负责浏览器的渲染， 那这三者之间的优先级是什么呢</p>\n<p>因为微任务实际上是宏任务的其中一个步骤， 也就是下一次的宏任务到来之前必然得先执行完当前的宏任务的微任务, 所以可以这么看:</p>\n<blockquote>\n<p>浏览器渲染 &gt; 微任务 &gt; 宏任务</p>\n</blockquote>\n<p>微任务会插队， 插入每一次的执行栈末尾， 宏任务比较可怜， 只要存在微任务，就会被插队，顺序就会往后</p>\n<hr>\n<p>看下图， 我们可以理解微任务和微任务分别维护着一个队列， 微任务的箭头指向靠前， 表示微任务会优先于宏任务加入事件队列，  宏任务会延迟加入</p>\n<p>理论上UI渲染的优先级是比较高的， 但实际上如果你的微任务或宏任务之内， 出现了死循环或大量计算的情况， UI渲染就会被阻塞住， 无法进行，也就是页面卡死状态， 毕竟js单线程</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-31-43.png\" alt=\"事件关系\"></p>\n<h2 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h2><p>每办理完一个业务，柜员就会问当前的客户，是否还有其他需要办理的业务。<em>（检查还有没有微任务需要处理）</em><br>而客户明确告知说没有事情以后，柜员就去查看后边还有没有等着办理业务的人。<em>（结束本次宏任务、检查还有没有宏任务需要处理）</em><br>这个检查的过程是持续进行的，每完成一个任务都会进行一次，而这样的操作就被称为Event Loop。<em>(这是个非常简易的描述了，实际上会复杂很多)</em></p>\n<p>而且就如同上边所说的，一个柜员同一时间只能处理一件事情，即便这些事情是一个客户所提出的，所以可以认为微任务也存在一个队列，大致是这样的一个逻辑：</p>\n<h3 id=\"宏任务例子\"><a href=\"#宏任务例子\" class=\"headerlink\" title=\"宏任务例子\"></a>宏任务例子</h3><table>\n<thead>\n<tr>\n<th>API</th>\n<th style=\"text-align:center\">浏览器</th>\n<th style=\"text-align:center\">Node</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I/O</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>setTimeout</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>setInterval</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>setImmediate</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>requestAnimationFrame</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n</tbody>\n</table>\n<p>I/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。</p>\n<p>有些地方会列出来UI Rendering，说这个也是宏任务，可是在读了<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model\" target=\"_blank\" rel=\"noopener\">HTML规范文档</a>以后，发现这很显然是和微任务平行的一个操作步骤 </p>\n<p>requestAnimationFrame姑且也算是宏任务吧，requestAnimationFrame在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">MDN</a>的定义为，下次页面重绘前所执行的操作，而重绘也是作为宏任务的一个步骤来存在的，且该步骤晚于微任务的执行</p>\n<h3 id=\"微任务例子\"><a href=\"#微任务例子\" class=\"headerlink\" title=\"微任务例子\"></a>微任务例子</h3><table>\n<thead>\n<tr>\n<th>API</th>\n<th style=\"text-align:center\">浏览器</th>\n<th style=\"text-align:center\">Node</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>process.nextTick</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>MutationObserver</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n<tr>\n<td>Promise.then catch finally</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>MessageChannel 消息队列</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"浏览器中的情况\"><a href=\"#浏览器中的情况\" class=\"headerlink\" title=\"浏览器中的情况\"></a>浏览器中的情况</h2><p>在上边简单的说明了两种任务的差别，以及Event Loop的作用，那么在真实的浏览器中是什么表现呢？<br>首先要明确的一点是，宏任务必然是在微任务之后才执行的（因为微任务实际上是宏任务的其中一个步骤）</p>\n<p>I/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。</p>\n<p>假设有这样的一些DOM结构：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#outer</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    padding: 20px;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#616161</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 100px;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#757575</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $inner = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#inner'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> $outer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#outer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'click'</span>) <span class=\"comment\">// 直接输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>)) <span class=\"comment\">// 注册微任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>)) <span class=\"comment\">// 注册宏任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  requestAnimationFrame(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'animationFrame'</span>)) <span class=\"comment\">// 注册宏任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  $outer.setAttribute(<span class=\"string\">'data-random'</span>, <span class=\"built_in\">Math</span>.random()) <span class=\"comment\">// DOM属性修改，触发微任务</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'observer'</span>)</span><br><span class=\"line\">&#125;).observe($outer, &#123;</span><br><span class=\"line\">  attributes: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$inner.addEventListener(<span class=\"string\">'click'</span>, handler)</span><br><span class=\"line\">$outer.addEventListener(<span class=\"string\">'click'</span>, handler)</span><br></pre></td></tr></table></figure>\n<p>如果点击#inner，其执行顺序一定是：click -&gt; promise -&gt; observer -&gt; click -&gt; promise -&gt; observer -&gt; animationFrame -&gt; animationFrame -&gt; timeout -&gt; timeout。</p>\n<p>因为一次I/O创建了一个宏任务，也就是说在这次任务中会去触发handler。<br>按照代码中的注释，在同步的代码已经执行完以后，这时就会去查看是否有微任务可以执行，然后发现了Promise和MutationObserver两个微任务，遂执行之。<br>因为click事件会冒泡，所以对应的这次I/O会触发两次handler函数(<em>一次在inner、一次在outer</em>)，所以会优先执行冒泡的事件(<em>早于其他的宏任务</em>)，也就是说会重复上述的逻辑。<br>在执行完同步代码与微任务以后，这时继续向后查找有木有宏任务。<br>需要注意的一点是，因为我们触发了setAttribute，实际上修改了DOM的属性，这会导致页面的重绘，而这个set的操作是同步执行的，也就是说requestAnimationFrame的回调会早于setTimeout所执行。</p>\n<h2 id=\"Node-Js中的情况\"><a href=\"#Node-Js中的情况\" class=\"headerlink\" title=\"Node Js中的情况\"></a>Node Js中的情况</h2><p>Node也是单线程，但是在处理Event Loop上与浏览器稍微有些不同，这里是<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained\" target=\"_blank\" rel=\"noopener\">Node官方文档</a>的地址。</p>\n<p>就单从API层面上来理解，Node新增了两个方法可以用来使用：微任务的process.nextTick以及宏任务的setImmediate。</p>\n<h3 id=\"几个特殊的API\"><a href=\"#几个特殊的API\" class=\"headerlink\" title=\"几个特殊的API\"></a>几个特殊的API</h3><ol>\n<li>SetTimeout和SetInterval 线程池不参与</li>\n<li>process.nextTick() 实现类似SetTimeout(function(){},0);每次调用放入队列中，在下一轮循环中取出。</li>\n<li>setImmediate();比process.nextTick()优先级低</li>\n</ol>\n<p>来看看这段代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<p>这道题目的答案是 463512</p>\n<p>这里有几个注意点， 第一就是 nextTick ，它的优先级比 promise.then 要高， 如下图， 它加入队列的方式属于插队行为, 它直接加入到了当前执行栈（同步队列）与 下一次的等待执行栈之间</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-45-02.png\" alt=\"nextTick\"></p>\n<p>我们都知道 then 比 setTimeout 优先级高</p>\n<p>然后就是 setTimeout 和 setImmediate 的问题了，</p>\n<p>setImmediate与setTimeout的区别，在官方文档中的定义，setImmediate为一次Event Loop执行完毕后调用。 setTimeout则是通过计算一个延迟时间后进行执行。</p>\n<p>但是在实际使用中， 当setTimeout 设置为0时， 他们都是放在队列最后,  所以执行顺序就是谁先写就先执行谁了， 但当setTimeout 设置的时间大于0 时（最低延迟会被忽略）， 情况就不一样了， setTmmediate 会先被执行</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-45-25.png\" alt=\"setImmediate\"></p>\n<p>参考文献(原文写的不错， 所以我大部分是复制，方便之后自己回顾理解)</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000016022069\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016022069</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>首先我们都知道JavaScript是单线程的， 当然现在浏览器中 HTML5 为我们提供了<code>Web-Worker</code>, 但JavaScript本质上还是一门单线程的语言，</p>\n<p>这也是为了保持JavaScript 的简单易学，并且这也和DOM有关，因为如果 JavaScript 是多线程的， 一个县城增加了 DOM，一个删除了DOM， 那该听哪个线程的</p>\n<p>所以JavaScript 放弃了多线程</p>\n<h2 id=\"事件机制\"><a href=\"#事件机制\" class=\"headerlink\" title=\"事件机制\"></a>事件机制</h2><p>单线程当遇到比较费事的操作带来的后果就是浏览器卡死， 那怎么办？<br>为了应对这些问题， JavaScript将事件分为了</p>\n<ul>\n<li>同步任务</li>\n<li>异步任务</li>\n</ul>\n<p>所有的事件任务都被加入到栈内,  栈的特点是先入后出， 如下图</p>\n<p><img src=\"http://img.nixiaolei.com/js-stack.gif\" alt=\"js事件执行栈\"></p>\n<p>看图中， 最开始调用的函数被压在了最下面， 直到最后才出栈</p>\n<p>当我们递归书写不规范时， 就会撑爆函数的执行栈， 也就是<code>爆栈</code></p>\n<h2 id=\"微任务与宏任务的区别\"><a href=\"#微任务与宏任务的区别\" class=\"headerlink\" title=\"微任务与宏任务的区别\"></a>微任务与宏任务的区别</h2><p>我们可以把事件处理机制想象成银行柜台的柜员， 柜员每次只能处理接待一个客户， 就和JS一样是单线程的， 每一次的事件循环就是一个来办理业务的客户， 这个客户就是宏任务， </p>\n<p>当前的客户结束之后， 柜员叫号，继续接待下一个客户， 也就是开始下一个宏任务</p>\n<p>能进入任务队列的都是已完成的异步操作， 当你注册了异步事件，但还未完成， 就好比你取了排队的票子， 但是人离开了，有可能先去吃饭，有可能先去逛街， 于是当轮到你的号码时， 银行柜员会先跳过你， 当你回来时， 你依旧需要重新排队</p>\n<p>在宏任务期间， 可以追加微任务的， 或者说微任务是可以插队的，  就像在柜台办理业务中， 一位大爷在办完自己的本来的业务后，  柜员通常都会问还有什么需要办理的业务， 这时老大爷想了一下：“最近P2P爆雷有点儿多，是不是要选择稳一些的理财呢”，然后告诉柜员说，要办一些理财的业务，这时候柜员肯定不能告诉老大爷说：“您再上后边取个号去，重新排队”。 </p>\n<p>所以本来快轮到你来办理业务，会因为老大爷临时添加的“理财业务”而往后推。<br>也许老大爷在办完理财以后还想 再办一个信用卡？或者 再买点儿纪念币？<br>无论是什么需求，只要是柜员能够帮她办理的，都会在处理你的业务之前来做这些事情，这些都可以认为是微任务。</p>\n<p>所以<br><strong>在当前的微任务没有执行完成时，是不会执行下一个宏任务的</strong></p>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>不管是微任务还是宏任务， 都是异步任务， 当他们的事件处理完成后， 最终都是要归回到同步事件队列处理的， 也就是主进程， </p>\n<p>既然是主进程，主进程又要负责浏览器的渲染， 那这三者之间的优先级是什么呢</p>\n<p>因为微任务实际上是宏任务的其中一个步骤， 也就是下一次的宏任务到来之前必然得先执行完当前的宏任务的微任务, 所以可以这么看:</p>\n<blockquote>\n<p>浏览器渲染 &gt; 微任务 &gt; 宏任务</p>\n</blockquote>\n<p>微任务会插队， 插入每一次的执行栈末尾， 宏任务比较可怜， 只要存在微任务，就会被插队，顺序就会往后</p>\n<hr>\n<p>看下图， 我们可以理解微任务和微任务分别维护着一个队列， 微任务的箭头指向靠前， 表示微任务会优先于宏任务加入事件队列，  宏任务会延迟加入</p>\n<p>理论上UI渲染的优先级是比较高的， 但实际上如果你的微任务或宏任务之内， 出现了死循环或大量计算的情况， UI渲染就会被阻塞住， 无法进行，也就是页面卡死状态， 毕竟js单线程</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-31-43.png\" alt=\"事件关系\"></p>\n<h2 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h2><p>每办理完一个业务，柜员就会问当前的客户，是否还有其他需要办理的业务。<em>（检查还有没有微任务需要处理）</em><br>而客户明确告知说没有事情以后，柜员就去查看后边还有没有等着办理业务的人。<em>（结束本次宏任务、检查还有没有宏任务需要处理）</em><br>这个检查的过程是持续进行的，每完成一个任务都会进行一次，而这样的操作就被称为Event Loop。<em>(这是个非常简易的描述了，实际上会复杂很多)</em></p>\n<p>而且就如同上边所说的，一个柜员同一时间只能处理一件事情，即便这些事情是一个客户所提出的，所以可以认为微任务也存在一个队列，大致是这样的一个逻辑：</p>\n<h3 id=\"宏任务例子\"><a href=\"#宏任务例子\" class=\"headerlink\" title=\"宏任务例子\"></a>宏任务例子</h3><table>\n<thead>\n<tr>\n<th>API</th>\n<th style=\"text-align:center\">浏览器</th>\n<th style=\"text-align:center\">Node</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I/O</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>setTimeout</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>setInterval</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>setImmediate</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>requestAnimationFrame</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n</tbody>\n</table>\n<p>I/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。</p>\n<p>有些地方会列出来UI Rendering，说这个也是宏任务，可是在读了<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model\" target=\"_blank\" rel=\"noopener\">HTML规范文档</a>以后，发现这很显然是和微任务平行的一个操作步骤 </p>\n<p>requestAnimationFrame姑且也算是宏任务吧，requestAnimationFrame在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">MDN</a>的定义为，下次页面重绘前所执行的操作，而重绘也是作为宏任务的一个步骤来存在的，且该步骤晚于微任务的执行</p>\n<h3 id=\"微任务例子\"><a href=\"#微任务例子\" class=\"headerlink\" title=\"微任务例子\"></a>微任务例子</h3><table>\n<thead>\n<tr>\n<th>API</th>\n<th style=\"text-align:center\">浏览器</th>\n<th style=\"text-align:center\">Node</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>process.nextTick</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>MutationObserver</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n<tr>\n<td>Promise.then catch finally</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>MessageChannel 消息队列</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"浏览器中的情况\"><a href=\"#浏览器中的情况\" class=\"headerlink\" title=\"浏览器中的情况\"></a>浏览器中的情况</h2><p>在上边简单的说明了两种任务的差别，以及Event Loop的作用，那么在真实的浏览器中是什么表现呢？<br>首先要明确的一点是，宏任务必然是在微任务之后才执行的（因为微任务实际上是宏任务的其中一个步骤）</p>\n<p>I/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。</p>\n<p>假设有这样的一些DOM结构：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#outer</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    padding: 20px;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#616161</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 100px;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#757575</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $inner = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#inner'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> $outer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#outer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'click'</span>) <span class=\"comment\">// 直接输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>)) <span class=\"comment\">// 注册微任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>)) <span class=\"comment\">// 注册宏任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  requestAnimationFrame(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'animationFrame'</span>)) <span class=\"comment\">// 注册宏任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  $outer.setAttribute(<span class=\"string\">'data-random'</span>, <span class=\"built_in\">Math</span>.random()) <span class=\"comment\">// DOM属性修改，触发微任务</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'observer'</span>)</span><br><span class=\"line\">&#125;).observe($outer, &#123;</span><br><span class=\"line\">  attributes: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$inner.addEventListener(<span class=\"string\">'click'</span>, handler)</span><br><span class=\"line\">$outer.addEventListener(<span class=\"string\">'click'</span>, handler)</span><br></pre></td></tr></table></figure>\n<p>如果点击#inner，其执行顺序一定是：click -&gt; promise -&gt; observer -&gt; click -&gt; promise -&gt; observer -&gt; animationFrame -&gt; animationFrame -&gt; timeout -&gt; timeout。</p>\n<p>因为一次I/O创建了一个宏任务，也就是说在这次任务中会去触发handler。<br>按照代码中的注释，在同步的代码已经执行完以后，这时就会去查看是否有微任务可以执行，然后发现了Promise和MutationObserver两个微任务，遂执行之。<br>因为click事件会冒泡，所以对应的这次I/O会触发两次handler函数(<em>一次在inner、一次在outer</em>)，所以会优先执行冒泡的事件(<em>早于其他的宏任务</em>)，也就是说会重复上述的逻辑。<br>在执行完同步代码与微任务以后，这时继续向后查找有木有宏任务。<br>需要注意的一点是，因为我们触发了setAttribute，实际上修改了DOM的属性，这会导致页面的重绘，而这个set的操作是同步执行的，也就是说requestAnimationFrame的回调会早于setTimeout所执行。</p>\n<h2 id=\"Node-Js中的情况\"><a href=\"#Node-Js中的情况\" class=\"headerlink\" title=\"Node Js中的情况\"></a>Node Js中的情况</h2><p>Node也是单线程，但是在处理Event Loop上与浏览器稍微有些不同，这里是<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained\" target=\"_blank\" rel=\"noopener\">Node官方文档</a>的地址。</p>\n<p>就单从API层面上来理解，Node新增了两个方法可以用来使用：微任务的process.nextTick以及宏任务的setImmediate。</p>\n<h3 id=\"几个特殊的API\"><a href=\"#几个特殊的API\" class=\"headerlink\" title=\"几个特殊的API\"></a>几个特殊的API</h3><ol>\n<li>SetTimeout和SetInterval 线程池不参与</li>\n<li>process.nextTick() 实现类似SetTimeout(function(){},0);每次调用放入队列中，在下一轮循环中取出。</li>\n<li>setImmediate();比process.nextTick()优先级低</li>\n</ol>\n<p>来看看这段代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<p>这道题目的答案是 463512</p>\n<p>这里有几个注意点， 第一就是 nextTick ，它的优先级比 promise.then 要高， 如下图， 它加入队列的方式属于插队行为, 它直接加入到了当前执行栈（同步队列）与 下一次的等待执行栈之间</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-45-02.png\" alt=\"nextTick\"></p>\n<p>我们都知道 then 比 setTimeout 优先级高</p>\n<p>然后就是 setTimeout 和 setImmediate 的问题了，</p>\n<p>setImmediate与setTimeout的区别，在官方文档中的定义，setImmediate为一次Event Loop执行完毕后调用。 setTimeout则是通过计算一个延迟时间后进行执行。</p>\n<p>但是在实际使用中， 当setTimeout 设置为0时， 他们都是放在队列最后,  所以执行顺序就是谁先写就先执行谁了， 但当setTimeout 设置的时间大于0 时（最低延迟会被忽略）， 情况就不一样了， setTmmediate 会先被执行</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-29-22-45-25.png\" alt=\"setImmediate\"></p>\n<p>参考文献(原文写的不错， 所以我大部分是复制，方便之后自己回顾理解)</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000016022069\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016022069</a></li>\n</ul>\n"},{"title":"TypeScript语法","date":"2019-03-24T06:47:50.000Z","_content":"\n\n\n## 初始化配置文件\n> tsc --init      \n> 修改` outDir`\n\n## 定义数组\n> 1\n\n```TypeScript\nvar arr:number[] = [1,2,3,4]\n```\n\n> 2\n\n```TypeScript\nvar arr:Array<number> = [3,4,56,7,8,9]\n```\n> 3\n\n```TypeScript\nvar arr:any[] = [1,'5515', false]\n```\n\n\n## 定义元组\n> 元组表示一个已知元素数量和类型的数组，各元素的类型不必相同。   \n> 1\n\n```TypeScript\nlet arr:[number, string] = [123, 'this is ts']\n```\n\n## 定义枚举\n> 用于处理非数值的数据\n\n```TypeScript\nenum Flag { success=1, error=2 };\nlet s:Flag=Flag.success\n\nconsole.log(s) // 1\n```\n\n## never 类型: \n> never类型表示的是那些永不存在的值的类型, 如null, undefind, error\n\n```TypeScript\nvar a:undefined\na = undefined\n```\n\n## 定义 symbol类型\n> symbol类型的值是通过Symbol构造函数创建的。\n\n```TypeScript\nlet sym1 = Symbol();\n```\n\n\n\n## 容许多个类型\n```TypeScript\nvar num:number | undefined;\n\nnum = 123;\nconsole.log(num)\n```\n\n## 有返回值类型\n> 函数声明\n\n```TypeScript\nfunction run():string {\n  return '32132132'\n}\n```\n\n> 函数表达式\n\n```TypeScript\nvar fun2 = function():number {\n  return 132\n}\n```\n\n\n## 无返回值类型\n```TypeScript\nfunction run():void{\n  console.log('run')\n}\n\n```\n\n\n## 可选参数、 默认参数 、剩余参数\n> 默认必传, 带‘?’可传可不传， 必须配置到参数的最后面\n\n```TypeScript\nfunction getInfo(name:string, age?:number):string {\n  return `${name} ---- ${age}`\n}\n```\n> 默认参数       \n> 写了默认参数就不再需要 '?' 标记\n\n```TypeScript\nfunction getInfo(name:string, age:number=250):string {\n  return `${name} ---- ${age}`\n}\n```\n\n> 剩余参数\n```\n\n```\n\n\n\n## json 属性约束\n```TypeScript\n// json属性约束\nfunction jsonCon(label) {\n    console.log(label.labelJson);\n}\njsonCon({ labelJson: '你好评' });\n\n```\n\n\n## 重载\n> 因为需要遵循js ， 所以无法像java一样实现重载， 实现的只能是变体， 自己判断typeof\n\n```TypeScript\nfunction getInfo(name:string):string;\n\nfunction getInfo(name:string, age:number):string;\n\nfunction getInfo(name:string, age?:any):string {\n  \n  // 判断类型用 typeof\n  if(age) {\n    return `姓名:${name}, 年龄${age}`\n  }else {\n    return `姓名:${name}`\n  }\n}\n\nconsole.log(getInfo('吴大龙'))\n```\n\n## 创建类\n```TypeScript\nclass Person{\n  name:string;  // 属性 ,前面省略了Public 关键词\n\n  constructor(name:string){    // 构造函数  实例化类的时候 触发的方法\n    this.name = name;\n  }\n  getName():string{\n    return this.name\n  }\n  setName(name:string):void{\n    this.name=name;\n  }\n} \nvar aa = new Person('栗色')\n\nconsole.log(aa.getName())\naa.setName('吴大龙')\nconsole.log(aa.getName())\n```\n> 使用类的 get 和 set\n\n```TypeScript\nclass Person{\n  private _name:string;\n  constructor(name:string, age:number){\n    this._name = name;\n  }\n  get name():string{\n    return this._name\n  }\n  set name(name:string){\n    this._name = name;\n  }\n}\nconst p = new Person('吴大龙', 112)\np.name = '吴强' // 赋值\nconsole.log(p.name)  // 取值\n```\n\n\n\n\n## 实现继承\n> 继承自上方类\n\n```TypeScript\nclass Web extends Person {\n  constructor(name:string){\n    super(name);\n  }\n}\n\nvar w=new Web('往');\nconsole.log(w.run())\n```\n## 类修饰符\n> 不加修饰符默认就是 Public  ,  ==外部的意思就是指不被内部函数里被调用, 而是被外部人为调用==    \n> public:  共有,  在类的里面, 子类, 类外部都可以访问\n\n> protected:  保护类型, 在类里面, 子类里面可以访问, 类外部无法访问\n\n> private:   私有, 在类里可以访问, 子类, 类外部都没法访问\n\n## 静态属性和静态方法\n> static  静态方法, 在没有 new 出实例前都可以调用      \n> ==但是没法直接调用类里面的属性==\n\n```TypeScript\nclass Person {\n  public nickname:string= '吴大龙';\n  \n  static speak():void{\n    console.log(`用户姓名:${this.nickname}`)\n  }\n}\n\nPerson.speak()  // 用户姓名:undefined\n```\n\n\n## 多态\n> 父类定义一个方法不去实现, 让继承它的子类去实现, 每一个子类有不同的表现       \n> 也是继承的一种表现, 子类实现或重写父类中的已有的方法， 这叫多态\n\n```TypeScript\n// 多态\nclass Animal {\n  name:string;\n  constructor(name:string){\n    this.name = name;\n  }\n  eat():void{\n    console.log(`${this.name}， 在吃屎`)\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name:string){\n    super(name)\n  }\n  // 子类重新定义 eat方法\n  eat():void {\n    console.log(this.name+'吃肉')\n  }\n}\n\nconst wuxiaohong = new Dog('吴晓红')\nwuxiaohong.eat()\n\n// 子类重新定义 eat方法\nclass Cat extends Animal {\n  constructor(name:string) {\n    super(name)\n  }\n  eat():void{\n    console.log(this.name+ '吃粮食')\n  }\n}\n\nvar cc = new Cat('吴强')\ncc.eat()\n```\n\n## 抽象类\n> 用abstract关键字定义抽象类和抽象方法， 是提供其他类继承的基类    \n> ==抽象方法只能放在抽象类里==      \n> 从抽象类继承的方法必须被子类重写, 重新实现\n\n```TypeScript\nabstract class Animal{\n  public name:string;\n  constructor(name:string){\n    this.name=name;\n  }\n  abstract eat():any;\n}\n\nclass Dog extends Animal{\n\n  constructor(name:any){\n    super(name)\n  }\n  eat(){\n    console.log(this.name + '吃粮食')\n  }\n}\n\nvar d = new Dog('小狗')\nd.eat()\n```\n\n## 接口\n* 也是一种定义标准. 类似抽象类, 抽象类只能规定方法， 接口可以规定属性， 函数， 索引和类\n\n> 批量属性接口， 可定义可选参数\n\n```TypeScript\n// 属性接口\ninterface FullName{\n  firstName: string;   //封号结束\n  secondName: string;\n}\nfunction printName (name: FullName) : void{\n  console.log(name.firstName +'====>' + name.secondName);\n}\nprintName({firstName: '吴', secondName: '大龙'})  // 吴====>大龙\n```\n> 数组类型接口\n```TypeScript\ninterface StringArray {\n  [index:number]:string\n}\nvar myArray:StringArray;\nmyArray = [\"iwen\", \"ime\"]\nalert(myArray[1])\n```\n\n\n\n> 函数类型接口,  对方法传入的参数， 以及返回值进行约束\n\n```TypeScript\n// 比如建一个md5加密的接口 的接口\ninterface encrypt{\n  (key:string, value:string):string;\n}\n\nvar md5:encrypt = function(key:string, value:string):string {\n  return key + value;\n}\nconsole.log(md5('name', '吴大龙'))\n```\n\n\n\n> 接口扩展， 接口可以继承接口\n\n```TypeScript\ninterface Animal{\n  eat():void;\n}\n// 继承上方接口\ninterface Person extends Animal {\n  work():void;\n}\n// 有个类 实现 这个接口\nclass Web implements Person {\n  public name:string;\n  constructor(name:string){\n    this.name=name\n  }\n  eat(){\n    console.log(this.name + '喜欢吃馒头')\n  }\n  work(){\n    console.log(this.name + '写代码')\n  }\n}\n\nvar w = new Web('小林')\nw.work()  // 小林写代码\n```\n> 接口多继承  &&  ==创建一个接口对象==\n```TypeScript\n//  多继承 并 创建一个接口对象\ninterface Shape {\n  color:string;\n}\n\ninterface PenStroke {\n  penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n  sideLength:number;\n}\n\n// 创建接口对象不需要 new  而是这样的语法\nvar s = <Square>{};\ns.color = \"blue\"\ns.penWidth = 10\ns.sideLength = 10\n```\n\n\n\n## 泛型\n* 用于创建可重用的组件， 让一个组件支持多种数据类型\n* ==泛型就是解决类 接口 方法的复用性、 以及对不特定数据类型的支持==\n\n> 基本使用 \n\n```TypeScript\n// 泛型 : 可以支持不特定的数据类型   要求： 传入的参数和返回的参数一致\nfunction getData<T>(value:T):T{    // T表示泛型\n  return value\n}\nconsole.log(getData<string>('我是泛型'))\n```\n> 多个泛型参数\n\n```TypeScript\nclass HelloNumber<T, S>{\n  Ten:T;\n  add:(x:T, y:T) => S;\n}\nvar myHelloNumber = new HelloNumber<number, string>()\nmyHelloNumber.Ten = 10;\nmyHelloNumber.add = function(x, y) {\n  return x+y+''\n}\nconsole.log(myHelloNumber.add(1, 2));\n```\n> lamb 表达式\n\n```TypeScript\nfunction Hello<T>(arg:T):T{\n  return arg;\n}\n// lamb 表达式只是表达具体 参数和返回类型, 需要重新赋值上真函数\nvar myHello:<K>(arg:K)=> K = <K>(arg:K):K => {\n  return arg\n}\nalert(myHello('hello'))\n```\n> 另一种写法， 对象形式\n\n```TypeScript\nfunction Hello<T>(arg:T){\n  return arg\n}\nvar myHello:{<T>(arg:T):T} = Hello;\nalert(myHello(\" Hello\"))\n```\n\n\n\n> 泛型接口\n\n```TypeScript\n// 泛型接口\ninterface ConfigFn{\n  <T>(value:T):T;\n}\nvar getData:ConfigFn = function<T>(value:T):T{\n  return value\n}\nconsole.log( getData<string>('你好') )\n```\n\n\n\n> 泛型小实战 ==需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现==\n\n```TypeScript\n// 泛型类: 比如有个最小堆算法， 需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现\n\nclass MinClass<T>{\n  list:T[]=[]\n  add(value:T):void{\n    this.list.push(value)\n  }\n  min():T{\n    var minNum = this.list[0]\n    for(var i=0;i<this.list.length;i++){\n      if(minNum > this.list[i]){\n        minNum=this.list[i]\n      }\n    }\n    return minNum;\n  }\n}\nvar m1 = new MinClass<string>();\nm1.add('1')\nm1.add('you')\nm1.add('love')\nconsole.log(m1.min())\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/TypeScript语法.md","raw":"---\ntitle: TypeScript语法\ndate: 2019-03-24 14:47:50\ncategories: TypeScript\ntags: [ JavaScript, TypeScript ]\n---\n\n\n\n## 初始化配置文件\n> tsc --init      \n> 修改` outDir`\n\n## 定义数组\n> 1\n\n```TypeScript\nvar arr:number[] = [1,2,3,4]\n```\n\n> 2\n\n```TypeScript\nvar arr:Array<number> = [3,4,56,7,8,9]\n```\n> 3\n\n```TypeScript\nvar arr:any[] = [1,'5515', false]\n```\n\n\n## 定义元组\n> 元组表示一个已知元素数量和类型的数组，各元素的类型不必相同。   \n> 1\n\n```TypeScript\nlet arr:[number, string] = [123, 'this is ts']\n```\n\n## 定义枚举\n> 用于处理非数值的数据\n\n```TypeScript\nenum Flag { success=1, error=2 };\nlet s:Flag=Flag.success\n\nconsole.log(s) // 1\n```\n\n## never 类型: \n> never类型表示的是那些永不存在的值的类型, 如null, undefind, error\n\n```TypeScript\nvar a:undefined\na = undefined\n```\n\n## 定义 symbol类型\n> symbol类型的值是通过Symbol构造函数创建的。\n\n```TypeScript\nlet sym1 = Symbol();\n```\n\n\n\n## 容许多个类型\n```TypeScript\nvar num:number | undefined;\n\nnum = 123;\nconsole.log(num)\n```\n\n## 有返回值类型\n> 函数声明\n\n```TypeScript\nfunction run():string {\n  return '32132132'\n}\n```\n\n> 函数表达式\n\n```TypeScript\nvar fun2 = function():number {\n  return 132\n}\n```\n\n\n## 无返回值类型\n```TypeScript\nfunction run():void{\n  console.log('run')\n}\n\n```\n\n\n## 可选参数、 默认参数 、剩余参数\n> 默认必传, 带‘?’可传可不传， 必须配置到参数的最后面\n\n```TypeScript\nfunction getInfo(name:string, age?:number):string {\n  return `${name} ---- ${age}`\n}\n```\n> 默认参数       \n> 写了默认参数就不再需要 '?' 标记\n\n```TypeScript\nfunction getInfo(name:string, age:number=250):string {\n  return `${name} ---- ${age}`\n}\n```\n\n> 剩余参数\n```\n\n```\n\n\n\n## json 属性约束\n```TypeScript\n// json属性约束\nfunction jsonCon(label) {\n    console.log(label.labelJson);\n}\njsonCon({ labelJson: '你好评' });\n\n```\n\n\n## 重载\n> 因为需要遵循js ， 所以无法像java一样实现重载， 实现的只能是变体， 自己判断typeof\n\n```TypeScript\nfunction getInfo(name:string):string;\n\nfunction getInfo(name:string, age:number):string;\n\nfunction getInfo(name:string, age?:any):string {\n  \n  // 判断类型用 typeof\n  if(age) {\n    return `姓名:${name}, 年龄${age}`\n  }else {\n    return `姓名:${name}`\n  }\n}\n\nconsole.log(getInfo('吴大龙'))\n```\n\n## 创建类\n```TypeScript\nclass Person{\n  name:string;  // 属性 ,前面省略了Public 关键词\n\n  constructor(name:string){    // 构造函数  实例化类的时候 触发的方法\n    this.name = name;\n  }\n  getName():string{\n    return this.name\n  }\n  setName(name:string):void{\n    this.name=name;\n  }\n} \nvar aa = new Person('栗色')\n\nconsole.log(aa.getName())\naa.setName('吴大龙')\nconsole.log(aa.getName())\n```\n> 使用类的 get 和 set\n\n```TypeScript\nclass Person{\n  private _name:string;\n  constructor(name:string, age:number){\n    this._name = name;\n  }\n  get name():string{\n    return this._name\n  }\n  set name(name:string){\n    this._name = name;\n  }\n}\nconst p = new Person('吴大龙', 112)\np.name = '吴强' // 赋值\nconsole.log(p.name)  // 取值\n```\n\n\n\n\n## 实现继承\n> 继承自上方类\n\n```TypeScript\nclass Web extends Person {\n  constructor(name:string){\n    super(name);\n  }\n}\n\nvar w=new Web('往');\nconsole.log(w.run())\n```\n## 类修饰符\n> 不加修饰符默认就是 Public  ,  ==外部的意思就是指不被内部函数里被调用, 而是被外部人为调用==    \n> public:  共有,  在类的里面, 子类, 类外部都可以访问\n\n> protected:  保护类型, 在类里面, 子类里面可以访问, 类外部无法访问\n\n> private:   私有, 在类里可以访问, 子类, 类外部都没法访问\n\n## 静态属性和静态方法\n> static  静态方法, 在没有 new 出实例前都可以调用      \n> ==但是没法直接调用类里面的属性==\n\n```TypeScript\nclass Person {\n  public nickname:string= '吴大龙';\n  \n  static speak():void{\n    console.log(`用户姓名:${this.nickname}`)\n  }\n}\n\nPerson.speak()  // 用户姓名:undefined\n```\n\n\n## 多态\n> 父类定义一个方法不去实现, 让继承它的子类去实现, 每一个子类有不同的表现       \n> 也是继承的一种表现, 子类实现或重写父类中的已有的方法， 这叫多态\n\n```TypeScript\n// 多态\nclass Animal {\n  name:string;\n  constructor(name:string){\n    this.name = name;\n  }\n  eat():void{\n    console.log(`${this.name}， 在吃屎`)\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name:string){\n    super(name)\n  }\n  // 子类重新定义 eat方法\n  eat():void {\n    console.log(this.name+'吃肉')\n  }\n}\n\nconst wuxiaohong = new Dog('吴晓红')\nwuxiaohong.eat()\n\n// 子类重新定义 eat方法\nclass Cat extends Animal {\n  constructor(name:string) {\n    super(name)\n  }\n  eat():void{\n    console.log(this.name+ '吃粮食')\n  }\n}\n\nvar cc = new Cat('吴强')\ncc.eat()\n```\n\n## 抽象类\n> 用abstract关键字定义抽象类和抽象方法， 是提供其他类继承的基类    \n> ==抽象方法只能放在抽象类里==      \n> 从抽象类继承的方法必须被子类重写, 重新实现\n\n```TypeScript\nabstract class Animal{\n  public name:string;\n  constructor(name:string){\n    this.name=name;\n  }\n  abstract eat():any;\n}\n\nclass Dog extends Animal{\n\n  constructor(name:any){\n    super(name)\n  }\n  eat(){\n    console.log(this.name + '吃粮食')\n  }\n}\n\nvar d = new Dog('小狗')\nd.eat()\n```\n\n## 接口\n* 也是一种定义标准. 类似抽象类, 抽象类只能规定方法， 接口可以规定属性， 函数， 索引和类\n\n> 批量属性接口， 可定义可选参数\n\n```TypeScript\n// 属性接口\ninterface FullName{\n  firstName: string;   //封号结束\n  secondName: string;\n}\nfunction printName (name: FullName) : void{\n  console.log(name.firstName +'====>' + name.secondName);\n}\nprintName({firstName: '吴', secondName: '大龙'})  // 吴====>大龙\n```\n> 数组类型接口\n```TypeScript\ninterface StringArray {\n  [index:number]:string\n}\nvar myArray:StringArray;\nmyArray = [\"iwen\", \"ime\"]\nalert(myArray[1])\n```\n\n\n\n> 函数类型接口,  对方法传入的参数， 以及返回值进行约束\n\n```TypeScript\n// 比如建一个md5加密的接口 的接口\ninterface encrypt{\n  (key:string, value:string):string;\n}\n\nvar md5:encrypt = function(key:string, value:string):string {\n  return key + value;\n}\nconsole.log(md5('name', '吴大龙'))\n```\n\n\n\n> 接口扩展， 接口可以继承接口\n\n```TypeScript\ninterface Animal{\n  eat():void;\n}\n// 继承上方接口\ninterface Person extends Animal {\n  work():void;\n}\n// 有个类 实现 这个接口\nclass Web implements Person {\n  public name:string;\n  constructor(name:string){\n    this.name=name\n  }\n  eat(){\n    console.log(this.name + '喜欢吃馒头')\n  }\n  work(){\n    console.log(this.name + '写代码')\n  }\n}\n\nvar w = new Web('小林')\nw.work()  // 小林写代码\n```\n> 接口多继承  &&  ==创建一个接口对象==\n```TypeScript\n//  多继承 并 创建一个接口对象\ninterface Shape {\n  color:string;\n}\n\ninterface PenStroke {\n  penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n  sideLength:number;\n}\n\n// 创建接口对象不需要 new  而是这样的语法\nvar s = <Square>{};\ns.color = \"blue\"\ns.penWidth = 10\ns.sideLength = 10\n```\n\n\n\n## 泛型\n* 用于创建可重用的组件， 让一个组件支持多种数据类型\n* ==泛型就是解决类 接口 方法的复用性、 以及对不特定数据类型的支持==\n\n> 基本使用 \n\n```TypeScript\n// 泛型 : 可以支持不特定的数据类型   要求： 传入的参数和返回的参数一致\nfunction getData<T>(value:T):T{    // T表示泛型\n  return value\n}\nconsole.log(getData<string>('我是泛型'))\n```\n> 多个泛型参数\n\n```TypeScript\nclass HelloNumber<T, S>{\n  Ten:T;\n  add:(x:T, y:T) => S;\n}\nvar myHelloNumber = new HelloNumber<number, string>()\nmyHelloNumber.Ten = 10;\nmyHelloNumber.add = function(x, y) {\n  return x+y+''\n}\nconsole.log(myHelloNumber.add(1, 2));\n```\n> lamb 表达式\n\n```TypeScript\nfunction Hello<T>(arg:T):T{\n  return arg;\n}\n// lamb 表达式只是表达具体 参数和返回类型, 需要重新赋值上真函数\nvar myHello:<K>(arg:K)=> K = <K>(arg:K):K => {\n  return arg\n}\nalert(myHello('hello'))\n```\n> 另一种写法， 对象形式\n\n```TypeScript\nfunction Hello<T>(arg:T){\n  return arg\n}\nvar myHello:{<T>(arg:T):T} = Hello;\nalert(myHello(\" Hello\"))\n```\n\n\n\n> 泛型接口\n\n```TypeScript\n// 泛型接口\ninterface ConfigFn{\n  <T>(value:T):T;\n}\nvar getData:ConfigFn = function<T>(value:T):T{\n  return value\n}\nconsole.log( getData<string>('你好') )\n```\n\n\n\n> 泛型小实战 ==需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现==\n\n```TypeScript\n// 泛型类: 比如有个最小堆算法， 需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现\n\nclass MinClass<T>{\n  list:T[]=[]\n  add(value:T):void{\n    this.list.push(value)\n  }\n  min():T{\n    var minNum = this.list[0]\n    for(var i=0;i<this.list.length;i++){\n      if(minNum > this.list[i]){\n        minNum=this.list[i]\n      }\n    }\n    return minNum;\n  }\n}\nvar m1 = new MinClass<string>();\nm1.add('1')\nm1.add('you')\nm1.add('love')\nconsole.log(m1.min())\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"TypeScript语法","published":1,"updated":"2019-03-24T06:51:15.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wmj0060ssuw5zsbr1s0","content":"<h2 id=\"初始化配置文件\"><a href=\"#初始化配置文件\" class=\"headerlink\" title=\"初始化配置文件\"></a>初始化配置文件</h2><blockquote>\n<p>tsc –init<br>修改<code>outDir</code></p>\n</blockquote>\n<h2 id=\"定义数组\"><a href=\"#定义数组\" class=\"headerlink\" title=\"定义数组\"></a>定义数组</h2><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">56</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>3</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr:<span class=\"built_in\">any</span>[] = [<span class=\"number\">1</span>,<span class=\"string\">'5515'</span>, <span class=\"literal\">false</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义元组\"><a href=\"#定义元组\" class=\"headerlink\" title=\"定义元组\"></a>定义元组</h2><blockquote>\n<p>元组表示一个已知元素数量和类型的数组，各元素的类型不必相同。<br>1</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr:[<span class=\"built_in\">number</span>, <span class=\"built_in\">string</span>] = [<span class=\"number\">123</span>, <span class=\"string\">'this is ts'</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义枚举\"><a href=\"#定义枚举\" class=\"headerlink\" title=\"定义枚举\"></a>定义枚举</h2><blockquote>\n<p>用于处理非数值的数据</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Flag &#123; success=<span class=\"number\">1</span>, error=<span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s:Flag=Flag.success</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"never-类型\"><a href=\"#never-类型\" class=\"headerlink\" title=\"never 类型:\"></a>never 类型:</h2><blockquote>\n<p>never类型表示的是那些永不存在的值的类型, 如null, undefind, error</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"literal\">undefined</span></span><br><span class=\"line\">a = <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定义-symbol类型\"><a href=\"#定义-symbol类型\" class=\"headerlink\" title=\"定义 symbol类型\"></a>定义 symbol类型</h2><blockquote>\n<p>symbol类型的值是通过Symbol构造函数创建的。</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sym1 = Symbol();</span><br></pre></td></tr></table></figure>\n<h2 id=\"容许多个类型\"><a href=\"#容许多个类型\" class=\"headerlink\" title=\"容许多个类型\"></a>容许多个类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num:<span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">num = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num)</span><br></pre></td></tr></table></figure>\n<h2 id=\"有返回值类型\"><a href=\"#有返回值类型\" class=\"headerlink\" title=\"有返回值类型\"></a>有返回值类型</h2><blockquote>\n<p>函数声明</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'32132132'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>函数表达式</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>):<span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">132</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"无返回值类型\"><a href=\"#无返回值类型\" class=\"headerlink\" title=\"无返回值类型\"></a>无返回值类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>):<span class=\"title\">void</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'run'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可选参数、-默认参数-、剩余参数\"><a href=\"#可选参数、-默认参数-、剩余参数\" class=\"headerlink\" title=\"可选参数、 默认参数 、剩余参数\"></a>可选参数、 默认参数 、剩余参数</h2><blockquote>\n<p>默认必传, 带‘?’可传可不传， 必须配置到参数的最后面</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age?:<span class=\"built_in\">number</span></span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> ---- <span class=\"subst\">$&#123;age&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认参数<br>写了默认参数就不再需要 ‘?’ 标记</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age:<span class=\"built_in\">number</span>=250</span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> ---- <span class=\"subst\">$&#123;age&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>剩余参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"json-属性约束\"><a href=\"#json-属性约束\" class=\"headerlink\" title=\"json 属性约束\"></a>json 属性约束</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json属性约束</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonCon</span>(<span class=\"params\">label</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(label.labelJson);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jsonCon(&#123; labelJson: <span class=\"string\">'你好评'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><blockquote>\n<p>因为需要遵循js ， 所以无法像java一样实现重载， 实现的只能是变体， 自己判断typeof</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>):<span class=\"title\">string</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age:<span class=\"built_in\">number</span></span>):<span class=\"title\">string</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age?:<span class=\"built_in\">any</span></span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 判断类型用 typeof</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`姓名:<span class=\"subst\">$&#123;name&#125;</span>, 年龄<span class=\"subst\">$&#123;age&#125;</span>`</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`姓名:<span class=\"subst\">$&#123;name&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getInfo(<span class=\"string\">'吴大龙'</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;</span><br><span class=\"line\">  name:<span class=\"built_in\">string</span>;  <span class=\"comment\">// 属性 ,前面省略了Public 关键词</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;    <span class=\"comment\">// 构造函数  实例化类的时候 触发的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getName():<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setName(name:<span class=\"built_in\">string</span>):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> aa = <span class=\"keyword\">new</span> Person(<span class=\"string\">'栗色'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa.getName())</span><br><span class=\"line\">aa.setName(<span class=\"string\">'吴大龙'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa.getName())</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用类的 get 和 set</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age:<span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> name():<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> name(name:<span class=\"built_in\">string</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'吴大龙'</span>, <span class=\"number\">112</span>)</span><br><span class=\"line\">p.name = <span class=\"string\">'吴强'</span> <span class=\"comment\">// 赋值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.name)  <span class=\"comment\">// 取值</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实现继承\"><a href=\"#实现继承\" class=\"headerlink\" title=\"实现继承\"></a>实现继承</h2><blockquote>\n<p>继承自上方类</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Web <span class=\"keyword\">extends</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> w=<span class=\"keyword\">new</span> Web(<span class=\"string\">'往'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(w.run())</span><br></pre></td></tr></table></figure>\n<h2 id=\"类修饰符\"><a href=\"#类修饰符\" class=\"headerlink\" title=\"类修饰符\"></a>类修饰符</h2><blockquote>\n<p>不加修饰符默认就是 Public  ,  ==外部的意思就是指不被内部函数里被调用, 而是被外部人为调用==<br>public:  共有,  在类的里面, 子类, 类外部都可以访问</p>\n</blockquote>\n<blockquote>\n<p>protected:  保护类型, 在类里面, 子类里面可以访问, 类外部无法访问</p>\n</blockquote>\n<blockquote>\n<p>private:   私有, 在类里可以访问, 子类, 类外部都没法访问</p>\n</blockquote>\n<h2 id=\"静态属性和静态方法\"><a href=\"#静态属性和静态方法\" class=\"headerlink\" title=\"静态属性和静态方法\"></a>静态属性和静态方法</h2><blockquote>\n<p>static  静态方法, 在没有 new 出实例前都可以调用<br>==但是没法直接调用类里面的属性==</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> nickname:<span class=\"built_in\">string</span>= <span class=\"string\">'吴大龙'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> speak():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`用户姓名:<span class=\"subst\">$&#123;this.nickname&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.speak()  <span class=\"comment\">// 用户姓名:undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><blockquote>\n<p>父类定义一个方法不去实现, 让继承它的子类去实现, 每一个子类有不同的表现<br>也是继承的一种表现, 子类实现或重写父类中的已有的方法， 这叫多态</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 多态</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">  name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span>， 在吃屎`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 子类重新定义 eat方法</span></span><br><span class=\"line\">  eat():<span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name+<span class=\"string\">'吃肉'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> wuxiaohong = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'吴晓红'</span>)</span><br><span class=\"line\">wuxiaohong.eat()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类重新定义 eat方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name+ <span class=\"string\">'吃粮食'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cc = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'吴强'</span>)</span><br><span class=\"line\">cc.eat()</span><br></pre></td></tr></table></figure>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><blockquote>\n<p>用abstract关键字定义抽象类和抽象方法， 是提供其他类继承的基类<br>==抽象方法只能放在抽象类里==<br>从抽象类继承的方法必须被子类重写, 重新实现</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Animal&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> eat():<span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">any</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃粮食'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'小狗'</span>)</span><br><span class=\"line\">d.eat()</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li>也是一种定义标准. 类似抽象类, 抽象类只能规定方法， 接口可以规定属性， 函数， 索引和类</li>\n</ul>\n<blockquote>\n<p>批量属性接口， 可定义可选参数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 属性接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> FullName&#123;</span><br><span class=\"line\">  firstName: <span class=\"built_in\">string</span>;   <span class=\"comment\">//封号结束</span></span><br><span class=\"line\">  secondName: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span> (<span class=\"params\">name: FullName</span>) : <span class=\"title\">void</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name.firstName +<span class=\"string\">'====&gt;'</span> + name.secondName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printName(&#123;firstName: <span class=\"string\">'吴'</span>, secondName: <span class=\"string\">'大龙'</span>&#125;)  <span class=\"comment\">// 吴====&gt;大龙</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数组类型接口<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> StringArray &#123;</span><br><span class=\"line\">  [index:<span class=\"built_in\">number</span>]:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myArray:StringArray;</span><br><span class=\"line\">myArray = [<span class=\"string\">\"iwen\"</span>, <span class=\"string\">\"ime\"</span>]</span><br><span class=\"line\">alert(myArray[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>函数类型接口,  对方法传入的参数， 以及返回值进行约束</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比如建一个md5加密的接口 的接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> encrypt&#123;</span><br><span class=\"line\">  (key:<span class=\"built_in\">string</span>, value:<span class=\"built_in\">string</span>):<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> md5:encrypt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key:<span class=\"built_in\">string</span>, value:<span class=\"built_in\">string</span></span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> key + value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(md5(<span class=\"string\">'name'</span>, <span class=\"string\">'吴大龙'</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接口扩展， 接口可以继承接口</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Animal&#123;</span><br><span class=\"line\">  eat():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继承上方接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Person <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  work():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 有个类 实现 这个接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Web <span class=\"keyword\">implements</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'喜欢吃馒头'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  work()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'写代码'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> w = <span class=\"keyword\">new</span> Web(<span class=\"string\">'小林'</span>)</span><br><span class=\"line\">w.work()  <span class=\"comment\">// 小林写代码</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接口多继承  &amp;&amp;  ==创建一个接口对象==<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  多继承 并 创建一个接口对象</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</span><br><span class=\"line\">  color:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> PenStroke &#123;</span><br><span class=\"line\">  penWidth: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape, PenStroke &#123;</span><br><span class=\"line\">  sideLength:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建接口对象不需要 new  而是这样的语法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = &lt;Square&gt;&#123;&#125;;</span><br><span class=\"line\">s.color = <span class=\"string\">\"blue\"</span></span><br><span class=\"line\">s.penWidth = <span class=\"number\">10</span></span><br><span class=\"line\">s.sideLength = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><ul>\n<li>用于创建可重用的组件， 让一个组件支持多种数据类型</li>\n<li>==泛型就是解决类 接口 方法的复用性、 以及对不特定数据类型的支持==</li>\n</ul>\n<blockquote>\n<p>基本使用 </p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型 : 可以支持不特定的数据类型   要求： 传入的参数和返回的参数一致</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">value:T</span>):<span class=\"title\">T</span></span>&#123;    <span class=\"comment\">// T表示泛型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getData&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">'我是泛型'</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>多个泛型参数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> HelloNumber&lt;T, S&gt;&#123;</span><br><span class=\"line\">  Ten:T;</span><br><span class=\"line\">  add:<span class=\"function\">(<span class=\"params\">x:T, y:T</span>) =&gt;</span> S;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myHelloNumber = <span class=\"keyword\">new</span> HelloNumber&lt;<span class=\"built_in\">number</span>, <span class=\"built_in\">string</span>&gt;()</span><br><span class=\"line\">myHelloNumber.Ten = <span class=\"number\">10</span>;</span><br><span class=\"line\">myHelloNumber.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x+y+<span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myHelloNumber.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>lamb 表达式</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// lamb 表达式只是表达具体 参数和返回类型, 需要重新赋值上真函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myHello:&lt;K&gt;<span class=\"function\">(<span class=\"params\">arg:K</span>)=&gt;</span> K = &lt;K&gt;(arg:K):<span class=\"function\"><span class=\"params\">K</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(myHello(<span class=\"string\">'hello'</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另一种写法， 对象形式</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myHello:&#123;&lt;T&gt;(arg:T):T&#125; = Hello;</span><br><span class=\"line\">alert(myHello(<span class=\"string\">\" Hello\"</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>泛型接口</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ConfigFn&#123;</span><br><span class=\"line\">  &lt;T&gt;(value:T):T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getData:ConfigFn = <span class=\"function\"><span class=\"keyword\">function</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">value:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( getData&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">'你好'</span>) )</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>泛型小实战 ==需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现==</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型类: 比如有个最小堆算法， 需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MinClass&lt;T&gt;&#123;</span><br><span class=\"line\">  list:T[]=[]</span><br><span class=\"line\">  add(value:T):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.list.push(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  min():T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minNum = <span class=\"keyword\">this</span>.list[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">this</span>.list.length;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(minNum &gt; <span class=\"keyword\">this</span>.list[i])&#123;</span><br><span class=\"line\">        minNum=<span class=\"keyword\">this</span>.list[i]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minNum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m1 = <span class=\"keyword\">new</span> MinClass&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">m1.add(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">m1.add(<span class=\"string\">'you'</span>)</span><br><span class=\"line\">m1.add(<span class=\"string\">'love'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m1.min())</span><br></pre></td></tr></table></figure>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"初始化配置文件\"><a href=\"#初始化配置文件\" class=\"headerlink\" title=\"初始化配置文件\"></a>初始化配置文件</h2><blockquote>\n<p>tsc –init<br>修改<code>outDir</code></p>\n</blockquote>\n<h2 id=\"定义数组\"><a href=\"#定义数组\" class=\"headerlink\" title=\"定义数组\"></a>定义数组</h2><blockquote>\n<p>1</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">56</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>3</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr:<span class=\"built_in\">any</span>[] = [<span class=\"number\">1</span>,<span class=\"string\">'5515'</span>, <span class=\"literal\">false</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义元组\"><a href=\"#定义元组\" class=\"headerlink\" title=\"定义元组\"></a>定义元组</h2><blockquote>\n<p>元组表示一个已知元素数量和类型的数组，各元素的类型不必相同。<br>1</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr:[<span class=\"built_in\">number</span>, <span class=\"built_in\">string</span>] = [<span class=\"number\">123</span>, <span class=\"string\">'this is ts'</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义枚举\"><a href=\"#定义枚举\" class=\"headerlink\" title=\"定义枚举\"></a>定义枚举</h2><blockquote>\n<p>用于处理非数值的数据</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Flag &#123; success=<span class=\"number\">1</span>, error=<span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s:Flag=Flag.success</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"never-类型\"><a href=\"#never-类型\" class=\"headerlink\" title=\"never 类型:\"></a>never 类型:</h2><blockquote>\n<p>never类型表示的是那些永不存在的值的类型, 如null, undefind, error</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"literal\">undefined</span></span><br><span class=\"line\">a = <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定义-symbol类型\"><a href=\"#定义-symbol类型\" class=\"headerlink\" title=\"定义 symbol类型\"></a>定义 symbol类型</h2><blockquote>\n<p>symbol类型的值是通过Symbol构造函数创建的。</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sym1 = Symbol();</span><br></pre></td></tr></table></figure>\n<h2 id=\"容许多个类型\"><a href=\"#容许多个类型\" class=\"headerlink\" title=\"容许多个类型\"></a>容许多个类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num:<span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">num = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num)</span><br></pre></td></tr></table></figure>\n<h2 id=\"有返回值类型\"><a href=\"#有返回值类型\" class=\"headerlink\" title=\"有返回值类型\"></a>有返回值类型</h2><blockquote>\n<p>函数声明</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'32132132'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>函数表达式</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>):<span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">132</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"无返回值类型\"><a href=\"#无返回值类型\" class=\"headerlink\" title=\"无返回值类型\"></a>无返回值类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>):<span class=\"title\">void</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'run'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可选参数、-默认参数-、剩余参数\"><a href=\"#可选参数、-默认参数-、剩余参数\" class=\"headerlink\" title=\"可选参数、 默认参数 、剩余参数\"></a>可选参数、 默认参数 、剩余参数</h2><blockquote>\n<p>默认必传, 带‘?’可传可不传， 必须配置到参数的最后面</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age?:<span class=\"built_in\">number</span></span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> ---- <span class=\"subst\">$&#123;age&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认参数<br>写了默认参数就不再需要 ‘?’ 标记</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age:<span class=\"built_in\">number</span>=250</span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> ---- <span class=\"subst\">$&#123;age&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>剩余参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"json-属性约束\"><a href=\"#json-属性约束\" class=\"headerlink\" title=\"json 属性约束\"></a>json 属性约束</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json属性约束</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonCon</span>(<span class=\"params\">label</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(label.labelJson);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jsonCon(&#123; labelJson: <span class=\"string\">'你好评'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><blockquote>\n<p>因为需要遵循js ， 所以无法像java一样实现重载， 实现的只能是变体， 自己判断typeof</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>):<span class=\"title\">string</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age:<span class=\"built_in\">number</span></span>):<span class=\"title\">string</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfo</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age?:<span class=\"built_in\">any</span></span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 判断类型用 typeof</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`姓名:<span class=\"subst\">$&#123;name&#125;</span>, 年龄<span class=\"subst\">$&#123;age&#125;</span>`</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`姓名:<span class=\"subst\">$&#123;name&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getInfo(<span class=\"string\">'吴大龙'</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;</span><br><span class=\"line\">  name:<span class=\"built_in\">string</span>;  <span class=\"comment\">// 属性 ,前面省略了Public 关键词</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;    <span class=\"comment\">// 构造函数  实例化类的时候 触发的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getName():<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setName(name:<span class=\"built_in\">string</span>):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> aa = <span class=\"keyword\">new</span> Person(<span class=\"string\">'栗色'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa.getName())</span><br><span class=\"line\">aa.setName(<span class=\"string\">'吴大龙'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa.getName())</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用类的 get 和 set</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>, age:<span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> name():<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> name(name:<span class=\"built_in\">string</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'吴大龙'</span>, <span class=\"number\">112</span>)</span><br><span class=\"line\">p.name = <span class=\"string\">'吴强'</span> <span class=\"comment\">// 赋值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.name)  <span class=\"comment\">// 取值</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实现继承\"><a href=\"#实现继承\" class=\"headerlink\" title=\"实现继承\"></a>实现继承</h2><blockquote>\n<p>继承自上方类</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Web <span class=\"keyword\">extends</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> w=<span class=\"keyword\">new</span> Web(<span class=\"string\">'往'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(w.run())</span><br></pre></td></tr></table></figure>\n<h2 id=\"类修饰符\"><a href=\"#类修饰符\" class=\"headerlink\" title=\"类修饰符\"></a>类修饰符</h2><blockquote>\n<p>不加修饰符默认就是 Public  ,  ==外部的意思就是指不被内部函数里被调用, 而是被外部人为调用==<br>public:  共有,  在类的里面, 子类, 类外部都可以访问</p>\n</blockquote>\n<blockquote>\n<p>protected:  保护类型, 在类里面, 子类里面可以访问, 类外部无法访问</p>\n</blockquote>\n<blockquote>\n<p>private:   私有, 在类里可以访问, 子类, 类外部都没法访问</p>\n</blockquote>\n<h2 id=\"静态属性和静态方法\"><a href=\"#静态属性和静态方法\" class=\"headerlink\" title=\"静态属性和静态方法\"></a>静态属性和静态方法</h2><blockquote>\n<p>static  静态方法, 在没有 new 出实例前都可以调用<br>==但是没法直接调用类里面的属性==</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> nickname:<span class=\"built_in\">string</span>= <span class=\"string\">'吴大龙'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">static</span> speak():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`用户姓名:<span class=\"subst\">$&#123;this.nickname&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.speak()  <span class=\"comment\">// 用户姓名:undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><blockquote>\n<p>父类定义一个方法不去实现, 让继承它的子类去实现, 每一个子类有不同的表现<br>也是继承的一种表现, 子类实现或重写父类中的已有的方法， 这叫多态</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 多态</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">  name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span>， 在吃屎`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 子类重新定义 eat方法</span></span><br><span class=\"line\">  eat():<span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name+<span class=\"string\">'吃肉'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> wuxiaohong = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'吴晓红'</span>)</span><br><span class=\"line\">wuxiaohong.eat()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类重新定义 eat方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name+ <span class=\"string\">'吃粮食'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cc = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'吴强'</span>)</span><br><span class=\"line\">cc.eat()</span><br></pre></td></tr></table></figure>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><blockquote>\n<p>用abstract关键字定义抽象类和抽象方法， 是提供其他类继承的基类<br>==抽象方法只能放在抽象类里==<br>从抽象类继承的方法必须被子类重写, 重新实现</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Animal&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> eat():<span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog <span class=\"keyword\">extends</span> Animal&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">any</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃粮食'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'小狗'</span>)</span><br><span class=\"line\">d.eat()</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li>也是一种定义标准. 类似抽象类, 抽象类只能规定方法， 接口可以规定属性， 函数， 索引和类</li>\n</ul>\n<blockquote>\n<p>批量属性接口， 可定义可选参数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 属性接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> FullName&#123;</span><br><span class=\"line\">  firstName: <span class=\"built_in\">string</span>;   <span class=\"comment\">//封号结束</span></span><br><span class=\"line\">  secondName: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span> (<span class=\"params\">name: FullName</span>) : <span class=\"title\">void</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name.firstName +<span class=\"string\">'====&gt;'</span> + name.secondName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printName(&#123;firstName: <span class=\"string\">'吴'</span>, secondName: <span class=\"string\">'大龙'</span>&#125;)  <span class=\"comment\">// 吴====&gt;大龙</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数组类型接口<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> StringArray &#123;</span><br><span class=\"line\">  [index:<span class=\"built_in\">number</span>]:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myArray:StringArray;</span><br><span class=\"line\">myArray = [<span class=\"string\">\"iwen\"</span>, <span class=\"string\">\"ime\"</span>]</span><br><span class=\"line\">alert(myArray[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>函数类型接口,  对方法传入的参数， 以及返回值进行约束</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比如建一个md5加密的接口 的接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> encrypt&#123;</span><br><span class=\"line\">  (key:<span class=\"built_in\">string</span>, value:<span class=\"built_in\">string</span>):<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> md5:encrypt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key:<span class=\"built_in\">string</span>, value:<span class=\"built_in\">string</span></span>):<span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> key + value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(md5(<span class=\"string\">'name'</span>, <span class=\"string\">'吴大龙'</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接口扩展， 接口可以继承接口</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Animal&#123;</span><br><span class=\"line\">  eat():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继承上方接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Person <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  work():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 有个类 实现 这个接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Web <span class=\"keyword\">implements</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'喜欢吃馒头'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  work()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'写代码'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> w = <span class=\"keyword\">new</span> Web(<span class=\"string\">'小林'</span>)</span><br><span class=\"line\">w.work()  <span class=\"comment\">// 小林写代码</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接口多继承  &amp;&amp;  ==创建一个接口对象==<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  多继承 并 创建一个接口对象</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</span><br><span class=\"line\">  color:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> PenStroke &#123;</span><br><span class=\"line\">  penWidth: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape, PenStroke &#123;</span><br><span class=\"line\">  sideLength:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建接口对象不需要 new  而是这样的语法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = &lt;Square&gt;&#123;&#125;;</span><br><span class=\"line\">s.color = <span class=\"string\">\"blue\"</span></span><br><span class=\"line\">s.penWidth = <span class=\"number\">10</span></span><br><span class=\"line\">s.sideLength = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><ul>\n<li>用于创建可重用的组件， 让一个组件支持多种数据类型</li>\n<li>==泛型就是解决类 接口 方法的复用性、 以及对不特定数据类型的支持==</li>\n</ul>\n<blockquote>\n<p>基本使用 </p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型 : 可以支持不特定的数据类型   要求： 传入的参数和返回的参数一致</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">value:T</span>):<span class=\"title\">T</span></span>&#123;    <span class=\"comment\">// T表示泛型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getData&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">'我是泛型'</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>多个泛型参数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> HelloNumber&lt;T, S&gt;&#123;</span><br><span class=\"line\">  Ten:T;</span><br><span class=\"line\">  add:<span class=\"function\">(<span class=\"params\">x:T, y:T</span>) =&gt;</span> S;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myHelloNumber = <span class=\"keyword\">new</span> HelloNumber&lt;<span class=\"built_in\">number</span>, <span class=\"built_in\">string</span>&gt;()</span><br><span class=\"line\">myHelloNumber.Ten = <span class=\"number\">10</span>;</span><br><span class=\"line\">myHelloNumber.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x+y+<span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myHelloNumber.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>lamb 表达式</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// lamb 表达式只是表达具体 参数和返回类型, 需要重新赋值上真函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myHello:&lt;K&gt;<span class=\"function\">(<span class=\"params\">arg:K</span>)=&gt;</span> K = &lt;K&gt;(arg:K):<span class=\"function\"><span class=\"params\">K</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(myHello(<span class=\"string\">'hello'</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另一种写法， 对象形式</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myHello:&#123;&lt;T&gt;(arg:T):T&#125; = Hello;</span><br><span class=\"line\">alert(myHello(<span class=\"string\">\" Hello\"</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>泛型接口</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> ConfigFn&#123;</span><br><span class=\"line\">  &lt;T&gt;(value:T):T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getData:ConfigFn = <span class=\"function\"><span class=\"keyword\">function</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">value:T</span>):<span class=\"title\">T</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( getData&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">'你好'</span>) )</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>泛型小实战 ==需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现==</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型类: 比如有个最小堆算法， 需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MinClass&lt;T&gt;&#123;</span><br><span class=\"line\">  list:T[]=[]</span><br><span class=\"line\">  add(value:T):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.list.push(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  min():T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minNum = <span class=\"keyword\">this</span>.list[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">this</span>.list.length;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(minNum &gt; <span class=\"keyword\">this</span>.list[i])&#123;</span><br><span class=\"line\">        minNum=<span class=\"keyword\">this</span>.list[i]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minNum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m1 = <span class=\"keyword\">new</span> MinClass&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">m1.add(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">m1.add(<span class=\"string\">'you'</span>)</span><br><span class=\"line\">m1.add(<span class=\"string\">'love'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m1.min())</span><br></pre></td></tr></table></figure>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"TypeScript手册","date":"2019-03-18T14:41:51.000Z","_content":"\n\n\nTypeScript是JavaScript的超集\n\n## 开发环境搭建\n> 我的环境: window10 + vscode\n\n全局安装Ts\n> npm i -g typescript\n\n生成并配置`tsconfig.json`\n> tsc --init\n\n\n配置文件， 下面的配置中`ts`应存放在`src` 目录下， 并且会自动编译到dist文件夹下\n```JavaScript\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",                         // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'\n    \"module\": \"commonjs\",                       // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'\n    \"moduleResolution\": \"node\",                 // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)\n    \"emitDecoratorMetadata\": true,              // 为装饰器提供元数据的支持\n    \"experimentalDecorators\": true,             // 启用装饰器\n    \"allowSyntheticDefaultImports\": true,       // 允许从没有设置默认导出的模块中默认导入。\n    \"strict\": true,                             // 启用所有严格类型检查选项\n    \"noImplicitAny\": true,                      // 在表达式和声明上有隐含的 any类型时报错\n    \"alwaysStrict\": true,                       // 以严格模式检查没个模块，并在没个文件里加入 'use strict'\n    \"sourceMap\": true,\n    \"noEmit\": false,                            // 不生成输出文件\n    \"removeComments\": true,                     // 删除编译后的所有的注释\n    \"importHelpers\": true,                      // 从 tslib 导入辅助工具函数\n    \"strictNullChecks\": true,                   // 启用严格的 null 检查\n    \"lib\": [\"es2017\"],                          // 指定要包含在编译中的库文件\n    \"typeRoots\": [\"node_modules/@types\"],\n    \"types\": [\n      \"node\",\n    ],\n    \"outDir\": \"./dist\",                        // 编译后文件产出目录\n    \"rootDir\": \"./src\"                          // 你的ts文件目录\n  },\n  \"include\": [                                 // 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题\n    \"./src/*.ts\",\n    \"./src/**/*.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\",\n    \"**/*.test.ts\",\n    \"public\"\n  ]\n}\n```\n\n快速生成`package.json`\n> npm init -y\n\n\n运行命令， 开始监听\n> tsc -w\n\n\n是否有效呢？ 让我们来试一下\n\n\n进入src目录新建一个 `hello.ts`，记得是`.ts`， 不要写习惯了打成`.js`😅\n\n随便写点东西， 比如定义一个字符串类型:\n```TypeScript\nvar a:string = \"hello world\"\n```\n\n如果你配置没有问题的话， 我们就会看到他监听文件修改并编译\n\n这是ts文件与 编译后的js文件\n\n![编译前后](http://img.nixiaolei.com/2019-03-18-22-50-51.png)\n\n\n并且在他运行过程中， 我们可以按`F5`进行调试\n\n\n\n\n\n\n## 基本数据类型\n* Boolean\n* Number\n* String\n* Array\n* Enum\n* Any\n* Void\n\n\n简单的几种数据的定义\n```TypeScript\n// 定义一个Boolean\nvar a:boolean = true\n// 定义一个Number\nvar a:number = 13\n// 定义一个 String \nvar a:string = \"13\"\n```\n\n基本的数据结构定义\n```TypeScript\nvar list:number[] = [1,2,3]\n\n\n```\n\n\n## 接口\n> interfaces\n\n### 基础接口\n\n没有接口时我们如何规范参数类型\n```JavaScript\nfunction fn(dog:{name:string}) {\n  console.log(dog.name)\n}\nvar myObj = { name: \"Hello\" }\nfn(myObj)\n```\n\n有了接口， 我们就可以把参数规定与函数分离\n\n如何创建接口\n\n通过 `interface` 关键字来声明\n\n```JavaScript\ninterface dogValue {\n  name:string;\n}\n\n// 指定参数`dog`是接口类型\nfunction fn(dog: dogValue) {\n  console.log(dog.name)\n}\n\nvar myObj = { name: \"Hello\" }\nfn(myObj)  // 编译通过\n```\n\n### 接口的可选属性\n接口定义的参数不一定每一个都会被用到\n\n\n\n## 泛型\n\n什么是泛型?\n\n泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型\n\n一句话理解就是：  参数化类型（把类型当作是参数一样传递）\n\n使用泛型的好处:\n* 代码更加简洁【不用强制转换】\n* 程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】\n* 可读性和稳定性【在编写集合的时候，就限定了类型】\n\n\n指定一个最简单的泛型\n```TypeScript\nfunction Hello<T>(arg:T):T {\n  return arg;\n}\n```\n\n\n\n\n## Module 模块\n\nModule 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module\n\nModule 的好处\n1. 模块化\n2. 可重用\n3. 封装变量和函数\n\n\n\n来看看在ES6之前是如何书写的\n```JavaScript\n(function() {\n  // do somtiong\n}());\n```\n\n\n让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦\n\n使用Module之前\n```TypeScript\ninterface StringValidator {\n  // 接口定义的方法\n  isAcceptable(s:string):boolean;\n}\nvar lettersRegexp = /^[A-Za-z]+$]/;\nvar numberRegexp = /^[0-9]+$/;\n// 实现接口的方法\nclass LettersOnlyValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return lettersRegexp.test(s)\n  }\n} \nclass ZipCodeValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return s.length === 5 && numberRegexp.test(s)\n  }\n}\n```\n\n使用了Module 的书写方式后\n\n```TypeScript\nmodule Validation {\n  // 需要使用 export 来表示对外暴露\n  export interface StringValidator {\n    isAcceptable(s:string): boolean;\n  }\n\n  var lettersRegexp = /^[A-Za-z]+$]/;\n  var numberRegexp = /^[0-9]+$/;\n\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s:string) {\n      return lettersRegexp.test(s)\n    }\n  }\n  export class ZipCodeValidator implements StringValidator {\n    isAcceptable(s:string):boolean {\n      return s.length === 5 && numberRegexp.test(s)\n    }\n  }\n}\n```\n\n\nModule 与 类相结合使用\n```TypeScript\nmodule Person {\n  export class Student {\n    name: string;\n    constructor(name:string) {\n      this.name = name;\n    }\n    study() {\n      console.log(this.name + '在学习')\n    }\n    speak() {\n      console.log(this.name + '在说话')\n    }\n  }\n}\n\n// ----------- 使用时 -------------\n\nconst xiaoming = new Person.Student('小明')\nxiaoming.study()\n\n```\n\n\n\n## Namespaces\n\nNamespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module \n\n查看一下官方的示例\n\n```TypeScript\nnamespace Shapes {\n    export namespace Polygons {\n        export class Triangle { }\n        export class Square { }\n    }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square(); // Same as 'new Shapes.Polygons.Square()'\n```\n\n\n## 装饰器 < Decorators >\n\n如何定义一个装饰器\n\n其实装饰器就是一个普通的函数， 他接收一个参数`target` ，这个参数就是被装饰对象， 看下面的例子， `sealed` 装饰了`Dog`类， 并且在`sealed` 中打印了 `target` ， 让我们看看 `target`到底是什么？\n```TypeScript\nfunction sealed(target:any) {\n  // do something with 'target' ...\n  console.log(target)\n  return target\n}\n\n\n// 被装饰的对象 foo\n@sealed\nclass Dog {\n\n}\n```\n\n打印结果\n![使用装饰器](http://img.nixiaolei.com/2019-03-22-22-06-26.png)\n\n我们可以看到， 得到的正是 `Dog`这个类\n\n\n\n### 装饰器工厂< Decorator Factories >\n\n> 如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。\n\n\n装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果\n\n\n如何定义一个`装饰器工厂`\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any)  {\n    console.log(value)\n    console.log(target)    \n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  \n}\n```\n\n让我们来看看运行的结果\n\n![定义装饰器工厂](http://img.nixiaolei.com/2019-03-22-22-22-55.png)\n\n可以看到，我们传入的`test`字符串和 `Cat`类都被打印出来了，\n\n### 多装饰器的执行顺序\n使用多个装饰器时如何书写呢?\n\n当我们使用多个装饰器时有两种写法\n\n1. 写成一行\n```TypeScript\n@f @g x\n```\n2. 垂直书写\n```TypeScript\n@f\n@g\nx\n```\n**多个装饰器的执行顺序是如何的呢？**\n\n套用官网的说明\n1. 对每个装饰器的表达式进行自上而下的计算。\n2. 然后将结果作为自下而上的函数调用。\n\n\n其实真实的运行原理是\n```TypeScript\nf(g(x))\n```\n\n### 访问器修饰器\n\n访问器修饰器的接收的参数和方法修饰器接收的参数一样\n\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    this._x = x\n    this._y = y\n  }\n  // 访问器修饰器\n  @dec(true)\n  get  x() { return this._x }\n  @dec(false)\n  get  y() { return this._y }\n}\n```\n\n\n### 属性修饰器\n\n属性修饰器只有前两个参数\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    // 属性修饰器\n    @dec(false)\n    this._x = x\n    this._y = y\n  }\n}\n```\n\n### 参数修饰器\n参数修饰器也是三个参数， 但不同的是第三个参数接收\n\n**参数装饰器只能确认一个方法的参数是否被传入**\n\n\n前两个和其他的修饰器都相同， \n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. 参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数\n\n\n\n```TypeScript\nfunction require(value:boolean) {\n  return function (target:any, propertyKey: string, index: number)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  run(@require(true) name:string) {\n  }\n}\n```\n\n\n### 装饰器参数\n\n1. 类装饰器\n\n类装饰器的参数只接收一个， 那就是`target` 也就是这个类本身\n\n就和上面演示的那些例子一样\n\n\n2. 方法装饰器\n\n一般会传入三个参数\n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. descriptor 成员属性的描述符\n\n\n我们来验证下方法装饰器的参数\n\n让我们看看这段例子会输出什么\n```TypeScript\nfunction f(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n    console.log(arguments)\n    console.log(target)    \n  }\n}\n\nclass Tiger {\n  @f('tiger run')\n  run() {\n  }\n}\n```\n输入结果: \n\n![方法装饰器参数](http://img.nixiaolei.com/2019-03-23-11-35-28.png)\n\n\n在控制台输出， 我们看到了， \n第一个参数是 `tiger` 的实例对象（因为`run`是实例成员）\n\n第二个参数是成员名称， 也就是被装饰的`run`\n\n第三个参数是 `run` 的属性描述符\n\n\n## Mixins 混入\n除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。\n\n\nMixins 其实可以拆分为两个单词\n\nMix : 混合\n\nins : 是进入\n\n所以合在一起就是叫 `混入` 的意思的单词\n\n它想要表达的是一个对象中混入另一个对象的方法\n\n\n**让我们来实现一下Mixins**\n\n代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。\n\n```TypeScript\n// Disposable Mixin\nclass Disposable {\n    isDisposed: boolean;\n    dispose() {\n        this.isDisposed = true;\n    }\n\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive: boolean;\n    activate() {\n        this.isActive = true;\n    }\n    deactivate() {\n        this.isActive = false;\n    }\n}\n```\n创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：\n```TypeScript\n\nclass SmartObject implements Disposable, Activatable { }\n```\n这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。\n\n我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。\n\n也就是这样\n\n```TypeScript\nclass SmartObject implements Disposable, Activatable {\n  constructor() {\n      setInterval(() => console.log(this.isActive + \" : \" + this.isDisposed), 500);\n  }\n\n  interact() {\n      this.activate();\n  }\n\n  // Disposable\n  isDisposed: boolean = false;\n  dispose: () => void;\n  // Activatable\n  isActive: boolean = false;\n  activate: () => void;\n  deactivate: () => void;\n}\n```\n\n最后，把mixins混入定义的类，完成全部实现部分。\n```TypeScript\napplyMixins(SmartObject, [Disposable, Activatable]);\n```\n\n我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\n```TypeScript\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n          derivedCtor.prototype[name] = baseCtor.prototype[name];\n      })\n  });\n}\n```\n\n\n\n\n\n\n\n## 参考文献\n* https://segmentfault.com/a/1190000016305647\n\n\n-------------------------待完善——----------------------\n\n\n\n\n\n\n\n","source":"_posts/TypeScript手册.md","raw":"---\ntitle: TypeScript手册\ndate: 2019-03-18 22:41:51\ncategories: TypeScript\ntags: [ JavaScript, TypeScript ]\n---\n\n\n\nTypeScript是JavaScript的超集\n\n## 开发环境搭建\n> 我的环境: window10 + vscode\n\n全局安装Ts\n> npm i -g typescript\n\n生成并配置`tsconfig.json`\n> tsc --init\n\n\n配置文件， 下面的配置中`ts`应存放在`src` 目录下， 并且会自动编译到dist文件夹下\n```JavaScript\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",                         // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'\n    \"module\": \"commonjs\",                       // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'\n    \"moduleResolution\": \"node\",                 // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)\n    \"emitDecoratorMetadata\": true,              // 为装饰器提供元数据的支持\n    \"experimentalDecorators\": true,             // 启用装饰器\n    \"allowSyntheticDefaultImports\": true,       // 允许从没有设置默认导出的模块中默认导入。\n    \"strict\": true,                             // 启用所有严格类型检查选项\n    \"noImplicitAny\": true,                      // 在表达式和声明上有隐含的 any类型时报错\n    \"alwaysStrict\": true,                       // 以严格模式检查没个模块，并在没个文件里加入 'use strict'\n    \"sourceMap\": true,\n    \"noEmit\": false,                            // 不生成输出文件\n    \"removeComments\": true,                     // 删除编译后的所有的注释\n    \"importHelpers\": true,                      // 从 tslib 导入辅助工具函数\n    \"strictNullChecks\": true,                   // 启用严格的 null 检查\n    \"lib\": [\"es2017\"],                          // 指定要包含在编译中的库文件\n    \"typeRoots\": [\"node_modules/@types\"],\n    \"types\": [\n      \"node\",\n    ],\n    \"outDir\": \"./dist\",                        // 编译后文件产出目录\n    \"rootDir\": \"./src\"                          // 你的ts文件目录\n  },\n  \"include\": [                                 // 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题\n    \"./src/*.ts\",\n    \"./src/**/*.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\",\n    \"**/*.test.ts\",\n    \"public\"\n  ]\n}\n```\n\n快速生成`package.json`\n> npm init -y\n\n\n运行命令， 开始监听\n> tsc -w\n\n\n是否有效呢？ 让我们来试一下\n\n\n进入src目录新建一个 `hello.ts`，记得是`.ts`， 不要写习惯了打成`.js`😅\n\n随便写点东西， 比如定义一个字符串类型:\n```TypeScript\nvar a:string = \"hello world\"\n```\n\n如果你配置没有问题的话， 我们就会看到他监听文件修改并编译\n\n这是ts文件与 编译后的js文件\n\n![编译前后](http://img.nixiaolei.com/2019-03-18-22-50-51.png)\n\n\n并且在他运行过程中， 我们可以按`F5`进行调试\n\n\n\n\n\n\n## 基本数据类型\n* Boolean\n* Number\n* String\n* Array\n* Enum\n* Any\n* Void\n\n\n简单的几种数据的定义\n```TypeScript\n// 定义一个Boolean\nvar a:boolean = true\n// 定义一个Number\nvar a:number = 13\n// 定义一个 String \nvar a:string = \"13\"\n```\n\n基本的数据结构定义\n```TypeScript\nvar list:number[] = [1,2,3]\n\n\n```\n\n\n## 接口\n> interfaces\n\n### 基础接口\n\n没有接口时我们如何规范参数类型\n```JavaScript\nfunction fn(dog:{name:string}) {\n  console.log(dog.name)\n}\nvar myObj = { name: \"Hello\" }\nfn(myObj)\n```\n\n有了接口， 我们就可以把参数规定与函数分离\n\n如何创建接口\n\n通过 `interface` 关键字来声明\n\n```JavaScript\ninterface dogValue {\n  name:string;\n}\n\n// 指定参数`dog`是接口类型\nfunction fn(dog: dogValue) {\n  console.log(dog.name)\n}\n\nvar myObj = { name: \"Hello\" }\nfn(myObj)  // 编译通过\n```\n\n### 接口的可选属性\n接口定义的参数不一定每一个都会被用到\n\n\n\n## 泛型\n\n什么是泛型?\n\n泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型\n\n一句话理解就是：  参数化类型（把类型当作是参数一样传递）\n\n使用泛型的好处:\n* 代码更加简洁【不用强制转换】\n* 程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】\n* 可读性和稳定性【在编写集合的时候，就限定了类型】\n\n\n指定一个最简单的泛型\n```TypeScript\nfunction Hello<T>(arg:T):T {\n  return arg;\n}\n```\n\n\n\n\n## Module 模块\n\nModule 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module\n\nModule 的好处\n1. 模块化\n2. 可重用\n3. 封装变量和函数\n\n\n\n来看看在ES6之前是如何书写的\n```JavaScript\n(function() {\n  // do somtiong\n}());\n```\n\n\n让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦\n\n使用Module之前\n```TypeScript\ninterface StringValidator {\n  // 接口定义的方法\n  isAcceptable(s:string):boolean;\n}\nvar lettersRegexp = /^[A-Za-z]+$]/;\nvar numberRegexp = /^[0-9]+$/;\n// 实现接口的方法\nclass LettersOnlyValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return lettersRegexp.test(s)\n  }\n} \nclass ZipCodeValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return s.length === 5 && numberRegexp.test(s)\n  }\n}\n```\n\n使用了Module 的书写方式后\n\n```TypeScript\nmodule Validation {\n  // 需要使用 export 来表示对外暴露\n  export interface StringValidator {\n    isAcceptable(s:string): boolean;\n  }\n\n  var lettersRegexp = /^[A-Za-z]+$]/;\n  var numberRegexp = /^[0-9]+$/;\n\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s:string) {\n      return lettersRegexp.test(s)\n    }\n  }\n  export class ZipCodeValidator implements StringValidator {\n    isAcceptable(s:string):boolean {\n      return s.length === 5 && numberRegexp.test(s)\n    }\n  }\n}\n```\n\n\nModule 与 类相结合使用\n```TypeScript\nmodule Person {\n  export class Student {\n    name: string;\n    constructor(name:string) {\n      this.name = name;\n    }\n    study() {\n      console.log(this.name + '在学习')\n    }\n    speak() {\n      console.log(this.name + '在说话')\n    }\n  }\n}\n\n// ----------- 使用时 -------------\n\nconst xiaoming = new Person.Student('小明')\nxiaoming.study()\n\n```\n\n\n\n## Namespaces\n\nNamespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module \n\n查看一下官方的示例\n\n```TypeScript\nnamespace Shapes {\n    export namespace Polygons {\n        export class Triangle { }\n        export class Square { }\n    }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square(); // Same as 'new Shapes.Polygons.Square()'\n```\n\n\n## 装饰器 < Decorators >\n\n如何定义一个装饰器\n\n其实装饰器就是一个普通的函数， 他接收一个参数`target` ，这个参数就是被装饰对象， 看下面的例子， `sealed` 装饰了`Dog`类， 并且在`sealed` 中打印了 `target` ， 让我们看看 `target`到底是什么？\n```TypeScript\nfunction sealed(target:any) {\n  // do something with 'target' ...\n  console.log(target)\n  return target\n}\n\n\n// 被装饰的对象 foo\n@sealed\nclass Dog {\n\n}\n```\n\n打印结果\n![使用装饰器](http://img.nixiaolei.com/2019-03-22-22-06-26.png)\n\n我们可以看到， 得到的正是 `Dog`这个类\n\n\n\n### 装饰器工厂< Decorator Factories >\n\n> 如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。\n\n\n装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果\n\n\n如何定义一个`装饰器工厂`\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any)  {\n    console.log(value)\n    console.log(target)    \n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  \n}\n```\n\n让我们来看看运行的结果\n\n![定义装饰器工厂](http://img.nixiaolei.com/2019-03-22-22-22-55.png)\n\n可以看到，我们传入的`test`字符串和 `Cat`类都被打印出来了，\n\n### 多装饰器的执行顺序\n使用多个装饰器时如何书写呢?\n\n当我们使用多个装饰器时有两种写法\n\n1. 写成一行\n```TypeScript\n@f @g x\n```\n2. 垂直书写\n```TypeScript\n@f\n@g\nx\n```\n**多个装饰器的执行顺序是如何的呢？**\n\n套用官网的说明\n1. 对每个装饰器的表达式进行自上而下的计算。\n2. 然后将结果作为自下而上的函数调用。\n\n\n其实真实的运行原理是\n```TypeScript\nf(g(x))\n```\n\n### 访问器修饰器\n\n访问器修饰器的接收的参数和方法修饰器接收的参数一样\n\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    this._x = x\n    this._y = y\n  }\n  // 访问器修饰器\n  @dec(true)\n  get  x() { return this._x }\n  @dec(false)\n  get  y() { return this._y }\n}\n```\n\n\n### 属性修饰器\n\n属性修饰器只有前两个参数\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    // 属性修饰器\n    @dec(false)\n    this._x = x\n    this._y = y\n  }\n}\n```\n\n### 参数修饰器\n参数修饰器也是三个参数， 但不同的是第三个参数接收\n\n**参数装饰器只能确认一个方法的参数是否被传入**\n\n\n前两个和其他的修饰器都相同， \n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. 参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数\n\n\n\n```TypeScript\nfunction require(value:boolean) {\n  return function (target:any, propertyKey: string, index: number)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  run(@require(true) name:string) {\n  }\n}\n```\n\n\n### 装饰器参数\n\n1. 类装饰器\n\n类装饰器的参数只接收一个， 那就是`target` 也就是这个类本身\n\n就和上面演示的那些例子一样\n\n\n2. 方法装饰器\n\n一般会传入三个参数\n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. descriptor 成员属性的描述符\n\n\n我们来验证下方法装饰器的参数\n\n让我们看看这段例子会输出什么\n```TypeScript\nfunction f(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n    console.log(arguments)\n    console.log(target)    \n  }\n}\n\nclass Tiger {\n  @f('tiger run')\n  run() {\n  }\n}\n```\n输入结果: \n\n![方法装饰器参数](http://img.nixiaolei.com/2019-03-23-11-35-28.png)\n\n\n在控制台输出， 我们看到了， \n第一个参数是 `tiger` 的实例对象（因为`run`是实例成员）\n\n第二个参数是成员名称， 也就是被装饰的`run`\n\n第三个参数是 `run` 的属性描述符\n\n\n## Mixins 混入\n除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。\n\n\nMixins 其实可以拆分为两个单词\n\nMix : 混合\n\nins : 是进入\n\n所以合在一起就是叫 `混入` 的意思的单词\n\n它想要表达的是一个对象中混入另一个对象的方法\n\n\n**让我们来实现一下Mixins**\n\n代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。\n\n```TypeScript\n// Disposable Mixin\nclass Disposable {\n    isDisposed: boolean;\n    dispose() {\n        this.isDisposed = true;\n    }\n\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive: boolean;\n    activate() {\n        this.isActive = true;\n    }\n    deactivate() {\n        this.isActive = false;\n    }\n}\n```\n创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：\n```TypeScript\n\nclass SmartObject implements Disposable, Activatable { }\n```\n这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。\n\n我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。\n\n也就是这样\n\n```TypeScript\nclass SmartObject implements Disposable, Activatable {\n  constructor() {\n      setInterval(() => console.log(this.isActive + \" : \" + this.isDisposed), 500);\n  }\n\n  interact() {\n      this.activate();\n  }\n\n  // Disposable\n  isDisposed: boolean = false;\n  dispose: () => void;\n  // Activatable\n  isActive: boolean = false;\n  activate: () => void;\n  deactivate: () => void;\n}\n```\n\n最后，把mixins混入定义的类，完成全部实现部分。\n```TypeScript\napplyMixins(SmartObject, [Disposable, Activatable]);\n```\n\n我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\n```TypeScript\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n          derivedCtor.prototype[name] = baseCtor.prototype[name];\n      })\n  });\n}\n```\n\n\n\n\n\n\n\n## 参考文献\n* https://segmentfault.com/a/1190000016305647\n\n\n-------------------------待完善——----------------------\n\n\n\n\n\n\n\n","slug":"TypeScript手册","published":1,"updated":"2019-03-23T07:01:17.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wml0062ssuwn6vf3wvl","content":"<p>TypeScript是JavaScript的超集</p>\n<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><blockquote>\n<p>我的环境: window10 + vscode</p>\n</blockquote>\n<p>全局安装Ts</p>\n<blockquote>\n<p>npm i -g typescript</p>\n</blockquote>\n<p>生成并配置<code>tsconfig.json</code></p>\n<blockquote>\n<p>tsc –init</p>\n</blockquote>\n<p>配置文件， 下面的配置中<code>ts</code>应存放在<code>src</code> 目录下， 并且会自动编译到dist文件夹下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es2017\"</span>,                         <span class=\"comment\">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span></span><br><span class=\"line\">    <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,                       <span class=\"comment\">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span></span><br><span class=\"line\">    <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,                 <span class=\"comment\">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span></span><br><span class=\"line\">    <span class=\"string\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>,              <span class=\"comment\">// 为装饰器提供元数据的支持</span></span><br><span class=\"line\">    <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,             <span class=\"comment\">// 启用装饰器</span></span><br><span class=\"line\">    <span class=\"string\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,       <span class=\"comment\">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class=\"line\">    <span class=\"string\">\"strict\"</span>: <span class=\"literal\">true</span>,                             <span class=\"comment\">// 启用所有严格类型检查选项</span></span><br><span class=\"line\">    <span class=\"string\">\"noImplicitAny\"</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class=\"line\">    <span class=\"string\">\"alwaysStrict\"</span>: <span class=\"literal\">true</span>,                       <span class=\"comment\">// 以严格模式检查没个模块，并在没个文件里加入 'use strict'</span></span><br><span class=\"line\">    <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"noEmit\"</span>: <span class=\"literal\">false</span>,                            <span class=\"comment\">// 不生成输出文件</span></span><br><span class=\"line\">    <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,                     <span class=\"comment\">// 删除编译后的所有的注释</span></span><br><span class=\"line\">    <span class=\"string\">\"importHelpers\"</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// 从 tslib 导入辅助工具函数</span></span><br><span class=\"line\">    <span class=\"string\">\"strictNullChecks\"</span>: <span class=\"literal\">true</span>,                   <span class=\"comment\">// 启用严格的 null 检查</span></span><br><span class=\"line\">    <span class=\"string\">\"lib\"</span>: [<span class=\"string\">\"es2017\"</span>],                          <span class=\"comment\">// 指定要包含在编译中的库文件</span></span><br><span class=\"line\">    <span class=\"string\">\"typeRoots\"</span>: [<span class=\"string\">\"node_modules/@types\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"types\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"outDir\"</span>: <span class=\"string\">\"./dist\"</span>,                        <span class=\"comment\">// 编译后文件产出目录</span></span><br><span class=\"line\">    <span class=\"string\">\"rootDir\"</span>: <span class=\"string\">\"./src\"</span>                          <span class=\"comment\">// 你的ts文件目录</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"include\"</span>: [                                 <span class=\"comment\">// 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题</span></span><br><span class=\"line\">    <span class=\"string\">\"./src/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"./src/**/*.ts\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"exclude\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"node_modules\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dist\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"**/*.test.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"public\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>快速生成<code>package.json</code></p>\n<blockquote>\n<p>npm init -y</p>\n</blockquote>\n<p>运行命令， 开始监听</p>\n<blockquote>\n<p>tsc -w</p>\n</blockquote>\n<p>是否有效呢？ 让我们来试一下</p>\n<p>进入src目录新建一个 <code>hello.ts</code>，记得是<code>.ts</code>， 不要写习惯了打成<code>.js</code>😅</p>\n<p>随便写点东西， 比如定义一个字符串类型:<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">string</span> = <span class=\"string\">\"hello world\"</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你配置没有问题的话， 我们就会看到他监听文件修改并编译</p>\n<p>这是ts文件与 编译后的js文件</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-18-22-50-51.png\" alt=\"编译前后\"></p>\n<p>并且在他运行过程中， 我们可以按<code>F5</code>进行调试</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Array</li>\n<li>Enum</li>\n<li>Any</li>\n<li>Void</li>\n</ul>\n<p>简单的几种数据的定义<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个Boolean</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个Number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">number</span> = <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 String </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">string</span> = <span class=\"string\">\"13\"</span></span><br></pre></td></tr></table></figure></p>\n<p>基本的数据结构定义<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><blockquote>\n<p>interfaces</p>\n</blockquote>\n<h3 id=\"基础接口\"><a href=\"#基础接口\" class=\"headerlink\" title=\"基础接口\"></a>基础接口</h3><p>没有接口时我们如何规范参数类型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">dog:&#123;name:string&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dog.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Hello\"</span> &#125;</span><br><span class=\"line\">fn(myObj)</span><br></pre></td></tr></table></figure></p>\n<p>有了接口， 我们就可以把参数规定与函数分离</p>\n<p>如何创建接口</p>\n<p>通过 <code>interface</code> 关键字来声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface dogValue &#123;</span><br><span class=\"line\">  name:string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定参数`dog`是接口类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">dog: dogValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dog.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Hello\"</span> &#125;</span><br><span class=\"line\">fn(myObj)  <span class=\"comment\">// 编译通过</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"接口的可选属性\"><a href=\"#接口的可选属性\" class=\"headerlink\" title=\"接口的可选属性\"></a>接口的可选属性</h3><p>接口定义的参数不一定每一个都会被用到</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>什么是泛型?</p>\n<p>泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型</p>\n<p>一句话理解就是：  参数化类型（把类型当作是参数一样传递）</p>\n<p>使用泛型的好处:</p>\n<ul>\n<li>代码更加简洁【不用强制转换】</li>\n<li>程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】</li>\n<li>可读性和稳定性【在编写集合的时候，就限定了类型】</li>\n</ul>\n<p>指定一个最简单的泛型<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Module-模块\"><a href=\"#Module-模块\" class=\"headerlink\" title=\"Module 模块\"></a>Module 模块</h2><p>Module 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module</p>\n<p>Module 的好处</p>\n<ol>\n<li>模块化</li>\n<li>可重用</li>\n<li>封装变量和函数</li>\n</ol>\n<p>来看看在ES6之前是如何书写的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do somtiong</span></span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦</p>\n<p>使用Module之前<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> StringValidator &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 接口定义的方法</span></span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lettersRegexp = <span class=\"regexp\">/^[A-Za-z]+$]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实现接口的方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> LettersOnlyValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lettersRegexp.test(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">class</span> ZipCodeValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用了Module 的书写方式后</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> Validation &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要使用 export 来表示对外暴露</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> lettersRegexp = <span class=\"regexp\">/^[A-Za-z]+$]/</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> LettersOnlyValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> lettersRegexp.test(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ZipCodeValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Module 与 类相结合使用<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Student &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    study() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'在学习'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    speak() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'在说话'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ----------- 使用时 -------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> xiaoming = <span class=\"keyword\">new</span> Person.Student(<span class=\"string\">'小明'</span>)</span><br><span class=\"line\">xiaoming.study()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Namespaces\"><a href=\"#Namespaces\" class=\"headerlink\" title=\"Namespaces\"></a>Namespaces</h2><p>Namespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module </p>\n<p>查看一下官方的示例</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> Shapes &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> Polygons &#123;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Triangle &#123; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Square &#123; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> polygons = Shapes.Polygons;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sq = <span class=\"keyword\">new</span> polygons.Square(); <span class=\"comment\">// Same as 'new Shapes.Polygons.Square()'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"装饰器-lt-Decorators-gt\"><a href=\"#装饰器-lt-Decorators-gt\" class=\"headerlink\" title=\"装饰器 &lt; Decorators &gt;\"></a>装饰器 &lt; Decorators &gt;</h2><p>如何定义一个装饰器</p>\n<p>其实装饰器就是一个普通的函数， 他接收一个参数<code>target</code> ，这个参数就是被装饰对象， 看下面的例子， <code>sealed</code> 装饰了<code>Dog</code>类， 并且在<code>sealed</code> 中打印了 <code>target</code> ， 让我们看看 <code>target</code>到底是什么？<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sealed</span>(<span class=\"params\">target:<span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with 'target' ...</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(target)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被装饰的对象 foo</span></span><br><span class=\"line\"><span class=\"meta\">@sealed</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>打印结果<br><img src=\"http://img.nixiaolei.com/2019-03-22-22-06-26.png\" alt=\"使用装饰器\"></p>\n<p>我们可以看到， 得到的正是 <code>Dog</code>这个类</p>\n<h3 id=\"装饰器工厂-lt-Decorator-Factories-gt\"><a href=\"#装饰器工厂-lt-Decorator-Factories-gt\" class=\"headerlink\" title=\"装饰器工厂&lt; Decorator Factories &gt;\"></a>装饰器工厂&lt; Decorator Factories &gt;</h3><blockquote>\n<p>如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。</p>\n</blockquote>\n<p>装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果</p>\n<p>如何定义一个<code>装饰器工厂</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span></span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target)    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让我们来看看运行的结果</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-22-22-22-55.png\" alt=\"定义装饰器工厂\"></p>\n<p>可以看到，我们传入的<code>test</code>字符串和 <code>Cat</code>类都被打印出来了，</p>\n<h3 id=\"多装饰器的执行顺序\"><a href=\"#多装饰器的执行顺序\" class=\"headerlink\" title=\"多装饰器的执行顺序\"></a>多装饰器的执行顺序</h3><p>使用多个装饰器时如何书写呢?</p>\n<p>当我们使用多个装饰器时有两种写法</p>\n<ol>\n<li><p>写成一行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@f</span> <span class=\"meta\">@g</span> x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>垂直书写</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@f</span></span><br><span class=\"line\"><span class=\"meta\">@g</span></span><br><span class=\"line\">x</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>多个装饰器的执行顺序是如何的呢？</strong></p>\n<p>套用官网的说明</p>\n<ol>\n<li>对每个装饰器的表达式进行自上而下的计算。</li>\n<li>然后将结果作为自下而上的函数调用。</li>\n</ol>\n<p>其实真实的运行原理是<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(g(x))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"访问器修饰器\"><a href=\"#访问器修饰器\" class=\"headerlink\" title=\"访问器修饰器\"></a>访问器修饰器</h3><p>访问器修饰器的接收的参数和方法修饰器接收的参数一样</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 访问器修饰器</span></span><br><span class=\"line\">  <span class=\"meta\">@dec</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">get</span>  x() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._x &#125;</span><br><span class=\"line\">  <span class=\"meta\">@dec</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">get</span>  y() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._y &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性修饰器\"><a href=\"#属性修饰器\" class=\"headerlink\" title=\"属性修饰器\"></a>属性修饰器</h3><p>属性修饰器只有前两个参数<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span></span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性修饰器</span></span><br><span class=\"line\">    <span class=\"meta\">@dec</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参数修饰器\"><a href=\"#参数修饰器\" class=\"headerlink\" title=\"参数修饰器\"></a>参数修饰器</h3><p>参数修饰器也是三个参数， 但不同的是第三个参数接收</p>\n<p><strong>参数装饰器只能确认一个方法的参数是否被传入</strong></p>\n<p>前两个和其他的修饰器都相同， </p>\n<ol>\n<li>target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象</li>\n<li>propertyKey 成员的名称</li>\n<li>参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">value:<span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, index: <span class=\"built_in\">number</span></span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  run(<span class=\"meta\">@require</span>(<span class=\"literal\">true</span>) name:<span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器参数\"><a href=\"#装饰器参数\" class=\"headerlink\" title=\"装饰器参数\"></a>装饰器参数</h3><ol>\n<li>类装饰器</li>\n</ol>\n<p>类装饰器的参数只接收一个， 那就是<code>target</code> 也就是这个类本身</p>\n<p>就和上面演示的那些例子一样</p>\n<ol start=\"2\">\n<li>方法装饰器</li>\n</ol>\n<p>一般会传入三个参数</p>\n<ol>\n<li>target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象</li>\n<li>propertyKey 成员的名称</li>\n<li>descriptor 成员属性的描述符</li>\n</ol>\n<p>我们来验证下方法装饰器的参数</p>\n<p>让我们看看这段例子会输出什么<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target)    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Tiger &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">'tiger run'</span>)</span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输入结果: </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-23-11-35-28.png\" alt=\"方法装饰器参数\"></p>\n<p>在控制台输出， 我们看到了，<br>第一个参数是 <code>tiger</code> 的实例对象（因为<code>run</code>是实例成员）</p>\n<p>第二个参数是成员名称， 也就是被装饰的<code>run</code></p>\n<p>第三个参数是 <code>run</code> 的属性描述符</p>\n<h2 id=\"Mixins-混入\"><a href=\"#Mixins-混入\" class=\"headerlink\" title=\"Mixins 混入\"></a>Mixins 混入</h2><p>除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。</p>\n<p>Mixins 其实可以拆分为两个单词</p>\n<p>Mix : 混合</p>\n<p>ins : 是进入</p>\n<p>所以合在一起就是叫 <code>混入</code> 的意思的单词</p>\n<p>它想要表达的是一个对象中混入另一个对象的方法</p>\n<p><strong>让我们来实现一下Mixins</strong></p>\n<p>代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Disposable Mixin</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Disposable &#123;</span><br><span class=\"line\">    isDisposed: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    dispose() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isDisposed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Activatable Mixin</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Activatable &#123;</span><br><span class=\"line\">    isActive: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    activate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isActive = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deactivate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> SmartObject <span class=\"keyword\">implements</span> Disposable, Activatable &#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。</p>\n<p>我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。</p>\n<p>也就是这样</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> SmartObject <span class=\"keyword\">implements</span> Disposable, Activatable &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.isActive + <span class=\"string\">\" : \"</span> + <span class=\"keyword\">this</span>.isDisposed), <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  interact() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.activate();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Disposable</span></span><br><span class=\"line\">  isDisposed: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  dispose: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Activatable</span></span><br><span class=\"line\">  isActive: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  activate: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  deactivate: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，把mixins混入定义的类，完成全部实现部分。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyMixins(SmartObject, [Disposable, Activatable]);</span><br></pre></td></tr></table></figure></p>\n<p>我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMixins</span>(<span class=\"params\">derivedCtor: <span class=\"built_in\">any</span>, baseCtors: <span class=\"built_in\">any</span>[]</span>) </span>&#123;</span><br><span class=\"line\">  baseCtors.forEach(<span class=\"function\"><span class=\"params\">baseCtor</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">          derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000016305647\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016305647</a></li>\n</ul>\n<p>————————-待完善—————————-</p>\n","site":{"data":{}},"excerpt":"","more":"<p>TypeScript是JavaScript的超集</p>\n<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><blockquote>\n<p>我的环境: window10 + vscode</p>\n</blockquote>\n<p>全局安装Ts</p>\n<blockquote>\n<p>npm i -g typescript</p>\n</blockquote>\n<p>生成并配置<code>tsconfig.json</code></p>\n<blockquote>\n<p>tsc –init</p>\n</blockquote>\n<p>配置文件， 下面的配置中<code>ts</code>应存放在<code>src</code> 目录下， 并且会自动编译到dist文件夹下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es2017\"</span>,                         <span class=\"comment\">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span></span><br><span class=\"line\">    <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,                       <span class=\"comment\">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span></span><br><span class=\"line\">    <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,                 <span class=\"comment\">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span></span><br><span class=\"line\">    <span class=\"string\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>,              <span class=\"comment\">// 为装饰器提供元数据的支持</span></span><br><span class=\"line\">    <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,             <span class=\"comment\">// 启用装饰器</span></span><br><span class=\"line\">    <span class=\"string\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,       <span class=\"comment\">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class=\"line\">    <span class=\"string\">\"strict\"</span>: <span class=\"literal\">true</span>,                             <span class=\"comment\">// 启用所有严格类型检查选项</span></span><br><span class=\"line\">    <span class=\"string\">\"noImplicitAny\"</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class=\"line\">    <span class=\"string\">\"alwaysStrict\"</span>: <span class=\"literal\">true</span>,                       <span class=\"comment\">// 以严格模式检查没个模块，并在没个文件里加入 'use strict'</span></span><br><span class=\"line\">    <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"noEmit\"</span>: <span class=\"literal\">false</span>,                            <span class=\"comment\">// 不生成输出文件</span></span><br><span class=\"line\">    <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,                     <span class=\"comment\">// 删除编译后的所有的注释</span></span><br><span class=\"line\">    <span class=\"string\">\"importHelpers\"</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// 从 tslib 导入辅助工具函数</span></span><br><span class=\"line\">    <span class=\"string\">\"strictNullChecks\"</span>: <span class=\"literal\">true</span>,                   <span class=\"comment\">// 启用严格的 null 检查</span></span><br><span class=\"line\">    <span class=\"string\">\"lib\"</span>: [<span class=\"string\">\"es2017\"</span>],                          <span class=\"comment\">// 指定要包含在编译中的库文件</span></span><br><span class=\"line\">    <span class=\"string\">\"typeRoots\"</span>: [<span class=\"string\">\"node_modules/@types\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"types\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"outDir\"</span>: <span class=\"string\">\"./dist\"</span>,                        <span class=\"comment\">// 编译后文件产出目录</span></span><br><span class=\"line\">    <span class=\"string\">\"rootDir\"</span>: <span class=\"string\">\"./src\"</span>                          <span class=\"comment\">// 你的ts文件目录</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"include\"</span>: [                                 <span class=\"comment\">// 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题</span></span><br><span class=\"line\">    <span class=\"string\">\"./src/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"./src/**/*.ts\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"exclude\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"node_modules\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dist\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"**/*.test.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"public\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>快速生成<code>package.json</code></p>\n<blockquote>\n<p>npm init -y</p>\n</blockquote>\n<p>运行命令， 开始监听</p>\n<blockquote>\n<p>tsc -w</p>\n</blockquote>\n<p>是否有效呢？ 让我们来试一下</p>\n<p>进入src目录新建一个 <code>hello.ts</code>，记得是<code>.ts</code>， 不要写习惯了打成<code>.js</code>😅</p>\n<p>随便写点东西， 比如定义一个字符串类型:<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">string</span> = <span class=\"string\">\"hello world\"</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你配置没有问题的话， 我们就会看到他监听文件修改并编译</p>\n<p>这是ts文件与 编译后的js文件</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-18-22-50-51.png\" alt=\"编译前后\"></p>\n<p>并且在他运行过程中， 我们可以按<code>F5</code>进行调试</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Array</li>\n<li>Enum</li>\n<li>Any</li>\n<li>Void</li>\n</ul>\n<p>简单的几种数据的定义<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个Boolean</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个Number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">number</span> = <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 String </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"built_in\">string</span> = <span class=\"string\">\"13\"</span></span><br></pre></td></tr></table></figure></p>\n<p>基本的数据结构定义<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><blockquote>\n<p>interfaces</p>\n</blockquote>\n<h3 id=\"基础接口\"><a href=\"#基础接口\" class=\"headerlink\" title=\"基础接口\"></a>基础接口</h3><p>没有接口时我们如何规范参数类型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">dog:&#123;name:string&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dog.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Hello\"</span> &#125;</span><br><span class=\"line\">fn(myObj)</span><br></pre></td></tr></table></figure></p>\n<p>有了接口， 我们就可以把参数规定与函数分离</p>\n<p>如何创建接口</p>\n<p>通过 <code>interface</code> 关键字来声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface dogValue &#123;</span><br><span class=\"line\">  name:string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定参数`dog`是接口类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">dog: dogValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dog.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Hello\"</span> &#125;</span><br><span class=\"line\">fn(myObj)  <span class=\"comment\">// 编译通过</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"接口的可选属性\"><a href=\"#接口的可选属性\" class=\"headerlink\" title=\"接口的可选属性\"></a>接口的可选属性</h3><p>接口定义的参数不一定每一个都会被用到</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>什么是泛型?</p>\n<p>泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型</p>\n<p>一句话理解就是：  参数化类型（把类型当作是参数一样传递）</p>\n<p>使用泛型的好处:</p>\n<ul>\n<li>代码更加简洁【不用强制转换】</li>\n<li>程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】</li>\n<li>可读性和稳定性【在编写集合的时候，就限定了类型】</li>\n</ul>\n<p>指定一个最简单的泛型<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg:T</span>):<span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Module-模块\"><a href=\"#Module-模块\" class=\"headerlink\" title=\"Module 模块\"></a>Module 模块</h2><p>Module 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module</p>\n<p>Module 的好处</p>\n<ol>\n<li>模块化</li>\n<li>可重用</li>\n<li>封装变量和函数</li>\n</ol>\n<p>来看看在ES6之前是如何书写的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do somtiong</span></span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦</p>\n<p>使用Module之前<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> StringValidator &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 接口定义的方法</span></span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lettersRegexp = <span class=\"regexp\">/^[A-Za-z]+$]/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实现接口的方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> LettersOnlyValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lettersRegexp.test(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">class</span> ZipCodeValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">  isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用了Module 的书写方式后</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> Validation &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要使用 export 来表示对外暴露</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> lettersRegexp = <span class=\"regexp\">/^[A-Za-z]+$]/</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> LettersOnlyValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> lettersRegexp.test(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ZipCodeValidator <span class=\"keyword\">implements</span> StringValidator &#123;</span><br><span class=\"line\">    isAcceptable(s:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Module 与 类相结合使用<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Student &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    study() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'在学习'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    speak() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'在说话'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ----------- 使用时 -------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> xiaoming = <span class=\"keyword\">new</span> Person.Student(<span class=\"string\">'小明'</span>)</span><br><span class=\"line\">xiaoming.study()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Namespaces\"><a href=\"#Namespaces\" class=\"headerlink\" title=\"Namespaces\"></a>Namespaces</h2><p>Namespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module </p>\n<p>查看一下官方的示例</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> Shapes &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> Polygons &#123;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Triangle &#123; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Square &#123; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> polygons = Shapes.Polygons;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sq = <span class=\"keyword\">new</span> polygons.Square(); <span class=\"comment\">// Same as 'new Shapes.Polygons.Square()'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"装饰器-lt-Decorators-gt\"><a href=\"#装饰器-lt-Decorators-gt\" class=\"headerlink\" title=\"装饰器 &lt; Decorators &gt;\"></a>装饰器 &lt; Decorators &gt;</h2><p>如何定义一个装饰器</p>\n<p>其实装饰器就是一个普通的函数， 他接收一个参数<code>target</code> ，这个参数就是被装饰对象， 看下面的例子， <code>sealed</code> 装饰了<code>Dog</code>类， 并且在<code>sealed</code> 中打印了 <code>target</code> ， 让我们看看 <code>target</code>到底是什么？<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sealed</span>(<span class=\"params\">target:<span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something with 'target' ...</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(target)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被装饰的对象 foo</span></span><br><span class=\"line\"><span class=\"meta\">@sealed</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>打印结果<br><img src=\"http://img.nixiaolei.com/2019-03-22-22-06-26.png\" alt=\"使用装饰器\"></p>\n<p>我们可以看到， 得到的正是 <code>Dog</code>这个类</p>\n<h3 id=\"装饰器工厂-lt-Decorator-Factories-gt\"><a href=\"#装饰器工厂-lt-Decorator-Factories-gt\" class=\"headerlink\" title=\"装饰器工厂&lt; Decorator Factories &gt;\"></a>装饰器工厂&lt; Decorator Factories &gt;</h3><blockquote>\n<p>如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。</p>\n</blockquote>\n<p>装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果</p>\n<p>如何定义一个<code>装饰器工厂</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span></span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target)    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让我们来看看运行的结果</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-22-22-22-55.png\" alt=\"定义装饰器工厂\"></p>\n<p>可以看到，我们传入的<code>test</code>字符串和 <code>Cat</code>类都被打印出来了，</p>\n<h3 id=\"多装饰器的执行顺序\"><a href=\"#多装饰器的执行顺序\" class=\"headerlink\" title=\"多装饰器的执行顺序\"></a>多装饰器的执行顺序</h3><p>使用多个装饰器时如何书写呢?</p>\n<p>当我们使用多个装饰器时有两种写法</p>\n<ol>\n<li><p>写成一行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@f</span> <span class=\"meta\">@g</span> x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>垂直书写</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@f</span></span><br><span class=\"line\"><span class=\"meta\">@g</span></span><br><span class=\"line\">x</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>多个装饰器的执行顺序是如何的呢？</strong></p>\n<p>套用官网的说明</p>\n<ol>\n<li>对每个装饰器的表达式进行自上而下的计算。</li>\n<li>然后将结果作为自下而上的函数调用。</li>\n</ol>\n<p>其实真实的运行原理是<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(g(x))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"访问器修饰器\"><a href=\"#访问器修饰器\" class=\"headerlink\" title=\"访问器修饰器\"></a>访问器修饰器</h3><p>访问器修饰器的接收的参数和方法修饰器接收的参数一样</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 访问器修饰器</span></span><br><span class=\"line\">  <span class=\"meta\">@dec</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">get</span>  x() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._x &#125;</span><br><span class=\"line\">  <span class=\"meta\">@dec</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">get</span>  y() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._y &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性修饰器\"><a href=\"#属性修饰器\" class=\"headerlink\" title=\"属性修饰器\"></a>属性修饰器</h3><p>属性修饰器只有前两个参数<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span></span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性修饰器</span></span><br><span class=\"line\">    <span class=\"meta\">@dec</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参数修饰器\"><a href=\"#参数修饰器\" class=\"headerlink\" title=\"参数修饰器\"></a>参数修饰器</h3><p>参数修饰器也是三个参数， 但不同的是第三个参数接收</p>\n<p><strong>参数装饰器只能确认一个方法的参数是否被传入</strong></p>\n<p>前两个和其他的修饰器都相同， </p>\n<ol>\n<li>target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象</li>\n<li>propertyKey 成员的名称</li>\n<li>参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">value:<span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, index: <span class=\"built_in\">number</span></span>)  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用并传入自定义的参数</span></span><br><span class=\"line\"><span class=\"meta\">@dec</span>(<span class=\"string\">'test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Cat &#123;</span><br><span class=\"line\">  run(<span class=\"meta\">@require</span>(<span class=\"literal\">true</span>) name:<span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器参数\"><a href=\"#装饰器参数\" class=\"headerlink\" title=\"装饰器参数\"></a>装饰器参数</h3><ol>\n<li>类装饰器</li>\n</ol>\n<p>类装饰器的参数只接收一个， 那就是<code>target</code> 也就是这个类本身</p>\n<p>就和上面演示的那些例子一样</p>\n<ol start=\"2\">\n<li>方法装饰器</li>\n</ol>\n<p>一般会传入三个参数</p>\n<ol>\n<li>target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象</li>\n<li>propertyKey 成员的名称</li>\n<li>descriptor 成员属性的描述符</li>\n</ol>\n<p>我们来验证下方法装饰器的参数</p>\n<p>让我们看看这段例子会输出什么<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">value:<span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target:<span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>)  </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(target)    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Tiger &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">'tiger run'</span>)</span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输入结果: </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-23-11-35-28.png\" alt=\"方法装饰器参数\"></p>\n<p>在控制台输出， 我们看到了，<br>第一个参数是 <code>tiger</code> 的实例对象（因为<code>run</code>是实例成员）</p>\n<p>第二个参数是成员名称， 也就是被装饰的<code>run</code></p>\n<p>第三个参数是 <code>run</code> 的属性描述符</p>\n<h2 id=\"Mixins-混入\"><a href=\"#Mixins-混入\" class=\"headerlink\" title=\"Mixins 混入\"></a>Mixins 混入</h2><p>除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。</p>\n<p>Mixins 其实可以拆分为两个单词</p>\n<p>Mix : 混合</p>\n<p>ins : 是进入</p>\n<p>所以合在一起就是叫 <code>混入</code> 的意思的单词</p>\n<p>它想要表达的是一个对象中混入另一个对象的方法</p>\n<p><strong>让我们来实现一下Mixins</strong></p>\n<p>代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Disposable Mixin</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Disposable &#123;</span><br><span class=\"line\">    isDisposed: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    dispose() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isDisposed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Activatable Mixin</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Activatable &#123;</span><br><span class=\"line\">    isActive: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    activate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isActive = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deactivate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> SmartObject <span class=\"keyword\">implements</span> Disposable, Activatable &#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。</p>\n<p>我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。</p>\n<p>也就是这样</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> SmartObject <span class=\"keyword\">implements</span> Disposable, Activatable &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.isActive + <span class=\"string\">\" : \"</span> + <span class=\"keyword\">this</span>.isDisposed), <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  interact() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.activate();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Disposable</span></span><br><span class=\"line\">  isDisposed: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  dispose: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Activatable</span></span><br><span class=\"line\">  isActive: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  activate: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  deactivate: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，把mixins混入定义的类，完成全部实现部分。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyMixins(SmartObject, [Disposable, Activatable]);</span><br></pre></td></tr></table></figure></p>\n<p>我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMixins</span>(<span class=\"params\">derivedCtor: <span class=\"built_in\">any</span>, baseCtors: <span class=\"built_in\">any</span>[]</span>) </span>&#123;</span><br><span class=\"line\">  baseCtors.forEach(<span class=\"function\"><span class=\"params\">baseCtor</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">          derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000016305647\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016305647</a></li>\n</ul>\n<p>————————-待完善—————————-</p>\n"},{"title":"使用Jenkins构建前端持续集成","date":"2019-03-16T04:34:36.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n1. 安装JDK\n\n直接使用yum 安装的是 `openjdk` , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装\n\n\n```\nyum install -y java\n```\n\n2. 安装jenkins\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n\n```\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\nyum install -y jenkins\n```\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n```\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n```\n\n3. 配置jenkis的端口\n\njenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口\n\n```\nvim /etc/sysconfig/jenkins\n```\n\n找到修改端口号：\n\n> JENKINS_PORT=\"8080\" \n\n4. 启动jenkins \n\n\n```\nservice jenkins start/stop/restart\n```\n* 安装成功后Jenkins将作为一个守护进程随系统启动\n* 系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改`/var/log/jenkins`, `/var/lib/jenkins`, 和`/var/cache/jenkins`的所有者\n* 启动的时候将从/etc/sysconfig/jenkins获取配置参数\n* 默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置\n* Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo\n\n\n## 配置阶段\n安装好`jenkins` 后 ， 我们就可以根据刚才所设置的端口号访问 `jenkins` 服务了 \n\n比如进入 `127.0.0.1:8081` 访问`jenkins`\n\n首先会看到让我们输入初始密码\n\n它提示我们进入 `/var/lib/jenkins/secrets/initialAdminPassword ` 查看\n\n![输入初始密码](http://img.nixiaolei.com/2019-03-09-16-16-27.png)\n\n\n\n输入密码无误后， 就是提示我们安装对应的插件了，\n\n左边是推荐安装， 右边是自定义安装，  这里我们建议点击 `推荐安装`\n\n![选择推荐安装](http://img.nixiaolei.com/2019-03-09-16-17-31.png)\n\n\n\n\n安装过程可能稍长\n\n![等待安装完毕 ](http://img.nixiaolei.com/jenkins03.png)\n\n\n这时我们创建一个 `Jenkins` 账户， \n一定要牢记你的输入账号和密码， 用作之后的登录\n\n![创建账户](http://img.nixiaolei.com/2019-03-09-16-29-08.png)\n\n\n\n创建账户之后， 会显示一个 `jenkins` 的资源根路径， 一般不需要修改， 保持默认即可\n\n\n![资源路径](http://img.nixiaolei.com/2019-03-09-16-32-04.png)\n\n\n\n\n之后就是愉快的`jenkins` 之旅啦\n\n![开始使用Jenkins](http://img.nixiaolei.com/2019-03-09-16-32-37.png)\n\n\n## 补善插件阶段\n我们要做的前端持续集成， 所以 `jenkins` 默认安装的插件 并不能完全的满足我们的需求\n\n进入`jenkins` 主页面后， 找到插件管理\n\n![插件管理](http://img.nixiaolei.com/2019-03-09-16-36-26.png)\n\n\n\n首先查看我们必要的插件是否安装好了\n* NodeJs Plugin\n* Publish Over SSH\n* GitHub\n\n如果发现没有安装的就安装， 查漏补缺\n\n\n\n## 变量及远程服务器基本配置\n\n插件安装好后, 进入`系统设置` 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好\n\n![系统设置](http://img.nixiaolei.com/2019-03-09-17-36-54.png)\n\n\n管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱\n\n![邮件地址](http://img.nixiaolei.com/2019-03-09-17-42-24.png)\n\n(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上\n\n![github](http://img.nixiaolei.com/2019-03-09-17-43-51.png)\n\n\n比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址\n\n点击新增添加你的服务器\n\n![添加你的服务器](http://img.nixiaolei.com/2019-03-09-17-48-05.png)\n\n\n\n点击新增后, 这里有几个关键的参数,  需要注意\n\n![参数注意](http://img.nixiaolei.com/2019-03-09-17-51-39.png)\n\n连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录\n\n![配置免密](http://img.nixiaolei.com/2019-03-09-17-54-49.png)\n\n\n> 填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，\n\n\n![编路径错误](http://img.nixiaolei.com/2019-03-10-10-43-33.png)\n\n\n\n\n因为`jenkins `的在运行时会自动的创建一个名为`jenkins`的用户， 而这个用户的权限不够，无法访问你的目录\n\n![编运行身份](http://img.nixiaolei.com/2019-03-10-10-46-12.png)\n\n\n\n解决方案有两个:\n1. 把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限\n2. 把`jenkins` 的运行身份修改为 `root`, 但是会有点安全性问题\n\n本次实践以学习为目的， 所以这里我选择了第二钟\n\n> 相关操作文章: https://blog.csdn.net/jeikerxiao/article/details/80768949\n\n\nssh 免密配置成功后， 我们就可以开始创建一个自己的任务了\n\n\n\n## 创建任务阶段\n\n回到主页， 找到`新建任务`\n\n\n![编新建任务](http://img.nixiaolei.com/2019-03-10-10-55-02.png)\n\n\n\n进入新建任务后， 有几种不同的项目， 我们这里选择 `自由风格`， 并且输入项目名称\n\n![编自由风格](http://img.nixiaolei.com/2019-03-10-10-59-00.png)\n\n创建好项目后就会自动进入 当前项目的配置文件中\n\n\n首先我们看到`General`, 这是一些全局的配置， 在这里我们可以写上该项目的描述\n\n![编全局配置](http://img.nixiaolei.com/2019-03-10-11-02-26.png)\n\n\n`General`的后面几个类目是构建项目阶段几个比较大的步骤和流程\n\n\n如果你要配置的“github”项目， 可以在`Git`这里打上勾\n\n并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在`\tCredentials` 处新增配置\n\n\n![编github项目](http://img.nixiaolei.com/2019-03-10-11-11-35.png)\n\n\n接下来是看看构建触发器， 这里的填写根据你的工程需要， \n\n可以配置定时任务 或 多任务构建\n\n> 本次演示我并没有用到\n\n![编触发器](http://img.nixiaolei.com/2019-03-10-13-26-16.png)\n\n\n\n现在来到我们的重点`构建` ， \n\n我们可以添加步骤，我们可以看到能够支持 `Node`、`shell` 、`批处理`等等方式\n\n这些添加的步骤会按顺序执行， \n\n![编构建](http://img.nixiaolei.com/2019-03-10-13-30-56.png)\n\n\n我们需要`shell` 脚本来运行npm 命令\n\n所以我创建了 `shell`的操作步骤\n\n![编shell脚本](http://img.nixiaolei.com/2019-03-10-13-35-35.png)\n\n\n\n基于此， `jenkins` 就会自动帮我们做好 测试与打包的步骤，\n\n在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个`send files or execute commands over SSH` 步骤， \n\n\n![编overSSH](http://img.nixiaolei.com/2019-03-16-13-05-58.png)\n\n\n建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去\n\n> deploy文件参考\n\n![编deploy文件参考](http://img.nixiaolei.com/2019-03-16-13-08-32.png)\n\n\n\n## 你可能遇到的问题\n\n### 命令无效或不存在\n> 这里拿npm举例，  其他命令如:node ,都是同理\n\n![编无法使用npm命令](http://img.nixiaolei.com/2019-03-16-12-54-06.png)\n\n\n因为全局的命令需要设置`软连接` Jenkins 才可以访问的到\n\n如何设置:\n\n先查看一下你的 npm 在哪\n> whereis npm\n\n![编查看npm位置](http://img.nixiaolei.com/2019-03-16-12-57-08.png)\n\n这个`/usr/local/bin/npm` 就是你的npm所在位置 ( 使用带 `local` 的地址)\n\n我们来创建 `软连接`, 这里使用刚刚获取到的npm \n\n> ln -s /usr/local/bin/npm   /usr/bin\n \n\n如果出现无法修改的情况， 那我们就将他强制更改 😄\n\n> ln -sf /usr/local/bin/npm   /usr/bin\n\n\n再去构建一次Jenkins 任务\n\n看到控制台输出， 现在npm 可以正常运行了\n\n![编npm运行成功](http://img.nixiaolei.com/2019-03-10-18-56-51.png)\n\n\n\n\n\n\n## 持续集成的必要条件\n1. 必须有github 、svn或私有git服务器\n2. 完整的项目\n  1. test\n  2. 接口测试\n  3. 其他的测试内容\n3. CI 平台\n4. 项目代码要提交到Github、 svn等服务器上\n5. 保证代码在开发机的正常\n  1. bug\n  2. 运行环境 ( 引用的包要写入packa)\n6. 保证jenkins 环境一切正常\n7. 发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)\n8. 必要的静态资源服务器\n9. 配置jenkins的自动化处理流程\n\n\n\n\n参考文章:\n> https://www.cnblogs.com/loveyouyou616/p/8714544.html\n\n","source":"_posts/使用Jenkins构建前端持续集成.md","raw":"---\ntitle: 使用Jenkins构建前端持续集成\ndate: 2019-03-16 12:34:36\ncategories: CI\ntags: [CI, Jenkins, Centos, 前端持续集成]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n1. 安装JDK\n\n直接使用yum 安装的是 `openjdk` , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装\n\n\n```\nyum install -y java\n```\n\n2. 安装jenkins\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n\n```\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\nyum install -y jenkins\n```\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n```\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n```\n\n3. 配置jenkis的端口\n\njenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口\n\n```\nvim /etc/sysconfig/jenkins\n```\n\n找到修改端口号：\n\n> JENKINS_PORT=\"8080\" \n\n4. 启动jenkins \n\n\n```\nservice jenkins start/stop/restart\n```\n* 安装成功后Jenkins将作为一个守护进程随系统启动\n* 系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改`/var/log/jenkins`, `/var/lib/jenkins`, 和`/var/cache/jenkins`的所有者\n* 启动的时候将从/etc/sysconfig/jenkins获取配置参数\n* 默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置\n* Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo\n\n\n## 配置阶段\n安装好`jenkins` 后 ， 我们就可以根据刚才所设置的端口号访问 `jenkins` 服务了 \n\n比如进入 `127.0.0.1:8081` 访问`jenkins`\n\n首先会看到让我们输入初始密码\n\n它提示我们进入 `/var/lib/jenkins/secrets/initialAdminPassword ` 查看\n\n![输入初始密码](http://img.nixiaolei.com/2019-03-09-16-16-27.png)\n\n\n\n输入密码无误后， 就是提示我们安装对应的插件了，\n\n左边是推荐安装， 右边是自定义安装，  这里我们建议点击 `推荐安装`\n\n![选择推荐安装](http://img.nixiaolei.com/2019-03-09-16-17-31.png)\n\n\n\n\n安装过程可能稍长\n\n![等待安装完毕 ](http://img.nixiaolei.com/jenkins03.png)\n\n\n这时我们创建一个 `Jenkins` 账户， \n一定要牢记你的输入账号和密码， 用作之后的登录\n\n![创建账户](http://img.nixiaolei.com/2019-03-09-16-29-08.png)\n\n\n\n创建账户之后， 会显示一个 `jenkins` 的资源根路径， 一般不需要修改， 保持默认即可\n\n\n![资源路径](http://img.nixiaolei.com/2019-03-09-16-32-04.png)\n\n\n\n\n之后就是愉快的`jenkins` 之旅啦\n\n![开始使用Jenkins](http://img.nixiaolei.com/2019-03-09-16-32-37.png)\n\n\n## 补善插件阶段\n我们要做的前端持续集成， 所以 `jenkins` 默认安装的插件 并不能完全的满足我们的需求\n\n进入`jenkins` 主页面后， 找到插件管理\n\n![插件管理](http://img.nixiaolei.com/2019-03-09-16-36-26.png)\n\n\n\n首先查看我们必要的插件是否安装好了\n* NodeJs Plugin\n* Publish Over SSH\n* GitHub\n\n如果发现没有安装的就安装， 查漏补缺\n\n\n\n## 变量及远程服务器基本配置\n\n插件安装好后, 进入`系统设置` 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好\n\n![系统设置](http://img.nixiaolei.com/2019-03-09-17-36-54.png)\n\n\n管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱\n\n![邮件地址](http://img.nixiaolei.com/2019-03-09-17-42-24.png)\n\n(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上\n\n![github](http://img.nixiaolei.com/2019-03-09-17-43-51.png)\n\n\n比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址\n\n点击新增添加你的服务器\n\n![添加你的服务器](http://img.nixiaolei.com/2019-03-09-17-48-05.png)\n\n\n\n点击新增后, 这里有几个关键的参数,  需要注意\n\n![参数注意](http://img.nixiaolei.com/2019-03-09-17-51-39.png)\n\n连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录\n\n![配置免密](http://img.nixiaolei.com/2019-03-09-17-54-49.png)\n\n\n> 填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，\n\n\n![编路径错误](http://img.nixiaolei.com/2019-03-10-10-43-33.png)\n\n\n\n\n因为`jenkins `的在运行时会自动的创建一个名为`jenkins`的用户， 而这个用户的权限不够，无法访问你的目录\n\n![编运行身份](http://img.nixiaolei.com/2019-03-10-10-46-12.png)\n\n\n\n解决方案有两个:\n1. 把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限\n2. 把`jenkins` 的运行身份修改为 `root`, 但是会有点安全性问题\n\n本次实践以学习为目的， 所以这里我选择了第二钟\n\n> 相关操作文章: https://blog.csdn.net/jeikerxiao/article/details/80768949\n\n\nssh 免密配置成功后， 我们就可以开始创建一个自己的任务了\n\n\n\n## 创建任务阶段\n\n回到主页， 找到`新建任务`\n\n\n![编新建任务](http://img.nixiaolei.com/2019-03-10-10-55-02.png)\n\n\n\n进入新建任务后， 有几种不同的项目， 我们这里选择 `自由风格`， 并且输入项目名称\n\n![编自由风格](http://img.nixiaolei.com/2019-03-10-10-59-00.png)\n\n创建好项目后就会自动进入 当前项目的配置文件中\n\n\n首先我们看到`General`, 这是一些全局的配置， 在这里我们可以写上该项目的描述\n\n![编全局配置](http://img.nixiaolei.com/2019-03-10-11-02-26.png)\n\n\n`General`的后面几个类目是构建项目阶段几个比较大的步骤和流程\n\n\n如果你要配置的“github”项目， 可以在`Git`这里打上勾\n\n并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在`\tCredentials` 处新增配置\n\n\n![编github项目](http://img.nixiaolei.com/2019-03-10-11-11-35.png)\n\n\n接下来是看看构建触发器， 这里的填写根据你的工程需要， \n\n可以配置定时任务 或 多任务构建\n\n> 本次演示我并没有用到\n\n![编触发器](http://img.nixiaolei.com/2019-03-10-13-26-16.png)\n\n\n\n现在来到我们的重点`构建` ， \n\n我们可以添加步骤，我们可以看到能够支持 `Node`、`shell` 、`批处理`等等方式\n\n这些添加的步骤会按顺序执行， \n\n![编构建](http://img.nixiaolei.com/2019-03-10-13-30-56.png)\n\n\n我们需要`shell` 脚本来运行npm 命令\n\n所以我创建了 `shell`的操作步骤\n\n![编shell脚本](http://img.nixiaolei.com/2019-03-10-13-35-35.png)\n\n\n\n基于此， `jenkins` 就会自动帮我们做好 测试与打包的步骤，\n\n在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个`send files or execute commands over SSH` 步骤， \n\n\n![编overSSH](http://img.nixiaolei.com/2019-03-16-13-05-58.png)\n\n\n建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去\n\n> deploy文件参考\n\n![编deploy文件参考](http://img.nixiaolei.com/2019-03-16-13-08-32.png)\n\n\n\n## 你可能遇到的问题\n\n### 命令无效或不存在\n> 这里拿npm举例，  其他命令如:node ,都是同理\n\n![编无法使用npm命令](http://img.nixiaolei.com/2019-03-16-12-54-06.png)\n\n\n因为全局的命令需要设置`软连接` Jenkins 才可以访问的到\n\n如何设置:\n\n先查看一下你的 npm 在哪\n> whereis npm\n\n![编查看npm位置](http://img.nixiaolei.com/2019-03-16-12-57-08.png)\n\n这个`/usr/local/bin/npm` 就是你的npm所在位置 ( 使用带 `local` 的地址)\n\n我们来创建 `软连接`, 这里使用刚刚获取到的npm \n\n> ln -s /usr/local/bin/npm   /usr/bin\n \n\n如果出现无法修改的情况， 那我们就将他强制更改 😄\n\n> ln -sf /usr/local/bin/npm   /usr/bin\n\n\n再去构建一次Jenkins 任务\n\n看到控制台输出， 现在npm 可以正常运行了\n\n![编npm运行成功](http://img.nixiaolei.com/2019-03-10-18-56-51.png)\n\n\n\n\n\n\n## 持续集成的必要条件\n1. 必须有github 、svn或私有git服务器\n2. 完整的项目\n  1. test\n  2. 接口测试\n  3. 其他的测试内容\n3. CI 平台\n4. 项目代码要提交到Github、 svn等服务器上\n5. 保证代码在开发机的正常\n  1. bug\n  2. 运行环境 ( 引用的包要写入packa)\n6. 保证jenkins 环境一切正常\n7. 发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)\n8. 必要的静态资源服务器\n9. 配置jenkins的自动化处理流程\n\n\n\n\n参考文章:\n> https://www.cnblogs.com/loveyouyou616/p/8714544.html\n\n","slug":"使用Jenkins构建前端持续集成","published":1,"updated":"2019-03-20T14:52:16.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wmo0065ssuwihgyi4po","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<ol>\n<li>安装JDK</li>\n</ol>\n<p>直接使用yum 安装的是 <code>openjdk</code> , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y java</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装jenkins</li>\n</ol>\n<p>添加Jenkins库到yum库，Jenkins将从这里下载安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</span><br><span class=\"line\">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class=\"line\">yum install -y jenkins</span><br></pre></td></tr></table></figure>\n<p>添加Jenkins库到yum库，Jenkins将从这里下载安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm</span><br><span class=\"line\">rpm -ivh jenkins-2.7.3-1.1.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>配置jenkis的端口</li>\n</ol>\n<p>jenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure>\n<p>找到修改端口号：</p>\n<blockquote>\n<p>JENKINS_PORT=”8080” </p>\n</blockquote>\n<ol start=\"4\">\n<li>启动jenkins </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start/stop/restart</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装成功后Jenkins将作为一个守护进程随系统启动</li>\n<li>系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改<code>/var/log/jenkins</code>, <code>/var/lib/jenkins</code>, 和<code>/var/cache/jenkins</code>的所有者</li>\n<li>启动的时候将从/etc/sysconfig/jenkins获取配置参数</li>\n<li>默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置</li>\n<li>Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo</li>\n</ul>\n<h2 id=\"配置阶段\"><a href=\"#配置阶段\" class=\"headerlink\" title=\"配置阶段\"></a>配置阶段</h2><p>安装好<code>jenkins</code> 后 ， 我们就可以根据刚才所设置的端口号访问 <code>jenkins</code> 服务了 </p>\n<p>比如进入 <code>127.0.0.1:8081</code> 访问<code>jenkins</code></p>\n<p>首先会看到让我们输入初始密码</p>\n<p>它提示我们进入 <code>/var/lib/jenkins/secrets/initialAdminPassword</code> 查看</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-16-27.png\" alt=\"输入初始密码\"></p>\n<p>输入密码无误后， 就是提示我们安装对应的插件了，</p>\n<p>左边是推荐安装， 右边是自定义安装，  这里我们建议点击 <code>推荐安装</code></p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-17-31.png\" alt=\"选择推荐安装\"></p>\n<p>安装过程可能稍长</p>\n<p><img src=\"http://img.nixiaolei.com/jenkins03.png\" alt=\"等待安装完毕 \"></p>\n<p>这时我们创建一个 <code>Jenkins</code> 账户，<br>一定要牢记你的输入账号和密码， 用作之后的登录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-29-08.png\" alt=\"创建账户\"></p>\n<p>创建账户之后， 会显示一个 <code>jenkins</code> 的资源根路径， 一般不需要修改， 保持默认即可</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-32-04.png\" alt=\"资源路径\"></p>\n<p>之后就是愉快的<code>jenkins</code> 之旅啦</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-32-37.png\" alt=\"开始使用Jenkins\"></p>\n<h2 id=\"补善插件阶段\"><a href=\"#补善插件阶段\" class=\"headerlink\" title=\"补善插件阶段\"></a>补善插件阶段</h2><p>我们要做的前端持续集成， 所以 <code>jenkins</code> 默认安装的插件 并不能完全的满足我们的需求</p>\n<p>进入<code>jenkins</code> 主页面后， 找到插件管理</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-36-26.png\" alt=\"插件管理\"></p>\n<p>首先查看我们必要的插件是否安装好了</p>\n<ul>\n<li>NodeJs Plugin</li>\n<li>Publish Over SSH</li>\n<li>GitHub</li>\n</ul>\n<p>如果发现没有安装的就安装， 查漏补缺</p>\n<h2 id=\"变量及远程服务器基本配置\"><a href=\"#变量及远程服务器基本配置\" class=\"headerlink\" title=\"变量及远程服务器基本配置\"></a>变量及远程服务器基本配置</h2><p>插件安装好后, 进入<code>系统设置</code> 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-36-54.png\" alt=\"系统设置\"></p>\n<p>管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-42-24.png\" alt=\"邮件地址\"></p>\n<p>(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-43-51.png\" alt=\"github\"></p>\n<p>比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址</p>\n<p>点击新增添加你的服务器</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-48-05.png\" alt=\"添加你的服务器\"></p>\n<p>点击新增后, 这里有几个关键的参数,  需要注意</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-51-39.png\" alt=\"参数注意\"></p>\n<p>连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-54-49.png\" alt=\"配置免密\"></p>\n<blockquote>\n<p>填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-43-33.png\" alt=\"编路径错误\"></p>\n<p>因为<code>jenkins</code>的在运行时会自动的创建一个名为<code>jenkins</code>的用户， 而这个用户的权限不够，无法访问你的目录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-46-12.png\" alt=\"编运行身份\"></p>\n<p>解决方案有两个:</p>\n<ol>\n<li>把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限</li>\n<li>把<code>jenkins</code> 的运行身份修改为 <code>root</code>, 但是会有点安全性问题</li>\n</ol>\n<p>本次实践以学习为目的， 所以这里我选择了第二钟</p>\n<blockquote>\n<p>相关操作文章: <a href=\"https://blog.csdn.net/jeikerxiao/article/details/80768949\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jeikerxiao/article/details/80768949</a></p>\n</blockquote>\n<p>ssh 免密配置成功后， 我们就可以开始创建一个自己的任务了</p>\n<h2 id=\"创建任务阶段\"><a href=\"#创建任务阶段\" class=\"headerlink\" title=\"创建任务阶段\"></a>创建任务阶段</h2><p>回到主页， 找到<code>新建任务</code></p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-55-02.png\" alt=\"编新建任务\"></p>\n<p>进入新建任务后， 有几种不同的项目， 我们这里选择 <code>自由风格</code>， 并且输入项目名称</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-59-00.png\" alt=\"编自由风格\"></p>\n<p>创建好项目后就会自动进入 当前项目的配置文件中</p>\n<p>首先我们看到<code>General</code>, 这是一些全局的配置， 在这里我们可以写上该项目的描述</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-11-02-26.png\" alt=\"编全局配置\"></p>\n<p><code>General</code>的后面几个类目是构建项目阶段几个比较大的步骤和流程</p>\n<p>如果你要配置的“github”项目， 可以在<code>Git</code>这里打上勾</p>\n<p>并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在<code>Credentials</code> 处新增配置</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-11-11-35.png\" alt=\"编github项目\"></p>\n<p>接下来是看看构建触发器， 这里的填写根据你的工程需要， </p>\n<p>可以配置定时任务 或 多任务构建</p>\n<blockquote>\n<p>本次演示我并没有用到</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-26-16.png\" alt=\"编触发器\"></p>\n<p>现在来到我们的重点<code>构建</code> ， </p>\n<p>我们可以添加步骤，我们可以看到能够支持 <code>Node</code>、<code>shell</code> 、<code>批处理</code>等等方式</p>\n<p>这些添加的步骤会按顺序执行， </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-30-56.png\" alt=\"编构建\"></p>\n<p>我们需要<code>shell</code> 脚本来运行npm 命令</p>\n<p>所以我创建了 <code>shell</code>的操作步骤</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-35-35.png\" alt=\"编shell脚本\"></p>\n<p>基于此， <code>jenkins</code> 就会自动帮我们做好 测试与打包的步骤，</p>\n<p>在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个<code>send files or execute commands over SSH</code> 步骤， </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-05-58.png\" alt=\"编overSSH\"></p>\n<p>建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去</p>\n<blockquote>\n<p>deploy文件参考</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-08-32.png\" alt=\"编deploy文件参考\"></p>\n<h2 id=\"你可能遇到的问题\"><a href=\"#你可能遇到的问题\" class=\"headerlink\" title=\"你可能遇到的问题\"></a>你可能遇到的问题</h2><h3 id=\"命令无效或不存在\"><a href=\"#命令无效或不存在\" class=\"headerlink\" title=\"命令无效或不存在\"></a>命令无效或不存在</h3><blockquote>\n<p>这里拿npm举例，  其他命令如:node ,都是同理</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-12-54-06.png\" alt=\"编无法使用npm命令\"></p>\n<p>因为全局的命令需要设置<code>软连接</code> Jenkins 才可以访问的到</p>\n<p>如何设置:</p>\n<p>先查看一下你的 npm 在哪</p>\n<blockquote>\n<p>whereis npm</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-12-57-08.png\" alt=\"编查看npm位置\"></p>\n<p>这个<code>/usr/local/bin/npm</code> 就是你的npm所在位置 ( 使用带 <code>local</code> 的地址)</p>\n<p>我们来创建 <code>软连接</code>, 这里使用刚刚获取到的npm </p>\n<blockquote>\n<p>ln -s /usr/local/bin/npm   /usr/bin</p>\n</blockquote>\n<p>如果出现无法修改的情况， 那我们就将他强制更改 😄</p>\n<blockquote>\n<p>ln -sf /usr/local/bin/npm   /usr/bin</p>\n</blockquote>\n<p>再去构建一次Jenkins 任务</p>\n<p>看到控制台输出， 现在npm 可以正常运行了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-18-56-51.png\" alt=\"编npm运行成功\"></p>\n<h2 id=\"持续集成的必要条件\"><a href=\"#持续集成的必要条件\" class=\"headerlink\" title=\"持续集成的必要条件\"></a>持续集成的必要条件</h2><ol>\n<li>必须有github 、svn或私有git服务器</li>\n<li>完整的项目<ol>\n<li>test</li>\n<li>接口测试</li>\n<li>其他的测试内容</li>\n</ol>\n</li>\n<li>CI 平台</li>\n<li>项目代码要提交到Github、 svn等服务器上</li>\n<li>保证代码在开发机的正常<ol>\n<li>bug</li>\n<li>运行环境 ( 引用的包要写入packa)</li>\n</ol>\n</li>\n<li>保证jenkins 环境一切正常</li>\n<li>发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)</li>\n<li>必要的静态资源服务器</li>\n<li>配置jenkins的自动化处理流程</li>\n</ol>\n<p>参考文章:</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/loveyouyou616/p/8714544.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/loveyouyou616/p/8714544.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<ol>\n<li>安装JDK</li>\n</ol>\n<p>直接使用yum 安装的是 <code>openjdk</code> , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y java</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装jenkins</li>\n</ol>\n<p>添加Jenkins库到yum库，Jenkins将从这里下载安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</span><br><span class=\"line\">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class=\"line\">yum install -y jenkins</span><br></pre></td></tr></table></figure>\n<p>添加Jenkins库到yum库，Jenkins将从这里下载安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm</span><br><span class=\"line\">rpm -ivh jenkins-2.7.3-1.1.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>配置jenkis的端口</li>\n</ol>\n<p>jenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure>\n<p>找到修改端口号：</p>\n<blockquote>\n<p>JENKINS_PORT=”8080” </p>\n</blockquote>\n<ol start=\"4\">\n<li>启动jenkins </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start/stop/restart</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装成功后Jenkins将作为一个守护进程随系统启动</li>\n<li>系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改<code>/var/log/jenkins</code>, <code>/var/lib/jenkins</code>, 和<code>/var/cache/jenkins</code>的所有者</li>\n<li>启动的时候将从/etc/sysconfig/jenkins获取配置参数</li>\n<li>默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置</li>\n<li>Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo</li>\n</ul>\n<h2 id=\"配置阶段\"><a href=\"#配置阶段\" class=\"headerlink\" title=\"配置阶段\"></a>配置阶段</h2><p>安装好<code>jenkins</code> 后 ， 我们就可以根据刚才所设置的端口号访问 <code>jenkins</code> 服务了 </p>\n<p>比如进入 <code>127.0.0.1:8081</code> 访问<code>jenkins</code></p>\n<p>首先会看到让我们输入初始密码</p>\n<p>它提示我们进入 <code>/var/lib/jenkins/secrets/initialAdminPassword</code> 查看</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-16-27.png\" alt=\"输入初始密码\"></p>\n<p>输入密码无误后， 就是提示我们安装对应的插件了，</p>\n<p>左边是推荐安装， 右边是自定义安装，  这里我们建议点击 <code>推荐安装</code></p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-17-31.png\" alt=\"选择推荐安装\"></p>\n<p>安装过程可能稍长</p>\n<p><img src=\"http://img.nixiaolei.com/jenkins03.png\" alt=\"等待安装完毕 \"></p>\n<p>这时我们创建一个 <code>Jenkins</code> 账户，<br>一定要牢记你的输入账号和密码， 用作之后的登录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-29-08.png\" alt=\"创建账户\"></p>\n<p>创建账户之后， 会显示一个 <code>jenkins</code> 的资源根路径， 一般不需要修改， 保持默认即可</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-32-04.png\" alt=\"资源路径\"></p>\n<p>之后就是愉快的<code>jenkins</code> 之旅啦</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-32-37.png\" alt=\"开始使用Jenkins\"></p>\n<h2 id=\"补善插件阶段\"><a href=\"#补善插件阶段\" class=\"headerlink\" title=\"补善插件阶段\"></a>补善插件阶段</h2><p>我们要做的前端持续集成， 所以 <code>jenkins</code> 默认安装的插件 并不能完全的满足我们的需求</p>\n<p>进入<code>jenkins</code> 主页面后， 找到插件管理</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-16-36-26.png\" alt=\"插件管理\"></p>\n<p>首先查看我们必要的插件是否安装好了</p>\n<ul>\n<li>NodeJs Plugin</li>\n<li>Publish Over SSH</li>\n<li>GitHub</li>\n</ul>\n<p>如果发现没有安装的就安装， 查漏补缺</p>\n<h2 id=\"变量及远程服务器基本配置\"><a href=\"#变量及远程服务器基本配置\" class=\"headerlink\" title=\"变量及远程服务器基本配置\"></a>变量及远程服务器基本配置</h2><p>插件安装好后, 进入<code>系统设置</code> 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-36-54.png\" alt=\"系统设置\"></p>\n<p>管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-42-24.png\" alt=\"邮件地址\"></p>\n<p>(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-43-51.png\" alt=\"github\"></p>\n<p>比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址</p>\n<p>点击新增添加你的服务器</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-48-05.png\" alt=\"添加你的服务器\"></p>\n<p>点击新增后, 这里有几个关键的参数,  需要注意</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-51-39.png\" alt=\"参数注意\"></p>\n<p>连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-09-17-54-49.png\" alt=\"配置免密\"></p>\n<blockquote>\n<p>填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-43-33.png\" alt=\"编路径错误\"></p>\n<p>因为<code>jenkins</code>的在运行时会自动的创建一个名为<code>jenkins</code>的用户， 而这个用户的权限不够，无法访问你的目录</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-46-12.png\" alt=\"编运行身份\"></p>\n<p>解决方案有两个:</p>\n<ol>\n<li>把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限</li>\n<li>把<code>jenkins</code> 的运行身份修改为 <code>root</code>, 但是会有点安全性问题</li>\n</ol>\n<p>本次实践以学习为目的， 所以这里我选择了第二钟</p>\n<blockquote>\n<p>相关操作文章: <a href=\"https://blog.csdn.net/jeikerxiao/article/details/80768949\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jeikerxiao/article/details/80768949</a></p>\n</blockquote>\n<p>ssh 免密配置成功后， 我们就可以开始创建一个自己的任务了</p>\n<h2 id=\"创建任务阶段\"><a href=\"#创建任务阶段\" class=\"headerlink\" title=\"创建任务阶段\"></a>创建任务阶段</h2><p>回到主页， 找到<code>新建任务</code></p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-55-02.png\" alt=\"编新建任务\"></p>\n<p>进入新建任务后， 有几种不同的项目， 我们这里选择 <code>自由风格</code>， 并且输入项目名称</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-10-59-00.png\" alt=\"编自由风格\"></p>\n<p>创建好项目后就会自动进入 当前项目的配置文件中</p>\n<p>首先我们看到<code>General</code>, 这是一些全局的配置， 在这里我们可以写上该项目的描述</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-11-02-26.png\" alt=\"编全局配置\"></p>\n<p><code>General</code>的后面几个类目是构建项目阶段几个比较大的步骤和流程</p>\n<p>如果你要配置的“github”项目， 可以在<code>Git</code>这里打上勾</p>\n<p>并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在<code>Credentials</code> 处新增配置</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-11-11-35.png\" alt=\"编github项目\"></p>\n<p>接下来是看看构建触发器， 这里的填写根据你的工程需要， </p>\n<p>可以配置定时任务 或 多任务构建</p>\n<blockquote>\n<p>本次演示我并没有用到</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-26-16.png\" alt=\"编触发器\"></p>\n<p>现在来到我们的重点<code>构建</code> ， </p>\n<p>我们可以添加步骤，我们可以看到能够支持 <code>Node</code>、<code>shell</code> 、<code>批处理</code>等等方式</p>\n<p>这些添加的步骤会按顺序执行， </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-30-56.png\" alt=\"编构建\"></p>\n<p>我们需要<code>shell</code> 脚本来运行npm 命令</p>\n<p>所以我创建了 <code>shell</code>的操作步骤</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-13-35-35.png\" alt=\"编shell脚本\"></p>\n<p>基于此， <code>jenkins</code> 就会自动帮我们做好 测试与打包的步骤，</p>\n<p>在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个<code>send files or execute commands over SSH</code> 步骤， </p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-05-58.png\" alt=\"编overSSH\"></p>\n<p>建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去</p>\n<blockquote>\n<p>deploy文件参考</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-13-08-32.png\" alt=\"编deploy文件参考\"></p>\n<h2 id=\"你可能遇到的问题\"><a href=\"#你可能遇到的问题\" class=\"headerlink\" title=\"你可能遇到的问题\"></a>你可能遇到的问题</h2><h3 id=\"命令无效或不存在\"><a href=\"#命令无效或不存在\" class=\"headerlink\" title=\"命令无效或不存在\"></a>命令无效或不存在</h3><blockquote>\n<p>这里拿npm举例，  其他命令如:node ,都是同理</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-12-54-06.png\" alt=\"编无法使用npm命令\"></p>\n<p>因为全局的命令需要设置<code>软连接</code> Jenkins 才可以访问的到</p>\n<p>如何设置:</p>\n<p>先查看一下你的 npm 在哪</p>\n<blockquote>\n<p>whereis npm</p>\n</blockquote>\n<p><img src=\"http://img.nixiaolei.com/2019-03-16-12-57-08.png\" alt=\"编查看npm位置\"></p>\n<p>这个<code>/usr/local/bin/npm</code> 就是你的npm所在位置 ( 使用带 <code>local</code> 的地址)</p>\n<p>我们来创建 <code>软连接</code>, 这里使用刚刚获取到的npm </p>\n<blockquote>\n<p>ln -s /usr/local/bin/npm   /usr/bin</p>\n</blockquote>\n<p>如果出现无法修改的情况， 那我们就将他强制更改 😄</p>\n<blockquote>\n<p>ln -sf /usr/local/bin/npm   /usr/bin</p>\n</blockquote>\n<p>再去构建一次Jenkins 任务</p>\n<p>看到控制台输出， 现在npm 可以正常运行了</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-10-18-56-51.png\" alt=\"编npm运行成功\"></p>\n<h2 id=\"持续集成的必要条件\"><a href=\"#持续集成的必要条件\" class=\"headerlink\" title=\"持续集成的必要条件\"></a>持续集成的必要条件</h2><ol>\n<li>必须有github 、svn或私有git服务器</li>\n<li>完整的项目<ol>\n<li>test</li>\n<li>接口测试</li>\n<li>其他的测试内容</li>\n</ol>\n</li>\n<li>CI 平台</li>\n<li>项目代码要提交到Github、 svn等服务器上</li>\n<li>保证代码在开发机的正常<ol>\n<li>bug</li>\n<li>运行环境 ( 引用的包要写入packa)</li>\n</ol>\n</li>\n<li>保证jenkins 环境一切正常</li>\n<li>发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)</li>\n<li>必要的静态资源服务器</li>\n<li>配置jenkins的自动化处理流程</li>\n</ol>\n<p>参考文章:</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/loveyouyou616/p/8714544.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/loveyouyou616/p/8714544.html</a></p>\n</blockquote>\n"},{"title":"面向对象设计原则之S.O.L.I.D","date":"2019-03-24T01:39:12.000Z","_content":"\n\n作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步\n\n\n那编程里如何提升内功， 主要就是体现在编程思想上了，\n\n## 逐层提升你编程思想\n比如从一开始的最传统的面向对象 到 面向切面\n\n面向对象 -> 工厂模式 -> 面向切面\n\n\n从 \"oop 的静态抽象\" 演变为 \"aop的动态抽象\"\n\n![提升思想](http://img.nixiaolei.com/2019-03-24-09-45-24.png)\n\n\n## SOLID原则的基本概念\n\n让我们来看下 `SOLID` 的概念\n\n程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。\n\n\n## SOLID这几个字母代表什么意义？\n\n\n### S (单一一功能原则)\n> Single Responsibility Principle \n\n单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。\n换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。\n在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。\n单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。\n责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，\n从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。\n\n\n**缩减一下就是:**\n> 让每个函数和每个类都只做一件小事，职责单一，解耦和\n\n\n\n### O (开闭原则)\n> Open Close Principle\n\n开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。\n软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。\n\n对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。\n\n说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。\n\n\n让我们来看下一个简单的 `Ts` demo\n\n**糟糕的实现**\n```TypeScript\nclass Animal {\n\n  constructor(name: any) {\n    super(name)\n    this.name = name\n  }\n  eat() {\n    if(this.name == '小猫') {\n      console.log(this.name + '吃猫粮')\n    } else if( this.name == \"小狗\") {\n      console.log(this.name + '吃狗粮')\n    }\n  }\n}\n```\n\n这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背\n\n\n\n**利用 `OCP` 思想**\n```TypeScript\n// Animal 抽象类\nabstract class Animal {\n  public name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  abstract eat(): any;\n}\n\n// 实现Animal抽象类\nclass Dog extends Animal {\n  constructor(name: any) {\n    super(name)\n  }\n  eat() {\n    console.log(this.name + '吃狗粮')\n  }\n}\nvar d = new Dog('小狗')\nd.eat()\n```\n\n上面的代码中， 首先使用`abstract` 定义抽象类和抽象方法，提供其他类继承的基类\n我们定义只要是`Animal`就必须要有`eat`方法\n\n于是， 我们创建了一个`Dog` 继承`Animal` ,  \n这个`Dog`就不一般了， 它规定了必须重新实现 `eat` 方法， 并且可以扩展自己的方法\n\n当我们将来如果需要一只 `Cat`\n我们一样只需要让他继承`Animal`抽象类， 然后实现一个自己的`eat`方法\n\n\n\n### L (里⽒氏替换原则)\n> Liskov Substitution Principle\n\n里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。\n\n**子类必须能够替换他们的基类**。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现`if/else`之类对子类类型进行判断的条件。 里氏替换原则`LSP`使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， `LSP`则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。\n\n当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。\n\n\n\n\n**缩减一下就是:**\n> 老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系\n\n\n\n### I (接⼝隔离原则)\n> Interface Segregation Principle\n\n接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。\n\n不能强迫用户去依赖那些他们不能使用的接口。 换句话说， **使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。** 注意： 在代码中应用 `ISP` 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。\n\n这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， `ISP`原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。\n\n\n\n**缩减一下就是:**\n> 每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口\n\n\n\n\n### D (依赖反转原则)\n> Dependency Inversion Principle\n\n依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。\n\n**高层模块不应该依赖于底层模块， 二者都应该依赖于抽象**\n**抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)**\n\n类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。\n\n\n**举个例子:**\n\n你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。\n\n此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品\n\n\n\n#### 依赖反转原则\n\n**依赖注入**\n\n当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。\n\n**注⼊入过程**\n\n如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊\n\n\n**依赖反转有两种方式**\n1. 设值注入（在类上方设置字段）\n2. 构造注入 （在`constructor`中接收需要地参数）\n\n![依赖反转原则](http://img.nixiaolei.com/2019-03-24-13-25-50.png)\n\n\n#### DI（依赖注⼊入）\n> 依赖注⼊入（Dependency Injection）\n\n为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。\n\n\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/面向对象设计原则之SOLID.md","raw":"---\ntitle: 面向对象设计原则之S.O.L.I.D\ndate: 2019-03-24 09:39:12\ncategories: 编程思想\ntags: [oop, 编程原则]\n---\n\n\n作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步\n\n\n那编程里如何提升内功， 主要就是体现在编程思想上了，\n\n## 逐层提升你编程思想\n比如从一开始的最传统的面向对象 到 面向切面\n\n面向对象 -> 工厂模式 -> 面向切面\n\n\n从 \"oop 的静态抽象\" 演变为 \"aop的动态抽象\"\n\n![提升思想](http://img.nixiaolei.com/2019-03-24-09-45-24.png)\n\n\n## SOLID原则的基本概念\n\n让我们来看下 `SOLID` 的概念\n\n程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。\n\n\n## SOLID这几个字母代表什么意义？\n\n\n### S (单一一功能原则)\n> Single Responsibility Principle \n\n单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。\n换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。\n在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。\n单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。\n责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，\n从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。\n\n\n**缩减一下就是:**\n> 让每个函数和每个类都只做一件小事，职责单一，解耦和\n\n\n\n### O (开闭原则)\n> Open Close Principle\n\n开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。\n软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。\n\n对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。\n\n说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。\n\n\n让我们来看下一个简单的 `Ts` demo\n\n**糟糕的实现**\n```TypeScript\nclass Animal {\n\n  constructor(name: any) {\n    super(name)\n    this.name = name\n  }\n  eat() {\n    if(this.name == '小猫') {\n      console.log(this.name + '吃猫粮')\n    } else if( this.name == \"小狗\") {\n      console.log(this.name + '吃狗粮')\n    }\n  }\n}\n```\n\n这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背\n\n\n\n**利用 `OCP` 思想**\n```TypeScript\n// Animal 抽象类\nabstract class Animal {\n  public name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  abstract eat(): any;\n}\n\n// 实现Animal抽象类\nclass Dog extends Animal {\n  constructor(name: any) {\n    super(name)\n  }\n  eat() {\n    console.log(this.name + '吃狗粮')\n  }\n}\nvar d = new Dog('小狗')\nd.eat()\n```\n\n上面的代码中， 首先使用`abstract` 定义抽象类和抽象方法，提供其他类继承的基类\n我们定义只要是`Animal`就必须要有`eat`方法\n\n于是， 我们创建了一个`Dog` 继承`Animal` ,  \n这个`Dog`就不一般了， 它规定了必须重新实现 `eat` 方法， 并且可以扩展自己的方法\n\n当我们将来如果需要一只 `Cat`\n我们一样只需要让他继承`Animal`抽象类， 然后实现一个自己的`eat`方法\n\n\n\n### L (里⽒氏替换原则)\n> Liskov Substitution Principle\n\n里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。\n\n**子类必须能够替换他们的基类**。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现`if/else`之类对子类类型进行判断的条件。 里氏替换原则`LSP`使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， `LSP`则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。\n\n当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。\n\n\n\n\n**缩减一下就是:**\n> 老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系\n\n\n\n### I (接⼝隔离原则)\n> Interface Segregation Principle\n\n接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。\n\n不能强迫用户去依赖那些他们不能使用的接口。 换句话说， **使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。** 注意： 在代码中应用 `ISP` 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。\n\n这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， `ISP`原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。\n\n\n\n**缩减一下就是:**\n> 每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口\n\n\n\n\n### D (依赖反转原则)\n> Dependency Inversion Principle\n\n依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。\n\n**高层模块不应该依赖于底层模块， 二者都应该依赖于抽象**\n**抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)**\n\n类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。\n\n\n**举个例子:**\n\n你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。\n\n此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品\n\n\n\n#### 依赖反转原则\n\n**依赖注入**\n\n当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。\n\n**注⼊入过程**\n\n如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊\n\n\n**依赖反转有两种方式**\n1. 设值注入（在类上方设置字段）\n2. 构造注入 （在`constructor`中接收需要地参数）\n\n![依赖反转原则](http://img.nixiaolei.com/2019-03-24-13-25-50.png)\n\n\n#### DI（依赖注⼊入）\n> 依赖注⼊入（Dependency Injection）\n\n为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。\n\n\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"面向对象设计原则之SOLID","published":1,"updated":"2019-04-06T09:13:46.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wmq0067ssuwmz6uu3qq","content":"<p>作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步</p>\n<p>那编程里如何提升内功， 主要就是体现在编程思想上了，</p>\n<h2 id=\"逐层提升你编程思想\"><a href=\"#逐层提升你编程思想\" class=\"headerlink\" title=\"逐层提升你编程思想\"></a>逐层提升你编程思想</h2><p>比如从一开始的最传统的面向对象 到 面向切面</p>\n<p>面向对象 -&gt; 工厂模式 -&gt; 面向切面</p>\n<p>从 “oop 的静态抽象” 演变为 “aop的动态抽象”</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-09-45-24.png\" alt=\"提升思想\"></p>\n<h2 id=\"SOLID原则的基本概念\"><a href=\"#SOLID原则的基本概念\" class=\"headerlink\" title=\"SOLID原则的基本概念\"></a>SOLID原则的基本概念</h2><p>让我们来看下 <code>SOLID</code> 的概念</p>\n<p>程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。</p>\n<h2 id=\"SOLID这几个字母代表什么意义？\"><a href=\"#SOLID这几个字母代表什么意义？\" class=\"headerlink\" title=\"SOLID这几个字母代表什么意义？\"></a>SOLID这几个字母代表什么意义？</h2><h3 id=\"S-单一一功能原则\"><a href=\"#S-单一一功能原则\" class=\"headerlink\" title=\"S (单一一功能原则)\"></a>S (单一一功能原则)</h3><blockquote>\n<p>Single Responsibility Principle </p>\n</blockquote>\n<p>单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。<br>换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。<br>在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。<br>单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。<br>责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，<br>从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>让每个函数和每个类都只做一件小事，职责单一，解耦和</p>\n</blockquote>\n<h3 id=\"O-开闭原则\"><a href=\"#O-开闭原则\" class=\"headerlink\" title=\"O (开闭原则)\"></a>O (开闭原则)</h3><blockquote>\n<p>Open Close Principle</p>\n</blockquote>\n<p>开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。<br>软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。</p>\n<p>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。</p>\n<p>说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。</p>\n<p>让我们来看下一个简单的 <code>Ts</code> demo</p>\n<p><strong>糟糕的实现</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name == <span class=\"string\">'小猫'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃猫粮'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.name == <span class=\"string\">\"小狗\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃狗粮'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背</p>\n<p><strong>利用 <code>OCP</code> 思想</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Animal 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> eat(): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Animal抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃狗粮'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'小狗'</span>)</span><br><span class=\"line\">d.eat()</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码中， 首先使用<code>abstract</code> 定义抽象类和抽象方法，提供其他类继承的基类<br>我们定义只要是<code>Animal</code>就必须要有<code>eat</code>方法</p>\n<p>于是， 我们创建了一个<code>Dog</code> 继承<code>Animal</code> ,<br>这个<code>Dog</code>就不一般了， 它规定了必须重新实现 <code>eat</code> 方法， 并且可以扩展自己的方法</p>\n<p>当我们将来如果需要一只 <code>Cat</code><br>我们一样只需要让他继承<code>Animal</code>抽象类， 然后实现一个自己的<code>eat</code>方法</p>\n<h3 id=\"L-里⽒氏替换原则\"><a href=\"#L-里⽒氏替换原则\" class=\"headerlink\" title=\"L (里⽒氏替换原则)\"></a>L (里⽒氏替换原则)</h3><blockquote>\n<p>Liskov Substitution Principle</p>\n</blockquote>\n<p>里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。</p>\n<p><strong>子类必须能够替换他们的基类</strong>。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现<code>if/else</code>之类对子类类型进行判断的条件。 里氏替换原则<code>LSP</code>使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， <code>LSP</code>则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。</p>\n<p>当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系</p>\n</blockquote>\n<h3 id=\"I-接⼝隔离原则\"><a href=\"#I-接⼝隔离原则\" class=\"headerlink\" title=\"I (接⼝隔离原则)\"></a>I (接⼝隔离原则)</h3><blockquote>\n<p>Interface Segregation Principle</p>\n</blockquote>\n<p>接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。</p>\n<p>不能强迫用户去依赖那些他们不能使用的接口。 换句话说， <strong>使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。</strong> 注意： 在代码中应用 <code>ISP</code> 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。</p>\n<p>这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， <code>ISP</code>原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口</p>\n</blockquote>\n<h3 id=\"D-依赖反转原则\"><a href=\"#D-依赖反转原则\" class=\"headerlink\" title=\"D (依赖反转原则)\"></a>D (依赖反转原则)</h3><blockquote>\n<p>Dependency Inversion Principle</p>\n</blockquote>\n<p>依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。</p>\n<p><strong>高层模块不应该依赖于底层模块， 二者都应该依赖于抽象</strong><br><strong>抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)</strong></p>\n<p>类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。</p>\n<p><strong>举个例子:</strong></p>\n<p>你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。</p>\n<p>此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品</p>\n<h4 id=\"依赖反转原则\"><a href=\"#依赖反转原则\" class=\"headerlink\" title=\"依赖反转原则\"></a>依赖反转原则</h4><p><strong>依赖注入</strong></p>\n<p>当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。</p>\n<p><strong>注⼊入过程</strong></p>\n<p>如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊</p>\n<p><strong>依赖反转有两种方式</strong></p>\n<ol>\n<li>设值注入（在类上方设置字段）</li>\n<li>构造注入 （在<code>constructor</code>中接收需要地参数）</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-13-25-50.png\" alt=\"依赖反转原则\"></p>\n<h4 id=\"DI（依赖注⼊入）\"><a href=\"#DI（依赖注⼊入）\" class=\"headerlink\" title=\"DI（依赖注⼊入）\"></a>DI（依赖注⼊入）</h4><blockquote>\n<p>依赖注⼊入（Dependency Injection）</p>\n</blockquote>\n<p>为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。</p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步</p>\n<p>那编程里如何提升内功， 主要就是体现在编程思想上了，</p>\n<h2 id=\"逐层提升你编程思想\"><a href=\"#逐层提升你编程思想\" class=\"headerlink\" title=\"逐层提升你编程思想\"></a>逐层提升你编程思想</h2><p>比如从一开始的最传统的面向对象 到 面向切面</p>\n<p>面向对象 -&gt; 工厂模式 -&gt; 面向切面</p>\n<p>从 “oop 的静态抽象” 演变为 “aop的动态抽象”</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-09-45-24.png\" alt=\"提升思想\"></p>\n<h2 id=\"SOLID原则的基本概念\"><a href=\"#SOLID原则的基本概念\" class=\"headerlink\" title=\"SOLID原则的基本概念\"></a>SOLID原则的基本概念</h2><p>让我们来看下 <code>SOLID</code> 的概念</p>\n<p>程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。</p>\n<h2 id=\"SOLID这几个字母代表什么意义？\"><a href=\"#SOLID这几个字母代表什么意义？\" class=\"headerlink\" title=\"SOLID这几个字母代表什么意义？\"></a>SOLID这几个字母代表什么意义？</h2><h3 id=\"S-单一一功能原则\"><a href=\"#S-单一一功能原则\" class=\"headerlink\" title=\"S (单一一功能原则)\"></a>S (单一一功能原则)</h3><blockquote>\n<p>Single Responsibility Principle </p>\n</blockquote>\n<p>单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。<br>换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。<br>在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。<br>单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。<br>责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，<br>从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>让每个函数和每个类都只做一件小事，职责单一，解耦和</p>\n</blockquote>\n<h3 id=\"O-开闭原则\"><a href=\"#O-开闭原则\" class=\"headerlink\" title=\"O (开闭原则)\"></a>O (开闭原则)</h3><blockquote>\n<p>Open Close Principle</p>\n</blockquote>\n<p>开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。<br>软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。</p>\n<p>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。</p>\n<p>说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。</p>\n<p>让我们来看下一个简单的 <code>Ts</code> demo</p>\n<p><strong>糟糕的实现</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.name == <span class=\"string\">'小猫'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃猫粮'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.name == <span class=\"string\">\"小狗\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃狗粮'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背</p>\n<p><strong>利用 <code>OCP</code> 思想</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Animal 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> eat(): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Animal抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eat() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吃狗粮'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'小狗'</span>)</span><br><span class=\"line\">d.eat()</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码中， 首先使用<code>abstract</code> 定义抽象类和抽象方法，提供其他类继承的基类<br>我们定义只要是<code>Animal</code>就必须要有<code>eat</code>方法</p>\n<p>于是， 我们创建了一个<code>Dog</code> 继承<code>Animal</code> ,<br>这个<code>Dog</code>就不一般了， 它规定了必须重新实现 <code>eat</code> 方法， 并且可以扩展自己的方法</p>\n<p>当我们将来如果需要一只 <code>Cat</code><br>我们一样只需要让他继承<code>Animal</code>抽象类， 然后实现一个自己的<code>eat</code>方法</p>\n<h3 id=\"L-里⽒氏替换原则\"><a href=\"#L-里⽒氏替换原则\" class=\"headerlink\" title=\"L (里⽒氏替换原则)\"></a>L (里⽒氏替换原则)</h3><blockquote>\n<p>Liskov Substitution Principle</p>\n</blockquote>\n<p>里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。</p>\n<p><strong>子类必须能够替换他们的基类</strong>。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现<code>if/else</code>之类对子类类型进行判断的条件。 里氏替换原则<code>LSP</code>使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， <code>LSP</code>则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。</p>\n<p>当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系</p>\n</blockquote>\n<h3 id=\"I-接⼝隔离原则\"><a href=\"#I-接⼝隔离原则\" class=\"headerlink\" title=\"I (接⼝隔离原则)\"></a>I (接⼝隔离原则)</h3><blockquote>\n<p>Interface Segregation Principle</p>\n</blockquote>\n<p>接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。</p>\n<p>不能强迫用户去依赖那些他们不能使用的接口。 换句话说， <strong>使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。</strong> 注意： 在代码中应用 <code>ISP</code> 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。</p>\n<p>这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， <code>ISP</code>原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。</p>\n<p><strong>缩减一下就是:</strong></p>\n<blockquote>\n<p>每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口</p>\n</blockquote>\n<h3 id=\"D-依赖反转原则\"><a href=\"#D-依赖反转原则\" class=\"headerlink\" title=\"D (依赖反转原则)\"></a>D (依赖反转原则)</h3><blockquote>\n<p>Dependency Inversion Principle</p>\n</blockquote>\n<p>依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。</p>\n<p><strong>高层模块不应该依赖于底层模块， 二者都应该依赖于抽象</strong><br><strong>抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)</strong></p>\n<p>类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。</p>\n<p><strong>举个例子:</strong></p>\n<p>你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。</p>\n<p>此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品</p>\n<h4 id=\"依赖反转原则\"><a href=\"#依赖反转原则\" class=\"headerlink\" title=\"依赖反转原则\"></a>依赖反转原则</h4><p><strong>依赖注入</strong></p>\n<p>当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。</p>\n<p><strong>注⼊入过程</strong></p>\n<p>如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊</p>\n<p><strong>依赖反转有两种方式</strong></p>\n<ol>\n<li>设值注入（在类上方设置字段）</li>\n<li>构造注入 （在<code>constructor</code>中接收需要地参数）</li>\n</ol>\n<p><img src=\"http://img.nixiaolei.com/2019-03-24-13-25-50.png\" alt=\"依赖反转原则\"></p>\n<h4 id=\"DI（依赖注⼊入）\"><a href=\"#DI（依赖注⼊入）\" class=\"headerlink\" title=\"DI（依赖注⼊入）\"></a>DI（依赖注⼊入）</h4><blockquote>\n<p>依赖注⼊入（Dependency Injection）</p>\n</blockquote>\n<p>为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。</p>\n<div style=\"display: none;\"><br>谢谢最可爱的贝玺<br></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"【Vue】源码解析","date":"2019-03-18T01:50:34.000Z","_content":"\n现在三大框架风起云涌， `JQuery`老大哥的光辉不再， 使前端成为了各路诸侯的兵家必争之地， \n\n当然作为一名优质的前端，光跟风学框架是肯定不行的， 要知其然而知其所以然\n\n要了解`MVVM`的本质原理， `virtual Dom`和 `Diff`算法解决的问题\n\n拒绝盲目跟风\n\n\n## 🍎diffDom优劣\n现在很多人都说 `Vue`, `React` 多牛， `Diff`算法快，不用操作`Dom`。\n\n只能无语。\n\n`Diff`算法不是不需要操作`Dom`,  而是不需要开发者去操作`Dom`了， `Diff`算法其实不快， 就算使用了`virtual Dom`,  还得花实现把真实`Dom` 转换为 `virtual Dom` 再去比对， 这远远没有`js`直接 `getElementById`直达目标来的快\n\n那Diff算法不快为什么还要用呢?\n\n`Diff`算法其实是给那些比较随意的新手开发者准备的\n\n看这个例子\n\n```HTML\n<!-- 原本的dom -->\n<ul id=\"ul\">\n  <li>a</li>\n  <li>a</li>\n  <li>a</li>\n</ul>\n```\n```JavaScript\n// 拿到结果不管三七二十一把旧dom全替换了\n$.get('/api', (res) => {\n  var _HTML = \"\"\n  for(var i=0; i< res.length; i++){\n    _HTML = \"<li>\" + res[i] +\"</li>\"\n  }\n  $(\"#ul\").html(_HTML)\n})\n```\n\n如果是原始的`Dom`操作， 有很多小白会像这个例子一样， 不管`Dom`需不需要更新， 他都把`ajax`返回的请求全部跑一边，生成`HTML`模板， 然后把原本的所有`li`都删了，  再把新的模板放进去， `Dom`少还看不出来， 如果`Dom`多了呢， 上千的`Dom`， 这顿操作一下就玩炸了。\n\n况且网站优化原则就是尽量减小`Dom`操作， 如果是有经验的开发者， 会选择找到有变化的位置，使用`append`插入\n\n\n\n## 📄Vue架构目录\n去[Vue官网](https://github.com/vuejs/vue)下载`Vue`源码看看，\n\n打开里面会有一个 `src`目录， 里面就是整个的`Vue`源码\n\n目前有6个目录， 作用分别如下\n\n![Vue目录](http://img.nixiaolei.com/2019-03-30-10-44-35.png)\n\n\n`Vue.js` 的组成是由 `core` + 对应的 '平台' 补充代码构成（独立构建和运行时构建只是 `platforms` 下 `web` 平台的两种选择）\n\n`Vue`的核心原理就在`core`文件夹中， 让我们进入 `core` 文件夹看看\n\n![core文件夹](http://img.nixiaolei.com/2019-03-30-10-57-26.png)\n\n了解了目录，接下来我们就来研究`Vue`的双向绑定\n\n## 🔗双向绑定（响应式原理） 所涉及到的技术\n* ✅ **Obejct.defineProperty** _【提供getter 和 setter】_\n* ✅ **Observer** _【提供getter 和 setter】_\n* ✅ **watcher**  _【提供getter 和 setter】_\n* ✅ **Dep** _【负责收集watcher】_\n* ✅ **Directive** _【处理Vue模板指令】_\n\n\n### Obejct.defineProperty\n\n\n`Obejct.defineProperty` 是整个`Vue`的灵魂， \n\n来看一下`Obejct.defineProperty` 如何使用\n```JavaScript\nvar obj = {}\nvar c;\nObject.defineProperty(obj, 'a', {\n  get() {\n    console.log('getter')\n    return a\n  },\n  set(newVal) {\n    console.log('setter')\n    c = newVal\n    this.a = newVal\n  }\n})\n\nobj.a = '234'\nconsole.log(c) // 234\nconsole.log(obj.a) // 234\n```\n\n\n它帮助`Vue`实现了双向绑定, 但也因为这个， `Vue`也只能舍弃了对低版本浏览器的支持。\n\n\n![defineProperty兼容](http://img.nixiaolei.com/2019-03-30-11-48-41.png)\n\n它只能兼容到`IE9` ， 并且市面上的`polyfill`实现的也并不是很好\n\n那低版本如何代替`Obejct.defineProperty` ， 难道真没了它就不行吗？\n\n\n**当然有**：\n\n1. 👆 > IE 7\n\n实际上在`IE7`的时候就已经有暴露了 `__defineGetter__` 方法，\n![__defineGetter__](http://img.nixiaolei.com/2019-03-30-12-57-56.png)\n\n具体用法如下\n```JavaScript\nvar random = {};\nrandom.__defineGetter__('ten', function() { \n    return Math.floor(Math.random()*10); });\nrandom.__defineGetter__('hundred', function() { \n    return Math.floor(Math.random()*100); });\n\nrandom.ten // 随机的一个值\n```\n\n2.  👇 < IE 7\n\n早年间的`IE` 是支持`VBScript`,  [VBScript](http://www.w3school.com.cn/vbscript/index.asp) 就可以直接写类， 并且也支持`get`，`set`方法\n\n```JavaScript\nclass Test {\n  get name () {\n    \n  }\n  set name() {\n\n  }\n}\n```\n\n### 🐶霸道的IE\n说了这么多`IE`的坏， 这里也带一嘴`IE`的好，\n\n`IE`能够调用`EXE`程序, 比如`JS`无法设置打印机的宽高，就可以利用`ActiveObjectX`来做到, 甚至可以修改`word`格式等等  , 所以办公类的项目离不开`IE`\n\n\n\n\n\n## 😕MVVM 双向数据绑定流程\n\n\nMVVM: Model–view–viewmodel\n\n那怎么区分这些层呢\n\n* 🚀**Model**: `Observer`\n* ✈️**view** : `directive`\n* 🚚**viewmodel**: `Watcher` && `Dep`  _【用于连接 Model 和 view】_\n\n\n![双向数据绑定](http://img.nixiaolei.com/2019-03-30-11-51-42.png)\n\n\n\n先看`Directive`, 这就是我们平时写的`vue`指令， 如上面举例得的`v-text=\"times\"`, 这就是一个指令， 一个`Directive`会分配一个`Watcher`\n\n\n\n### Observer\n\n观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。订阅者模式涉及三个对象：发布者、主题对象、订阅者，三个对象间的是一对多的关系，每当主题对象状态发生改变时，其相关依赖对象都会得到通知，并被自动更新。\n\n简单的描述就是:\n\n你想买漫画， 但是问了报刊亭的大爷， 大爷说现在没有， 还没到货， 然后你回去了， 第二天你又去问， 大爷还是说没有， 如果你每天这样问， 大爷估计会嫌你烦。 如果这时候你把你的电话给大爷， 大爷记录到他的**本子**上,  当大爷的漫画到货的时候电话通知你。\n\n这时你就是`订阅者`, 大爷就是`发布者`, 你们就存在一个发布订阅者的关系\n\n\n\n**Vue 中的Observer**\n\nObserver会观察两种类型的数据，`Object` 与 `Array`\n对于`Array`类型的数据，由于 `JavaScript` 的限制， `Vue` 不能检测变化,会先重写操作数组的原型方法，重写后能达到两个目的，\n\n当数组发生变化时，触发 `notify` 如果是 `push`，`unshift`，`splice` 这些添加新元素的操作，则会使用`observer`观察新添加的数据重写完原型方法后，遍历拿到数组中的每个数据 使用`observer`观察它而对于`Object`类型的数据，则遍历它的每个`key`，使用 `defineProperty` 设置 `getter` 和 `setter`，当触发`getter`的时候，`observer`则开始收集依赖，而触发`setter`的时候，`observer`则触发`notify`。\n\n\n#### 对 Object 的处理\n`Observer` 对象的标志就是`__ob__` 这个属性，这个属性保存了 `Observer` 对象自己本身。对象在转化为 `Observer` 对象的过程中是一个递归的过程，对象的子元素如果是对象或数组的话，也会转化为 `Observer` 对象\n\n\n#### 对数组的处理\n\n其实 `observeArray` 方法就是对数组进行遍历，递归调用 `observe` 方法，最终都会走入 `walk` 方监控单个元素。而 `walk` 方法就是遍历对象，结合 defineReactive 方法递归将属性转化为 `getter` 和 `setter`\n\n\n### Watcher\n`Watcher` 是将模板和 `Observer` 对象结合在一起的纽带。`Watcher` 是订阅者模式中的订阅者。`Watcher` 的两个参数： `expOrFn` 最终会被转换为 `getter` 函数， cb 是更新时执行的回调。依赖收集的入口就是get函数。\n\n> getter 函数是用来连接监控属性与 `Watcher` 的关键\n\n\n只有通过`watcher` 触发的getter 会收集依赖，而所谓的被收集的依赖就是当前`watcher`.初始化时传入的参数 expOrFn 中涉及到的每一项数据，然后触发该数据项的 getter 函数；getter 函数中就是通过判断 Dep.target的有无来判断是 `Watcher` 初始化时调用的还是普通数据读取，如果有则进行依赖收集\n\n\n### Dep\n\n这个方法是在响应式的过程中调用的，用户修改数据触发 setter 函数，函数的最后一行就是调用 dep.notify 去通知订阅者更新视图。\n\n### Directive\n\n![Directive](http://img.nixiaolei.com/2019-03-30-14-50-38.png)\n\n\n关于编译这块vue分了两种类型，一种是文本节点，一种是元素节点\n\n\nvue内置了这么多的指令，这些指令都会抛出两个接口bind 和 update，这两个接口的作用是，编译的最后一步是执行所有用到的指令的bind方法，而 update 方法则是当watcher 触发 update 时，Directive会触发指令的update方法\n\n\nobserve -> 触发setter -> watcher -> 触发update -> Directive -> 触发update -> 指令\n\n\n\n\n\n## 💥源码分析\nVue的完全版源码有很多判断以及其他的逻辑， 对于观看源码的人，会造成极大的困难，\n\n因此准备了这版仿照Vue流程实现的 实现了双向绑定的[简版Vue](https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue), 方便学习理解\n\n通过这版对[Vue源码的简易翻版](https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue)， 我们来快速理解Vue原理\n\n### ✨ new Vue\n\n首先看一下，我们的 new Vue, 这是所有操作的入口\n\n```JavaScript\nnew Vue({\n  data: {\n    nickname: '张三',\n    email: \"123123@qq.com\"\n  },\n  el: '#app'\n})\n```\n相信使用过`Vue `的小伙伴都明白， 这里定义了一个`data`， 用于存放变量， el是目标`dom`的选择器\n\n### 🔥 new Vue 执行时做了什么\n\n```JavaScript\nfunction Vue(option) {\n  var data = option.data \n  this.data = data\n  // 挂载 getter 和 setter\n  observe(data, this)\n  var id = option.el\n  // 编译 模板\n  var dom = new Compile(document.querySelector(id), this)\n  // 把编译好的模板挂载到 #app 上\n  document.querySelector(id).appendChild(dom)\n}\n```\n\n我们可以看到， Vue其实是一个构造函数， 它接收了一个参数`option`， 这个`option`就是我们`new Vue`传入的那个对象\n因此我们可以通过`option` 拿到`data`和`el`两个变量， 当然这是js基础哈， 我就不再说了\n\n拿到`data`后， 我们可以看到它调用了一个 `observe`方法, 将data和this传入( 此时this时Vue实例 )\n\n接下来又根据`el`来获取`dom`， 同样的将获取到的`dom`和`this`传入了 `Compile`中，  并且还接收了一个返回值， 然后又将这个返回值挂到了 `#app`上\n\n是不是感觉， 什么鬼？, 这顿操作是啥\n\n首先看一下疑惑的 `observe`， 传入了 `data`， `this`, 然后就没动静了， 既然如此， 我们就进入`observe`看看\n\n找到`Observe`的构造函数\n```JavaScript\nfunction observe(obj, vm) {\n  Object.keys(obj).forEach(key => {\n    defineReactive(vm, key, obj[key])\n  })\n}\n```\n可以看到，它接收一个`obj`和 `vm`， 哦， 这里就一一对应上了， 就是我们刚才传入的 `data`和`this` \n\n来看看它做了什么， \n\n它把`obj`枚举了一遍， 并将每一次的  `vm`, `key`,`value` 都传入一个叫 `defineReactive`的方法\n\n\n好，那就让来看`defineReactive`做了什么\n\n```JavaScript\nfunction defineReactive(vm, key, val) {\n  // 为每个变量分配一个 dep实例\n  var dep = new Dep()\n  // 配置getter和setter并且挂载到vm上\n  Object.defineProperty(vm, key, {\n    get() {\n      if ( Dep.target ) {\n        // JS的浏览器单线程特性， 保证整个全局变量在同一时间内， 只有一个监听器使用\n        dep.addSub(Dep.target)\n      }\n      return val\n    },\n    set(newVal) {\n      if ( newVal == val ) return;\n      val = newVal;\n      // 作为发布者发出通知\n      dep.notify()\n    }\n  })\n}\n```\n\n我们看到， 它`new`了一个`Dep`， 这个`Dep`就是报刊亭大爷的电话本， 用来收集所有想买报纸或杂志的人的电话， 等到到货时就好挨个通知\n\n然后我们看到了灵魂函数 `Object.defineProperty`,  \n\n嗷那我们应该就明白了， 这里的一顿操作就是为了给`data`里的每个属性都挂载上 `getter`，`setter`, 并且将这些属性直接转移到了`vm`上（Vue实例）\n\n那既然如此， \n\n🤪让我们看看 `getter`方法做了什么， \n\n首先它判断了一下`Dep.target`，  如果`Dep.target`为`true` , 就调用`dep`的`addSub`方法， 这里`Dep.target`是啥我们先不管， 留个印象即可\n\n然后它直接`return`了`val`\n\n😵再来看看`setter`方法\n\n`setter`方法接收一个新值，  首先就是判断了新值和原本的值是否相等， 如果相等就不做处理了， 如果不相等， 它将新值赋给`val`\n\n然后调用`dep`实例上的`notify`方法， `notify` 看着名字也知道是通知， 也就是大爷挨个打电话的一个操作\n\n\n好, 这一块我们理顺了， 是为了挂上`getter`和`setter`， 但又遇到了新问题`dep`， `dep`到底在干什么， 为什么被`getter`，`setter`都使用了 \n\n\n找到`Dep`的构造函数\n```JavaScript\nfunction Dep() {\n  // 存放watcher\n  this.subs = []\n}\n\nDep.prototype = {\n  // 添加watcher, 也就是添加订阅\n  addSub(sub) {\n    this.subs.push(sub)\n  },\n  // 通知所有watcher\n  notify() {\n    this.subs.forEach(sub => {\n      sub.update()\n    })\n  }\n}\n```\n\n我们可以看到， `Dep`构造函数中维护了一个 `subs`数组， 并且下面的在`prototype`上定义了几个方法， `addSub` 和`notify`，\n这不就是刚刚`observe`里调用的两个方法吗， \n哦，明白了， `addSub`原来是将`getter`中传入的 `Dep.target`追加到每个`Dep`实例都单独维护的一个`subs`数组中呀， `notify`就是遍历整个数组，挨个调用`update`方法（先不管update的具体实现）\n\n\n好， 解决了`observe`方法，那我们就回到最初的`Vue`构造函数中,  继续往下走, 攻克剩余的绿色区域\n\n![Compile](http://img.nixiaolei.com/2019-03-31-11-36-41.png)\n\n\n我们可以看到，它通过`el` 获取到了`dom`, 并在`new Compile` 将`dom` 传入\n\n那我们就找到`Compile`的构造函数一探究竟\n```JavaScript\nfunction Compile(node, vm) {\n  if(node) {\n    this.$frag = this.nodeToFragment(node, vm)\n    return this.$frag\n  }\n}\n```\n\n可以看到， 它接收了一个`node`， 和一个`vm` , 并且判断了一下`node`是否存在， \n\n并将`node`和`vm`，传入了`this.nodeToFragment`方法， 又将其的返回结果`return`出去， 也就是`new Compile`之后返回的值 ，如下\n\n![Compile02](http://img.nixiaolei.com/2019-03-31-11-49-23.png)\n\n\n那`this.nodeToFragment`这个方法做了什么， 让我们找到他\n```JavaScript\nCompile.prototype = {\n  nodeToFragment(node, vm) {\n    var _this = this\n    // 创建文档片段\n    var frag = document.createDocumentFragment()\n    var child;\n    while ( child = node.firstChild ) {\n      // 替换变量\n      _this.compileElement(child, vm)\n      // 剪贴子元素\n      frag.append(child)\n    }\n    return frag\n  },\n  compileElement(node, vm) {\n    var reg = /\\{\\{(.*)\\}\\}/;\n    // 节点类型为元素, 根据nodeType来判断\n    if ( node.nodeType === 1 ) {\n      // 获取自定义属性\n      var attr = node.attributes\n      for (var i = 0; i < attr.length; i++) {\n        if (attr[i].nodeName == \"v-model\") {\n          // 获取v-model 绑定的属性名\n          var name = attr[i].nodeValue\n          // 双向绑定\n          node.addEventListener('input', function(e) {\n            // 给相应的data属性赋值， 进而触发该属性的set方法\n            // 再批处理渲染元素\n            vm[name] = e.target.value \n          })\n          // 把this ，节点， 还有v-model绑定的变量交给watcher\n          new Watcher(vm, node, name, \"value\")\n        }\n      }\n    }\n\n    // 节点类型为text\n    if ( node.nodeType === 3 ) {\n      if ( reg.test(node.nodeValue) ) {\n        var name = RegExp.$1; // 获取匹配到的字符串\n        name = name.trim()\n         // 把this ，节点， 还有{{ xxx }}中使用的变量交给watcher\n        new Watcher(vm, node, name, 'nodeValue')\n      }\n    }\n  }\n}\n```\n\n我们看到它在`Compile`原型上挂了`nodeToFragment`, `compileElement`两个方法，  `nodeToFragment`方法接收 `node`, `vm`参数\n\n先保存了一下`this`指向,  然后使用`document.createDocumentFragment()`方法创建了一个文档片段， 并将在`while`循环中传入的`node`节点的第一个元素赋值给 `child`变量，\n然后使用`compileElement(child, vm)` 将`child`和`vm` 传入, 然后将`child` 追加给创建好的文档片段`frag`, 你肯定会觉得这是个死循环, 其实不是的， 这个`append`对`dom`有剪切的效果，\n所以他会一直抽离`node`的第一个节点，直至`node`空了， 吸干他\n\n完成了这顿操作后， 再将`frag`文档片段返回\n\n然后我们来看看它在`while`中调用的`compileElement`方法做了什么\n\n它同样接收`node`和`vm` , 首先就是定义一个正则， 这是用来匹配`{{ xxx }}`双括号的， 也就是我们平时的变量写法\n\n然后它判断了一下这个 `node`的节点类型,  如果`nodeType == 1`, 那就说明是元素，  如果`nodeType == 3` 那就说明节点类型是`text`\n      \n如果节点类型是元素， 就利用`attributes` 方法，获取到该元素身上的属性,  查看是否存在`v-model`这样一个属性， 如果有，就获取到`v-model`填写的变量，交给变量`name`,\n然后监听该元素的`input`事件， \n\n所以每当改元素发生`input`时间时，就将元素上的`value`根据`v-model`上获取到的`name`作为`vm`的`key`去修改`vm`实例上的对应的值， 因为`vm`上的变量已经被挂载此来触发`vm`\n\n最后还创建了一个`Watcher`实例,  传入`vm, node ,name, \"value\"`这几个参数，\n\n`Watcher`的具体实现我们待会去看\n\n接下来就是判断`node.nodeType == 3`， 也就是text类型的节点， 如果是此类节点， 就先用正则去匹配一下`{{ xxx }}`语法， 看看有没有使用到某个变量， \n如果匹配到了， 则通过`RegExp.$1`获取到被匹配到的值， 然后去除左右的空格， 交给变量`name`\n最后，同样的创建了一个`Watcher`实例,  传入`vm, node ,name, \"value\"`这几个参数，\n\n出现两次`Watcher`， 什么情况， 到底干了啥\n那， 现在就来让我们看看神秘的`Watcher`构造函数\n\n找到`Watcher`的构造函数\n```JavaScript\nlet uid = 0;\n\nfunction Watcher(vm, node, name, type) {\n  // 单例， 使用原因未知\n  Dep.target = this\n  // 姓名\n  this.name = name;\n  // 呵呵哒 uid\n  this.id = ++uid;\n  // 与变量相关的Node节点\n  this.node = node;\n  // vm 实例\n  this.vm = vm;\n  // 变量类型  nodeValue  || value\n  this.type = type;\n  // 触发自己原型上的update方法\n  this.update()\n  // Watcher 实例创建结束就把单例置空\n  Dep.target = null\n}\n```\n\n此时我们发现了一个关键的东西`Dep.target` ， 这个鬼东西原来在这里， 它被赋值为了`Watcher`的实例， 然后在`Watcher`实例上挂载了`name`，也就是用到的变量， 还使用了一个`uid`， 不过这`uid`也是呵呵了，用数字作为`uid`, `Vue`的真实源码就这么干的， 为每个`Watcher`都配分一个`uid`， 这会造成数组空间的不连续， 引发内存泄漏\n\n接着说， 然后他将传入的`node`节点， `vm`实例， 还有`type`( 'nodeValue' 和 'value' ), 都挂到了实例上面， 并且还在调用了`update`方法后， 将`Dep.target`设为`null`\n\n那我们来看下`update`做了啥\n\n```JavaScript\nWatcher.prototype = {\n  update() {\n    this.get()\n    if(!batcher) {\n      // bastcher 单例\n      batcher = new Batcher()\n    }\n    // 加入队列\n    batcher.push(this)\n  },\n  // 获取新值挂到自己的实例上\n  get() {\n    this.value = this.vm[this.name]  // 触发getter\n  }\n}\n```\n\n看到`update`方法， 首先调用了一下`get`方法， 这个`get`呢就是根据`this.name`从 `vm`实例上取一次值， 并挂到`Watcher`实例上的`value`属性上, 并且他还会触发一次`getter`方法，将自己加入到`dep`中， 也就是加入到报刊亭大爷的电话本中， 便于之后的通知\n\n然后判断了一下`window.batcher`是否存在， 如果不存在就创建一个， 保证其是一个单例模式,\n如果存在， 就将自己(`watcher`实例)，通过`push`方法传入\n\n看到这里，又晕了， 什么时候又冒出来一个`Batcher`\n\n我们又找到`Batcher`的构造函数好好分析下，\n```JavaScript\n// 批处理构造函数\nfunction Batcher() {\n  //  重置  has  queue waiting\n  this.reset()\n}\n\nBatcher.prototype.reset = function () {\n  this.has = {}\n  this.queue = []\n  this.waiting = false\n} \n\n// 将watcher 添加到队列中\nBatcher.prototype.push = function (job) {\n  let id = job.id\n  // 先根据 对象的key 看看是否已经有了这个watcher\n  if (!this.has[id]) {\n    // console.log(batcher)\n    this.queue.push(job)\n    // 将watcher 的key的设为true\n    this.has[id] = true\n\n    // 延迟执行\n    if (!this.waiting ) {\n      this.waiting = true\n      if ( \"Promise\" in window ) {\n        Promise.resolve().then(() => {\n          this.flush()\n        })\n      } else {\n        setTimeout(() => {\n          this.flush()\n        }, 0)\n      }\n    }\n  }\n}\n\n\n// 执行并情况事件队列\nBatcher.prototype.flush = function() {\n  this.queue.forEach(job => {\n    job.cb()\n  })\n  this.reset()\n}\n\n\n```\n\n`Batcher`的构造函数很简单， 就调用了一下自己的`reset`方法， 但好像事情远没有这么简单，我们不是在 `Watcher`的`update`方法中调用了`batcher.push`吗， 我也可以在这原型上找的这个方法， 首先它接收一个`job`参数， 也就是`Watcher`实例， \n\n获取到该`watcher`的`id`, 然后使用这个`id`,去`has`这个对象上访问一下， 看看是否存在，\n如果不存在，在证明之前没有添加进来过， 然后将该`watcher`实例加到`queue`队列中， \n并将`has`对象中`id`对应的值设为`true`, 以防止重复加入队列\n\n并且判断一下`waiting`，得知当前是否处于等待状态， 如果不是， 就将`waiting`改为`true`, 然后就是判断当前浏览器的支持情况， 将处理的任务扔到异步队列中\n\n它这里这么做是为了，只批处理一次， 你一瞬间加入多个`watcher`, 很容易造成重复执行， 利用`Watcher`的`id`来过滤， 并且利用异步， 等你要加的`watcher`都加完了， 我再给你统一的去执行所有`Watcher`\n\n也就是异步任务结束后调用的`flush`方法， 它在内部会遍历`queue`队列， 挨个的调用`Watcher`的`cb`方法\n在这一切都执行完成之后， 又调用了一次`reset`方法， 将`bascher`的三个属性重置为初始状态\n\n此时关注点又回到了`Watcher`身上， 它的`cb`方法又做了什么\n```JavaScript\nWatcher.prototype = {\n  // ...省略其他方法\n\n  // 给dom赋值\n  cb() {\n    // 最终实际虚拟dom 处理结果， 只处理一次\n    // 虚拟dom -> diff( 虚拟dom ) -> 局部更新 -> createElement(vNode) -> render\n    this.node[this.type] = this.value\n  },\n}\n```\n\n可以看到`cb`方法做的事情很简单那， 就是**根据元素的值类型去修改元素对象的值**， 而这个`this.value`早在之前调用 `Watcher`的`get`方法时就被赋上了\n\n到这里，整个流程就走完了， 相信你还是一头雾水， 我们把整个流程来串一下\n\n1. new Vue\n2. 将`data`中的值挂上 `getter`和`setter` 的相应方法， 然后暂且搁置，因为此时还无人调用`getter`和`setter`\n3. 通过 `Compile`解析模板， 挨个递归`#app`下的`dom`, 判断元素类型， 如果是元素，并且使用了`v-model`， 就绑定一个`input`事件,  如果是文本类型节点,就去匹配是使用了`{{ xx }}`语法， 最后为他们都创建了一个`watcher`\n4. 每个`watcher` 用来保存相关的元素对象， `vm`实例，使用的`变量` 以及元素值类型, 并将自己的实例交给， `Dep.target`， 并触发自己的`update`方法，`update`方法又会调用`get`方法， `get`方法又会触发该变量的`getter`， 这也就使得`getter`中可以将该`watcher`放入`dep`实例中， 最后将自己也放入`Bacher`中，用以批处理以及将`Dep.target`置空\n5. `Batcher`是个单例， 根据`Watcher`的`id`, 它用来过滤重复传入的`Watcher`, 保证一个`Watcher`只触发一次, 并将更新事件丢入异步，等当前的连续操作执行完成后去调用`Watcher`的`cb`方法更新`dom`\n6. 之后用户修改了变量, `setter`又会调用`dep`这个发布者来发出通知， 相关的`Watcher`的`update`方法再次被调用， 又会加入`batcher` , `batcher`等待异步完成后又调用`Watcher`的`cb`方法更新`dom`\n\n\n**到这里就整个串完了，但是感觉废话还是有点多， 再简化一点流程**:\n\nnew Vue --> `Observe` 挂载 `setter` 和 `getter` -->  `Compile` 编译模板 --> 为每个指令分配一个`watcher` --> 创建时会调用一次`watcher.update` 将自己加入到`batcher`的队列 -->\n并且此时会触发 `getter` 将`watcher`加入`dep` -->  `batcher` 统一来处理`watcher`后初始化自己 -->  当用户修改某个变量时 --> `dep`通知`watcher` --> `watcher`又被加入`batcher`处理 --> `watcher` 更新`dom`\n\n\n`Vue`的`batcher`还是实现的不是很好， 缺少调度机制， 这点上还是`React Fiber`更优秀点，`Fiber`如果遇上了长时间的任务会选择放弃， 避免阻塞进程。\n\n\n😕好了， 神秘的`Vue`源码已被揭开面纱， 但这仅仅是简易版的实现， 真实的`Vue`非常庞大， 还有更多的内容， 这里只是让大家明白`MVVM`的核心原理\n\n\n项目源码:\n> https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\n\n优质文献: \n* [汤姆大叔的观察者模式](http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html)","source":"_posts/【Vue】源码解析.md","raw":"---\ntitle: 【Vue】源码解析\ndate: 2019-03-18 09:50:34\ncategories: Vue\ntags: Vue\n---\n\n现在三大框架风起云涌， `JQuery`老大哥的光辉不再， 使前端成为了各路诸侯的兵家必争之地， \n\n当然作为一名优质的前端，光跟风学框架是肯定不行的， 要知其然而知其所以然\n\n要了解`MVVM`的本质原理， `virtual Dom`和 `Diff`算法解决的问题\n\n拒绝盲目跟风\n\n\n## 🍎diffDom优劣\n现在很多人都说 `Vue`, `React` 多牛， `Diff`算法快，不用操作`Dom`。\n\n只能无语。\n\n`Diff`算法不是不需要操作`Dom`,  而是不需要开发者去操作`Dom`了， `Diff`算法其实不快， 就算使用了`virtual Dom`,  还得花实现把真实`Dom` 转换为 `virtual Dom` 再去比对， 这远远没有`js`直接 `getElementById`直达目标来的快\n\n那Diff算法不快为什么还要用呢?\n\n`Diff`算法其实是给那些比较随意的新手开发者准备的\n\n看这个例子\n\n```HTML\n<!-- 原本的dom -->\n<ul id=\"ul\">\n  <li>a</li>\n  <li>a</li>\n  <li>a</li>\n</ul>\n```\n```JavaScript\n// 拿到结果不管三七二十一把旧dom全替换了\n$.get('/api', (res) => {\n  var _HTML = \"\"\n  for(var i=0; i< res.length; i++){\n    _HTML = \"<li>\" + res[i] +\"</li>\"\n  }\n  $(\"#ul\").html(_HTML)\n})\n```\n\n如果是原始的`Dom`操作， 有很多小白会像这个例子一样， 不管`Dom`需不需要更新， 他都把`ajax`返回的请求全部跑一边，生成`HTML`模板， 然后把原本的所有`li`都删了，  再把新的模板放进去， `Dom`少还看不出来， 如果`Dom`多了呢， 上千的`Dom`， 这顿操作一下就玩炸了。\n\n况且网站优化原则就是尽量减小`Dom`操作， 如果是有经验的开发者， 会选择找到有变化的位置，使用`append`插入\n\n\n\n## 📄Vue架构目录\n去[Vue官网](https://github.com/vuejs/vue)下载`Vue`源码看看，\n\n打开里面会有一个 `src`目录， 里面就是整个的`Vue`源码\n\n目前有6个目录， 作用分别如下\n\n![Vue目录](http://img.nixiaolei.com/2019-03-30-10-44-35.png)\n\n\n`Vue.js` 的组成是由 `core` + 对应的 '平台' 补充代码构成（独立构建和运行时构建只是 `platforms` 下 `web` 平台的两种选择）\n\n`Vue`的核心原理就在`core`文件夹中， 让我们进入 `core` 文件夹看看\n\n![core文件夹](http://img.nixiaolei.com/2019-03-30-10-57-26.png)\n\n了解了目录，接下来我们就来研究`Vue`的双向绑定\n\n## 🔗双向绑定（响应式原理） 所涉及到的技术\n* ✅ **Obejct.defineProperty** _【提供getter 和 setter】_\n* ✅ **Observer** _【提供getter 和 setter】_\n* ✅ **watcher**  _【提供getter 和 setter】_\n* ✅ **Dep** _【负责收集watcher】_\n* ✅ **Directive** _【处理Vue模板指令】_\n\n\n### Obejct.defineProperty\n\n\n`Obejct.defineProperty` 是整个`Vue`的灵魂， \n\n来看一下`Obejct.defineProperty` 如何使用\n```JavaScript\nvar obj = {}\nvar c;\nObject.defineProperty(obj, 'a', {\n  get() {\n    console.log('getter')\n    return a\n  },\n  set(newVal) {\n    console.log('setter')\n    c = newVal\n    this.a = newVal\n  }\n})\n\nobj.a = '234'\nconsole.log(c) // 234\nconsole.log(obj.a) // 234\n```\n\n\n它帮助`Vue`实现了双向绑定, 但也因为这个， `Vue`也只能舍弃了对低版本浏览器的支持。\n\n\n![defineProperty兼容](http://img.nixiaolei.com/2019-03-30-11-48-41.png)\n\n它只能兼容到`IE9` ， 并且市面上的`polyfill`实现的也并不是很好\n\n那低版本如何代替`Obejct.defineProperty` ， 难道真没了它就不行吗？\n\n\n**当然有**：\n\n1. 👆 > IE 7\n\n实际上在`IE7`的时候就已经有暴露了 `__defineGetter__` 方法，\n![__defineGetter__](http://img.nixiaolei.com/2019-03-30-12-57-56.png)\n\n具体用法如下\n```JavaScript\nvar random = {};\nrandom.__defineGetter__('ten', function() { \n    return Math.floor(Math.random()*10); });\nrandom.__defineGetter__('hundred', function() { \n    return Math.floor(Math.random()*100); });\n\nrandom.ten // 随机的一个值\n```\n\n2.  👇 < IE 7\n\n早年间的`IE` 是支持`VBScript`,  [VBScript](http://www.w3school.com.cn/vbscript/index.asp) 就可以直接写类， 并且也支持`get`，`set`方法\n\n```JavaScript\nclass Test {\n  get name () {\n    \n  }\n  set name() {\n\n  }\n}\n```\n\n### 🐶霸道的IE\n说了这么多`IE`的坏， 这里也带一嘴`IE`的好，\n\n`IE`能够调用`EXE`程序, 比如`JS`无法设置打印机的宽高，就可以利用`ActiveObjectX`来做到, 甚至可以修改`word`格式等等  , 所以办公类的项目离不开`IE`\n\n\n\n\n\n## 😕MVVM 双向数据绑定流程\n\n\nMVVM: Model–view–viewmodel\n\n那怎么区分这些层呢\n\n* 🚀**Model**: `Observer`\n* ✈️**view** : `directive`\n* 🚚**viewmodel**: `Watcher` && `Dep`  _【用于连接 Model 和 view】_\n\n\n![双向数据绑定](http://img.nixiaolei.com/2019-03-30-11-51-42.png)\n\n\n\n先看`Directive`, 这就是我们平时写的`vue`指令， 如上面举例得的`v-text=\"times\"`, 这就是一个指令， 一个`Directive`会分配一个`Watcher`\n\n\n\n### Observer\n\n观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。订阅者模式涉及三个对象：发布者、主题对象、订阅者，三个对象间的是一对多的关系，每当主题对象状态发生改变时，其相关依赖对象都会得到通知，并被自动更新。\n\n简单的描述就是:\n\n你想买漫画， 但是问了报刊亭的大爷， 大爷说现在没有， 还没到货， 然后你回去了， 第二天你又去问， 大爷还是说没有， 如果你每天这样问， 大爷估计会嫌你烦。 如果这时候你把你的电话给大爷， 大爷记录到他的**本子**上,  当大爷的漫画到货的时候电话通知你。\n\n这时你就是`订阅者`, 大爷就是`发布者`, 你们就存在一个发布订阅者的关系\n\n\n\n**Vue 中的Observer**\n\nObserver会观察两种类型的数据，`Object` 与 `Array`\n对于`Array`类型的数据，由于 `JavaScript` 的限制， `Vue` 不能检测变化,会先重写操作数组的原型方法，重写后能达到两个目的，\n\n当数组发生变化时，触发 `notify` 如果是 `push`，`unshift`，`splice` 这些添加新元素的操作，则会使用`observer`观察新添加的数据重写完原型方法后，遍历拿到数组中的每个数据 使用`observer`观察它而对于`Object`类型的数据，则遍历它的每个`key`，使用 `defineProperty` 设置 `getter` 和 `setter`，当触发`getter`的时候，`observer`则开始收集依赖，而触发`setter`的时候，`observer`则触发`notify`。\n\n\n#### 对 Object 的处理\n`Observer` 对象的标志就是`__ob__` 这个属性，这个属性保存了 `Observer` 对象自己本身。对象在转化为 `Observer` 对象的过程中是一个递归的过程，对象的子元素如果是对象或数组的话，也会转化为 `Observer` 对象\n\n\n#### 对数组的处理\n\n其实 `observeArray` 方法就是对数组进行遍历，递归调用 `observe` 方法，最终都会走入 `walk` 方监控单个元素。而 `walk` 方法就是遍历对象，结合 defineReactive 方法递归将属性转化为 `getter` 和 `setter`\n\n\n### Watcher\n`Watcher` 是将模板和 `Observer` 对象结合在一起的纽带。`Watcher` 是订阅者模式中的订阅者。`Watcher` 的两个参数： `expOrFn` 最终会被转换为 `getter` 函数， cb 是更新时执行的回调。依赖收集的入口就是get函数。\n\n> getter 函数是用来连接监控属性与 `Watcher` 的关键\n\n\n只有通过`watcher` 触发的getter 会收集依赖，而所谓的被收集的依赖就是当前`watcher`.初始化时传入的参数 expOrFn 中涉及到的每一项数据，然后触发该数据项的 getter 函数；getter 函数中就是通过判断 Dep.target的有无来判断是 `Watcher` 初始化时调用的还是普通数据读取，如果有则进行依赖收集\n\n\n### Dep\n\n这个方法是在响应式的过程中调用的，用户修改数据触发 setter 函数，函数的最后一行就是调用 dep.notify 去通知订阅者更新视图。\n\n### Directive\n\n![Directive](http://img.nixiaolei.com/2019-03-30-14-50-38.png)\n\n\n关于编译这块vue分了两种类型，一种是文本节点，一种是元素节点\n\n\nvue内置了这么多的指令，这些指令都会抛出两个接口bind 和 update，这两个接口的作用是，编译的最后一步是执行所有用到的指令的bind方法，而 update 方法则是当watcher 触发 update 时，Directive会触发指令的update方法\n\n\nobserve -> 触发setter -> watcher -> 触发update -> Directive -> 触发update -> 指令\n\n\n\n\n\n## 💥源码分析\nVue的完全版源码有很多判断以及其他的逻辑， 对于观看源码的人，会造成极大的困难，\n\n因此准备了这版仿照Vue流程实现的 实现了双向绑定的[简版Vue](https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue), 方便学习理解\n\n通过这版对[Vue源码的简易翻版](https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue)， 我们来快速理解Vue原理\n\n### ✨ new Vue\n\n首先看一下，我们的 new Vue, 这是所有操作的入口\n\n```JavaScript\nnew Vue({\n  data: {\n    nickname: '张三',\n    email: \"123123@qq.com\"\n  },\n  el: '#app'\n})\n```\n相信使用过`Vue `的小伙伴都明白， 这里定义了一个`data`， 用于存放变量， el是目标`dom`的选择器\n\n### 🔥 new Vue 执行时做了什么\n\n```JavaScript\nfunction Vue(option) {\n  var data = option.data \n  this.data = data\n  // 挂载 getter 和 setter\n  observe(data, this)\n  var id = option.el\n  // 编译 模板\n  var dom = new Compile(document.querySelector(id), this)\n  // 把编译好的模板挂载到 #app 上\n  document.querySelector(id).appendChild(dom)\n}\n```\n\n我们可以看到， Vue其实是一个构造函数， 它接收了一个参数`option`， 这个`option`就是我们`new Vue`传入的那个对象\n因此我们可以通过`option` 拿到`data`和`el`两个变量， 当然这是js基础哈， 我就不再说了\n\n拿到`data`后， 我们可以看到它调用了一个 `observe`方法, 将data和this传入( 此时this时Vue实例 )\n\n接下来又根据`el`来获取`dom`， 同样的将获取到的`dom`和`this`传入了 `Compile`中，  并且还接收了一个返回值， 然后又将这个返回值挂到了 `#app`上\n\n是不是感觉， 什么鬼？, 这顿操作是啥\n\n首先看一下疑惑的 `observe`， 传入了 `data`， `this`, 然后就没动静了， 既然如此， 我们就进入`observe`看看\n\n找到`Observe`的构造函数\n```JavaScript\nfunction observe(obj, vm) {\n  Object.keys(obj).forEach(key => {\n    defineReactive(vm, key, obj[key])\n  })\n}\n```\n可以看到，它接收一个`obj`和 `vm`， 哦， 这里就一一对应上了， 就是我们刚才传入的 `data`和`this` \n\n来看看它做了什么， \n\n它把`obj`枚举了一遍， 并将每一次的  `vm`, `key`,`value` 都传入一个叫 `defineReactive`的方法\n\n\n好，那就让来看`defineReactive`做了什么\n\n```JavaScript\nfunction defineReactive(vm, key, val) {\n  // 为每个变量分配一个 dep实例\n  var dep = new Dep()\n  // 配置getter和setter并且挂载到vm上\n  Object.defineProperty(vm, key, {\n    get() {\n      if ( Dep.target ) {\n        // JS的浏览器单线程特性， 保证整个全局变量在同一时间内， 只有一个监听器使用\n        dep.addSub(Dep.target)\n      }\n      return val\n    },\n    set(newVal) {\n      if ( newVal == val ) return;\n      val = newVal;\n      // 作为发布者发出通知\n      dep.notify()\n    }\n  })\n}\n```\n\n我们看到， 它`new`了一个`Dep`， 这个`Dep`就是报刊亭大爷的电话本， 用来收集所有想买报纸或杂志的人的电话， 等到到货时就好挨个通知\n\n然后我们看到了灵魂函数 `Object.defineProperty`,  \n\n嗷那我们应该就明白了， 这里的一顿操作就是为了给`data`里的每个属性都挂载上 `getter`，`setter`, 并且将这些属性直接转移到了`vm`上（Vue实例）\n\n那既然如此， \n\n🤪让我们看看 `getter`方法做了什么， \n\n首先它判断了一下`Dep.target`，  如果`Dep.target`为`true` , 就调用`dep`的`addSub`方法， 这里`Dep.target`是啥我们先不管， 留个印象即可\n\n然后它直接`return`了`val`\n\n😵再来看看`setter`方法\n\n`setter`方法接收一个新值，  首先就是判断了新值和原本的值是否相等， 如果相等就不做处理了， 如果不相等， 它将新值赋给`val`\n\n然后调用`dep`实例上的`notify`方法， `notify` 看着名字也知道是通知， 也就是大爷挨个打电话的一个操作\n\n\n好, 这一块我们理顺了， 是为了挂上`getter`和`setter`， 但又遇到了新问题`dep`， `dep`到底在干什么， 为什么被`getter`，`setter`都使用了 \n\n\n找到`Dep`的构造函数\n```JavaScript\nfunction Dep() {\n  // 存放watcher\n  this.subs = []\n}\n\nDep.prototype = {\n  // 添加watcher, 也就是添加订阅\n  addSub(sub) {\n    this.subs.push(sub)\n  },\n  // 通知所有watcher\n  notify() {\n    this.subs.forEach(sub => {\n      sub.update()\n    })\n  }\n}\n```\n\n我们可以看到， `Dep`构造函数中维护了一个 `subs`数组， 并且下面的在`prototype`上定义了几个方法， `addSub` 和`notify`，\n这不就是刚刚`observe`里调用的两个方法吗， \n哦，明白了， `addSub`原来是将`getter`中传入的 `Dep.target`追加到每个`Dep`实例都单独维护的一个`subs`数组中呀， `notify`就是遍历整个数组，挨个调用`update`方法（先不管update的具体实现）\n\n\n好， 解决了`observe`方法，那我们就回到最初的`Vue`构造函数中,  继续往下走, 攻克剩余的绿色区域\n\n![Compile](http://img.nixiaolei.com/2019-03-31-11-36-41.png)\n\n\n我们可以看到，它通过`el` 获取到了`dom`, 并在`new Compile` 将`dom` 传入\n\n那我们就找到`Compile`的构造函数一探究竟\n```JavaScript\nfunction Compile(node, vm) {\n  if(node) {\n    this.$frag = this.nodeToFragment(node, vm)\n    return this.$frag\n  }\n}\n```\n\n可以看到， 它接收了一个`node`， 和一个`vm` , 并且判断了一下`node`是否存在， \n\n并将`node`和`vm`，传入了`this.nodeToFragment`方法， 又将其的返回结果`return`出去， 也就是`new Compile`之后返回的值 ，如下\n\n![Compile02](http://img.nixiaolei.com/2019-03-31-11-49-23.png)\n\n\n那`this.nodeToFragment`这个方法做了什么， 让我们找到他\n```JavaScript\nCompile.prototype = {\n  nodeToFragment(node, vm) {\n    var _this = this\n    // 创建文档片段\n    var frag = document.createDocumentFragment()\n    var child;\n    while ( child = node.firstChild ) {\n      // 替换变量\n      _this.compileElement(child, vm)\n      // 剪贴子元素\n      frag.append(child)\n    }\n    return frag\n  },\n  compileElement(node, vm) {\n    var reg = /\\{\\{(.*)\\}\\}/;\n    // 节点类型为元素, 根据nodeType来判断\n    if ( node.nodeType === 1 ) {\n      // 获取自定义属性\n      var attr = node.attributes\n      for (var i = 0; i < attr.length; i++) {\n        if (attr[i].nodeName == \"v-model\") {\n          // 获取v-model 绑定的属性名\n          var name = attr[i].nodeValue\n          // 双向绑定\n          node.addEventListener('input', function(e) {\n            // 给相应的data属性赋值， 进而触发该属性的set方法\n            // 再批处理渲染元素\n            vm[name] = e.target.value \n          })\n          // 把this ，节点， 还有v-model绑定的变量交给watcher\n          new Watcher(vm, node, name, \"value\")\n        }\n      }\n    }\n\n    // 节点类型为text\n    if ( node.nodeType === 3 ) {\n      if ( reg.test(node.nodeValue) ) {\n        var name = RegExp.$1; // 获取匹配到的字符串\n        name = name.trim()\n         // 把this ，节点， 还有{{ xxx }}中使用的变量交给watcher\n        new Watcher(vm, node, name, 'nodeValue')\n      }\n    }\n  }\n}\n```\n\n我们看到它在`Compile`原型上挂了`nodeToFragment`, `compileElement`两个方法，  `nodeToFragment`方法接收 `node`, `vm`参数\n\n先保存了一下`this`指向,  然后使用`document.createDocumentFragment()`方法创建了一个文档片段， 并将在`while`循环中传入的`node`节点的第一个元素赋值给 `child`变量，\n然后使用`compileElement(child, vm)` 将`child`和`vm` 传入, 然后将`child` 追加给创建好的文档片段`frag`, 你肯定会觉得这是个死循环, 其实不是的， 这个`append`对`dom`有剪切的效果，\n所以他会一直抽离`node`的第一个节点，直至`node`空了， 吸干他\n\n完成了这顿操作后， 再将`frag`文档片段返回\n\n然后我们来看看它在`while`中调用的`compileElement`方法做了什么\n\n它同样接收`node`和`vm` , 首先就是定义一个正则， 这是用来匹配`{{ xxx }}`双括号的， 也就是我们平时的变量写法\n\n然后它判断了一下这个 `node`的节点类型,  如果`nodeType == 1`, 那就说明是元素，  如果`nodeType == 3` 那就说明节点类型是`text`\n      \n如果节点类型是元素， 就利用`attributes` 方法，获取到该元素身上的属性,  查看是否存在`v-model`这样一个属性， 如果有，就获取到`v-model`填写的变量，交给变量`name`,\n然后监听该元素的`input`事件， \n\n所以每当改元素发生`input`时间时，就将元素上的`value`根据`v-model`上获取到的`name`作为`vm`的`key`去修改`vm`实例上的对应的值， 因为`vm`上的变量已经被挂载此来触发`vm`\n\n最后还创建了一个`Watcher`实例,  传入`vm, node ,name, \"value\"`这几个参数，\n\n`Watcher`的具体实现我们待会去看\n\n接下来就是判断`node.nodeType == 3`， 也就是text类型的节点， 如果是此类节点， 就先用正则去匹配一下`{{ xxx }}`语法， 看看有没有使用到某个变量， \n如果匹配到了， 则通过`RegExp.$1`获取到被匹配到的值， 然后去除左右的空格， 交给变量`name`\n最后，同样的创建了一个`Watcher`实例,  传入`vm, node ,name, \"value\"`这几个参数，\n\n出现两次`Watcher`， 什么情况， 到底干了啥\n那， 现在就来让我们看看神秘的`Watcher`构造函数\n\n找到`Watcher`的构造函数\n```JavaScript\nlet uid = 0;\n\nfunction Watcher(vm, node, name, type) {\n  // 单例， 使用原因未知\n  Dep.target = this\n  // 姓名\n  this.name = name;\n  // 呵呵哒 uid\n  this.id = ++uid;\n  // 与变量相关的Node节点\n  this.node = node;\n  // vm 实例\n  this.vm = vm;\n  // 变量类型  nodeValue  || value\n  this.type = type;\n  // 触发自己原型上的update方法\n  this.update()\n  // Watcher 实例创建结束就把单例置空\n  Dep.target = null\n}\n```\n\n此时我们发现了一个关键的东西`Dep.target` ， 这个鬼东西原来在这里， 它被赋值为了`Watcher`的实例， 然后在`Watcher`实例上挂载了`name`，也就是用到的变量， 还使用了一个`uid`， 不过这`uid`也是呵呵了，用数字作为`uid`, `Vue`的真实源码就这么干的， 为每个`Watcher`都配分一个`uid`， 这会造成数组空间的不连续， 引发内存泄漏\n\n接着说， 然后他将传入的`node`节点， `vm`实例， 还有`type`( 'nodeValue' 和 'value' ), 都挂到了实例上面， 并且还在调用了`update`方法后， 将`Dep.target`设为`null`\n\n那我们来看下`update`做了啥\n\n```JavaScript\nWatcher.prototype = {\n  update() {\n    this.get()\n    if(!batcher) {\n      // bastcher 单例\n      batcher = new Batcher()\n    }\n    // 加入队列\n    batcher.push(this)\n  },\n  // 获取新值挂到自己的实例上\n  get() {\n    this.value = this.vm[this.name]  // 触发getter\n  }\n}\n```\n\n看到`update`方法， 首先调用了一下`get`方法， 这个`get`呢就是根据`this.name`从 `vm`实例上取一次值， 并挂到`Watcher`实例上的`value`属性上, 并且他还会触发一次`getter`方法，将自己加入到`dep`中， 也就是加入到报刊亭大爷的电话本中， 便于之后的通知\n\n然后判断了一下`window.batcher`是否存在， 如果不存在就创建一个， 保证其是一个单例模式,\n如果存在， 就将自己(`watcher`实例)，通过`push`方法传入\n\n看到这里，又晕了， 什么时候又冒出来一个`Batcher`\n\n我们又找到`Batcher`的构造函数好好分析下，\n```JavaScript\n// 批处理构造函数\nfunction Batcher() {\n  //  重置  has  queue waiting\n  this.reset()\n}\n\nBatcher.prototype.reset = function () {\n  this.has = {}\n  this.queue = []\n  this.waiting = false\n} \n\n// 将watcher 添加到队列中\nBatcher.prototype.push = function (job) {\n  let id = job.id\n  // 先根据 对象的key 看看是否已经有了这个watcher\n  if (!this.has[id]) {\n    // console.log(batcher)\n    this.queue.push(job)\n    // 将watcher 的key的设为true\n    this.has[id] = true\n\n    // 延迟执行\n    if (!this.waiting ) {\n      this.waiting = true\n      if ( \"Promise\" in window ) {\n        Promise.resolve().then(() => {\n          this.flush()\n        })\n      } else {\n        setTimeout(() => {\n          this.flush()\n        }, 0)\n      }\n    }\n  }\n}\n\n\n// 执行并情况事件队列\nBatcher.prototype.flush = function() {\n  this.queue.forEach(job => {\n    job.cb()\n  })\n  this.reset()\n}\n\n\n```\n\n`Batcher`的构造函数很简单， 就调用了一下自己的`reset`方法， 但好像事情远没有这么简单，我们不是在 `Watcher`的`update`方法中调用了`batcher.push`吗， 我也可以在这原型上找的这个方法， 首先它接收一个`job`参数， 也就是`Watcher`实例， \n\n获取到该`watcher`的`id`, 然后使用这个`id`,去`has`这个对象上访问一下， 看看是否存在，\n如果不存在，在证明之前没有添加进来过， 然后将该`watcher`实例加到`queue`队列中， \n并将`has`对象中`id`对应的值设为`true`, 以防止重复加入队列\n\n并且判断一下`waiting`，得知当前是否处于等待状态， 如果不是， 就将`waiting`改为`true`, 然后就是判断当前浏览器的支持情况， 将处理的任务扔到异步队列中\n\n它这里这么做是为了，只批处理一次， 你一瞬间加入多个`watcher`, 很容易造成重复执行， 利用`Watcher`的`id`来过滤， 并且利用异步， 等你要加的`watcher`都加完了， 我再给你统一的去执行所有`Watcher`\n\n也就是异步任务结束后调用的`flush`方法， 它在内部会遍历`queue`队列， 挨个的调用`Watcher`的`cb`方法\n在这一切都执行完成之后， 又调用了一次`reset`方法， 将`bascher`的三个属性重置为初始状态\n\n此时关注点又回到了`Watcher`身上， 它的`cb`方法又做了什么\n```JavaScript\nWatcher.prototype = {\n  // ...省略其他方法\n\n  // 给dom赋值\n  cb() {\n    // 最终实际虚拟dom 处理结果， 只处理一次\n    // 虚拟dom -> diff( 虚拟dom ) -> 局部更新 -> createElement(vNode) -> render\n    this.node[this.type] = this.value\n  },\n}\n```\n\n可以看到`cb`方法做的事情很简单那， 就是**根据元素的值类型去修改元素对象的值**， 而这个`this.value`早在之前调用 `Watcher`的`get`方法时就被赋上了\n\n到这里，整个流程就走完了， 相信你还是一头雾水， 我们把整个流程来串一下\n\n1. new Vue\n2. 将`data`中的值挂上 `getter`和`setter` 的相应方法， 然后暂且搁置，因为此时还无人调用`getter`和`setter`\n3. 通过 `Compile`解析模板， 挨个递归`#app`下的`dom`, 判断元素类型， 如果是元素，并且使用了`v-model`， 就绑定一个`input`事件,  如果是文本类型节点,就去匹配是使用了`{{ xx }}`语法， 最后为他们都创建了一个`watcher`\n4. 每个`watcher` 用来保存相关的元素对象， `vm`实例，使用的`变量` 以及元素值类型, 并将自己的实例交给， `Dep.target`， 并触发自己的`update`方法，`update`方法又会调用`get`方法， `get`方法又会触发该变量的`getter`， 这也就使得`getter`中可以将该`watcher`放入`dep`实例中， 最后将自己也放入`Bacher`中，用以批处理以及将`Dep.target`置空\n5. `Batcher`是个单例， 根据`Watcher`的`id`, 它用来过滤重复传入的`Watcher`, 保证一个`Watcher`只触发一次, 并将更新事件丢入异步，等当前的连续操作执行完成后去调用`Watcher`的`cb`方法更新`dom`\n6. 之后用户修改了变量, `setter`又会调用`dep`这个发布者来发出通知， 相关的`Watcher`的`update`方法再次被调用， 又会加入`batcher` , `batcher`等待异步完成后又调用`Watcher`的`cb`方法更新`dom`\n\n\n**到这里就整个串完了，但是感觉废话还是有点多， 再简化一点流程**:\n\nnew Vue --> `Observe` 挂载 `setter` 和 `getter` -->  `Compile` 编译模板 --> 为每个指令分配一个`watcher` --> 创建时会调用一次`watcher.update` 将自己加入到`batcher`的队列 -->\n并且此时会触发 `getter` 将`watcher`加入`dep` -->  `batcher` 统一来处理`watcher`后初始化自己 -->  当用户修改某个变量时 --> `dep`通知`watcher` --> `watcher`又被加入`batcher`处理 --> `watcher` 更新`dom`\n\n\n`Vue`的`batcher`还是实现的不是很好， 缺少调度机制， 这点上还是`React Fiber`更优秀点，`Fiber`如果遇上了长时间的任务会选择放弃， 避免阻塞进程。\n\n\n😕好了， 神秘的`Vue`源码已被揭开面纱， 但这仅仅是简易版的实现， 真实的`Vue`非常庞大， 还有更多的内容， 这里只是让大家明白`MVVM`的核心原理\n\n\n项目源码:\n> https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\n\n优质文献: \n* [汤姆大叔的观察者模式](http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html)","slug":"【Vue】源码解析","published":1,"updated":"2019-03-31T11:48:08.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9w1wqh006tssuw3nzyabv7","content":"<p>现在三大框架风起云涌， <code>JQuery</code>老大哥的光辉不再， 使前端成为了各路诸侯的兵家必争之地， </p>\n<p>当然作为一名优质的前端，光跟风学框架是肯定不行的， 要知其然而知其所以然</p>\n<p>要了解<code>MVVM</code>的本质原理， <code>virtual Dom</code>和 <code>Diff</code>算法解决的问题</p>\n<p>拒绝盲目跟风</p>\n<h2 id=\"🍎diffDom优劣\"><a href=\"#🍎diffDom优劣\" class=\"headerlink\" title=\"🍎diffDom优劣\"></a>🍎diffDom优劣</h2><p>现在很多人都说 <code>Vue</code>, <code>React</code> 多牛， <code>Diff</code>算法快，不用操作<code>Dom</code>。</p>\n<p>只能无语。</p>\n<p><code>Diff</code>算法不是不需要操作<code>Dom</code>,  而是不需要开发者去操作<code>Dom</code>了， <code>Diff</code>算法其实不快， 就算使用了<code>virtual Dom</code>,  还得花实现把真实<code>Dom</code> 转换为 <code>virtual Dom</code> 再去比对， 这远远没有<code>js</code>直接 <code>getElementById</code>直达目标来的快</p>\n<p>那Diff算法不快为什么还要用呢?</p>\n<p><code>Diff</code>算法其实是给那些比较随意的新手开发者准备的</p>\n<p>看这个例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 原本的dom --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ul\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拿到结果不管三七二十一把旧dom全替换了</span></span><br><span class=\"line\">$.<span class=\"keyword\">get</span>('/api', (res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _HTML = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt; res.length; i++)&#123;</span><br><span class=\"line\">    _HTML = <span class=\"string\">\"&lt;li&gt;\"</span> + res[i] +<span class=\"string\">\"&lt;/li&gt;\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $(<span class=\"string\">\"#ul\"</span>).html(_HTML)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如果是原始的<code>Dom</code>操作， 有很多小白会像这个例子一样， 不管<code>Dom</code>需不需要更新， 他都把<code>ajax</code>返回的请求全部跑一边，生成<code>HTML</code>模板， 然后把原本的所有<code>li</code>都删了，  再把新的模板放进去， <code>Dom</code>少还看不出来， 如果<code>Dom</code>多了呢， 上千的<code>Dom</code>， 这顿操作一下就玩炸了。</p>\n<p>况且网站优化原则就是尽量减小<code>Dom</code>操作， 如果是有经验的开发者， 会选择找到有变化的位置，使用<code>append</code>插入</p>\n<h2 id=\"📄Vue架构目录\"><a href=\"#📄Vue架构目录\" class=\"headerlink\" title=\"📄Vue架构目录\"></a>📄Vue架构目录</h2><p>去<a href=\"https://github.com/vuejs/vue\" target=\"_blank\" rel=\"noopener\">Vue官网</a>下载<code>Vue</code>源码看看，</p>\n<p>打开里面会有一个 <code>src</code>目录， 里面就是整个的<code>Vue</code>源码</p>\n<p>目前有6个目录， 作用分别如下</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-30-10-44-35.png\" alt=\"Vue目录\"></p>\n<p><code>Vue.js</code> 的组成是由 <code>core</code> + 对应的 ‘平台’ 补充代码构成（独立构建和运行时构建只是 <code>platforms</code> 下 <code>web</code> 平台的两种选择）</p>\n<p><code>Vue</code>的核心原理就在<code>core</code>文件夹中， 让我们进入 <code>core</code> 文件夹看看</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-30-10-57-26.png\" alt=\"core文件夹\"></p>\n<p>了解了目录，接下来我们就来研究<code>Vue</code>的双向绑定</p>\n<h2 id=\"🔗双向绑定（响应式原理）-所涉及到的技术\"><a href=\"#🔗双向绑定（响应式原理）-所涉及到的技术\" class=\"headerlink\" title=\"🔗双向绑定（响应式原理） 所涉及到的技术\"></a>🔗双向绑定（响应式原理） 所涉及到的技术</h2><ul>\n<li>✅ <strong>Obejct.defineProperty</strong> <em>【提供getter 和 setter】</em></li>\n<li>✅ <strong>Observer</strong> <em>【提供getter 和 setter】</em></li>\n<li>✅ <strong>watcher</strong>  <em>【提供getter 和 setter】</em></li>\n<li>✅ <strong>Dep</strong> <em>【负责收集watcher】</em></li>\n<li>✅ <strong>Directive</strong> <em>【处理Vue模板指令】</em></li>\n</ul>\n<h3 id=\"Obejct-defineProperty\"><a href=\"#Obejct-defineProperty\" class=\"headerlink\" title=\"Obejct.defineProperty\"></a>Obejct.defineProperty</h3><p><code>Obejct.defineProperty</code> 是整个<code>Vue</code>的灵魂， </p>\n<p>来看一下<code>Obejct.defineProperty</code> 如何使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'getter'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter'</span>)</span><br><span class=\"line\">    c = newVal</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = newVal</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.a = <span class=\"string\">'234'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// 234</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a) <span class=\"comment\">// 234</span></span><br></pre></td></tr></table></figure></p>\n<p>它帮助<code>Vue</code>实现了双向绑定, 但也因为这个， <code>Vue</code>也只能舍弃了对低版本浏览器的支持。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-30-11-48-41.png\" alt=\"defineProperty兼容\"></p>\n<p>它只能兼容到<code>IE9</code> ， 并且市面上的<code>polyfill</code>实现的也并不是很好</p>\n<p>那低版本如何代替<code>Obejct.defineProperty</code> ， 难道真没了它就不行吗？</p>\n<p><strong>当然有</strong>：</p>\n<ol>\n<li>👆 &gt; IE 7</li>\n</ol>\n<p>实际上在<code>IE7</code>的时候就已经有暴露了 <code>__defineGetter__</code> 方法，<br><img src=\"http://img.nixiaolei.com/2019-03-30-12-57-56.png\" alt=\"__defineGetter__\"></p>\n<p>具体用法如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> random = &#123;&#125;;</span><br><span class=\"line\">random.__defineGetter__(<span class=\"string\">'ten'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10</span>); &#125;);</span><br><span class=\"line\">random.__defineGetter__(<span class=\"string\">'hundred'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">100</span>); &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">random.ten <span class=\"comment\">// 随机的一个值</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>👇 &lt; IE 7</li>\n</ol>\n<p>早年间的<code>IE</code> 是支持<code>VBScript</code>,  <a href=\"http://www.w3school.com.cn/vbscript/index.asp\" target=\"_blank\" rel=\"noopener\">VBScript</a> 就可以直接写类， 并且也支持<code>get</code>，<code>set</code>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> name () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> name() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"🐶霸道的IE\"><a href=\"#🐶霸道的IE\" class=\"headerlink\" title=\"🐶霸道的IE\"></a>🐶霸道的IE</h3><p>说了这么多<code>IE</code>的坏， 这里也带一嘴<code>IE</code>的好，</p>\n<p><code>IE</code>能够调用<code>EXE</code>程序, 比如<code>JS</code>无法设置打印机的宽高，就可以利用<code>ActiveObjectX</code>来做到, 甚至可以修改<code>word</code>格式等等  , 所以办公类的项目离不开<code>IE</code></p>\n<h2 id=\"😕MVVM-双向数据绑定流程\"><a href=\"#😕MVVM-双向数据绑定流程\" class=\"headerlink\" title=\"😕MVVM 双向数据绑定流程\"></a>😕MVVM 双向数据绑定流程</h2><p>MVVM: Model–view–viewmodel</p>\n<p>那怎么区分这些层呢</p>\n<ul>\n<li>🚀<strong>Model</strong>: <code>Observer</code></li>\n<li>✈️<strong>view</strong> : <code>directive</code></li>\n<li>🚚<strong>viewmodel</strong>: <code>Watcher</code> &amp;&amp; <code>Dep</code>  <em>【用于连接 Model 和 view】</em></li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-03-30-11-51-42.png\" alt=\"双向数据绑定\"></p>\n<p>先看<code>Directive</code>, 这就是我们平时写的<code>vue</code>指令， 如上面举例得的<code>v-text=&quot;times&quot;</code>, 这就是一个指令， 一个<code>Directive</code>会分配一个<code>Watcher</code></p>\n<h3 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h3><p>观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。订阅者模式涉及三个对象：发布者、主题对象、订阅者，三个对象间的是一对多的关系，每当主题对象状态发生改变时，其相关依赖对象都会得到通知，并被自动更新。</p>\n<p>简单的描述就是:</p>\n<p>你想买漫画， 但是问了报刊亭的大爷， 大爷说现在没有， 还没到货， 然后你回去了， 第二天你又去问， 大爷还是说没有， 如果你每天这样问， 大爷估计会嫌你烦。 如果这时候你把你的电话给大爷， 大爷记录到他的<strong>本子</strong>上,  当大爷的漫画到货的时候电话通知你。</p>\n<p>这时你就是<code>订阅者</code>, 大爷就是<code>发布者</code>, 你们就存在一个发布订阅者的关系</p>\n<p><strong>Vue 中的Observer</strong></p>\n<p>Observer会观察两种类型的数据，<code>Object</code> 与 <code>Array</code><br>对于<code>Array</code>类型的数据，由于 <code>JavaScript</code> 的限制， <code>Vue</code> 不能检测变化,会先重写操作数组的原型方法，重写后能达到两个目的，</p>\n<p>当数组发生变化时，触发 <code>notify</code> 如果是 <code>push</code>，<code>unshift</code>，<code>splice</code> 这些添加新元素的操作，则会使用<code>observer</code>观察新添加的数据重写完原型方法后，遍历拿到数组中的每个数据 使用<code>observer</code>观察它而对于<code>Object</code>类型的数据，则遍历它的每个<code>key</code>，使用 <code>defineProperty</code> 设置 <code>getter</code> 和 <code>setter</code>，当触发<code>getter</code>的时候，<code>observer</code>则开始收集依赖，而触发<code>setter</code>的时候，<code>observer</code>则触发<code>notify</code>。</p>\n<h4 id=\"对-Object-的处理\"><a href=\"#对-Object-的处理\" class=\"headerlink\" title=\"对 Object 的处理\"></a>对 Object 的处理</h4><p><code>Observer</code> 对象的标志就是<code>__ob__</code> 这个属性，这个属性保存了 <code>Observer</code> 对象自己本身。对象在转化为 <code>Observer</code> 对象的过程中是一个递归的过程，对象的子元素如果是对象或数组的话，也会转化为 <code>Observer</code> 对象</p>\n<h4 id=\"对数组的处理\"><a href=\"#对数组的处理\" class=\"headerlink\" title=\"对数组的处理\"></a>对数组的处理</h4><p>其实 <code>observeArray</code> 方法就是对数组进行遍历，递归调用 <code>observe</code> 方法，最终都会走入 <code>walk</code> 方监控单个元素。而 <code>walk</code> 方法就是遍历对象，结合 defineReactive 方法递归将属性转化为 <code>getter</code> 和 <code>setter</code></p>\n<h3 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h3><p><code>Watcher</code> 是将模板和 <code>Observer</code> 对象结合在一起的纽带。<code>Watcher</code> 是订阅者模式中的订阅者。<code>Watcher</code> 的两个参数： <code>expOrFn</code> 最终会被转换为 <code>getter</code> 函数， cb 是更新时执行的回调。依赖收集的入口就是get函数。</p>\n<blockquote>\n<p>getter 函数是用来连接监控属性与 <code>Watcher</code> 的关键</p>\n</blockquote>\n<p>只有通过<code>watcher</code> 触发的getter 会收集依赖，而所谓的被收集的依赖就是当前<code>watcher</code>.初始化时传入的参数 expOrFn 中涉及到的每一项数据，然后触发该数据项的 getter 函数；getter 函数中就是通过判断 Dep.target的有无来判断是 <code>Watcher</code> 初始化时调用的还是普通数据读取，如果有则进行依赖收集</p>\n<h3 id=\"Dep\"><a href=\"#Dep\" class=\"headerlink\" title=\"Dep\"></a>Dep</h3><p>这个方法是在响应式的过程中调用的，用户修改数据触发 setter 函数，函数的最后一行就是调用 dep.notify 去通知订阅者更新视图。</p>\n<h3 id=\"Directive\"><a href=\"#Directive\" class=\"headerlink\" title=\"Directive\"></a>Directive</h3><p><img src=\"http://img.nixiaolei.com/2019-03-30-14-50-38.png\" alt=\"Directive\"></p>\n<p>关于编译这块vue分了两种类型，一种是文本节点，一种是元素节点</p>\n<p>vue内置了这么多的指令，这些指令都会抛出两个接口bind 和 update，这两个接口的作用是，编译的最后一步是执行所有用到的指令的bind方法，而 update 方法则是当watcher 触发 update 时，Directive会触发指令的update方法</p>\n<p>observe -&gt; 触发setter -&gt; watcher -&gt; 触发update -&gt; Directive -&gt; 触发update -&gt; 指令</p>\n<h2 id=\"💥源码分析\"><a href=\"#💥源码分析\" class=\"headerlink\" title=\"💥源码分析\"></a>💥源码分析</h2><p>Vue的完全版源码有很多判断以及其他的逻辑， 对于观看源码的人，会造成极大的困难，</p>\n<p>因此准备了这版仿照Vue流程实现的 实现了双向绑定的<a href=\"https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\" target=\"_blank\" rel=\"noopener\">简版Vue</a>, 方便学习理解</p>\n<p>通过这版对<a href=\"https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\" target=\"_blank\" rel=\"noopener\">Vue源码的简易翻版</a>， 我们来快速理解Vue原理</p>\n<h3 id=\"✨-new-Vue\"><a href=\"#✨-new-Vue\" class=\"headerlink\" title=\"✨ new Vue\"></a>✨ new Vue</h3><p>首先看一下，我们的 new Vue, 这是所有操作的入口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    nickname: <span class=\"string\">'张三'</span>,</span><br><span class=\"line\">    email: <span class=\"string\">\"123123@qq.com\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>相信使用过<code>Vue</code>的小伙伴都明白， 这里定义了一个<code>data</code>， 用于存放变量， el是目标<code>dom</code>的选择器</p>\n<h3 id=\"🔥-new-Vue-执行时做了什么\"><a href=\"#🔥-new-Vue-执行时做了什么\" class=\"headerlink\" title=\"🔥 new Vue 执行时做了什么\"></a>🔥 new Vue 执行时做了什么</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vue</span>(<span class=\"params\">option</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = option.data </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.data = data</span><br><span class=\"line\">  <span class=\"comment\">// 挂载 getter 和 setter</span></span><br><span class=\"line\">  observe(data, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id = option.el</span><br><span class=\"line\">  <span class=\"comment\">// 编译 模板</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"keyword\">new</span> Compile(<span class=\"built_in\">document</span>.querySelector(id), <span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 把编译好的模板挂载到 #app 上</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(id).appendChild(dom)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到， Vue其实是一个构造函数， 它接收了一个参数<code>option</code>， 这个<code>option</code>就是我们<code>new Vue</code>传入的那个对象<br>因此我们可以通过<code>option</code> 拿到<code>data</code>和<code>el</code>两个变量， 当然这是js基础哈， 我就不再说了</p>\n<p>拿到<code>data</code>后， 我们可以看到它调用了一个 <code>observe</code>方法, 将data和this传入( 此时this时Vue实例 )</p>\n<p>接下来又根据<code>el</code>来获取<code>dom</code>， 同样的将获取到的<code>dom</code>和<code>this</code>传入了 <code>Compile</code>中，  并且还接收了一个返回值， 然后又将这个返回值挂到了 <code>#app</code>上</p>\n<p>是不是感觉， 什么鬼？, 这顿操作是啥</p>\n<p>首先看一下疑惑的 <code>observe</code>， 传入了 <code>data</code>， <code>this</code>, 然后就没动静了， 既然如此， 我们就进入<code>observe</code>看看</p>\n<p>找到<code>Observe</code>的构造函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">obj, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    defineReactive(vm, key, obj[key])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，它接收一个<code>obj</code>和 <code>vm</code>， 哦， 这里就一一对应上了， 就是我们刚才传入的 <code>data</code>和<code>this</code> </p>\n<p>来看看它做了什么， </p>\n<p>它把<code>obj</code>枚举了一遍， 并将每一次的  <code>vm</code>, <code>key</code>,<code>value</code> 都传入一个叫 <code>defineReactive</code>的方法</p>\n<p>好，那就让来看<code>defineReactive</code>做了什么</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">vm, key, val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为每个变量分配一个 dep实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">  <span class=\"comment\">// 配置getter和setter并且挂载到vm上</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(vm, key, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( Dep.target ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// JS的浏览器单线程特性， 保证整个全局变量在同一时间内， 只有一个监听器使用</span></span><br><span class=\"line\">        dep.addSub(Dep.target)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( newVal == val ) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      val = newVal;</span><br><span class=\"line\">      <span class=\"comment\">// 作为发布者发出通知</span></span><br><span class=\"line\">      dep.notify()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到， 它<code>new</code>了一个<code>Dep</code>， 这个<code>Dep</code>就是报刊亭大爷的电话本， 用来收集所有想买报纸或杂志的人的电话， 等到到货时就好挨个通知</p>\n<p>然后我们看到了灵魂函数 <code>Object.defineProperty</code>,  </p>\n<p>嗷那我们应该就明白了， 这里的一顿操作就是为了给<code>data</code>里的每个属性都挂载上 <code>getter</code>，<code>setter</code>, 并且将这些属性直接转移到了<code>vm</code>上（Vue实例）</p>\n<p>那既然如此， </p>\n<p>🤪让我们看看 <code>getter</code>方法做了什么， </p>\n<p>首先它判断了一下<code>Dep.target</code>，  如果<code>Dep.target</code>为<code>true</code> , 就调用<code>dep</code>的<code>addSub</code>方法， 这里<code>Dep.target</code>是啥我们先不管， 留个印象即可</p>\n<p>然后它直接<code>return</code>了<code>val</code></p>\n<p>😵再来看看<code>setter</code>方法</p>\n<p><code>setter</code>方法接收一个新值，  首先就是判断了新值和原本的值是否相等， 如果相等就不做处理了， 如果不相等， 它将新值赋给<code>val</code></p>\n<p>然后调用<code>dep</code>实例上的<code>notify</code>方法， <code>notify</code> 看着名字也知道是通知， 也就是大爷挨个打电话的一个操作</p>\n<p>好, 这一块我们理顺了， 是为了挂上<code>getter</code>和<code>setter</code>， 但又遇到了新问题<code>dep</code>， <code>dep</code>到底在干什么， 为什么被<code>getter</code>，<code>setter</code>都使用了 </p>\n<p>找到<code>Dep</code>的构造函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 存放watcher</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Dep.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 添加watcher, 也就是添加订阅</span></span><br><span class=\"line\">  addSub(sub) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 通知所有watcher</span></span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">      sub.update()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到， <code>Dep</code>构造函数中维护了一个 <code>subs</code>数组， 并且下面的在<code>prototype</code>上定义了几个方法， <code>addSub</code> 和<code>notify</code>，<br>这不就是刚刚<code>observe</code>里调用的两个方法吗，<br>哦，明白了， <code>addSub</code>原来是将<code>getter</code>中传入的 <code>Dep.target</code>追加到每个<code>Dep</code>实例都单独维护的一个<code>subs</code>数组中呀， <code>notify</code>就是遍历整个数组，挨个调用<code>update</code>方法（先不管update的具体实现）</p>\n<p>好， 解决了<code>observe</code>方法，那我们就回到最初的<code>Vue</code>构造函数中,  继续往下走, 攻克剩余的绿色区域</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-31-11-36-41.png\" alt=\"Compile\"></p>\n<p>我们可以看到，它通过<code>el</code> 获取到了<code>dom</code>, 并在<code>new Compile</code> 将<code>dom</code> 传入</p>\n<p>那我们就找到<code>Compile</code>的构造函数一探究竟<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Compile</span>(<span class=\"params\">node, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$frag = <span class=\"keyword\">this</span>.nodeToFragment(node, vm)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$frag</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到， 它接收了一个<code>node</code>， 和一个<code>vm</code> , 并且判断了一下<code>node</code>是否存在， </p>\n<p>并将<code>node</code>和<code>vm</code>，传入了<code>this.nodeToFragment</code>方法， 又将其的返回结果<code>return</code>出去， 也就是<code>new Compile</code>之后返回的值 ，如下</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-31-11-49-23.png\" alt=\"Compile02\"></p>\n<p>那<code>this.nodeToFragment</code>这个方法做了什么， 让我们找到他<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compile.prototype = &#123;</span><br><span class=\"line\">  nodeToFragment(node, vm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建文档片段</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( child = node.firstChild ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 替换变量</span></span><br><span class=\"line\">      _this.compileElement(child, vm)</span><br><span class=\"line\">      <span class=\"comment\">// 剪贴子元素</span></span><br><span class=\"line\">      frag.append(child)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frag</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  compileElement(node, vm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 节点类型为元素, 根据nodeType来判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( node.nodeType === <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取自定义属性</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> attr = node.attributes</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; attr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (attr[i].nodeName == <span class=\"string\">\"v-model\"</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 获取v-model 绑定的属性名</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> name = attr[i].nodeValue</span><br><span class=\"line\">          <span class=\"comment\">// 双向绑定</span></span><br><span class=\"line\">          node.addEventListener(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 给相应的data属性赋值， 进而触发该属性的set方法</span></span><br><span class=\"line\">            <span class=\"comment\">// 再批处理渲染元素</span></span><br><span class=\"line\">            vm[name] = e.target.value </span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          <span class=\"comment\">// 把this ，节点， 还有v-model绑定的变量交给watcher</span></span><br><span class=\"line\">          <span class=\"keyword\">new</span> Watcher(vm, node, name, <span class=\"string\">\"value\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点类型为text</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( node.nodeType === <span class=\"number\">3</span> ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( reg.test(node.nodeValue) ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>; <span class=\"comment\">// 获取匹配到的字符串</span></span><br><span class=\"line\">        name = name.trim()</span><br><span class=\"line\">         <span class=\"comment\">// 把this ，节点， 还有&#123;&#123; xxx &#125;&#125;中使用的变量交给watcher</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Watcher(vm, node, name, <span class=\"string\">'nodeValue'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们看到它在<code>Compile</code>原型上挂了<code>nodeToFragment</code>, <code>compileElement</code>两个方法，  <code>nodeToFragment</code>方法接收 <code>node</code>, <code>vm</code>参数</p>\n<p>先保存了一下<code>this</code>指向,  然后使用<code>document.createDocumentFragment()</code>方法创建了一个文档片段， 并将在<code>while</code>循环中传入的<code>node</code>节点的第一个元素赋值给 <code>child</code>变量，<br>然后使用<code>compileElement(child, vm)</code> 将<code>child</code>和<code>vm</code> 传入, 然后将<code>child</code> 追加给创建好的文档片段<code>frag</code>, 你肯定会觉得这是个死循环, 其实不是的， 这个<code>append</code>对<code>dom</code>有剪切的效果，<br>所以他会一直抽离<code>node</code>的第一个节点，直至<code>node</code>空了， 吸干他</p>\n<p>完成了这顿操作后， 再将<code>frag</code>文档片段返回</p>\n<p>然后我们来看看它在<code>while</code>中调用的<code>compileElement</code>方法做了什么</p>\n<p>它同样接收<code>node</code>和<code>vm</code> , 首先就是定义一个正则， 这是用来匹配<code></code>双括号的， 也就是我们平时的变量写法</p>\n<p>然后它判断了一下这个 <code>node</code>的节点类型,  如果<code>nodeType == 1</code>, 那就说明是元素，  如果<code>nodeType == 3</code> 那就说明节点类型是<code>text</code></p>\n<p>如果节点类型是元素， 就利用<code>attributes</code> 方法，获取到该元素身上的属性,  查看是否存在<code>v-model</code>这样一个属性， 如果有，就获取到<code>v-model</code>填写的变量，交给变量<code>name</code>,<br>然后监听该元素的<code>input</code>事件， </p>\n<p>所以每当改元素发生<code>input</code>时间时，就将元素上的<code>value</code>根据<code>v-model</code>上获取到的<code>name</code>作为<code>vm</code>的<code>key</code>去修改<code>vm</code>实例上的对应的值， 因为<code>vm</code>上的变量已经被挂载此来触发<code>vm</code></p>\n<p>最后还创建了一个<code>Watcher</code>实例,  传入<code>vm, node ,name, &quot;value&quot;</code>这几个参数，</p>\n<p><code>Watcher</code>的具体实现我们待会去看</p>\n<p>接下来就是判断<code>node.nodeType == 3</code>， 也就是text类型的节点， 如果是此类节点， 就先用正则去匹配一下<code></code>语法， 看看有没有使用到某个变量，<br>如果匹配到了， 则通过<code>RegExp.$1</code>获取到被匹配到的值， 然后去除左右的空格， 交给变量<code>name</code><br>最后，同样的创建了一个<code>Watcher</code>实例,  传入<code>vm, node ,name, &quot;value&quot;</code>这几个参数，</p>\n<p>出现两次<code>Watcher</code>， 什么情况， 到底干了啥<br>那， 现在就来让我们看看神秘的<code>Watcher</code>构造函数</p>\n<p>找到<code>Watcher</code>的构造函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> uid = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span>(<span class=\"params\">vm, node, name, type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 单例， 使用原因未知</span></span><br><span class=\"line\">  Dep.target = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"comment\">// 呵呵哒 uid</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = ++uid;</span><br><span class=\"line\">  <span class=\"comment\">// 与变量相关的Node节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.node = node;</span><br><span class=\"line\">  <span class=\"comment\">// vm 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.vm = vm;</span><br><span class=\"line\">  <span class=\"comment\">// 变量类型  nodeValue  || value</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">  <span class=\"comment\">// 触发自己原型上的update方法</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.update()</span><br><span class=\"line\">  <span class=\"comment\">// Watcher 实例创建结束就把单例置空</span></span><br><span class=\"line\">  Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时我们发现了一个关键的东西<code>Dep.target</code> ， 这个鬼东西原来在这里， 它被赋值为了<code>Watcher</code>的实例， 然后在<code>Watcher</code>实例上挂载了<code>name</code>，也就是用到的变量， 还使用了一个<code>uid</code>， 不过这<code>uid</code>也是呵呵了，用数字作为<code>uid</code>, <code>Vue</code>的真实源码就这么干的， 为每个<code>Watcher</code>都配分一个<code>uid</code>， 这会造成数组空间的不连续， 引发内存泄漏</p>\n<p>接着说， 然后他将传入的<code>node</code>节点， <code>vm</code>实例， 还有<code>type</code>( ‘nodeValue’ 和 ‘value’ ), 都挂到了实例上面， 并且还在调用了<code>update</code>方法后， 将<code>Dep.target</code>设为<code>null</code></p>\n<p>那我们来看下<code>update</code>做了啥</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype = &#123;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!batcher) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// bastcher 单例</span></span><br><span class=\"line\">      batcher = <span class=\"keyword\">new</span> Batcher()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 加入队列</span></span><br><span class=\"line\">    batcher.push(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 获取新值挂到自己的实例上</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.vm[<span class=\"keyword\">this</span>.name]  <span class=\"comment\">// 触发getter</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到<code>update</code>方法， 首先调用了一下<code>get</code>方法， 这个<code>get</code>呢就是根据<code>this.name</code>从 <code>vm</code>实例上取一次值， 并挂到<code>Watcher</code>实例上的<code>value</code>属性上, 并且他还会触发一次<code>getter</code>方法，将自己加入到<code>dep</code>中， 也就是加入到报刊亭大爷的电话本中， 便于之后的通知</p>\n<p>然后判断了一下<code>window.batcher</code>是否存在， 如果不存在就创建一个， 保证其是一个单例模式,<br>如果存在， 就将自己(<code>watcher</code>实例)，通过<code>push</code>方法传入</p>\n<p>看到这里，又晕了， 什么时候又冒出来一个<code>Batcher</code></p>\n<p>我们又找到<code>Batcher</code>的构造函数好好分析下，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 批处理构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Batcher</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//  重置  has  queue waiting</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reset()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Batcher.prototype.reset = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.has = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.queue = []</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.waiting = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将watcher 添加到队列中</span></span><br><span class=\"line\">Batcher.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> id = job.id</span><br><span class=\"line\">  <span class=\"comment\">// 先根据 对象的key 看看是否已经有了这个watcher</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.has[id]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(batcher)</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.push(job)</span><br><span class=\"line\">    <span class=\"comment\">// 将watcher 的key的设为true</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.waiting ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.waiting = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"string\">\"Promise\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.flush()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.flush()</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行并情况事件队列</span></span><br><span class=\"line\">Batcher.prototype.flush = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.queue.forEach(<span class=\"function\"><span class=\"params\">job</span> =&gt;</span> &#123;</span><br><span class=\"line\">    job.cb()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reset()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>Batcher</code>的构造函数很简单， 就调用了一下自己的<code>reset</code>方法， 但好像事情远没有这么简单，我们不是在 <code>Watcher</code>的<code>update</code>方法中调用了<code>batcher.push</code>吗， 我也可以在这原型上找的这个方法， 首先它接收一个<code>job</code>参数， 也就是<code>Watcher</code>实例， </p>\n<p>获取到该<code>watcher</code>的<code>id</code>, 然后使用这个<code>id</code>,去<code>has</code>这个对象上访问一下， 看看是否存在，<br>如果不存在，在证明之前没有添加进来过， 然后将该<code>watcher</code>实例加到<code>queue</code>队列中，<br>并将<code>has</code>对象中<code>id</code>对应的值设为<code>true</code>, 以防止重复加入队列</p>\n<p>并且判断一下<code>waiting</code>，得知当前是否处于等待状态， 如果不是， 就将<code>waiting</code>改为<code>true</code>, 然后就是判断当前浏览器的支持情况， 将处理的任务扔到异步队列中</p>\n<p>它这里这么做是为了，只批处理一次， 你一瞬间加入多个<code>watcher</code>, 很容易造成重复执行， 利用<code>Watcher</code>的<code>id</code>来过滤， 并且利用异步， 等你要加的<code>watcher</code>都加完了， 我再给你统一的去执行所有<code>Watcher</code></p>\n<p>也就是异步任务结束后调用的<code>flush</code>方法， 它在内部会遍历<code>queue</code>队列， 挨个的调用<code>Watcher</code>的<code>cb</code>方法<br>在这一切都执行完成之后， 又调用了一次<code>reset</code>方法， 将<code>bascher</code>的三个属性重置为初始状态</p>\n<p>此时关注点又回到了<code>Watcher</code>身上， 它的<code>cb</code>方法又做了什么<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...省略其他方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 给dom赋值</span></span><br><span class=\"line\">  cb() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最终实际虚拟dom 处理结果， 只处理一次</span></span><br><span class=\"line\">    <span class=\"comment\">// 虚拟dom -&gt; diff( 虚拟dom ) -&gt; 局部更新 -&gt; createElement(vNode) -&gt; render</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.node[<span class=\"keyword\">this</span>.type] = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<code>cb</code>方法做的事情很简单那， 就是<strong>根据元素的值类型去修改元素对象的值</strong>， 而这个<code>this.value</code>早在之前调用 <code>Watcher</code>的<code>get</code>方法时就被赋上了</p>\n<p>到这里，整个流程就走完了， 相信你还是一头雾水， 我们把整个流程来串一下</p>\n<ol>\n<li>new Vue</li>\n<li>将<code>data</code>中的值挂上 <code>getter</code>和<code>setter</code> 的相应方法， 然后暂且搁置，因为此时还无人调用<code>getter</code>和<code>setter</code></li>\n<li>通过 <code>Compile</code>解析模板， 挨个递归<code>#app</code>下的<code>dom</code>, 判断元素类型， 如果是元素，并且使用了<code>v-model</code>， 就绑定一个<code>input</code>事件,  如果是文本类型节点,就去匹配是使用了<code></code>语法， 最后为他们都创建了一个<code>watcher</code></li>\n<li>每个<code>watcher</code> 用来保存相关的元素对象， <code>vm</code>实例，使用的<code>变量</code> 以及元素值类型, 并将自己的实例交给， <code>Dep.target</code>， 并触发自己的<code>update</code>方法，<code>update</code>方法又会调用<code>get</code>方法， <code>get</code>方法又会触发该变量的<code>getter</code>， 这也就使得<code>getter</code>中可以将该<code>watcher</code>放入<code>dep</code>实例中， 最后将自己也放入<code>Bacher</code>中，用以批处理以及将<code>Dep.target</code>置空</li>\n<li><code>Batcher</code>是个单例， 根据<code>Watcher</code>的<code>id</code>, 它用来过滤重复传入的<code>Watcher</code>, 保证一个<code>Watcher</code>只触发一次, 并将更新事件丢入异步，等当前的连续操作执行完成后去调用<code>Watcher</code>的<code>cb</code>方法更新<code>dom</code></li>\n<li>之后用户修改了变量, <code>setter</code>又会调用<code>dep</code>这个发布者来发出通知， 相关的<code>Watcher</code>的<code>update</code>方法再次被调用， 又会加入<code>batcher</code> , <code>batcher</code>等待异步完成后又调用<code>Watcher</code>的<code>cb</code>方法更新<code>dom</code></li>\n</ol>\n<p><strong>到这里就整个串完了，但是感觉废话还是有点多， 再简化一点流程</strong>:</p>\n<p>new Vue –&gt; <code>Observe</code> 挂载 <code>setter</code> 和 <code>getter</code> –&gt;  <code>Compile</code> 编译模板 –&gt; 为每个指令分配一个<code>watcher</code> –&gt; 创建时会调用一次<code>watcher.update</code> 将自己加入到<code>batcher</code>的队列 –&gt;<br>并且此时会触发 <code>getter</code> 将<code>watcher</code>加入<code>dep</code> –&gt;  <code>batcher</code> 统一来处理<code>watcher</code>后初始化自己 –&gt;  当用户修改某个变量时 –&gt; <code>dep</code>通知<code>watcher</code> –&gt; <code>watcher</code>又被加入<code>batcher</code>处理 –&gt; <code>watcher</code> 更新<code>dom</code></p>\n<p><code>Vue</code>的<code>batcher</code>还是实现的不是很好， 缺少调度机制， 这点上还是<code>React Fiber</code>更优秀点，<code>Fiber</code>如果遇上了长时间的任务会选择放弃， 避免阻塞进程。</p>\n<p>😕好了， 神秘的<code>Vue</code>源码已被揭开面纱， 但这仅仅是简易版的实现， 真实的<code>Vue</code>非常庞大， 还有更多的内容， 这里只是让大家明白<code>MVVM</code>的核心原理</p>\n<p>项目源码:</p>\n<blockquote>\n<p><a href=\"https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\" target=\"_blank\" rel=\"noopener\">https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue</a></p>\n</blockquote>\n<p>优质文献: </p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html\" target=\"_blank\" rel=\"noopener\">汤姆大叔的观察者模式</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>现在三大框架风起云涌， <code>JQuery</code>老大哥的光辉不再， 使前端成为了各路诸侯的兵家必争之地， </p>\n<p>当然作为一名优质的前端，光跟风学框架是肯定不行的， 要知其然而知其所以然</p>\n<p>要了解<code>MVVM</code>的本质原理， <code>virtual Dom</code>和 <code>Diff</code>算法解决的问题</p>\n<p>拒绝盲目跟风</p>\n<h2 id=\"🍎diffDom优劣\"><a href=\"#🍎diffDom优劣\" class=\"headerlink\" title=\"🍎diffDom优劣\"></a>🍎diffDom优劣</h2><p>现在很多人都说 <code>Vue</code>, <code>React</code> 多牛， <code>Diff</code>算法快，不用操作<code>Dom</code>。</p>\n<p>只能无语。</p>\n<p><code>Diff</code>算法不是不需要操作<code>Dom</code>,  而是不需要开发者去操作<code>Dom</code>了， <code>Diff</code>算法其实不快， 就算使用了<code>virtual Dom</code>,  还得花实现把真实<code>Dom</code> 转换为 <code>virtual Dom</code> 再去比对， 这远远没有<code>js</code>直接 <code>getElementById</code>直达目标来的快</p>\n<p>那Diff算法不快为什么还要用呢?</p>\n<p><code>Diff</code>算法其实是给那些比较随意的新手开发者准备的</p>\n<p>看这个例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 原本的dom --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ul\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拿到结果不管三七二十一把旧dom全替换了</span></span><br><span class=\"line\">$.<span class=\"keyword\">get</span>('/api', (res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _HTML = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt; res.length; i++)&#123;</span><br><span class=\"line\">    _HTML = <span class=\"string\">\"&lt;li&gt;\"</span> + res[i] +<span class=\"string\">\"&lt;/li&gt;\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $(<span class=\"string\">\"#ul\"</span>).html(_HTML)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如果是原始的<code>Dom</code>操作， 有很多小白会像这个例子一样， 不管<code>Dom</code>需不需要更新， 他都把<code>ajax</code>返回的请求全部跑一边，生成<code>HTML</code>模板， 然后把原本的所有<code>li</code>都删了，  再把新的模板放进去， <code>Dom</code>少还看不出来， 如果<code>Dom</code>多了呢， 上千的<code>Dom</code>， 这顿操作一下就玩炸了。</p>\n<p>况且网站优化原则就是尽量减小<code>Dom</code>操作， 如果是有经验的开发者， 会选择找到有变化的位置，使用<code>append</code>插入</p>\n<h2 id=\"📄Vue架构目录\"><a href=\"#📄Vue架构目录\" class=\"headerlink\" title=\"📄Vue架构目录\"></a>📄Vue架构目录</h2><p>去<a href=\"https://github.com/vuejs/vue\" target=\"_blank\" rel=\"noopener\">Vue官网</a>下载<code>Vue</code>源码看看，</p>\n<p>打开里面会有一个 <code>src</code>目录， 里面就是整个的<code>Vue</code>源码</p>\n<p>目前有6个目录， 作用分别如下</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-30-10-44-35.png\" alt=\"Vue目录\"></p>\n<p><code>Vue.js</code> 的组成是由 <code>core</code> + 对应的 ‘平台’ 补充代码构成（独立构建和运行时构建只是 <code>platforms</code> 下 <code>web</code> 平台的两种选择）</p>\n<p><code>Vue</code>的核心原理就在<code>core</code>文件夹中， 让我们进入 <code>core</code> 文件夹看看</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-30-10-57-26.png\" alt=\"core文件夹\"></p>\n<p>了解了目录，接下来我们就来研究<code>Vue</code>的双向绑定</p>\n<h2 id=\"🔗双向绑定（响应式原理）-所涉及到的技术\"><a href=\"#🔗双向绑定（响应式原理）-所涉及到的技术\" class=\"headerlink\" title=\"🔗双向绑定（响应式原理） 所涉及到的技术\"></a>🔗双向绑定（响应式原理） 所涉及到的技术</h2><ul>\n<li>✅ <strong>Obejct.defineProperty</strong> <em>【提供getter 和 setter】</em></li>\n<li>✅ <strong>Observer</strong> <em>【提供getter 和 setter】</em></li>\n<li>✅ <strong>watcher</strong>  <em>【提供getter 和 setter】</em></li>\n<li>✅ <strong>Dep</strong> <em>【负责收集watcher】</em></li>\n<li>✅ <strong>Directive</strong> <em>【处理Vue模板指令】</em></li>\n</ul>\n<h3 id=\"Obejct-defineProperty\"><a href=\"#Obejct-defineProperty\" class=\"headerlink\" title=\"Obejct.defineProperty\"></a>Obejct.defineProperty</h3><p><code>Obejct.defineProperty</code> 是整个<code>Vue</code>的灵魂， </p>\n<p>来看一下<code>Obejct.defineProperty</code> 如何使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'getter'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter'</span>)</span><br><span class=\"line\">    c = newVal</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = newVal</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.a = <span class=\"string\">'234'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// 234</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a) <span class=\"comment\">// 234</span></span><br></pre></td></tr></table></figure></p>\n<p>它帮助<code>Vue</code>实现了双向绑定, 但也因为这个， <code>Vue</code>也只能舍弃了对低版本浏览器的支持。</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-30-11-48-41.png\" alt=\"defineProperty兼容\"></p>\n<p>它只能兼容到<code>IE9</code> ， 并且市面上的<code>polyfill</code>实现的也并不是很好</p>\n<p>那低版本如何代替<code>Obejct.defineProperty</code> ， 难道真没了它就不行吗？</p>\n<p><strong>当然有</strong>：</p>\n<ol>\n<li>👆 &gt; IE 7</li>\n</ol>\n<p>实际上在<code>IE7</code>的时候就已经有暴露了 <code>__defineGetter__</code> 方法，<br><img src=\"http://img.nixiaolei.com/2019-03-30-12-57-56.png\" alt=\"__defineGetter__\"></p>\n<p>具体用法如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> random = &#123;&#125;;</span><br><span class=\"line\">random.__defineGetter__(<span class=\"string\">'ten'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10</span>); &#125;);</span><br><span class=\"line\">random.__defineGetter__(<span class=\"string\">'hundred'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">100</span>); &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">random.ten <span class=\"comment\">// 随机的一个值</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>👇 &lt; IE 7</li>\n</ol>\n<p>早年间的<code>IE</code> 是支持<code>VBScript</code>,  <a href=\"http://www.w3school.com.cn/vbscript/index.asp\" target=\"_blank\" rel=\"noopener\">VBScript</a> 就可以直接写类， 并且也支持<code>get</code>，<code>set</code>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> name () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> name() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"🐶霸道的IE\"><a href=\"#🐶霸道的IE\" class=\"headerlink\" title=\"🐶霸道的IE\"></a>🐶霸道的IE</h3><p>说了这么多<code>IE</code>的坏， 这里也带一嘴<code>IE</code>的好，</p>\n<p><code>IE</code>能够调用<code>EXE</code>程序, 比如<code>JS</code>无法设置打印机的宽高，就可以利用<code>ActiveObjectX</code>来做到, 甚至可以修改<code>word</code>格式等等  , 所以办公类的项目离不开<code>IE</code></p>\n<h2 id=\"😕MVVM-双向数据绑定流程\"><a href=\"#😕MVVM-双向数据绑定流程\" class=\"headerlink\" title=\"😕MVVM 双向数据绑定流程\"></a>😕MVVM 双向数据绑定流程</h2><p>MVVM: Model–view–viewmodel</p>\n<p>那怎么区分这些层呢</p>\n<ul>\n<li>🚀<strong>Model</strong>: <code>Observer</code></li>\n<li>✈️<strong>view</strong> : <code>directive</code></li>\n<li>🚚<strong>viewmodel</strong>: <code>Watcher</code> &amp;&amp; <code>Dep</code>  <em>【用于连接 Model 和 view】</em></li>\n</ul>\n<p><img src=\"http://img.nixiaolei.com/2019-03-30-11-51-42.png\" alt=\"双向数据绑定\"></p>\n<p>先看<code>Directive</code>, 这就是我们平时写的<code>vue</code>指令， 如上面举例得的<code>v-text=&quot;times&quot;</code>, 这就是一个指令， 一个<code>Directive</code>会分配一个<code>Watcher</code></p>\n<h3 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h3><p>观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。订阅者模式涉及三个对象：发布者、主题对象、订阅者，三个对象间的是一对多的关系，每当主题对象状态发生改变时，其相关依赖对象都会得到通知，并被自动更新。</p>\n<p>简单的描述就是:</p>\n<p>你想买漫画， 但是问了报刊亭的大爷， 大爷说现在没有， 还没到货， 然后你回去了， 第二天你又去问， 大爷还是说没有， 如果你每天这样问， 大爷估计会嫌你烦。 如果这时候你把你的电话给大爷， 大爷记录到他的<strong>本子</strong>上,  当大爷的漫画到货的时候电话通知你。</p>\n<p>这时你就是<code>订阅者</code>, 大爷就是<code>发布者</code>, 你们就存在一个发布订阅者的关系</p>\n<p><strong>Vue 中的Observer</strong></p>\n<p>Observer会观察两种类型的数据，<code>Object</code> 与 <code>Array</code><br>对于<code>Array</code>类型的数据，由于 <code>JavaScript</code> 的限制， <code>Vue</code> 不能检测变化,会先重写操作数组的原型方法，重写后能达到两个目的，</p>\n<p>当数组发生变化时，触发 <code>notify</code> 如果是 <code>push</code>，<code>unshift</code>，<code>splice</code> 这些添加新元素的操作，则会使用<code>observer</code>观察新添加的数据重写完原型方法后，遍历拿到数组中的每个数据 使用<code>observer</code>观察它而对于<code>Object</code>类型的数据，则遍历它的每个<code>key</code>，使用 <code>defineProperty</code> 设置 <code>getter</code> 和 <code>setter</code>，当触发<code>getter</code>的时候，<code>observer</code>则开始收集依赖，而触发<code>setter</code>的时候，<code>observer</code>则触发<code>notify</code>。</p>\n<h4 id=\"对-Object-的处理\"><a href=\"#对-Object-的处理\" class=\"headerlink\" title=\"对 Object 的处理\"></a>对 Object 的处理</h4><p><code>Observer</code> 对象的标志就是<code>__ob__</code> 这个属性，这个属性保存了 <code>Observer</code> 对象自己本身。对象在转化为 <code>Observer</code> 对象的过程中是一个递归的过程，对象的子元素如果是对象或数组的话，也会转化为 <code>Observer</code> 对象</p>\n<h4 id=\"对数组的处理\"><a href=\"#对数组的处理\" class=\"headerlink\" title=\"对数组的处理\"></a>对数组的处理</h4><p>其实 <code>observeArray</code> 方法就是对数组进行遍历，递归调用 <code>observe</code> 方法，最终都会走入 <code>walk</code> 方监控单个元素。而 <code>walk</code> 方法就是遍历对象，结合 defineReactive 方法递归将属性转化为 <code>getter</code> 和 <code>setter</code></p>\n<h3 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h3><p><code>Watcher</code> 是将模板和 <code>Observer</code> 对象结合在一起的纽带。<code>Watcher</code> 是订阅者模式中的订阅者。<code>Watcher</code> 的两个参数： <code>expOrFn</code> 最终会被转换为 <code>getter</code> 函数， cb 是更新时执行的回调。依赖收集的入口就是get函数。</p>\n<blockquote>\n<p>getter 函数是用来连接监控属性与 <code>Watcher</code> 的关键</p>\n</blockquote>\n<p>只有通过<code>watcher</code> 触发的getter 会收集依赖，而所谓的被收集的依赖就是当前<code>watcher</code>.初始化时传入的参数 expOrFn 中涉及到的每一项数据，然后触发该数据项的 getter 函数；getter 函数中就是通过判断 Dep.target的有无来判断是 <code>Watcher</code> 初始化时调用的还是普通数据读取，如果有则进行依赖收集</p>\n<h3 id=\"Dep\"><a href=\"#Dep\" class=\"headerlink\" title=\"Dep\"></a>Dep</h3><p>这个方法是在响应式的过程中调用的，用户修改数据触发 setter 函数，函数的最后一行就是调用 dep.notify 去通知订阅者更新视图。</p>\n<h3 id=\"Directive\"><a href=\"#Directive\" class=\"headerlink\" title=\"Directive\"></a>Directive</h3><p><img src=\"http://img.nixiaolei.com/2019-03-30-14-50-38.png\" alt=\"Directive\"></p>\n<p>关于编译这块vue分了两种类型，一种是文本节点，一种是元素节点</p>\n<p>vue内置了这么多的指令，这些指令都会抛出两个接口bind 和 update，这两个接口的作用是，编译的最后一步是执行所有用到的指令的bind方法，而 update 方法则是当watcher 触发 update 时，Directive会触发指令的update方法</p>\n<p>observe -&gt; 触发setter -&gt; watcher -&gt; 触发update -&gt; Directive -&gt; 触发update -&gt; 指令</p>\n<h2 id=\"💥源码分析\"><a href=\"#💥源码分析\" class=\"headerlink\" title=\"💥源码分析\"></a>💥源码分析</h2><p>Vue的完全版源码有很多判断以及其他的逻辑， 对于观看源码的人，会造成极大的困难，</p>\n<p>因此准备了这版仿照Vue流程实现的 实现了双向绑定的<a href=\"https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\" target=\"_blank\" rel=\"noopener\">简版Vue</a>, 方便学习理解</p>\n<p>通过这版对<a href=\"https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\" target=\"_blank\" rel=\"noopener\">Vue源码的简易翻版</a>， 我们来快速理解Vue原理</p>\n<h3 id=\"✨-new-Vue\"><a href=\"#✨-new-Vue\" class=\"headerlink\" title=\"✨ new Vue\"></a>✨ new Vue</h3><p>首先看一下，我们的 new Vue, 这是所有操作的入口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    nickname: <span class=\"string\">'张三'</span>,</span><br><span class=\"line\">    email: <span class=\"string\">\"123123@qq.com\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>相信使用过<code>Vue</code>的小伙伴都明白， 这里定义了一个<code>data</code>， 用于存放变量， el是目标<code>dom</code>的选择器</p>\n<h3 id=\"🔥-new-Vue-执行时做了什么\"><a href=\"#🔥-new-Vue-执行时做了什么\" class=\"headerlink\" title=\"🔥 new Vue 执行时做了什么\"></a>🔥 new Vue 执行时做了什么</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vue</span>(<span class=\"params\">option</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = option.data </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.data = data</span><br><span class=\"line\">  <span class=\"comment\">// 挂载 getter 和 setter</span></span><br><span class=\"line\">  observe(data, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id = option.el</span><br><span class=\"line\">  <span class=\"comment\">// 编译 模板</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"keyword\">new</span> Compile(<span class=\"built_in\">document</span>.querySelector(id), <span class=\"keyword\">this</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 把编译好的模板挂载到 #app 上</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(id).appendChild(dom)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到， Vue其实是一个构造函数， 它接收了一个参数<code>option</code>， 这个<code>option</code>就是我们<code>new Vue</code>传入的那个对象<br>因此我们可以通过<code>option</code> 拿到<code>data</code>和<code>el</code>两个变量， 当然这是js基础哈， 我就不再说了</p>\n<p>拿到<code>data</code>后， 我们可以看到它调用了一个 <code>observe</code>方法, 将data和this传入( 此时this时Vue实例 )</p>\n<p>接下来又根据<code>el</code>来获取<code>dom</code>， 同样的将获取到的<code>dom</code>和<code>this</code>传入了 <code>Compile</code>中，  并且还接收了一个返回值， 然后又将这个返回值挂到了 <code>#app</code>上</p>\n<p>是不是感觉， 什么鬼？, 这顿操作是啥</p>\n<p>首先看一下疑惑的 <code>observe</code>， 传入了 <code>data</code>， <code>this</code>, 然后就没动静了， 既然如此， 我们就进入<code>observe</code>看看</p>\n<p>找到<code>Observe</code>的构造函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">obj, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    defineReactive(vm, key, obj[key])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，它接收一个<code>obj</code>和 <code>vm</code>， 哦， 这里就一一对应上了， 就是我们刚才传入的 <code>data</code>和<code>this</code> </p>\n<p>来看看它做了什么， </p>\n<p>它把<code>obj</code>枚举了一遍， 并将每一次的  <code>vm</code>, <code>key</code>,<code>value</code> 都传入一个叫 <code>defineReactive</code>的方法</p>\n<p>好，那就让来看<code>defineReactive</code>做了什么</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">vm, key, val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为每个变量分配一个 dep实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">  <span class=\"comment\">// 配置getter和setter并且挂载到vm上</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(vm, key, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( Dep.target ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// JS的浏览器单线程特性， 保证整个全局变量在同一时间内， 只有一个监听器使用</span></span><br><span class=\"line\">        dep.addSub(Dep.target)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( newVal == val ) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      val = newVal;</span><br><span class=\"line\">      <span class=\"comment\">// 作为发布者发出通知</span></span><br><span class=\"line\">      dep.notify()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到， 它<code>new</code>了一个<code>Dep</code>， 这个<code>Dep</code>就是报刊亭大爷的电话本， 用来收集所有想买报纸或杂志的人的电话， 等到到货时就好挨个通知</p>\n<p>然后我们看到了灵魂函数 <code>Object.defineProperty</code>,  </p>\n<p>嗷那我们应该就明白了， 这里的一顿操作就是为了给<code>data</code>里的每个属性都挂载上 <code>getter</code>，<code>setter</code>, 并且将这些属性直接转移到了<code>vm</code>上（Vue实例）</p>\n<p>那既然如此， </p>\n<p>🤪让我们看看 <code>getter</code>方法做了什么， </p>\n<p>首先它判断了一下<code>Dep.target</code>，  如果<code>Dep.target</code>为<code>true</code> , 就调用<code>dep</code>的<code>addSub</code>方法， 这里<code>Dep.target</code>是啥我们先不管， 留个印象即可</p>\n<p>然后它直接<code>return</code>了<code>val</code></p>\n<p>😵再来看看<code>setter</code>方法</p>\n<p><code>setter</code>方法接收一个新值，  首先就是判断了新值和原本的值是否相等， 如果相等就不做处理了， 如果不相等， 它将新值赋给<code>val</code></p>\n<p>然后调用<code>dep</code>实例上的<code>notify</code>方法， <code>notify</code> 看着名字也知道是通知， 也就是大爷挨个打电话的一个操作</p>\n<p>好, 这一块我们理顺了， 是为了挂上<code>getter</code>和<code>setter</code>， 但又遇到了新问题<code>dep</code>， <code>dep</code>到底在干什么， 为什么被<code>getter</code>，<code>setter</code>都使用了 </p>\n<p>找到<code>Dep</code>的构造函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 存放watcher</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Dep.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 添加watcher, 也就是添加订阅</span></span><br><span class=\"line\">  addSub(sub) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 通知所有watcher</span></span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">      sub.update()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到， <code>Dep</code>构造函数中维护了一个 <code>subs</code>数组， 并且下面的在<code>prototype</code>上定义了几个方法， <code>addSub</code> 和<code>notify</code>，<br>这不就是刚刚<code>observe</code>里调用的两个方法吗，<br>哦，明白了， <code>addSub</code>原来是将<code>getter</code>中传入的 <code>Dep.target</code>追加到每个<code>Dep</code>实例都单独维护的一个<code>subs</code>数组中呀， <code>notify</code>就是遍历整个数组，挨个调用<code>update</code>方法（先不管update的具体实现）</p>\n<p>好， 解决了<code>observe</code>方法，那我们就回到最初的<code>Vue</code>构造函数中,  继续往下走, 攻克剩余的绿色区域</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-31-11-36-41.png\" alt=\"Compile\"></p>\n<p>我们可以看到，它通过<code>el</code> 获取到了<code>dom</code>, 并在<code>new Compile</code> 将<code>dom</code> 传入</p>\n<p>那我们就找到<code>Compile</code>的构造函数一探究竟<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Compile</span>(<span class=\"params\">node, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$frag = <span class=\"keyword\">this</span>.nodeToFragment(node, vm)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$frag</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到， 它接收了一个<code>node</code>， 和一个<code>vm</code> , 并且判断了一下<code>node</code>是否存在， </p>\n<p>并将<code>node</code>和<code>vm</code>，传入了<code>this.nodeToFragment</code>方法， 又将其的返回结果<code>return</code>出去， 也就是<code>new Compile</code>之后返回的值 ，如下</p>\n<p><img src=\"http://img.nixiaolei.com/2019-03-31-11-49-23.png\" alt=\"Compile02\"></p>\n<p>那<code>this.nodeToFragment</code>这个方法做了什么， 让我们找到他<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compile.prototype = &#123;</span><br><span class=\"line\">  nodeToFragment(node, vm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建文档片段</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( child = node.firstChild ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 替换变量</span></span><br><span class=\"line\">      _this.compileElement(child, vm)</span><br><span class=\"line\">      <span class=\"comment\">// 剪贴子元素</span></span><br><span class=\"line\">      frag.append(child)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> frag</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  compileElement(node, vm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 节点类型为元素, 根据nodeType来判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( node.nodeType === <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取自定义属性</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> attr = node.attributes</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; attr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (attr[i].nodeName == <span class=\"string\">\"v-model\"</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 获取v-model 绑定的属性名</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> name = attr[i].nodeValue</span><br><span class=\"line\">          <span class=\"comment\">// 双向绑定</span></span><br><span class=\"line\">          node.addEventListener(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 给相应的data属性赋值， 进而触发该属性的set方法</span></span><br><span class=\"line\">            <span class=\"comment\">// 再批处理渲染元素</span></span><br><span class=\"line\">            vm[name] = e.target.value </span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          <span class=\"comment\">// 把this ，节点， 还有v-model绑定的变量交给watcher</span></span><br><span class=\"line\">          <span class=\"keyword\">new</span> Watcher(vm, node, name, <span class=\"string\">\"value\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点类型为text</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( node.nodeType === <span class=\"number\">3</span> ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( reg.test(node.nodeValue) ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>; <span class=\"comment\">// 获取匹配到的字符串</span></span><br><span class=\"line\">        name = name.trim()</span><br><span class=\"line\">         <span class=\"comment\">// 把this ，节点， 还有&#123;&#123; xxx &#125;&#125;中使用的变量交给watcher</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Watcher(vm, node, name, <span class=\"string\">'nodeValue'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们看到它在<code>Compile</code>原型上挂了<code>nodeToFragment</code>, <code>compileElement</code>两个方法，  <code>nodeToFragment</code>方法接收 <code>node</code>, <code>vm</code>参数</p>\n<p>先保存了一下<code>this</code>指向,  然后使用<code>document.createDocumentFragment()</code>方法创建了一个文档片段， 并将在<code>while</code>循环中传入的<code>node</code>节点的第一个元素赋值给 <code>child</code>变量，<br>然后使用<code>compileElement(child, vm)</code> 将<code>child</code>和<code>vm</code> 传入, 然后将<code>child</code> 追加给创建好的文档片段<code>frag</code>, 你肯定会觉得这是个死循环, 其实不是的， 这个<code>append</code>对<code>dom</code>有剪切的效果，<br>所以他会一直抽离<code>node</code>的第一个节点，直至<code>node</code>空了， 吸干他</p>\n<p>完成了这顿操作后， 再将<code>frag</code>文档片段返回</p>\n<p>然后我们来看看它在<code>while</code>中调用的<code>compileElement</code>方法做了什么</p>\n<p>它同样接收<code>node</code>和<code>vm</code> , 首先就是定义一个正则， 这是用来匹配<code></code>双括号的， 也就是我们平时的变量写法</p>\n<p>然后它判断了一下这个 <code>node</code>的节点类型,  如果<code>nodeType == 1</code>, 那就说明是元素，  如果<code>nodeType == 3</code> 那就说明节点类型是<code>text</code></p>\n<p>如果节点类型是元素， 就利用<code>attributes</code> 方法，获取到该元素身上的属性,  查看是否存在<code>v-model</code>这样一个属性， 如果有，就获取到<code>v-model</code>填写的变量，交给变量<code>name</code>,<br>然后监听该元素的<code>input</code>事件， </p>\n<p>所以每当改元素发生<code>input</code>时间时，就将元素上的<code>value</code>根据<code>v-model</code>上获取到的<code>name</code>作为<code>vm</code>的<code>key</code>去修改<code>vm</code>实例上的对应的值， 因为<code>vm</code>上的变量已经被挂载此来触发<code>vm</code></p>\n<p>最后还创建了一个<code>Watcher</code>实例,  传入<code>vm, node ,name, &quot;value&quot;</code>这几个参数，</p>\n<p><code>Watcher</code>的具体实现我们待会去看</p>\n<p>接下来就是判断<code>node.nodeType == 3</code>， 也就是text类型的节点， 如果是此类节点， 就先用正则去匹配一下<code></code>语法， 看看有没有使用到某个变量，<br>如果匹配到了， 则通过<code>RegExp.$1</code>获取到被匹配到的值， 然后去除左右的空格， 交给变量<code>name</code><br>最后，同样的创建了一个<code>Watcher</code>实例,  传入<code>vm, node ,name, &quot;value&quot;</code>这几个参数，</p>\n<p>出现两次<code>Watcher</code>， 什么情况， 到底干了啥<br>那， 现在就来让我们看看神秘的<code>Watcher</code>构造函数</p>\n<p>找到<code>Watcher</code>的构造函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> uid = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span>(<span class=\"params\">vm, node, name, type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 单例， 使用原因未知</span></span><br><span class=\"line\">  Dep.target = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"comment\">// 呵呵哒 uid</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = ++uid;</span><br><span class=\"line\">  <span class=\"comment\">// 与变量相关的Node节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.node = node;</span><br><span class=\"line\">  <span class=\"comment\">// vm 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.vm = vm;</span><br><span class=\"line\">  <span class=\"comment\">// 变量类型  nodeValue  || value</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">  <span class=\"comment\">// 触发自己原型上的update方法</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.update()</span><br><span class=\"line\">  <span class=\"comment\">// Watcher 实例创建结束就把单例置空</span></span><br><span class=\"line\">  Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时我们发现了一个关键的东西<code>Dep.target</code> ， 这个鬼东西原来在这里， 它被赋值为了<code>Watcher</code>的实例， 然后在<code>Watcher</code>实例上挂载了<code>name</code>，也就是用到的变量， 还使用了一个<code>uid</code>， 不过这<code>uid</code>也是呵呵了，用数字作为<code>uid</code>, <code>Vue</code>的真实源码就这么干的， 为每个<code>Watcher</code>都配分一个<code>uid</code>， 这会造成数组空间的不连续， 引发内存泄漏</p>\n<p>接着说， 然后他将传入的<code>node</code>节点， <code>vm</code>实例， 还有<code>type</code>( ‘nodeValue’ 和 ‘value’ ), 都挂到了实例上面， 并且还在调用了<code>update</code>方法后， 将<code>Dep.target</code>设为<code>null</code></p>\n<p>那我们来看下<code>update</code>做了啥</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype = &#123;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!batcher) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// bastcher 单例</span></span><br><span class=\"line\">      batcher = <span class=\"keyword\">new</span> Batcher()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 加入队列</span></span><br><span class=\"line\">    batcher.push(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 获取新值挂到自己的实例上</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.vm[<span class=\"keyword\">this</span>.name]  <span class=\"comment\">// 触发getter</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到<code>update</code>方法， 首先调用了一下<code>get</code>方法， 这个<code>get</code>呢就是根据<code>this.name</code>从 <code>vm</code>实例上取一次值， 并挂到<code>Watcher</code>实例上的<code>value</code>属性上, 并且他还会触发一次<code>getter</code>方法，将自己加入到<code>dep</code>中， 也就是加入到报刊亭大爷的电话本中， 便于之后的通知</p>\n<p>然后判断了一下<code>window.batcher</code>是否存在， 如果不存在就创建一个， 保证其是一个单例模式,<br>如果存在， 就将自己(<code>watcher</code>实例)，通过<code>push</code>方法传入</p>\n<p>看到这里，又晕了， 什么时候又冒出来一个<code>Batcher</code></p>\n<p>我们又找到<code>Batcher</code>的构造函数好好分析下，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 批处理构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Batcher</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//  重置  has  queue waiting</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reset()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Batcher.prototype.reset = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.has = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.queue = []</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.waiting = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将watcher 添加到队列中</span></span><br><span class=\"line\">Batcher.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> id = job.id</span><br><span class=\"line\">  <span class=\"comment\">// 先根据 对象的key 看看是否已经有了这个watcher</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.has[id]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(batcher)</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.push(job)</span><br><span class=\"line\">    <span class=\"comment\">// 将watcher 的key的设为true</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.waiting ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.waiting = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"string\">\"Promise\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.flush()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.flush()</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行并情况事件队列</span></span><br><span class=\"line\">Batcher.prototype.flush = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.queue.forEach(<span class=\"function\"><span class=\"params\">job</span> =&gt;</span> &#123;</span><br><span class=\"line\">    job.cb()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reset()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>Batcher</code>的构造函数很简单， 就调用了一下自己的<code>reset</code>方法， 但好像事情远没有这么简单，我们不是在 <code>Watcher</code>的<code>update</code>方法中调用了<code>batcher.push</code>吗， 我也可以在这原型上找的这个方法， 首先它接收一个<code>job</code>参数， 也就是<code>Watcher</code>实例， </p>\n<p>获取到该<code>watcher</code>的<code>id</code>, 然后使用这个<code>id</code>,去<code>has</code>这个对象上访问一下， 看看是否存在，<br>如果不存在，在证明之前没有添加进来过， 然后将该<code>watcher</code>实例加到<code>queue</code>队列中，<br>并将<code>has</code>对象中<code>id</code>对应的值设为<code>true</code>, 以防止重复加入队列</p>\n<p>并且判断一下<code>waiting</code>，得知当前是否处于等待状态， 如果不是， 就将<code>waiting</code>改为<code>true</code>, 然后就是判断当前浏览器的支持情况， 将处理的任务扔到异步队列中</p>\n<p>它这里这么做是为了，只批处理一次， 你一瞬间加入多个<code>watcher</code>, 很容易造成重复执行， 利用<code>Watcher</code>的<code>id</code>来过滤， 并且利用异步， 等你要加的<code>watcher</code>都加完了， 我再给你统一的去执行所有<code>Watcher</code></p>\n<p>也就是异步任务结束后调用的<code>flush</code>方法， 它在内部会遍历<code>queue</code>队列， 挨个的调用<code>Watcher</code>的<code>cb</code>方法<br>在这一切都执行完成之后， 又调用了一次<code>reset</code>方法， 将<code>bascher</code>的三个属性重置为初始状态</p>\n<p>此时关注点又回到了<code>Watcher</code>身上， 它的<code>cb</code>方法又做了什么<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...省略其他方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 给dom赋值</span></span><br><span class=\"line\">  cb() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最终实际虚拟dom 处理结果， 只处理一次</span></span><br><span class=\"line\">    <span class=\"comment\">// 虚拟dom -&gt; diff( 虚拟dom ) -&gt; 局部更新 -&gt; createElement(vNode) -&gt; render</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.node[<span class=\"keyword\">this</span>.type] = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<code>cb</code>方法做的事情很简单那， 就是<strong>根据元素的值类型去修改元素对象的值</strong>， 而这个<code>this.value</code>早在之前调用 <code>Watcher</code>的<code>get</code>方法时就被赋上了</p>\n<p>到这里，整个流程就走完了， 相信你还是一头雾水， 我们把整个流程来串一下</p>\n<ol>\n<li>new Vue</li>\n<li>将<code>data</code>中的值挂上 <code>getter</code>和<code>setter</code> 的相应方法， 然后暂且搁置，因为此时还无人调用<code>getter</code>和<code>setter</code></li>\n<li>通过 <code>Compile</code>解析模板， 挨个递归<code>#app</code>下的<code>dom</code>, 判断元素类型， 如果是元素，并且使用了<code>v-model</code>， 就绑定一个<code>input</code>事件,  如果是文本类型节点,就去匹配是使用了<code></code>语法， 最后为他们都创建了一个<code>watcher</code></li>\n<li>每个<code>watcher</code> 用来保存相关的元素对象， <code>vm</code>实例，使用的<code>变量</code> 以及元素值类型, 并将自己的实例交给， <code>Dep.target</code>， 并触发自己的<code>update</code>方法，<code>update</code>方法又会调用<code>get</code>方法， <code>get</code>方法又会触发该变量的<code>getter</code>， 这也就使得<code>getter</code>中可以将该<code>watcher</code>放入<code>dep</code>实例中， 最后将自己也放入<code>Bacher</code>中，用以批处理以及将<code>Dep.target</code>置空</li>\n<li><code>Batcher</code>是个单例， 根据<code>Watcher</code>的<code>id</code>, 它用来过滤重复传入的<code>Watcher</code>, 保证一个<code>Watcher</code>只触发一次, 并将更新事件丢入异步，等当前的连续操作执行完成后去调用<code>Watcher</code>的<code>cb</code>方法更新<code>dom</code></li>\n<li>之后用户修改了变量, <code>setter</code>又会调用<code>dep</code>这个发布者来发出通知， 相关的<code>Watcher</code>的<code>update</code>方法再次被调用， 又会加入<code>batcher</code> , <code>batcher</code>等待异步完成后又调用<code>Watcher</code>的<code>cb</code>方法更新<code>dom</code></li>\n</ol>\n<p><strong>到这里就整个串完了，但是感觉废话还是有点多， 再简化一点流程</strong>:</p>\n<p>new Vue –&gt; <code>Observe</code> 挂载 <code>setter</code> 和 <code>getter</code> –&gt;  <code>Compile</code> 编译模板 –&gt; 为每个指令分配一个<code>watcher</code> –&gt; 创建时会调用一次<code>watcher.update</code> 将自己加入到<code>batcher</code>的队列 –&gt;<br>并且此时会触发 <code>getter</code> 将<code>watcher</code>加入<code>dep</code> –&gt;  <code>batcher</code> 统一来处理<code>watcher</code>后初始化自己 –&gt;  当用户修改某个变量时 –&gt; <code>dep</code>通知<code>watcher</code> –&gt; <code>watcher</code>又被加入<code>batcher</code>处理 –&gt; <code>watcher</code> 更新<code>dom</code></p>\n<p><code>Vue</code>的<code>batcher</code>还是实现的不是很好， 缺少调度机制， 这点上还是<code>React Fiber</code>更优秀点，<code>Fiber</code>如果遇上了长时间的任务会选择放弃， 避免阻塞进程。</p>\n<p>😕好了， 神秘的<code>Vue</code>源码已被揭开面纱， 但这仅仅是简易版的实现， 真实的<code>Vue</code>非常庞大， 还有更多的内容， 这里只是让大家明白<code>MVVM</code>的核心原理</p>\n<p>项目源码:</p>\n<blockquote>\n<p><a href=\"https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\" target=\"_blank\" rel=\"noopener\">https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue</a></p>\n</blockquote>\n<p>优质文献: </p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html\" target=\"_blank\" rel=\"noopener\">汤姆大叔的观察者模式</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cju9w1w6p0002ssuw7d0d2elf","category_id":"cju9w1w750006ssuwp340m3en","_id":"cju9w1w7q000fssuwwez2siuw"},{"post_id":"cju9w1w6y0004ssuwknqxb1mx","category_id":"cju9w1w7f000bssuwk7f7zhri","_id":"cju9w1w9e000kssuwmfuj1sde"},{"post_id":"cju9w1w80000issuwwj93monp","category_id":"cju9w1w7f000bssuwk7f7zhri","_id":"cju9w1w9u000qssuwvrtsica2"},{"post_id":"cju9w1w780008ssuwmyf7fnh0","category_id":"cju9w1w7v000gssuwdpbe9k9i","_id":"cju9w1w9z000vssuw1a92mevj"},{"post_id":"cju9w1w8s000jssuwzxdke7id","category_id":"cju9w1w7f000bssuwk7f7zhri","_id":"cju9w1waf000yssuw4hor8u4y"},{"post_id":"cju9w1w7d0009ssuwm442p8mv","category_id":"cju9w1w9i000lssuwibvqy3k3","_id":"cju9w1wao0012ssuw41sls2h4"},{"post_id":"cju9w1w9s000pssuwin24evmz","category_id":"cju9w1w7f000bssuwk7f7zhri","_id":"cju9w1war0015ssuwcqm49r8f"},{"post_id":"cju9w1w7e000assuwas1k1omk","category_id":"cju9w1w7f000bssuwk7f7zhri","_id":"cju9w1way0018ssuwihh0isy4"},{"post_id":"cju9w1wap0014ssuwrwshz2ae","category_id":"cju9w1w9i000lssuwibvqy3k3","_id":"cju9w1wbh001essuwdnogjdhk"},{"post_id":"cju9w1w7g000dssuwkys574np","category_id":"cju9w1wah000zssuwvdouin44","_id":"cju9w1wbq001issuw4uvb20v3"},{"post_id":"cju9w1wb9001cssuwx781gbif","category_id":"cju9w1w7f000bssuwk7f7zhri","_id":"cju9w1wc1001lssuw2vokksaj"},{"post_id":"cju9w1w7m000essuwwp1mwnyi","category_id":"cju9w1w9i000lssuwibvqy3k3","_id":"cju9w1wcj001pssuwfrka6ai7"},{"post_id":"cju9w1w9o000nssuwy5ire9ya","category_id":"cju9w1wbi001fssuw9qqu6mh1","_id":"cju9w1wcq001rssuwl6u3o1w9"},{"post_id":"cju9w1w9y000ussuwqtrlhjye","category_id":"cju9w1wc3001mssuwvme6w5p7","_id":"cju9w1wdg001yssuw5u4jexnt"},{"post_id":"cju9w1wab000xssuwkjfxoot5","category_id":"cju9w1wcq001sssuwhehaf667","_id":"cju9w1wdq0025ssuwyrsvvi73"},{"post_id":"cju9w1wdm0023ssuwq41gs32c","category_id":"cju9w1w7f000bssuwk7f7zhri","_id":"cju9w1wen002dssuw6q11rchg"},{"post_id":"cju9w1wan0011ssuwvcthfuik","category_id":"cju9w1wdh0020ssuwniddh4v1","_id":"cju9w1wev002hssuwwpy5u6o3"},{"post_id":"cju9w1wdq0026ssuwvpgqrocz","category_id":"cju9w1wah000zssuwvdouin44","_id":"cju9w1wex002kssuw1adx6qoc"},{"post_id":"cju9w1we00029ssuwjzevued4","category_id":"cju9w1w7f000bssuwk7f7zhri","_id":"cju9w1wf8002pssuwtu7cw80z"},{"post_id":"cju9w1wau0017ssuw5y27k5w3","category_id":"cju9w1wds0027ssuwhcdc5rq8","_id":"cju9w1wfg002sssuwb6rgqwec"},{"post_id":"cju9w1wej002cssuwcrpvjc26","category_id":"cju9w1wds0027ssuwhcdc5rq8","_id":"cju9w1wfo002xssuwmipubnpr"},{"post_id":"cju9w1wbe001dssuwmjsilsnj","category_id":"cju9w1wds0027ssuwhcdc5rq8","_id":"cju9w1wfs0030ssuwb1gzshbw"},{"post_id":"cju9w1wbl001hssuwnzfpmwiy","category_id":"cju9w1wds0027ssuwhcdc5rq8","_id":"cju9w1wfw0034ssuwdjv9eqf8"},{"post_id":"cju9w1wfe002rssuwitylcadx","category_id":"cju9w1wbi001fssuw9qqu6mh1","_id":"cju9w1wg00037ssuwovl71yzm"},{"post_id":"cju9w1wfl002wssuwsddv2xhb","category_id":"cju9w1wah000zssuwvdouin44","_id":"cju9w1wga003cssuwe770wtj4"},{"post_id":"cju9w1wbw001kssuwqgjk6gdm","category_id":"cju9w1wfh002tssuwwvrudqx7","_id":"cju9w1wgh003essuwyp88bdsk"},{"post_id":"cju9w1wfu0033ssuwcqwik4sl","category_id":"cju9w1wcq001sssuwhehaf667","_id":"cju9w1wgm003hssuw8pewtq9n"},{"post_id":"cju9w1wca001ossuw21vnasa0","category_id":"cju9w1wfh002tssuwwvrudqx7","_id":"cju9w1wgt003kssuwv7nyfbmk"},{"post_id":"cju9w1wfy0036ssuw690njioj","category_id":"cju9w1w7f000bssuwk7f7zhri","_id":"cju9w1wgw003mssuw7bwve7g0"},{"post_id":"cju9w1wg8003bssuwiomcphz1","category_id":"cju9w1wg10039ssuwc90j2kee","_id":"cju9w1wh3003ossuwk0md0iwg"},{"post_id":"cju9w1wcm001qssuwnvjwh91e","category_id":"cju9w1wg10039ssuwc90j2kee","_id":"cju9w1wh8003rssuwwgu9x262"},{"post_id":"cju9w1wcw001ussuwrlsi544m","category_id":"cju9w1wg10039ssuwc90j2kee","_id":"cju9w1whb003tssuwhacza8ex"},{"post_id":"cju9w1wdc001wssuw3wqrf8se","category_id":"cju9w1wfh002tssuwwvrudqx7","_id":"cju9w1whd003vssuwuvj4yl2a"},{"post_id":"cju9w1wdj0021ssuw47zdx793","category_id":"cju9w1wh7003qssuwkwxhgyct","_id":"cju9w1whk0040ssuwrrl6c4l3"},{"post_id":"cju9w1wet002gssuwrtagd6ft","category_id":"cju9w1wg10039ssuwc90j2kee","_id":"cju9w1whp0043ssuw4dsu3nd0"},{"post_id":"cju9w1wew002jssuwnuvcxled","category_id":"cju9w1whi003zssuwad7qfday","_id":"cju9w1wi00048ssuwdh788ngv"},{"post_id":"cju9w1wf5002ossuwns8n1d56","category_id":"cju9w1whp0044ssuw6zt81m12","_id":"cju9w1wi9004cssuw5gve37a4"},{"post_id":"cju9w1wfq002zssuwlvzgb3qb","category_id":"cju9w1wi00049ssuww58zwpta","_id":"cju9w1wih004gssuw0rzpgl7v"},{"post_id":"cju9w1wmh005zssuww8ajnqb5","category_id":"cju9w1wah000zssuwvdouin44","_id":"cju9w1wmp0066ssuwnmrxdqdu"},{"post_id":"cju9w1wmq0067ssuwmz6uu3qq","category_id":"cju9w1wbi001fssuw9qqu6mh1","_id":"cju9w1wmw006cssuwq6ae81ze"},{"post_id":"cju9w1wmj0060ssuw5zsbr1s0","category_id":"cju9w1wmn0063ssuw9b3ujt9e","_id":"cju9w1wmz006gssuwksggzd4y"},{"post_id":"cju9w1wml0062ssuwn6vf3wvl","category_id":"cju9w1wmn0063ssuw9b3ujt9e","_id":"cju9w1wn0006issuwas0z8ktn"},{"post_id":"cju9w1wmo0065ssuwihgyi4po","category_id":"cju9w1wmx006dssuwebe29ker","_id":"cju9w1wn4006mssuwmu4hd0h4"},{"post_id":"cju9w1wqh006tssuw3nzyabv7","category_id":"cju9w1w9i000lssuwibvqy3k3","_id":"cju9w1wqk006vssuwqw0j7nkl"}],"PostTag":[{"post_id":"cju9w1w6p0002ssuw7d0d2elf","tag_id":"cju9w1w770007ssuwt753kjef","_id":"cju9w1w9r000ossuwdt9h342z"},{"post_id":"cju9w1w6p0002ssuw7d0d2elf","tag_id":"cju9w1w7g000cssuw06l4ql58","_id":"cju9w1w9v000rssuw77mptcdt"},{"post_id":"cju9w1w6p0002ssuw7d0d2elf","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1wa9000wssuwpqhw3tov"},{"post_id":"cju9w1w6y0004ssuwknqxb1mx","tag_id":"cju9w1w9k000mssuwnt8lblgg","_id":"cju9w1wap0013ssuwsnoz6mi8"},{"post_id":"cju9w1w6y0004ssuwknqxb1mx","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1was0016ssuwi8qa0brz"},{"post_id":"cju9w1w780008ssuwmyf7fnh0","tag_id":"cju9w1wal0010ssuwk9e1hm8k","_id":"cju9w1wb8001bssuw6dyg5ncb"},{"post_id":"cju9w1w7d0009ssuwm442p8mv","tag_id":"cju9w1wb2001assuwcv72nhp5","_id":"cju9w1wbr001jssuwfjiy7rys"},{"post_id":"cju9w1w7e000assuwas1k1omk","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1wdb001vssuwlx8xhz0o"},{"post_id":"cju9w1w7e000assuwas1k1omk","tag_id":"cju9w1wc5001nssuwmvbsmf5b","_id":"cju9w1wdf001xssuw3o7tc2xp"},{"post_id":"cju9w1w7g000dssuwkys574np","tag_id":"cju9w1w9k000mssuwnt8lblgg","_id":"cju9w1wdk0022ssuwqy0yj9m4"},{"post_id":"cju9w1w7m000essuwwp1mwnyi","tag_id":"cju9w1wb2001assuwcv72nhp5","_id":"cju9w1wdt0028ssuwyzmw3g7f"},{"post_id":"cju9w1wdm0023ssuwq41gs32c","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1wed002assuwe5nis6cx"},{"post_id":"cju9w1wdq0026ssuwvpgqrocz","tag_id":"cju9w1w9k000mssuwnt8lblgg","_id":"cju9w1wes002fssuwipngyzy1"},{"post_id":"cju9w1w80000issuwwj93monp","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1wev002issuw10rkzy0j"},{"post_id":"cju9w1w80000issuwwj93monp","tag_id":"cju9w1wdp0024ssuwez4a2m0h","_id":"cju9w1wf0002nssuwxvq6ov5a"},{"post_id":"cju9w1we00029ssuwjzevued4","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1wfd002qssuwc5w9vn81"},{"post_id":"cju9w1w8s000jssuwzxdke7id","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1wfi002vssuwny4x8nwi"},{"post_id":"cju9w1w8s000jssuwzxdke7id","tag_id":"cju9w1wei002bssuwhxfv4d1f","_id":"cju9w1wfp002yssuwov5y6vst"},{"post_id":"cju9w1w9o000nssuwy5ire9ya","tag_id":"cju9w1wey002lssuwzwxx2t94","_id":"cju9w1wfx0035ssuwa8u8vda8"},{"post_id":"cju9w1w9o000nssuwy5ire9ya","tag_id":"cju9w1wfh002ussuwfnght5un","_id":"cju9w1wg10038ssuwrvjmnyvc"},{"post_id":"cju9w1w9s000pssuwin24evmz","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1wgg003dssuwasabtzzj"},{"post_id":"cju9w1w9s000pssuwin24evmz","tag_id":"cju9w1wft0032ssuwbk0p9tdh","_id":"cju9w1wgj003fssuwc8tku5ly"},{"post_id":"cju9w1w9y000ussuwqtrlhjye","tag_id":"cju9w1wg2003assuwrtu8a4mr","_id":"cju9w1wgs003jssuws73wzhub"},{"post_id":"cju9w1wab000xssuwkjfxoot5","tag_id":"cju9w1wgq003issuw8kre5j5n","_id":"cju9w1wh3003pssuwknn4x23i"},{"post_id":"cju9w1wan0011ssuwvcthfuik","tag_id":"cju9w1wgy003nssuwd0idb8gh","_id":"cju9w1whc003ussuwk2njis0j"},{"post_id":"cju9w1wan0011ssuwvcthfuik","tag_id":"cju9w1w9k000mssuwnt8lblgg","_id":"cju9w1whf003xssuwckvlcs5h"},{"post_id":"cju9w1wap0014ssuwrwshz2ae","tag_id":"cju9w1wh9003sssuwf8tgghfy","_id":"cju9w1who0042ssuw0krybm5w"},{"post_id":"cju9w1wap0014ssuwrwshz2ae","tag_id":"cju9w1wb2001assuwcv72nhp5","_id":"cju9w1whq0045ssuwiht5fwkd"},{"post_id":"cju9w1wau0017ssuw5y27k5w3","tag_id":"cju9w1whl0041ssuwrtsi0phy","_id":"cju9w1whx0047ssuw3gux0g9a"},{"post_id":"cju9w1wb9001cssuwx781gbif","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1wi7004bssuwjfd24yju"},{"post_id":"cju9w1wb9001cssuwx781gbif","tag_id":"cju9w1wft0032ssuwbk0p9tdh","_id":"cju9w1wia004dssuwfg5soa37"},{"post_id":"cju9w1wbe001dssuwmjsilsnj","tag_id":"cju9w1whl0041ssuwrtsi0phy","_id":"cju9w1wie004fssuw97o2u1eu"},{"post_id":"cju9w1wbl001hssuwnzfpmwiy","tag_id":"cju9w1whl0041ssuwrtsi0phy","_id":"cju9w1wik004issuw0a7e7y4z"},{"post_id":"cju9w1wbw001kssuwqgjk6gdm","tag_id":"cju9w1wii004hssuwkxlkxkj1","_id":"cju9w1wix004lssuw1rw022he"},{"post_id":"cju9w1wbw001kssuwqgjk6gdm","tag_id":"cju9w1wio004jssuw6v9z7mxo","_id":"cju9w1wiz004mssuw5qg408p5"},{"post_id":"cju9w1wca001ossuw21vnasa0","tag_id":"cju9w1wii004hssuwkxlkxkj1","_id":"cju9w1wj4004pssuwsge1rrus"},{"post_id":"cju9w1wca001ossuw21vnasa0","tag_id":"cju9w1wio004jssuw6v9z7mxo","_id":"cju9w1wj5004qssuwpg4fehf7"},{"post_id":"cju9w1wcm001qssuwnvjwh91e","tag_id":"cju9w1wj2004ossuwyabt4m9h","_id":"cju9w1wjb004tssuwbf9y5fl6"},{"post_id":"cju9w1wcm001qssuwnvjwh91e","tag_id":"cju9w1wj6004rssuwen3eawxp","_id":"cju9w1wjb004ussuw5nb29d0a"},{"post_id":"cju9w1wcw001ussuwrlsi544m","tag_id":"cju9w1wj2004ossuwyabt4m9h","_id":"cju9w1wjh004xssuwdpq9n49w"},{"post_id":"cju9w1wcw001ussuwrlsi544m","tag_id":"cju9w1wjd004vssuwbdo8d2ay","_id":"cju9w1wji004yssuwpbm4xxa0"},{"post_id":"cju9w1wdc001wssuw3wqrf8se","tag_id":"cju9w1wii004hssuwkxlkxkj1","_id":"cju9w1wjm0051ssuwdnw1swix"},{"post_id":"cju9w1wdc001wssuw3wqrf8se","tag_id":"cju9w1wio004jssuw6v9z7mxo","_id":"cju9w1wjm0052ssuwwopa35o6"},{"post_id":"cju9w1wdj0021ssuw47zdx793","tag_id":"cju9w1wjk0050ssuwik3k4mea","_id":"cju9w1wjo0054ssuw79sw0d4z"},{"post_id":"cju9w1wej002cssuwcrpvjc26","tag_id":"cju9w1whl0041ssuwrtsi0phy","_id":"cju9w1wjq0056ssuwxnx9d5ci"},{"post_id":"cju9w1wet002gssuwrtagd6ft","tag_id":"cju9w1wj2004ossuwyabt4m9h","_id":"cju9w1wjt0058ssuwfn77m0ue"},{"post_id":"cju9w1wew002jssuwnuvcxled","tag_id":"cju9w1wjs0057ssuwe5mcu68s","_id":"cju9w1wjw005bssuwvoet7rcl"},{"post_id":"cju9w1wew002jssuwnuvcxled","tag_id":"cju9w1wjt0059ssuwp7s4dpy3","_id":"cju9w1wjw005cssuwg0b70mq7"},{"post_id":"cju9w1wf5002ossuwns8n1d56","tag_id":"cju9w1wju005assuwdrxkqa0a","_id":"cju9w1wjx005essuwolqnpprj"},{"post_id":"cju9w1wfe002rssuwitylcadx","tag_id":"cju9w1wjx005dssuwybccynzb","_id":"cju9w1wk2005issuwagvyyd6u"},{"post_id":"cju9w1wfe002rssuwitylcadx","tag_id":"cju9w1wjy005fssuwsekug48g","_id":"cju9w1wk3005jssuwl4sd7xp2"},{"post_id":"cju9w1wfe002rssuwitylcadx","tag_id":"cju9w1wjz005gssuwbyqlvr5m","_id":"cju9w1wk4005lssuww5pn9so3"},{"post_id":"cju9w1wfl002wssuwsddv2xhb","tag_id":"cju9w1wk0005hssuwubzeb11y","_id":"cju9w1wk5005mssuwts67jmcm"},{"post_id":"cju9w1wfq002zssuwlvzgb3qb","tag_id":"cju9w1wk3005kssuwn2qsq7ju","_id":"cju9w1wk8005ossuw0yi1fq5p"},{"post_id":"cju9w1wfu0033ssuwcqwik4sl","tag_id":"cju9w1wgq003issuw8kre5j5n","_id":"cju9w1wkd005qssuw89ku0jj5"},{"post_id":"cju9w1wfy0036ssuw690njioj","tag_id":"cju9w1w7w000hssuwe1ts97y7","_id":"cju9w1wkf005tssuwgzdebmhf"},{"post_id":"cju9w1wfy0036ssuw690njioj","tag_id":"cju9w1wk8005pssuwtdly01ks","_id":"cju9w1wkg005ussuwn7og2eeg"},{"post_id":"cju9w1wfy0036ssuw690njioj","tag_id":"cju9w1wke005rssuwaucj07vd","_id":"cju9w1wkh005wssuwkxe6rc0v"},{"post_id":"cju9w1wg8003bssuwiomcphz1","tag_id":"cju9w1wj2004ossuwyabt4m9h","_id":"cju9w1wkj005xssuwim66v5rx"},{"post_id":"cju9w1wg8003bssuwiomcphz1","tag_id":"cju9w1wkg005vssuww9geze6v","_id":"cju9w1wkk005yssuw688keb89"},{"post_id":"cju9w1wmh005zssuww8ajnqb5","tag_id":"cju9w1w9k000mssuwnt8lblgg","_id":"cju9w1wmk0061ssuwsf0t3h7b"},{"post_id":"cju9w1wmq0067ssuwmz6uu3qq","tag_id":"cju9w1wjx005dssuwybccynzb","_id":"cju9w1wmv006assuwhh1ihahc"},{"post_id":"cju9w1wmq0067ssuwmz6uu3qq","tag_id":"cju9w1wjz005gssuwbyqlvr5m","_id":"cju9w1wmw006bssuw0qtuexu1"},{"post_id":"cju9w1wmj0060ssuw5zsbr1s0","tag_id":"cju9w1w9k000mssuwnt8lblgg","_id":"cju9w1wmz006fssuwr9l38vu2"},{"post_id":"cju9w1wmj0060ssuw5zsbr1s0","tag_id":"cju9w1wmn0064ssuwnzkoosb0","_id":"cju9w1wmz006hssuw6om0h1u6"},{"post_id":"cju9w1wml0062ssuwn6vf3wvl","tag_id":"cju9w1w9k000mssuwnt8lblgg","_id":"cju9w1wn1006kssuwhipoz8s5"},{"post_id":"cju9w1wml0062ssuwn6vf3wvl","tag_id":"cju9w1wmn0064ssuwnzkoosb0","_id":"cju9w1wn1006lssuwoodrbqj5"},{"post_id":"cju9w1wmo0065ssuwihgyi4po","tag_id":"cju9w1wmy006essuwi8oo57an","_id":"cju9w1wn5006pssuw45ujgbc6"},{"post_id":"cju9w1wmo0065ssuwihgyi4po","tag_id":"cju9w1wn0006jssuwbzxsn1ps","_id":"cju9w1wn6006qssuw3cdo1xot"},{"post_id":"cju9w1wmo0065ssuwihgyi4po","tag_id":"cju9w1wn4006nssuw9rh5bkb1","_id":"cju9w1wn6006rssuwp9zwhdte"},{"post_id":"cju9w1wmo0065ssuwihgyi4po","tag_id":"cju9w1wn5006ossuwgpgfu5zn","_id":"cju9w1wn6006sssuwqkr1953h"},{"post_id":"cju9w1wqh006tssuw3nzyabv7","tag_id":"cju9w1wb2001assuwcv72nhp5","_id":"cju9w1wqj006ussuwyrkvzakk"}],"Tag":[{"name":"学习技巧","_id":"cju9w1w770007ssuwt753kjef"},{"name":"学习渠道","_id":"cju9w1w7g000cssuw06l4ql58"},{"name":"css","_id":"cju9w1w7w000hssuwe1ts97y7"},{"name":"JavaScript","_id":"cju9w1w9k000mssuwnt8lblgg"},{"name":"hexo","_id":"cju9w1wal0010ssuwk9e1hm8k"},{"name":"Vue","_id":"cju9w1wb2001assuwcv72nhp5"},{"name":"命名规范","_id":"cju9w1wc5001nssuwmvbsmf5b"},{"name":"3D","_id":"cju9w1wdp0024ssuwez4a2m0h"},{"name":"矩阵","_id":"cju9w1wei002bssuwhxfv4d1f"},{"name":"AOP","_id":"cju9w1wey002lssuwzwxx2t94"},{"name":"编程范式","_id":"cju9w1wfh002ussuwfnght5un"},{"name":"PostCss","_id":"cju9w1wft0032ssuwbk0p9tdh"},{"name":"C语言","_id":"cju9w1wg2003assuwrtu8a4mr"},{"name":"Linux","_id":"cju9w1wgq003issuw8kre5j5n"},{"name":"NodeJs","_id":"cju9w1wgy003nssuwd0idb8gh"},{"name":"适配","_id":"cju9w1wh9003sssuwf8tgghfy"},{"name":"React","_id":"cju9w1whl0041ssuwrtsi0phy"},{"name":"Docker","_id":"cju9w1wii004hssuwkxlkxkj1"},{"name":"容器","_id":"cju9w1wio004jssuw6v9z7mxo"},{"name":"计算机基础","_id":"cju9w1wj2004ossuwyabt4m9h"},{"name":"CPU","_id":"cju9w1wj6004rssuwen3eawxp"},{"name":"汇编","_id":"cju9w1wjd004vssuwbdo8d2ay"},{"name":"目录","_id":"cju9w1wjk0050ssuwik3k4mea"},{"name":"架构","_id":"cju9w1wjs0057ssuwe5mcu68s"},{"name":"微服务","_id":"cju9w1wjt0059ssuwp7s4dpy3"},{"name":"专业术语","_id":"cju9w1wju005assuwdrxkqa0a"},{"name":"oop","_id":"cju9w1wjx005dssuwybccynzb"},{"name":"IOC","_id":"cju9w1wjy005fssuwsekug48g"},{"name":"编程原则","_id":"cju9w1wjz005gssuwbyqlvr5m"},{"name":"Angular","_id":"cju9w1wk0005hssuwubzeb11y"},{"name":"面试","_id":"cju9w1wk3005kssuwn2qsq7ju"},{"name":"web-component","_id":"cju9w1wk8005pssuwtdly01ks"},{"name":"特效","_id":"cju9w1wke005rssuwaucj07vd"},{"name":"破解","_id":"cju9w1wkg005vssuww9geze6v"},{"name":"TypeScript","_id":"cju9w1wmn0064ssuwnzkoosb0"},{"name":"CI","_id":"cju9w1wmy006essuwi8oo57an"},{"name":"Jenkins","_id":"cju9w1wn0006jssuwbzxsn1ps"},{"name":"Centos","_id":"cju9w1wn4006nssuw9rh5bkb1"},{"name":"前端持续集成","_id":"cju9w1wn5006ossuwgpgfu5zn"}]}}