{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/my_favicon.ico","path":"images/my_favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/my_favicon_small.ico","path":"images/my_favicon_small.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/myavatar.jpg","path":"images/myavatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bai.js","path":"js/src/bai.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/md5.js","path":"js/src/md5.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/baidu_verify_UCp8DVX1mJ.html","hash":"1862349bcebd44d95e04e440c274368ca2c6e938","modified":1552797723647},{"_id":"source/google0e4fe1e51eb21469.html","hash":"4706a06de6dcf15d319375f5a48263abc9ddb693","modified":1552798600346},{"_id":"source/robots.txt","hash":"9ea605c9ceeea0daf677dc5405834a298fca9903","modified":1552707732045},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1552659391732},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1552659391733},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1552659391735},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1552659391747},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1552659391749},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1552659391750},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1552659391752},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1552659391753},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1552659391755},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1552659391758},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1552659391760},{"_id":"themes/next/_config.yml","hash":"7adf80cd29da20eb9b1575681fdcc408ca83073b","modified":1553331930131},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1552659391764},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1552659391765},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1552659391966},{"_id":"source/_posts/CSS如何了解新知识.md","hash":"92c164fa35e2d33f7121c84ec8b0ae07d5655997","modified":1553262472702},{"_id":"source/_posts/JavaScript事件机制.md","hash":"e018ae316976867cd3dd173dfba69ec8a9fdf833","modified":1553871750028},{"_id":"source/_posts/Js与CSS变量操作.md","hash":"03c9cb6cc4cd228cb0ab6e8aebda304f3b4b8813","modified":1553262494797},{"_id":"source/_posts/TypeScript手册.md","hash":"79a9815ed30b9487c861fe519935afa6668cd2ce","modified":1553324477275},{"_id":"source/_posts/TypeScript语法.md","hash":"2d58c122ac74c260d9835b7c6024145591b82eea","modified":1553410275706},{"_id":"source/_posts/css预处理与后处理器.md","hash":"339760f450884615404aceff9d39c39e0018fad9","modified":1553262487487},{"_id":"source/_posts/hexo中如何使用本地图片.md","hash":"1c9188b165b00b4ac3008a961ee8193ae41aa452","modified":1553093128787},{"_id":"source/_posts/css分层-命名规范.md","hash":"699026ce9ce684e21484dee745e43d9820e700f4","modified":1553262468923},{"_id":"source/_posts/this的软绑定和硬绑定.md","hash":"cd217e734c85c666ca700f34f8c4c8b315838591","modified":1553927213912},{"_id":"source/_posts/vue-cli3脚手架配置px2rem适配方案.md","hash":"cc5b40d8deb5f2cae45c972e2a1de1c2f019a116","modified":1553408865239},{"_id":"source/_posts/vuecli3脚手架环境变量.md","hash":"52ecc51a258850049ab3825b6b26a153a29a0dd4","modified":1553409864109},{"_id":"source/_posts/vue的add命令与npm的小区别.md","hash":"6624243989a48596d5939aac028c050ad40bcae0","modified":1553409808899},{"_id":"source/_posts/【AOP】面向切面编程.md","hash":"329c519a06e2f23132dbc1134d0ce1cce3edb037","modified":1553408093857},{"_id":"source/_posts/【CSS全景】淘宝造物节H5原理.md","hash":"bc4f7f500320afe0192c0c09136b468af898f79c","modified":1553774322971},{"_id":"source/_posts/【CSS矩阵】你不知道的Css矩阵.md","hash":"de2efc919b6f20f8882a84741b9069b58400f193","modified":1553774304472},{"_id":"source/_posts/【NodeJs】异步IO与EventLoop.md","hash":"2bedea4082b3e59b471d10ff6902be3643ee23d2","modified":1553871341282},{"_id":"source/_posts/【PostCss】使用明天的CSS.md","hash":"49e58d072b9c14fd832e2f24a3d13b1299ff8897","modified":1553262572343},{"_id":"source/_posts/【Vue】源码解析.md","hash":"77a317e2e9d754f2ac9495530f69dc24b24c202a","modified":1554013489491},{"_id":"source/_posts/【css-doodle】css-web-component入门.md","hash":"ed6aad8837c50af632f6310716971248ebe2597c","modified":1553262565352},{"_id":"source/_posts/使用Jenkins构建前端持续集成.md","hash":"763a993c6935b7612b4d5b9e8ef3e88dcd6fbca5","modified":1553093536270},{"_id":"source/_posts/利用CSS混合模式更改图片颜色.md","hash":"166fc0701077ff9751a4d241c7ad48eb1ee8485f","modified":1553262554147},{"_id":"source/_posts/如何在伪元素中使用Iconfont.md","hash":"b9b71442f7a4f876ce295b154dfe10c654b67198","modified":1553409999728},{"_id":"source/_posts/工具目录.md","hash":"da76aed2c5c0305137ad06be2fa8135f1b330caa","modified":1553774315656},{"_id":"source/_posts/手摸手AngularJs入门教程.md","hash":"f256e85a3a46eb74565cef22cb791a4c514db10a","modified":1553093714313},{"_id":"source/_posts/面向对象设计原则之IOC控制反转.md","hash":"24d085757aaa344add2f4570920647536280b54f","modified":1553407062075},{"_id":"source/_posts/面向对象设计原则之SOLID.md","hash":"592f29cd771c285c65835bd867d5848a3cbe1504","modified":1553407073957},{"_id":"source/categories/index.md","hash":"2de5f843791cc237fc93871d470e69131726404c","modified":1552708635981},{"_id":"source/tags/index.md","hash":"9064f7e5fe91e9cdf9694214e4a62bc1da2d77b9","modified":1552708631233},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1552659391769},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1552659391768},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1552659391771},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1552659391774},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1552659391776},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1552659391778},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1552659391779},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1552659391781},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1552659391782},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1552659391784},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1552659391786},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1552659391787},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1552659391788},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1552666076235},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1552659391793},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1552659391795},{"_id":"themes/next/layout/_layout.swig","hash":"4ecd1406c9ffe4deb1fb98d0da0ba4bc6b0021a8","modified":1553267220882},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1552659391953},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1552659391956},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1552659391958},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1552659391960},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1552659391961},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1552659391963},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1552659391964},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1552659391969},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1552659391971},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1552659392652},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1552659392654},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1552659392657},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392266},{"_id":"source/_posts/md_imgs/2019-03-22-22-06-18.png","hash":"1e1c306172d1b0fc57d6c5215c697d18e7f06c67","modified":1553263579160},{"_id":"source/_posts/md_imgs/2019-03-22-22-06-26.png","hash":"1e1c306172d1b0fc57d6c5215c697d18e7f06c67","modified":1553263586772},{"_id":"source/_posts/md_imgs/2019-03-22-22-19-19.png","hash":"c2c10a7a3bd6981ecd5e9e6b92d51e02a7d3da8d","modified":1553264359949},{"_id":"source/_posts/md_imgs/2019-03-22-22-22-55.png","hash":"6b4e042308ae7ae540d657e7c1db0ef8ca8c51e1","modified":1553264575907},{"_id":"source/_posts/md_imgs/2019-03-23-11-35-24.png","hash":"59abc3aa461bfa6931aca91e891ad97f8e1fa119","modified":1553312125442},{"_id":"source/_posts/md_imgs/2019-03-23-11-35-28.png","hash":"59abc3aa461bfa6931aca91e891ad97f8e1fa119","modified":1553312128892},{"_id":"source/_posts/md_imgs/2019-03-29-22-31-25.png","hash":"75e272d304fd62c414e12356e54c57b5b7a0ee00","modified":1553869888187},{"_id":"source/_posts/md_imgs/2019-03-29-22-31-43.png","hash":"75e272d304fd62c414e12356e54c57b5b7a0ee00","modified":1553869905204},{"_id":"source/_posts/md_imgs/2019-03-29-22-45-25.png","hash":"fa79df73ff241344ae330af391a7cfd08391a764","modified":1553870726201},{"_id":"source/_posts/md_imgs/2019-03-29-22-54-36.png","hash":"905fa9360fc8d7bdbd9c4c10d55dc7c9ee92d585","modified":1553871277010},{"_id":"source/_posts/md_imgs/2019-03-30-10-44-30.png","hash":"17c5f030d10e1c11dce6119d805dcac0c911c860","modified":1553913871430},{"_id":"source/_posts/md_imgs/2019-03-30-10-44-35.png","hash":"17c5f030d10e1c11dce6119d805dcac0c911c860","modified":1553913875897},{"_id":"source/_posts/md_imgs/2019-03-30-10-57-26.png","hash":"bf13ba31f30c5c1c6b79886d59b6b80e007a0050","modified":1553914647107},{"_id":"source/_posts/md_imgs/2019-03-30-11-48-41.png","hash":"7a05e4aa2a3823ad553039fad259602beeb7b732","modified":1553917722080},{"_id":"source/_posts/md_imgs/2019-03-30-12-57-56.png","hash":"ff7bac661499e41032a6c87ae006ea5578eb9b23","modified":1553921876869},{"_id":"source/_posts/md_imgs/2019-03-31-11-36-09.png","hash":"786586a2cd6d61e21d450b6121108530a08204f2","modified":1554003370521},{"_id":"source/_posts/md_imgs/2019-03-31-11-36-41.png","hash":"adb5452ad0334e38d07a7c4514603eeaec4d1187","modified":1554003401939},{"_id":"source/_posts/md_imgs/2019-03-31-11-49-23.png","hash":"fb8185a1ab42ac3ad5bf1af6c14d7ab9e521847a","modified":1554004164186},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1552659391801},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1552659391799},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1552659391805},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1552659391808},{"_id":"themes/next/layout/_macro/post.swig","hash":"ba2a3560fbabbeaa9681dc41d1bb81975ad136ad","modified":1552665952382},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1552659391812},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"80180e4d6382fa690fa4d16b63288bb98b919d35","modified":1552799624607},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1552659391816},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4c044d39b3f3f7c6512db433533cf9e2dd3055fc","modified":1553330582208},{"_id":"themes/next/layout/_partials/footer.swig","hash":"faf71d7f8242911394b49425f2ee61c1b7d64586","modified":1552799535288},{"_id":"themes/next/layout/_partials/head.swig","hash":"297ac38603d60a75aa6a45a197ef0d9d18deec5c","modified":1552798919510},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1552659391830},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1552659391832},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1552659391834},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1552659391835},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1552659391856},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1552659391858},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1552659391870},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1552659391923},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1552659391925},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1552659391927},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1552659391928},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1552659391930},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1552659391932},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1552659391933},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1552659391976},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1552659391974},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1552659391977},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1552659391979},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1552659391981},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1552659391983},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1552659391985},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1552659391986},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1552659391989},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1552659392263},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1552659392270},{"_id":"themes/next/source/images/alipay.jpg","hash":"66b14acbff7c07594ab21624b1671ab49deb355f","modified":1552792130526},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1552659392273},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1552659392275},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1552659392277},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1552659392279},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1552659392281},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1552659392283},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1552659392285},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1552659392286},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1552659392289},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1552659392291},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1552659392293},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552659392294},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1552659392296},{"_id":"themes/next/source/images/my_favicon.ico","hash":"32d7f41cfc03d1a81346691b4803a3124b7b0b8d","modified":1552714719214},{"_id":"themes/next/source/images/my_favicon_small.ico","hash":"677e14b2949bd9d9a38bbeaa538fb26792350c17","modified":1552714838347},{"_id":"themes/next/source/images/myavatar.jpg","hash":"10545caf74010b6169944a4ff35b84f5ee32c6a2","modified":1553268800872},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552659392298},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1552659392299},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1552659392301},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1552659392303},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"6bc7e8c08d39c4f18acc22344f5322727160dfe3","modified":1552792137052},{"_id":"source/_posts/md_imgs/2019-03-29-22-45-02.png","hash":"f2c0747024159fa57e7dd5282970a0db6577d0bc","modified":1553870703040},{"_id":"source/_posts/md_imgs/2019-03-30-14-50-38.png","hash":"f2157c7af877c5830277253dcd3e05b7e1bfd2ed","modified":1553928640381},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659391866},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659391867},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392183},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392185},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392191},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392256},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552659392262},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1552659391827},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1552659391829},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1552659391840},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1552659391841},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1552659391844},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1552659391847},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1552659391849},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1552659391850},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1552659391852},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1552659391862},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1552659391865},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1552659391868},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1552659391876},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1552659391877},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1552659391880},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1552659391882},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1552659391884},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1552659391885},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1552659391887},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1552659391890},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1552659391891},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1552659391894},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1552659391896},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1552659391898},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1552659391900},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1552659391903},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1552659391906},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1552659391909},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e968fbc0c455532a969007e7622b6afd3c853f2","modified":1553270927283},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1552659391911},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1552659391913},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"75d973fc442af673a15b253379a1839df29b1a32","modified":1553267972093},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1552659391917},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1552659391919},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1552659391920},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1552659391944},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1552659391946},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1552659391948},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1552659391952},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1552659392179},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1552659392182},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1552659392187},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1552659392190},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1552659392253},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1552659392254},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1552659392258},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1552659392260},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1552659392311},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1552659392309},{"_id":"themes/next/source/js/src/bai.js","hash":"5b3b5a34da919896acc03a34f63f784dd084e72c","modified":1552800718615},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1552659392313},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1552659392315},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1552659392316},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1552659392318},{"_id":"themes/next/source/js/src/md5.js","hash":"c27927a82941ba972c140abf26ad82e04c32d86a","modified":1553270761828},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1552659392320},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1552659392323},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1552659392329},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1552659392330},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1552659392331},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1552659392362},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1552659392371},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1552659392375},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1552659392379},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1552659392380},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1552659392421},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1552659392424},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1552659392425},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1552659392427},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1552659392436},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1552659392437},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1552659392440},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1552659392442},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1552659392444},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1552659392511},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1552659392529},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1552659392531},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1552659392535},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1552659392538},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1552659392541},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1552659392543},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1552659392548},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1552659392549},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1552659392552},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1552659392556},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1552659392558},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1552659392561},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1552659392563},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1552659392565},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1552659392567},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1552659392570},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1552659392571},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1552659392573},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1552659392575},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1552659392578},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1552659392582},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1552659392584},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1552659392587},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1552659392593},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1552659392595},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1552659392598},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1552659392632},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1552659392634},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1552659392645},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1552659392646},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1552659392649},{"_id":"source/_posts/md_imgs/2019-03-29-22-50-40.png","hash":"728e094d121969cd405c05ee8bf301f76db2fd55","modified":1553871041763},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1552659392525},{"_id":"source/_posts/md_imgs/2019-03-29-22-40-47.png","hash":"78272fbdc02cd4dc769980ea1df4bad1d5669a11","modified":1553870448721},{"_id":"source/_posts/md_imgs/2019-03-30-11-51-42.png","hash":"063d427b9dc9eaada58e52c2c22b1c8eb262b87b","modified":1553917903215},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1552659391942},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1552659391940},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1552659392000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1552659392002},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1552659392004},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1552659392007},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1552659392009},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1552659392050},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1552659392111},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1552659392163},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1552659392166},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1552659392168},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1552659392170},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1552659392172},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1552659392174},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1552659392176},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1552659392198},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1552659392201},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1552659392203},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1552659392205},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1552659392208},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1552659392210},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1552659392212},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1552659392213},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1552659392226},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1552659392228},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1552659392229},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1552659392231},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1552659392233},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1552659392240},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1552659392242},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1552659392244},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1552659392246},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1552659392248},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1552659392249},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1552659392327},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1552659392349},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1552659392355},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1552659392358},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1552659392384},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1552659392386},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1552659392388},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1552659392390},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1552659392392},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1552659392395},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1552659392413},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1552659392415},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1552659392418},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1552659392430},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1552659392432},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1552659392448},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1552659392450},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1552659392452},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1552659392625},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1552659392627},{"_id":"source/_posts/md_imgs/2019-03-29-22-54-03.png","hash":"a84ab16e21705314aa23a5da06afd23c0fd565a2","modified":1553871245048},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1552659392353},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1552659392494},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1552659392497},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1552659392640},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1552659392013},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1552659392017},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1552659392019},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1552659392023},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1552659392026},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1552659392028},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1552659392032},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1552659392034},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1552659392036},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1552659392041},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1552659392042},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1552659392044},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1552659392046},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1552659392048},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1552659392054},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1552659392057},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1552659392058},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1552659392060},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1552659392064},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1552659392062},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1552659392066},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1552659392068},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1552659392070},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1552659392073},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1552659392075},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1552659392076},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1552659392078},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1552659392080},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1552659392082},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1552659392086},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"b9002196a748365b5c14e4193816c654b9ce5fd6","modified":1553269273709},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1552659392093},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1552659392095},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1552659392097},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1552659392099},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1552659392101},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1552659392103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1552659392106},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1552659392109},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1552659392115},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1552659392117},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1552659392119},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1552659392122},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1552659392125},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1552659392127},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1552659392129},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1552659392131},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1552659392137},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1552659392133},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1552659392141},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1552659392144},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1552659392146},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1552659392148},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1552659392150},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1552659392153},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1552659392155},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1552659392158},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1552659392161},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1552659392217},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1552659392221},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1552659392236},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1552659392340},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1552659392342},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1552659392344},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1552659392346},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1552659392348},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1552659392398},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1552659392400},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1552659392403},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1552659392405},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1552659392408},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1552659392411},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1552659392461},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1552659392466},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1552659392491},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1552659392368},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1552659392618},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1552659392484},{"_id":"source/_posts/md_imgs/2019-03-24-13-49-37.png","hash":"f42fc3758e6c2e40fec4e77423ff0b4c3281e445","modified":1553406578872},{"_id":"source/_posts/md_imgs/2019-03-24-13-25-50.png","hash":"a6e0e7ecc92783e93b719c686000168898035cf9","modified":1553405150960},{"_id":"source/_posts/md_imgs/2019-03-24-09-45-13.png","hash":"026208f3d6607da3a25a12642be22eca5c2068df","modified":1553391915172},{"_id":"source/_posts/md_imgs/2019-03-24-09-45-24.png","hash":"026208f3d6607da3a25a12642be22eca5c2068df","modified":1553391925676}],"Category":[{"name":"学习技巧","_id":"cjtwjinlh0004awuwhbb29tqj"},{"name":"CSS","_id":"cjtwjinlt0009awuwrmjxj3l4"},{"name":"hexo","_id":"cjtwjinm7000iawuwp72wk05g"},{"name":"JavaScript","_id":"cjtwjinmh000vawuwbagatktw"},{"name":"Vue","_id":"cjtwjinmo0014awuwa33wikwq"},{"name":"编程思想","_id":"cjtwjinn2001qawuwtqt6hac5"},{"name":"NodeJs","_id":"cjtwjinn5001uawuwi3hqeup0"},{"name":"目录","_id":"cjtwjinn70020awuw236fbeaa"},{"name":"TypeScript","_id":"cjtwjinv3003gawuw6fpnu38f"},{"name":"CI","_id":"cjtwjinvc003qawuwzrzwhrqx"}],"Data":[],"Page":[{"_content":"UCp8DVX1mJ","source":"baidu_verify_UCp8DVX1mJ.html","raw":"UCp8DVX1mJ","date":"2019-03-17T04:42:03.647Z","updated":"2019-03-17T04:42:03.647Z","path":"baidu_verify_UCp8DVX1mJ.html","title":"","comments":1,"layout":"page","_id":"cjtwjinj40000awuw012vv53z","content":"UCp8DVX1mJ","site":{"data":{}},"excerpt":"","more":"UCp8DVX1mJ"},{"_content":"google-site-verification: google0e4fe1e51eb21469.html","source":"google0e4fe1e51eb21469.html","raw":"google-site-verification: google0e4fe1e51eb21469.html","date":"2019-03-17T04:56:40.346Z","updated":"2019-03-17T04:56:40.346Z","path":"google0e4fe1e51eb21469.html","title":"","comments":1,"layout":"page","_id":"cjtwjinj60001awuw2w968jzv"},{"title":"分类","date":"2019-03-15T15:34:34.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-03-15 23:34:34\ntype: \"categories\"   #这部分是新添加的\n---\n","updated":"2019-03-16T03:57:15.981Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjtwjinuu003aawuwr0bicuu2"},{"title":"标签","date":"2019-03-15T13:54:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-15 21:54:26\ntype: \"tags\" #新添加的内容\n---\n","updated":"2019-03-16T03:57:11.233Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjtwjinux003cawuw6jddqutu"}],"Post":[{"title":"CSS如何了解新知识","date":"2019-03-16T08:56:22.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现\n\n并且还可以尝试着参与MDN的文章翻译及国外优质技术文章\n\n\n* MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference \n","source":"_posts/CSS如何了解新知识.md","raw":"---\ntitle: CSS如何了解新知识\ndate: 2019-03-16 16:56:22\ncategories: 学习技巧\ntags: [学习技巧, 学习渠道, css]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现\n\n并且还可以尝试着参与MDN的文章翻译及国外优质技术文章\n\n\n* MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference \n","slug":"CSS如何了解新知识","published":1,"updated":"2019-03-22T13:47:52.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinl90002awuw9qoul8ke","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现</p>\n<p>并且还可以尝试着参与MDN的文章翻译及国外优质技术文章</p>\n<ul>\n<li>MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference</a> </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<p>平时闲着无聊的时候多去看看MDN或者一些国外的网站， 多试试一些新特性， 说不定就会有新的发现</p>\n<p>并且还可以尝试着参与MDN的文章翻译及国外优质技术文章</p>\n<ul>\n<li>MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference</a> </li>\n</ul>\n"},{"title":"Js与CSS变量操作","date":"2019-03-16T09:47:07.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排\n\n一起来看看如何操作吧~\n> 变量虽好， 不可滥用哦\n\n### 定义一个简单的变量\n```CSS\n/* 定义css 变量 */\n:root {\n  --backgroundColor: pink;\n}\n\nbody {\n  background-color: var(--backgroundColor);\n}\n```\n\n### 创建一个按钮\n```HTML\n<body>\n  <button id=\"btn\">点我改变背景</button>\n</body>\n```\n\n### 获取root元素并绑定按钮的点击事件\n```JavaScript\n<script>\nvar root = document.documentElement\n\nbtn.onclick = function() {\n  // 将变量修改为天蓝色\n  root.style.setProperty('--backgroundColor', 'skyblue')\n}\n</script>\n```\n\n\n### 结果对比\n\n点击前\n![按钮点击前](http://img.nixiaolei.com/2019-03-16-17-52-45.png)\n\n按钮点击后\n![按钮点击后](http://img.nixiaolei.com/2019-03-16-17-53-39.png)\n\n\n\n非常Nice~\n\n\n利用这个特性实现更多的可能吧！","source":"_posts/Js与CSS变量操作.md","raw":"---\ntitle: Js与CSS变量操作\ndate: 2019-03-16 17:47:07\ncategories: CSS\ntags: [JavaScript, css]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n\n就目前来说CSS变量已经不是什么新鲜的东西了， 渐渐的我们可以在浏览器中尝试使用它， 和SCSS、 LESS 等预处理器不同的是， CSS的变量机制是浏览器天生支持的， 并且浏览器还对其做了优化， 减少了我们使用JS 去操作CSS变量造成的重绘和重排\n\n一起来看看如何操作吧~\n> 变量虽好， 不可滥用哦\n\n### 定义一个简单的变量\n```CSS\n/* 定义css 变量 */\n:root {\n  --backgroundColor: pink;\n}\n\nbody {\n  background-color: var(--backgroundColor);\n}\n```\n\n### 创建一个按钮\n```HTML\n<body>\n  <button id=\"btn\">点我改变背景</button>\n</body>\n```\n\n### 获取root元素并绑定按钮的点击事件\n```JavaScript\n<script>\nvar root = document.documentElement\n\nbtn.onclick = function() {\n  // 将变量修改为天蓝色\n  root.style.setProperty('--backgroundColor', 'skyblue')\n}\n</script>\n```\n\n\n### 结果对比\n\n点击前\n![按钮点击前](http://img.nixiaolei.com/2019-03-16-17-52-45.png)\n\n按钮点击后\n![按钮点击后](http://img.nixiaolei.com/2019-03-16-17-53-39.png)\n\n\n\n非常Nice~\n\n\n利用这个特性实现更多的可能吧！","slug":"Js与CSS变量操作","published":1,"updated":"2019-03-22T13:48:14.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinle0003awuw22s0jo8x"},{"title":"css预处理与后处理器","date":"2019-03-16T04:20:43.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css\n\n一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了\n\n## 预处理器具有的能力\n* 变量\n* 混合(Mixin) Extend\n* 嵌套规则\n* 运算\n* 函数\n* Namespaces & Accessors (命名空间和访问器)\n* scope\n* 注释\n\n\n## 后处理器的能力\n\n* CSS 压缩 CLEAN-CSS\n* 自动添加浏览器前缀 Autoprefixer\n* CSS更加美观排序 CSScomb\n* Rework取代stylus 后处理器发热\n* 前后通吃的 PostCss\n\n\n\n\n\n## 他们是如何处理的CSS\n\n### 预处理器\n\n预处理器， 如： `sass` 它会先将他的语法转换成 AST--抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS \n\n### PostCss\n\nPostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能\n\n![PostCss处理流程](http://img.nixiaolei.com/2019-03-16-13-23-52.png)\n\n","source":"_posts/css预处理与后处理器.md","raw":"---\ntitle: css预处理与后处理器\ndate: 2019-03-16 12:20:43\ncategories: CSS\ntags: [css, PostCss]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n预处理器在前两年是非常流行的技术， 但是这两年发展的却不怎么有起色， 因为人们渐渐发先即使代码经过了预处理的的编译， 还要经过后处理， 并且PostCss 的崛起拥有了预处理器的功能， 可以完美代替预处理的工作， 并且可以做到让人们使用下一个版本的css\n\n一旦预处理器阶段代码出现污染，预处理器的事就算是白干了， 不如直接交给后处理器，  所以使用预处理器的意义越来越小了\n\n## 预处理器具有的能力\n* 变量\n* 混合(Mixin) Extend\n* 嵌套规则\n* 运算\n* 函数\n* Namespaces & Accessors (命名空间和访问器)\n* scope\n* 注释\n\n\n## 后处理器的能力\n\n* CSS 压缩 CLEAN-CSS\n* 自动添加浏览器前缀 Autoprefixer\n* CSS更加美观排序 CSScomb\n* Rework取代stylus 后处理器发热\n* 前后通吃的 PostCss\n\n\n\n\n\n## 他们是如何处理的CSS\n\n### 预处理器\n\n预处理器， 如： `sass` 它会先将他的语法转换成 AST--抽象语法树（Abstract Syntax Tree ）, AST是程序的一种中间表示形式， 然后遍历 AST 这棵树， 将对应想要的结果生成为CSS \n\n### PostCss\n\nPostCss 改变了之前对CSS的处理流程， 它提供了一套插件的机制， 对于PostCss来说，自己是一套空的工程，它为插件提供了CSS数据， 根据配置的不同插件， 产生不同的功能\n\n![PostCss处理流程](http://img.nixiaolei.com/2019-03-16-13-23-52.png)\n\n","slug":"css预处理与后处理器","published":1,"updated":"2019-03-22T13:48:07.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinlk0006awuw13ll6rx2"},{"title":"hexo中如何使用本地图片","date":"2019-03-16T03:20:19.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n首先需要修改`_config.yml`配置文件`post_asset_folder`项为`true`\n\n使用命令创建博客\n```\nhexo new 你的文章名称\n```\n\n他会生成`.md`文件及一个对应的文件夹， 我们将图片放到该文件夹中\n\n\n\n## 方法一\n\n在文章中这样插入图片\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n\n\n## 方法二\n> 这个方法在首页无法正常预览图片\n\n\n安装一下这个插件\n\n```shell\nnpm install hexo-asset-image --save\n```\n\n\n在文章中这样插入图片\n```\n![这是一张图片](xxxx.png)\n```\n\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n参考文献\n> http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/","source":"_posts/hexo中如何使用本地图片.md","raw":"---\ntitle: hexo中如何使用本地图片\ndate: 2019-03-16 11:20:19\ncategories: hexo\ntags: hexo\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n首先需要修改`_config.yml`配置文件`post_asset_folder`项为`true`\n\n使用命令创建博客\n```\nhexo new 你的文章名称\n```\n\n他会生成`.md`文件及一个对应的文件夹， 我们将图片放到该文件夹中\n\n\n\n## 方法一\n\n在文章中这样插入图片\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n\n\n## 方法二\n> 这个方法在首页无法正常预览图片\n\n\n安装一下这个插件\n\n```shell\nnpm install hexo-asset-image --save\n```\n\n\n在文章中这样插入图片\n```\n![这是一张图片](xxxx.png)\n```\n\n\n效果如下:\n\n![皮卡皮卡](http://img.nixiaolei.com/pika.png)\n\n\n\n参考文献\n> http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/","slug":"hexo中如何使用本地图片","published":1,"updated":"2019-03-20T14:45:28.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinlo0007awuwh1kvgx16"},{"title":"css分层&命名规范","date":"2019-03-16T15:32:55.000Z","_content":"\n为什么要分层? \n\n* CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。\n* 避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。\n* 有责任感地去命名你的选择器\n\n\n有哪些分层理论? \n* SMACSS\n* BEM\n* SUIT\n* ACSS\n* ITCSS\n\n\n\n## BEM\n\nBEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )\n\n* block - 代表了更高级别的抽象或组件\n* block__element - 代表.block的后代， 用于形成一个完整的.block的整体。\n* block--modifier - 代表.block 的不同状态或不同版本。\n* 修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )\n\n```HTML\n  <!-- container 是大容器 -->\n  <div class=\"container\">\n    <div class=\"menu\">\n      <div class=\"menu--item menu--item__active\">首页</div>\n      <div class=\"menu--item\">新闻</div>\n      <div class=\"menu--item\">消息</div>\n    </div>\n  </div>\n```","source":"_posts/css分层-命名规范.md","raw":"---\ntitle: css分层&命名规范\ndate: 2019-03-16 23:32:55\ncategories: CSS\ntags: [css, 命名规范]\n---\n\n为什么要分层? \n\n* CSS有语义化的命名约定和CSS层的分离， 将有助于它的可扩展性， 性能的提高和代码的组织管理。\n* 避免大量的样式、 覆盖、 权重和很多！important, 分好层可以让团队命名统一规范， 方便维护。\n* 有责任感地去命名你的选择器\n\n\n有哪些分层理论? \n* SMACSS\n* BEM\n* SUIT\n* ACSS\n* ITCSS\n\n\n\n## BEM\n\nBEM和SMACCS非常类似， 主要用来如何给项目命名。一个简单命名更容易让别人一起工作。 比如选项卡导航是一个块(Block)， 这个块里的元素是其中标签之一（Element）, 而当前选项卡是一个修饰状态( Modifier )\n\n* block - 代表了更高级别的抽象或组件\n* block__element - 代表.block的后代， 用于形成一个完整的.block的整体。\n* block--modifier - 代表.block 的不同状态或不同版本。\n* 修饰符使用的是_, 子模块使用的是__符号。 ( 不同一个-的原因是因为CSS单词连接 )\n\n```HTML\n  <!-- container 是大容器 -->\n  <div class=\"container\">\n    <div class=\"menu\">\n      <div class=\"menu--item menu--item__active\">首页</div>\n      <div class=\"menu--item\">新闻</div>\n      <div class=\"menu--item\">消息</div>\n    </div>\n  </div>\n```","slug":"css分层-命名规范","published":1,"updated":"2019-03-22T13:47:48.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinlr0008awuw362976te"},{"title":"this的软绑定和硬绑定","date":"2019-03-30T06:11:56.000Z","_content":"\n被调用的函数示例\n```JavaScript\nfunction fn() {\n  // 如果严格模式， \"use strict\"加在此处\n  console.log(this)\n}\n```\n\n## 软绑定\n```JavaScript\nfn() // window\n```\n\"use strict\" 严格模式的软绑定\n\n```JavaScript\nfn()  // undefined\n```\n\n## 硬绑定\n```JavaScript\nfn.apply({},['a'])  // {}\n```\n\n忽略硬绑定， 使用软绑定\n```JavaScript\nfn.apply(null,['a'])  // window\n```\n\n\"use strict\" 严格模式\n```JavaScript\nfn.apply({},['a'])  // {}\nfn.apply(null,['a'])  // null\n```\n\n\n\n\n\n","source":"_posts/this的软绑定和硬绑定.md","raw":"---\ntitle: this的软绑定和硬绑定\ndate: 2019-03-30 14:11:56\ncategories: JavaScript\ntags: JavaScript\n---\n\n被调用的函数示例\n```JavaScript\nfunction fn() {\n  // 如果严格模式， \"use strict\"加在此处\n  console.log(this)\n}\n```\n\n## 软绑定\n```JavaScript\nfn() // window\n```\n\"use strict\" 严格模式的软绑定\n\n```JavaScript\nfn()  // undefined\n```\n\n## 硬绑定\n```JavaScript\nfn.apply({},['a'])  // {}\n```\n\n忽略硬绑定， 使用软绑定\n```JavaScript\nfn.apply(null,['a'])  // window\n```\n\n\"use strict\" 严格模式\n```JavaScript\nfn.apply({},['a'])  // {}\nfn.apply(null,['a'])  // null\n```\n\n\n\n\n\n","slug":"this的软绑定和硬绑定","published":1,"updated":"2019-03-30T06:26:53.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinlv000bawuwgahzxoeu"},{"title":"vue-cli3脚手架配置px2rem适配方案","date":"2019-03-24T06:26:51.000Z","_content":"\n## 安装\n```\nnpm i lib-flexible --save\nnpm install px2rem-loader\n```\n\n## 引入\n> main.js\n\n```\nimport 'lib-flexible/flexible'\n```\n> index.html\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n\n## 根目录新建 vue.config.js 文件\n> 复制如下代码， 重启， 搞定\n\n```\n// vue.config.js\nmodule.exports = {\n  chainWebpack: config => {\n    config.module\n      .rule('css')\n        .test(/\\.css$/)\n        .oneOf('vue')\n        .resourceQuery(/\\?vue/)\n        .use('px2rem')\n          .loader('px2rem-loader')\n          .options({\n            remUnit: 75\n          })\n  }\n}\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue-cli3脚手架配置px2rem适配方案.md","raw":"---\ntitle: vue-cli3脚手架配置px2rem适配方案\ndate: 2019-03-24 14:26:51\ncategories: Vue\ntags: [适配, Vue]\n---\n\n## 安装\n```\nnpm i lib-flexible --save\nnpm install px2rem-loader\n```\n\n## 引入\n> main.js\n\n```\nimport 'lib-flexible/flexible'\n```\n> index.html\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n\n## 根目录新建 vue.config.js 文件\n> 复制如下代码， 重启， 搞定\n\n```\n// vue.config.js\nmodule.exports = {\n  chainWebpack: config => {\n    config.module\n      .rule('css')\n        .test(/\\.css$/)\n        .oneOf('vue')\n        .resourceQuery(/\\?vue/)\n        .use('px2rem')\n          .loader('px2rem-loader')\n          .options({\n            remUnit: 75\n          })\n  }\n}\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue-cli3脚手架配置px2rem适配方案","published":1,"updated":"2019-03-24T06:27:45.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinly000cawuwg7ivo6u6"},{"title":"vuecli3脚手架环境变量","date":"2019-03-24T06:44:02.000Z","_content":"\n## 环境变量\n> 环境变量, 在开发和生产环境中会经常使用到\n\n### 举一个例子\n> 在开发过程中我们使用一个本地的接口      \n> 但是在我们打包上线的时候, 我们会使用线上的接口      \n> 这时候我们就可以通过环境变量来配置\n\n\n### 如何创建环境变量\n> 进入脚手架根目录 , 新建一个 .env 文件  , 这就是一个环境变量文件     \n\n**.env**              优先级最低的配置文件, 两种环境都可以用     \n**.env.development**  开发环境, 时优先使用的环境变量     \n**.env.production**   生产环节, 打包时使用的环境变量     \n\n\n#### 环境变量语法\n> VUE_APP_衔接上一个名字='你的变量'\n\n如: \n> VUE_APP_URL='https://baidu.com'\n\n\n\n### 如何在组件中获取环境变量\n> process.env.VUE_APP_URL     \n> 然后挂载到当前组件的data 上 ,如下\n\n```\ndata(){\n    return {\n        url: process.env.VUE_APP_URL\n    }\n}\n\n```\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vuecli3脚手架环境变量.md","raw":"---\ntitle: vuecli3脚手架环境变量\ndate: 2019-03-24 14:44:02\ncategories: Vue\ntags: Vue\n---\n\n## 环境变量\n> 环境变量, 在开发和生产环境中会经常使用到\n\n### 举一个例子\n> 在开发过程中我们使用一个本地的接口      \n> 但是在我们打包上线的时候, 我们会使用线上的接口      \n> 这时候我们就可以通过环境变量来配置\n\n\n### 如何创建环境变量\n> 进入脚手架根目录 , 新建一个 .env 文件  , 这就是一个环境变量文件     \n\n**.env**              优先级最低的配置文件, 两种环境都可以用     \n**.env.development**  开发环境, 时优先使用的环境变量     \n**.env.production**   生产环节, 打包时使用的环境变量     \n\n\n#### 环境变量语法\n> VUE_APP_衔接上一个名字='你的变量'\n\n如: \n> VUE_APP_URL='https://baidu.com'\n\n\n\n### 如何在组件中获取环境变量\n> process.env.VUE_APP_URL     \n> 然后挂载到当前组件的data 上 ,如下\n\n```\ndata(){\n    return {\n        url: process.env.VUE_APP_URL\n    }\n}\n\n```\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vuecli3脚手架环境变量","published":1,"updated":"2019-03-24T06:44:24.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinm3000gawuwe4iygyow"},{"title":"vue的add命令与npm的小区别","date":"2019-03-24T06:42:25.000Z","_content":"\n## add\n如果你下载的库, 特别是 Ui 库, 希望对脚手架结构产生影响,\n\n那就选择 \n> vue add xxx\n\n## npm\n如果不希望对脚手架结构产生影响, 只是单纯的使用, 比如 axios 这个插件\n那就选择 \n> npm install xxx\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue的add命令与npm的小区别.md","raw":"---\ntitle: vue的add命令与npm的小区别\ndate: 2019-03-24 14:42:25\ncategories: Vue\ntags: Vue\n---\n\n## add\n如果你下载的库, 特别是 Ui 库, 希望对脚手架结构产生影响,\n\n那就选择 \n> vue add xxx\n\n## npm\n如果不希望对脚手架结构产生影响, 只是单纯的使用, 比如 axios 这个插件\n那就选择 \n> npm install xxx\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue的add命令与npm的小区别","published":1,"updated":"2019-03-24T06:43:28.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinm6000hawuw05522u5a"},{"title":"【AOP】面向切面编程","date":"2019-03-24T05:53:14.000Z","_content":"\n> Aspect Oriented Programming\n\n面向切面编程（aop）是对面向对象编程（oop）的补充\n\n## 面向切面编程\n\n在软件业， AOP为 `Aspect Oriented Programming` 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。\n\n\n### 基础概念\nAOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。\n\n### Filter \nFilter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为\"Aspect\"， 即切面。 所谓“切面”。\n\n### 优点\nAOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！\n\n就像函数的`before`和 `after`\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【AOP】面向切面编程.md","raw":"---\ntitle: 【AOP】面向切面编程\ndate: 2019-03-24 13:53:14\ncategories: [编程思想]\ntags: [AOP, 编程范式]\n---\n\n> Aspect Oriented Programming\n\n面向切面编程（aop）是对面向对象编程（oop）的补充\n\n## 面向切面编程\n\n在软件业， AOP为 `Aspect Oriented Programming` 的缩写， 意为: 面向切面编程， 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续， 是软件开发中的一个热点， 也是Spring 框架中的一个重要内容， 是函数式编程的一种衍生范式。 利用AOP可以对业务逻辑的各个部分进行隔离， 从而使得业务逻辑各部分之间的耦合度降低， 提高程序的可重用性， 同时提高了开发效率。\n\n\n### 基础概念\nAOP 完善Spring 的依赖注入(DI) 面向对象编程将程序分解成各个层次的对象， 面向切面编程将程序运行过程分解成各个切面。\n\n### Filter \nFilter(过滤器) 也是一种AOPA， 他利用一种称为“横切”的技术， 刨解开封装的对象内部， 并将那些影响了多个类的公共行为封装到一个可重用的模块， 并将其命名为\"Aspect\"， 即切面。 所谓“切面”。\n\n### 优点\nAOP的好处就是你只需要干你的正事， 其他事情别人帮你干。 在你访问数据库之前， 自动帮你开启事务， 当你访问数据库结束之后， 自动帮你提交/回滚事务！\n\n就像函数的`before`和 `after`\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【AOP】面向切面编程","published":1,"updated":"2019-03-24T06:14:53.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinm9000lawuw0sbzi5a0"},{"title":"【CSS全景】淘宝造物节H5原理","date":"2019-03-18T07:49:50.000Z","_content":"\n\n![](http://img.nixiaolei.com/zaowu.gif)\n\n2016年的淘宝造物节邀请函， 太牛了， 不过，我们这回先不研究他的入场特效，先研究下它的全景是如何实现的\n\n\n## 一、 载入图片, 定位至统一位置\n>因为20张图片被定位到统一地方, 所以所有图片都叠在一起了\n\n>此时效果\n\n\n![](http://img.nixiaolei.com/taobao01.png)\n\n## 二、依照Y轴旋转图片\n>先说下为什么要依照y轴:  我们需要把图片围绕成一个环形, 类似于 木桶的每一块木板,   图片就是木板, 按图片的顺序旋转自各自的角度, 目前也是原地旋转, 所以图片依旧叠加在一起\n\n>素材有20张图片, 那每张的旋转角度就是 360 / 20 = 18度, 每张旋转的度数在前一张的基础上累加 18 度, \n\n>这里注意注意注意: 因为是按图片中心的Y轴旋转, 所以同一个度数会有两张图片,  比如: 0度的图片, 头在0度, 尾在90度,    然后当轮到头在90度的图片时, 他的尾在 0 度, 所以会有同一个度数两张图片的现象\n\n\n>此时效果\n\n![](http://img.nixiaolei.com/taobao02.png)\n\n\n>为了方便理解, 切换成上帝视角, ,  所有图片围绕中心点旋转\n\n![](http://img.nixiaolei.com/taobao03.png)\n\n![](http://img.nixiaolei.com/taobao04.png)\n\n\n\n## 三、将图片沿着各自Z轴向外推\n>现在木板(也就是每一张图片)是穿插在一起的, 我们需要让他们远离中心点, 拉开距离, 让他,们边缘连接而不是这样交叉在一起,  才能形成一个圆\n\n### 先了解每一块木板怎么推\n>简单的画了个前后的效果图,  用的是上帝视角, 也就是你低头看一个木桶的视角\n\n\n\n![](http://img.nixiaolei.com/taobao05.png)\n\n\n### 如何计算该推多少距离\n>做一道三角函数数学题\n>\n>画的角度不太对别介意\n\n![](http://img.nixiaolei.com/taobao06.png)\n\n>设一共12条线,  每条长200px(此时的长就对应图片的宽) ,  求将橙线移动到图中最终位置的距离 \"黑线\",\n```JavaScript\n// 先求旋转度数\n// 然后取度数的一半\n360 / 12 / 2 = 15 度\n// 得知直角底边长度\n200 / 2 = 100px\n// 根据度数得知 tan, 顺便说下, tan是对边比邻边\ntan15°= 0.26794\n// 求出黑线\n100PX / 黑线 = 0.26794\n黑线约等于 373.2px\n```\n\n## js计算时注意\n1. Math.tan 接收的是弧度单位\n2. Math.PI 表示的是一个 Π\n3. 360度 = 2Π \n>计算出每张图片之间的形成的弧度\n```JavaScript\n // 假设图片数量是 8 张\n// 因为 360 = 2Π\n// 1度 = Π / 180\n// 每份的角度是\nconst deg = 360 / 8 // 此时为 45\n// 一份的弧度就是 每份弧度 * 旋转角度的一半\n// 最后结果就等于 Π / 图片数量\n( Math.PI / 180 ) * ( 45 / 2 )  ==>  Math.PI / 8\n```\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【CSS全景】淘宝造物节H5原理.md","raw":"---\ntitle: 【CSS全景】淘宝造物节H5原理\ndate: 2019-03-18 15:49:50\ncategories: CSS\ntags: [css, 3D]\n---\n\n\n![](http://img.nixiaolei.com/zaowu.gif)\n\n2016年的淘宝造物节邀请函， 太牛了， 不过，我们这回先不研究他的入场特效，先研究下它的全景是如何实现的\n\n\n## 一、 载入图片, 定位至统一位置\n>因为20张图片被定位到统一地方, 所以所有图片都叠在一起了\n\n>此时效果\n\n\n![](http://img.nixiaolei.com/taobao01.png)\n\n## 二、依照Y轴旋转图片\n>先说下为什么要依照y轴:  我们需要把图片围绕成一个环形, 类似于 木桶的每一块木板,   图片就是木板, 按图片的顺序旋转自各自的角度, 目前也是原地旋转, 所以图片依旧叠加在一起\n\n>素材有20张图片, 那每张的旋转角度就是 360 / 20 = 18度, 每张旋转的度数在前一张的基础上累加 18 度, \n\n>这里注意注意注意: 因为是按图片中心的Y轴旋转, 所以同一个度数会有两张图片,  比如: 0度的图片, 头在0度, 尾在90度,    然后当轮到头在90度的图片时, 他的尾在 0 度, 所以会有同一个度数两张图片的现象\n\n\n>此时效果\n\n![](http://img.nixiaolei.com/taobao02.png)\n\n\n>为了方便理解, 切换成上帝视角, ,  所有图片围绕中心点旋转\n\n![](http://img.nixiaolei.com/taobao03.png)\n\n![](http://img.nixiaolei.com/taobao04.png)\n\n\n\n## 三、将图片沿着各自Z轴向外推\n>现在木板(也就是每一张图片)是穿插在一起的, 我们需要让他们远离中心点, 拉开距离, 让他,们边缘连接而不是这样交叉在一起,  才能形成一个圆\n\n### 先了解每一块木板怎么推\n>简单的画了个前后的效果图,  用的是上帝视角, 也就是你低头看一个木桶的视角\n\n\n\n![](http://img.nixiaolei.com/taobao05.png)\n\n\n### 如何计算该推多少距离\n>做一道三角函数数学题\n>\n>画的角度不太对别介意\n\n![](http://img.nixiaolei.com/taobao06.png)\n\n>设一共12条线,  每条长200px(此时的长就对应图片的宽) ,  求将橙线移动到图中最终位置的距离 \"黑线\",\n```JavaScript\n// 先求旋转度数\n// 然后取度数的一半\n360 / 12 / 2 = 15 度\n// 得知直角底边长度\n200 / 2 = 100px\n// 根据度数得知 tan, 顺便说下, tan是对边比邻边\ntan15°= 0.26794\n// 求出黑线\n100PX / 黑线 = 0.26794\n黑线约等于 373.2px\n```\n\n## js计算时注意\n1. Math.tan 接收的是弧度单位\n2. Math.PI 表示的是一个 Π\n3. 360度 = 2Π \n>计算出每张图片之间的形成的弧度\n```JavaScript\n // 假设图片数量是 8 张\n// 因为 360 = 2Π\n// 1度 = Π / 180\n// 每份的角度是\nconst deg = 360 / 8 // 此时为 45\n// 一份的弧度就是 每份弧度 * 旋转角度的一半\n// 最后结果就等于 Π / 图片数量\n( Math.PI / 180 ) * ( 45 / 2 )  ==>  Math.PI / 8\n```\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【CSS全景】淘宝造物节H5原理","published":1,"updated":"2019-03-28T11:58:42.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinmb000nawuw1mbnwapl"},{"title":"你不知道的Css矩阵","date":"2019-03-18T07:54:33.000Z","_content":"\n\n# 矩阵\n1. matrix(a,b,c,d,e,f);        \n2. a c e 分别和 X, Y, 1 相乘得出线性方程\n3. b d f 分别和 X, Y, 1 相乘得出线性方程\n\n\n这是很清楚的计算公式\n\n![](http://img.nixiaolei.com/matrix.png)\n\n\n\n\n\n\n## rotateZ矩阵推理\n推理过程\n\n\n![](http://img.nixiaolei.com/note.png)\n\n\n\n\n## 参考同学的笔记\n同学写的很不错👍\n\n![](http://img.nixiaolei.com/classmate-note01.png)\n\n![](http://img.nixiaolei.com/classmate-note02.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/【CSS矩阵】你不知道的Css矩阵.md","raw":"---\ntitle: 你不知道的Css矩阵\ndate: 2019-03-18 15:54:33\ncategories: CSS\ntags: [css, 矩阵]\n---\n\n\n# 矩阵\n1. matrix(a,b,c,d,e,f);        \n2. a c e 分别和 X, Y, 1 相乘得出线性方程\n3. b d f 分别和 X, Y, 1 相乘得出线性方程\n\n\n这是很清楚的计算公式\n\n![](http://img.nixiaolei.com/matrix.png)\n\n\n\n\n\n\n## rotateZ矩阵推理\n推理过程\n\n\n![](http://img.nixiaolei.com/note.png)\n\n\n\n\n## 参考同学的笔记\n同学写的很不错👍\n\n![](http://img.nixiaolei.com/classmate-note01.png)\n\n![](http://img.nixiaolei.com/classmate-note02.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"【CSS矩阵】你不知道的Css矩阵","published":1,"updated":"2019-03-28T11:58:24.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinme000sawuwhotz9smy"},{"title":"【NodeJs】异步IO与EventLoop","date":"2019-03-26T14:49:27.000Z","_content":"\nIO密集型就是需要频繁请求的程序，高访问量，  CPU密集型就是需要进行大量计算的 \n\n\n## 异步IO的好处\n\n* 前端通过异步IO可以消除UI堵塞。\n* 假设请求资源A的时间为M,请求资源B的时间为N.那么同步的请求耗时为M+N.如果采用异步方式占用时间为Max(M,N)。\n* 随着业务的复杂，会引入分布式系统，时间会线性的增加，M+N+...和Max(M,N…)，这会放大同步和异步之间的差异。\n* I/O是昂贵的，分布式I/O是更昂贵的。\n  * 分布式因为你读取到了这个值， 但并没有在你这台机器上， 远程的机器想要读取到那就必须要走网络， 这个过程就变长了\n* NodeJS 适用于IO密集型不适用CPU密集型\n\n\n\n\n## Node对异步IO的实现\n> 完美的异步IO应该是应该是应用程序发起非阻塞调用，无需通过遍历或者事件幻想等方式轮询。\n\nNode.js 的事件循环和在浏览器中的实现不太一样， 在Node.js 中事件循环交给了Libuv托管，  Libuv 和 v8 是分别独立的线程， 辅助Node.js 进行事件轮询\n\nNode.js 依靠v8运行javascript, 并且绑定了底层的操作系统\n\n当V8接收到用户的请求进入， 通过绑定系统接口，将事件交给Libuv处理， Libuv 将事件加入事件队列( event queue)， EventLoop 不行的旋转并执行同步事件，当遇到异步事件时，将其交给 worker Threads 线程， 比如操作文件就是交给工作线程去同步完成， 当文件操作完毕后， 根据文件描述符去获取数据， 然后将结果作为参数返回给事件队列中等候的回调函数\n\n\n![EventLoop](http://img.nixiaolei.com/2019-03-29-22-50-40.png)\n\n\n\n## 常用的Node控制异步技术手段\n> Promise 是一个语法， 规范， js只是实现了这个规范，  Promise 是一个高级接口， 创建一次，不容易修改， then就是 低级接口， 可以一直then ,处理逻辑\n\n1. Step、wind（提供等待的异步库）、Bigpipe、Q.js\n2. Async、Await\n3. Promise/Defferred 是一种先执行异步调用，延迟传递的处理方式。Promise是高级接口，事件是低级接口。低级接口可以构建更多复杂的场景，高级接口一旦定义，不太容易变化，不再有低级接口的灵活性，但对于解决问题非常有效\n4. 由于Node基于V8的原因，目前还不支持协程。协程不是进程或线程，其执行过程更类似于子例程，或者说不带返回值的函数调用。一个程序可以包含多个协程，可以对比与一个进程包含多个线程，因而下面我们来比较协程和线程。我们知道多个线程相对独立，有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制。\n\n\n\n##  底层的知识\n1. CPU时钟周期：1/cpu主频 -> 1s/3.1 GHz\n![底层知识](http://img.nixiaolei.com/2019-03-29-22-54-03.png)\n\n\n3. 操作系统对计算机进行了抽象，将所有输入输出设备抽象为文件。内核在进行文件I/O操作时，通过文件描述符进行管理。应用程序如果需要进行IO需要打开文件描述符，在进行文件和数据的读写。异步IO不带数据直接返回，要获取数据还需要通过文件描述符再次读取。\n\n![文件操作](http://img.nixiaolei.com/2019-03-29-22-54-36.png)\n\n\n","source":"_posts/【NodeJs】异步IO与EventLoop.md","raw":"---\ntitle: 【NodeJs】异步IO与EventLoop\ndate: 2019-03-26 22:49:27\ncategories: NodeJs\ntags: [ NodeJs, JavaScript ]\n---\n\nIO密集型就是需要频繁请求的程序，高访问量，  CPU密集型就是需要进行大量计算的 \n\n\n## 异步IO的好处\n\n* 前端通过异步IO可以消除UI堵塞。\n* 假设请求资源A的时间为M,请求资源B的时间为N.那么同步的请求耗时为M+N.如果采用异步方式占用时间为Max(M,N)。\n* 随着业务的复杂，会引入分布式系统，时间会线性的增加，M+N+...和Max(M,N…)，这会放大同步和异步之间的差异。\n* I/O是昂贵的，分布式I/O是更昂贵的。\n  * 分布式因为你读取到了这个值， 但并没有在你这台机器上， 远程的机器想要读取到那就必须要走网络， 这个过程就变长了\n* NodeJS 适用于IO密集型不适用CPU密集型\n\n\n\n\n## Node对异步IO的实现\n> 完美的异步IO应该是应该是应用程序发起非阻塞调用，无需通过遍历或者事件幻想等方式轮询。\n\nNode.js 的事件循环和在浏览器中的实现不太一样， 在Node.js 中事件循环交给了Libuv托管，  Libuv 和 v8 是分别独立的线程， 辅助Node.js 进行事件轮询\n\nNode.js 依靠v8运行javascript, 并且绑定了底层的操作系统\n\n当V8接收到用户的请求进入， 通过绑定系统接口，将事件交给Libuv处理， Libuv 将事件加入事件队列( event queue)， EventLoop 不行的旋转并执行同步事件，当遇到异步事件时，将其交给 worker Threads 线程， 比如操作文件就是交给工作线程去同步完成， 当文件操作完毕后， 根据文件描述符去获取数据， 然后将结果作为参数返回给事件队列中等候的回调函数\n\n\n![EventLoop](http://img.nixiaolei.com/2019-03-29-22-50-40.png)\n\n\n\n## 常用的Node控制异步技术手段\n> Promise 是一个语法， 规范， js只是实现了这个规范，  Promise 是一个高级接口， 创建一次，不容易修改， then就是 低级接口， 可以一直then ,处理逻辑\n\n1. Step、wind（提供等待的异步库）、Bigpipe、Q.js\n2. Async、Await\n3. Promise/Defferred 是一种先执行异步调用，延迟传递的处理方式。Promise是高级接口，事件是低级接口。低级接口可以构建更多复杂的场景，高级接口一旦定义，不太容易变化，不再有低级接口的灵活性，但对于解决问题非常有效\n4. 由于Node基于V8的原因，目前还不支持协程。协程不是进程或线程，其执行过程更类似于子例程，或者说不带返回值的函数调用。一个程序可以包含多个协程，可以对比与一个进程包含多个线程，因而下面我们来比较协程和线程。我们知道多个线程相对独立，有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制。\n\n\n\n##  底层的知识\n1. CPU时钟周期：1/cpu主频 -> 1s/3.1 GHz\n![底层知识](http://img.nixiaolei.com/2019-03-29-22-54-03.png)\n\n\n3. 操作系统对计算机进行了抽象，将所有输入输出设备抽象为文件。内核在进行文件I/O操作时，通过文件描述符进行管理。应用程序如果需要进行IO需要打开文件描述符，在进行文件和数据的读写。异步IO不带数据直接返回，要获取数据还需要通过文件描述符再次读取。\n\n![文件操作](http://img.nixiaolei.com/2019-03-29-22-54-36.png)\n\n\n","slug":"【NodeJs】异步IO与EventLoop","published":1,"updated":"2019-03-29T14:55:41.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinmg000uawuwan78yh65"},{"title":"【PostCss】使用明天的CSS","date":"2019-03-16T05:30:24.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法\n\n当然国内的情况有点不一样\n\n## 新特性举例\n\n比如这个CSS变量:\n他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了\n```CSS\n@custom-media --viewport-medium (width <= 50rem);\n\n@media (--viewport-medium) {\n  body { font-size: calc(var(--fontSize) * 1.2); }\n}\n\n```\n\n那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码\n\n```CSS\n@media (max-width: 50rem) {\n  body { font-size: 1.2rem; }\n}\n```\n\n## 更多演示\n> 编译前后以 ------ 分割\n\n\n自定义选择器\n```CSS\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n:--heading { margin-top: 0 }\n/* ------------------------------------ */\nh1,h2,h3,h4,h5,h6 { margin-top: 0 }\n```\n\n自动一倍图(1X)和二倍图(2X)\n```CSS\n/* image-set function */\n.foo {\n  background-image:\n    image-set(\n      url(img/test.png) 1x,\n      url(img/test-2x.png) 2x\n    );\n}\n\n/* ------------------------------------ */\n\n/* 默认状态 */\n.foo {\n    background-image:\n      url(img/test.png);\n}\n\n/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n.foo {\n    background-image:\n      url(img/test-2x.png);\n}\n}\n```\n\n\n`any-link`, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效\n```CSS\na {\ncolor: var(--highlightColor);\ntransition: color 1s; /* autoprefixed ! */\n}\na:hover { color: gray(255, 50%) }\na:active { color: rebeccapurple }\na:focus { background-color: rgb(255 153 0 / 33%); outline: 3px solid hsl(1turn 60% 50%); }\na:any-link { color: color(var(--highlightColor) blackness(+20%)) }\n\n/* --------------------------------- */\n\na {\n  color: rgb(89, 185, 204);\n  -webkit-transition: color 1s;\n  transition: color 1s; /* autoprefixed ! */\n}\na:hover { color: rgba(255, 255, 255, 0.5) }\na:active { color: #639 }\na:focus { \n  background-color: rgba(255, 153, 0, .33); \n  outline: 3px solid hsl(360, 60%, 50%); \n}\na:link,a:visited { color: rgb(89, 142, 153) }\n```\n\n\n还有很多， 不一一举例了， 比如：\n* 各个浏览器的滤镜`filter`兼容\n* 选择器正则\n* css嵌套\n\n## 如何让PostCS支持嵌套\n> 本环境基于webpack\n\nnpm地址:\n* https://www.npmjs.com/package/postcss\n* https://www.npmjs.com/package/postcss-loader\n\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n  & .menu {\n    height: 40px;\n    background: sandybrown; \n    & .menu--item {\n      height: 40px;\n      color: skyblue;\n      & .menu--item__active {\n        color: pink;\n      }\n    }\n  }\n}\n```\n\n\n\n\n首先在项目的根目录中创建一个文件`postcss.config.js`\n\n相关依赖安装就不说了， 真的缺了也会报错提示的\n\n我们将会在里面做`PostCSS`的相关配置\n\n```JavaScript\nmodule.exports = {\n  plugins: [\n    require('postcss-nested')\n  ]\n}\n```\n\n然后接下来是配置 Loader ，\n\n进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader\n```JavaScript\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      {\n        loader: 'css-loader',\n      },\n      // --------------新增区域---------------\n      {\n        loader: 'postcss-loader',\n        options: {\n          ident: 'postcss',\n          plugins: (loader) => [\n            require('postcss-preset-env')({\n              /* 这里要改成 0  否则不一定编译嵌套 */\n              stage: 0,\n              features: {\n                'nesting-rules': true\n              }\n            })\n          ]\n        }\n      }\n      // --------------新增区域---------------\n    ]\n  }\n]\n```\n\n像这样，记得把 `stage` 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。\n\n\n我们运行一下看看\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n}\n.container .menu {\n  height: 40px;\n  background: sandybrown\n}\n.container .menu .menu--item {\n  height: 40px;\n  color: skyblue\n}\n.container .menu .menu--item .menu--item__active {\n  color: pink;\n}\n```\n\n大功告成😄~\n\n想知道有用的PostCSS的插件大纲，可以在本站内搜索: `CSS插件` \n\n\n\n\n\n\n## 相关的网站\n> PostCss: https://postcss.org/\n> css next: http://cssnext.io/\n\n","source":"_posts/【PostCss】使用明天的CSS.md","raw":"---\ntitle: 【PostCss】使用明天的CSS\ndate: 2019-03-16 13:30:24\ncategories: CSS\ntags: [css, PostCss]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n通过PostCss作为CSS的后处理器， 可以根据浏览器的市场份额， 选择性的将一些最新的CSS新特性编译成浏览器支持的语法\n\n当然国内的情况有点不一样\n\n## 新特性举例\n\n比如这个CSS变量:\n他存储了媒体查询的规则， 在多个媒体查询的情况下就不用重复写了\n```CSS\n@custom-media --viewport-medium (width <= 50rem);\n\n@media (--viewport-medium) {\n  body { font-size: calc(var(--fontSize) * 1.2); }\n}\n\n```\n\n那这个属性浏览器兼容不理想怎么办？ 别担心， 交给PostCss, 经过处理， 我们可以看到，生成了一个规规矩矩的媒体查询代码\n\n```CSS\n@media (max-width: 50rem) {\n  body { font-size: 1.2rem; }\n}\n```\n\n## 更多演示\n> 编译前后以 ------ 分割\n\n\n自定义选择器\n```CSS\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n:--heading { margin-top: 0 }\n/* ------------------------------------ */\nh1,h2,h3,h4,h5,h6 { margin-top: 0 }\n```\n\n自动一倍图(1X)和二倍图(2X)\n```CSS\n/* image-set function */\n.foo {\n  background-image:\n    image-set(\n      url(img/test.png) 1x,\n      url(img/test-2x.png) 2x\n    );\n}\n\n/* ------------------------------------ */\n\n/* 默认状态 */\n.foo {\n    background-image:\n      url(img/test.png);\n}\n\n/* 满足 设备上物理像素和设备独立像素( device-independent pixels (dips) )的比例  */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n.foo {\n    background-image:\n      url(img/test-2x.png);\n}\n}\n```\n\n\n`any-link`, 补齐标签的剩余的所有状态， 这是为了防止某些样式不生效\n```CSS\na {\ncolor: var(--highlightColor);\ntransition: color 1s; /* autoprefixed ! */\n}\na:hover { color: gray(255, 50%) }\na:active { color: rebeccapurple }\na:focus { background-color: rgb(255 153 0 / 33%); outline: 3px solid hsl(1turn 60% 50%); }\na:any-link { color: color(var(--highlightColor) blackness(+20%)) }\n\n/* --------------------------------- */\n\na {\n  color: rgb(89, 185, 204);\n  -webkit-transition: color 1s;\n  transition: color 1s; /* autoprefixed ! */\n}\na:hover { color: rgba(255, 255, 255, 0.5) }\na:active { color: #639 }\na:focus { \n  background-color: rgba(255, 153, 0, .33); \n  outline: 3px solid hsl(360, 60%, 50%); \n}\na:link,a:visited { color: rgb(89, 142, 153) }\n```\n\n\n还有很多， 不一一举例了， 比如：\n* 各个浏览器的滤镜`filter`兼容\n* 选择器正则\n* css嵌套\n\n## 如何让PostCS支持嵌套\n> 本环境基于webpack\n\nnpm地址:\n* https://www.npmjs.com/package/postcss\n* https://www.npmjs.com/package/postcss-loader\n\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n  & .menu {\n    height: 40px;\n    background: sandybrown; \n    & .menu--item {\n      height: 40px;\n      color: skyblue;\n      & .menu--item__active {\n        color: pink;\n      }\n    }\n  }\n}\n```\n\n\n\n\n首先在项目的根目录中创建一个文件`postcss.config.js`\n\n相关依赖安装就不说了， 真的缺了也会报错提示的\n\n我们将会在里面做`PostCSS`的相关配置\n\n```JavaScript\nmodule.exports = {\n  plugins: [\n    require('postcss-nested')\n  ]\n}\n```\n\n然后接下来是配置 Loader ，\n\n进入webpack 配置css loader 的地方， 我们在css loader 后面加上PostCss 的loader\n```JavaScript\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      {\n        loader: 'css-loader',\n      },\n      // --------------新增区域---------------\n      {\n        loader: 'postcss-loader',\n        options: {\n          ident: 'postcss',\n          plugins: (loader) => [\n            require('postcss-preset-env')({\n              /* 这里要改成 0  否则不一定编译嵌套 */\n              stage: 0,\n              features: {\n                'nesting-rules': true\n              }\n            })\n          ]\n        }\n      }\n      // --------------新增区域---------------\n    ]\n  }\n]\n```\n\n像这样，记得把 `stage` 这个参数修改为 0 ， 因为PostCss 会根据这个参数分为好几个阶段，阶段太高它是不处理嵌套的。\n\n\n我们运行一下看看\n\n```CSS\n.container {\n  /* 一定要带上 & 才会编译 */\n}\n.container .menu {\n  height: 40px;\n  background: sandybrown\n}\n.container .menu .menu--item {\n  height: 40px;\n  color: skyblue\n}\n.container .menu .menu--item .menu--item__active {\n  color: pink;\n}\n```\n\n大功告成😄~\n\n想知道有用的PostCSS的插件大纲，可以在本站内搜索: `CSS插件` \n\n\n\n\n\n\n## 相关的网站\n> PostCss: https://postcss.org/\n> css next: http://cssnext.io/\n\n","slug":"【PostCss】使用明天的CSS","published":1,"updated":"2019-03-22T13:49:32.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinmj000yawuwhp0rw0is"},{"title":"【css-doodle】 css web-component入门","date":"2019-03-16T12:36:22.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效\n> https://css-doodle.com/\n\n\n`<css-doodle />`基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。\n该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。\n\n\n\n既然它这么牛逼， 那怎么用呢？\n\n我们一起来搭几个demo\n\n## css-doodle入门\n> 此处用到的语法或api有不了解的 请看页面下方的“释义” 区域\n\n动手过程中需要注意， 不要在`css-doodle`内部写注释， 会导致样式无效\n\n\n首先搭建好运行`css-doodle`的环境\n```HTML\n<!-- 引入CDN -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"></script>\n\n<!-- 页面上加入 css-doodle -->\n\n<css-doodle>\n<!-- 我们将在这里写代码 -->\n</css-doodle>\n```\n\n此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。\n\n现在我们给他加点料。\n\n```HTML\n<css-doodle>\n  width: 100px;\n  height: 100px;\n  background: red;\n</css-doodle>\n```\n\n此时我们再看看页面， 就出现了一个`100 x 100`的红色小方块，\n\n![红色方块](http://img.nixiaolei.com/2019-03-16-21-22-36.png)\n\n\n好，这个相当于hello world 级别的练习就完成了， \n\n\n我们再来点难的：\n\n**我想要一个10 x 10 个的小方块组成的大正方形!**\n\n正好我们可以借此尝试使用一下它提供的API\n\n\n```\n<css-doodle>\n  :doodle {\n    @grid: 10x10 / 500px;\n  }\n  background: #60569e;\n</css-doodle>\n```\n\n出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色\n\n\n![10x10的大正方](http://img.nixiaolei.com/2019-03-16-21-28-29.png)\n\n\n好既然实现了， 那现在需求升级了\n\n**那我要10个长方形怎么办， 并且我还要长短不一的！**\n\n我去，还要长短不一， 咋整呢\n\n别慌\n\n机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数 \n`@index` 严格的来说他会返回当前单元格的索引值\n\n既然有方法了那我们也有思路了， 二话不说开始动手。\n\n```HTML\n<!-- 首先把 10 x 10 小方块变为10个长方形 -->\n<!-- 然后根据 @index 获取当前单元格的索引 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  background: #60569e;\n  @size: calc(@index() * 1vmin);\n</css-doodle>\n<!-- 根据 index 这个索引值乘以高度 -->\n```\n\nduang!\n\n这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了\n\n\n![10个长方形](http://img.nixiaolei.com/2019-03-16-21-45-14.png)\n\n\n我们再给他加上`border-radius: 50%;` 它就变成10个球了\n\n\n![10个球](http://img.nixiaolei.com/2019-03-16-21-50-12.png)\n\n\n此时需求又来了\n\n**甲方：可不可以弄10个光环？还是渐变的那种?**\n\n行吧， 试试喽谁怕谁\n\n我们可以举一反三， 利用`@index`这个好东西来修改`hsla`产生不同的颜色， 当然修改`rgba` 也是可以的\n\n```\n<!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n</css-doodle>\n```\n\n好， 甲方爸爸， 你的需求我做到了\n\n\n\n![渐变光环](http://img.nixiaolei.com/2019-03-16-22-11-38.png)\n\n\n**甲方: 还不够，我要的是同心圆**\n\n我。。。。。\n\n得嘞，您说是啥就是啥\n\n同心圆， 你第一反应想到的是不是使用`position: absolute;` ? \n不 ，那太low 了\n我们只需要 `@place-cell: center;` 这个参数就搞定了， 它会将每个单元格都摆放至中间\n\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n\n  @place-cell: center;\n  <!-- ...省略之前的代码 -->\n</css-doodle>\n```\n然后去看一下效果， 卧槽\n\n![我把背景色调成深色方便大家观看](http://img.nixiaolei.com/2019-03-16-22-20-13.png)\n\n\n\n### 进阶\n基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧\n\n既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下\n\n我们先让光环变粗一点， 让他呈现扇叶的形状\n\n```\nborder-width: calc(@index() * 10px);\n```\n\n\n然后让我们用上 `keyframes` ， 为他添加动画\n\n为每个单元格注册几个css变量（css的新特性），  \n\n* 变量`--speed`控制动画的持续时间，也就是速度。\n* `--start` 控制当前光环的起始角度\n* `--direction`: 控制方向， 因为`turn`表示一圈， 所以 `1turn` 就是正的转一圈,`-1turn` 就是反着转一圈， 利用`@pick`方法来随机取一个值\n\n\n\n\n```HTML\n<css-doodle>\n  <!-- ...省略之前的代码 -->\n\n  <!-- 动画执行时间在20秒 - 40秒之间取值-->\n  --speed: @rand(20s, 40s);\n  <!-- 360度里取随机数 -->\n  --start: @rand(360deg);\n  <!-- 顺时针 或 逆时针 -->\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n\n  animation: demo var(--speed) linear infinite;\n\n  @keyframes demo {\n    form {\n      <!-- 填入起始角度 -->\n      transform: rotate(var(--start));\n    }\n    to {\n      <!-- 随机顺时针和逆时针旋转 -->\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```\n\n看看效果\n\n\n![随机旋转效果](http://img.nixiaolei.com/KUXh4tYGe4.gif)\n\n\n炫酷不？\n\n能不能再酷一点？\n\n可以， 我们再给他添一笔， \n\n给他加上一个自定义的贝塞尔\n\n贝塞尔可以去这个网站，根据需要生成\n> http://cubic-bezier.com/#1,.25,.83,.67\n\n\n![贝塞尔](http://img.nixiaolei.com/2019-03-16-23-11-46.png)\n\n\n\n然后我们你所需要的贝塞尔去更改`animation` 的参数\n```HTML\nanimation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n```\n\n根据贝塞尔曲线完成了加速减速的动画效果\n\n\n![添加了贝塞尔曲线的动画](http://img.nixiaolei.com/ApPKe0brCf.gif )\n\n\n\n😎cool~\n\n还有更多更酷的特效等着大家去探索~\n\n\n\n\n**切记`css-doodle` 中不能写注释，大家拷贝的时候记得删掉**\n\n## 释义\n* `:doodle` 选择器会创建一个`display: grid;` 的布局\n* `@grid`提供布局， 用法为 `@grid: 行 x 列 /  总宽高` \n* `@index` 返回当前单元格的索引\n* `hsla` 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。\n  * H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  * S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  * L：Lightness(亮度)。取值为：0.0% - 100.0%\n  * A：Alpha透明度。取值0~1之间。\n* `@place-cell` 调整单元格相对于网格放置。\n* `@pick`： 从给定列表中随机选择一个值。\n* `turn`: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )\n  * `1turn` 就是1圈\n\n\n\n\n\n\n## 完整的代码\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  @place-cell: center;\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  border-width: calc(@index() * 10px);\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n  --speed: @rand(20s, 40s);\n  --start: @rand(360deg);\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n\n  @keyframes demo {\n    form {\n      transform: rotate(var(--start));\n    }\n    to {\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```","source":"_posts/【css-doodle】css-web-component入门.md","raw":"---\ntitle: 【css-doodle】 css web-component入门\ndate: 2019-03-16 20:36:22\ncategories: CSS\ntags: [css, web-component, 特效]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n首先祭出 css-doodle的官网， 真的老厉害了， 使用它能够轻松的实现各种炫酷特效\n> https://css-doodle.com/\n\n\n`<css-doodle />`基于 Shadow DOM v1和 Custom Elements v1。您可以立即在最新的Chrome，Safari和Firefox上使用它，而无需使用polyfill。\n该组件将根据其中的规则（纯CSS）生成div网格。您可以使用CSS轻松操作这些单元格，以获得图形模式或动画图形。限制是CSS本身的限制。\n\n\n\n既然它这么牛逼， 那怎么用呢？\n\n我们一起来搭几个demo\n\n## css-doodle入门\n> 此处用到的语法或api有不了解的 请看页面下方的“释义” 区域\n\n动手过程中需要注意， 不要在`css-doodle`内部写注释， 会导致样式无效\n\n\n首先搭建好运行`css-doodle`的环境\n```HTML\n<!-- 引入CDN -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/css-doodle/0.5.1/css-doodle.min.js\"></script>\n\n<!-- 页面上加入 css-doodle -->\n\n<css-doodle>\n<!-- 我们将在这里写代码 -->\n</css-doodle>\n```\n\n此时如果我们打开页面， 你会发现是空空如也的， 因为这个元素既没有宽高也没有背景颜色， 我们当然看不到。\n\n现在我们给他加点料。\n\n```HTML\n<css-doodle>\n  width: 100px;\n  height: 100px;\n  background: red;\n</css-doodle>\n```\n\n此时我们再看看页面， 就出现了一个`100 x 100`的红色小方块，\n\n![红色方块](http://img.nixiaolei.com/2019-03-16-21-22-36.png)\n\n\n好，这个相当于hello world 级别的练习就完成了， \n\n\n我们再来点难的：\n\n**我想要一个10 x 10 个的小方块组成的大正方形!**\n\n正好我们可以借此尝试使用一下它提供的API\n\n\n```\n<css-doodle>\n  :doodle {\n    @grid: 10x10 / 500px;\n  }\n  background: #60569e;\n</css-doodle>\n```\n\n出现了！ 我们要的 10 x 10 个小方块组成的大正方， 并且还把颜色换成了骚骚的紫色\n\n\n![10x10的大正方](http://img.nixiaolei.com/2019-03-16-21-28-29.png)\n\n\n好既然实现了， 那现在需求升级了\n\n**那我要10个长方形怎么办， 并且我还要长短不一的！**\n\n我去，还要长短不一， 咋整呢\n\n别慌\n\n机制的你一定可以在官网找到有一个获取当前小方块顺序的的参数 \n`@index` 严格的来说他会返回当前单元格的索引值\n\n既然有方法了那我们也有思路了， 二话不说开始动手。\n\n```HTML\n<!-- 首先把 10 x 10 小方块变为10个长方形 -->\n<!-- 然后根据 @index 获取当前单元格的索引 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  background: #60569e;\n  @size: calc(@index() * 1vmin);\n</css-doodle>\n<!-- 根据 index 这个索引值乘以高度 -->\n```\n\nduang!\n\n这就是我们想要的结果了， 虽然还有点不完美， 其实每个紫色都是一个正方形， 但所在的单元格是长方形没跑了\n\n\n![10个长方形](http://img.nixiaolei.com/2019-03-16-21-45-14.png)\n\n\n我们再给他加上`border-radius: 50%;` 它就变成10个球了\n\n\n![10个球](http://img.nixiaolei.com/2019-03-16-21-50-12.png)\n\n\n此时需求又来了\n\n**甲方：可不可以弄10个光环？还是渐变的那种?**\n\n行吧， 试试喽谁怕谁\n\n我们可以举一反三， 利用`@index`这个好东西来修改`hsla`产生不同的颜色， 当然修改`rgba` 也是可以的\n\n```\n<!-- 根据index 每个的单元格递增20的色调， 再调整出不同的透明度 -->\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n</css-doodle>\n```\n\n好， 甲方爸爸， 你的需求我做到了\n\n\n\n![渐变光环](http://img.nixiaolei.com/2019-03-16-22-11-38.png)\n\n\n**甲方: 还不够，我要的是同心圆**\n\n我。。。。。\n\n得嘞，您说是啥就是啥\n\n同心圆， 你第一反应想到的是不是使用`position: absolute;` ? \n不 ，那太low 了\n我们只需要 `@place-cell: center;` 这个参数就搞定了， 它会将每个单元格都摆放至中间\n\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n\n  @place-cell: center;\n  <!-- ...省略之前的代码 -->\n</css-doodle>\n```\n然后去看一下效果， 卧槽\n\n![我把背景色调成深色方便大家观看](http://img.nixiaolei.com/2019-03-16-22-20-13.png)\n\n\n\n### 进阶\n基础学的差不多了， 其他的一些api有了上面的参照都应该思路了吧\n\n既然是进阶篇， 我们就做点难的， 我们看看能不能利用这些特性和 CSS动画结合一下\n\n我们先让光环变粗一点， 让他呈现扇叶的形状\n\n```\nborder-width: calc(@index() * 10px);\n```\n\n\n然后让我们用上 `keyframes` ， 为他添加动画\n\n为每个单元格注册几个css变量（css的新特性），  \n\n* 变量`--speed`控制动画的持续时间，也就是速度。\n* `--start` 控制当前光环的起始角度\n* `--direction`: 控制方向， 因为`turn`表示一圈， 所以 `1turn` 就是正的转一圈,`-1turn` 就是反着转一圈， 利用`@pick`方法来随机取一个值\n\n\n\n\n```HTML\n<css-doodle>\n  <!-- ...省略之前的代码 -->\n\n  <!-- 动画执行时间在20秒 - 40秒之间取值-->\n  --speed: @rand(20s, 40s);\n  <!-- 360度里取随机数 -->\n  --start: @rand(360deg);\n  <!-- 顺时针 或 逆时针 -->\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n\n  animation: demo var(--speed) linear infinite;\n\n  @keyframes demo {\n    form {\n      <!-- 填入起始角度 -->\n      transform: rotate(var(--start));\n    }\n    to {\n      <!-- 随机顺时针和逆时针旋转 -->\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```\n\n看看效果\n\n\n![随机旋转效果](http://img.nixiaolei.com/KUXh4tYGe4.gif)\n\n\n炫酷不？\n\n能不能再酷一点？\n\n可以， 我们再给他添一笔， \n\n给他加上一个自定义的贝塞尔\n\n贝塞尔可以去这个网站，根据需要生成\n> http://cubic-bezier.com/#1,.25,.83,.67\n\n\n![贝塞尔](http://img.nixiaolei.com/2019-03-16-23-11-46.png)\n\n\n\n然后我们你所需要的贝塞尔去更改`animation` 的参数\n```HTML\nanimation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n```\n\n根据贝塞尔曲线完成了加速减速的动画效果\n\n\n![添加了贝塞尔曲线的动画](http://img.nixiaolei.com/ApPKe0brCf.gif )\n\n\n\n😎cool~\n\n还有更多更酷的特效等着大家去探索~\n\n\n\n\n**切记`css-doodle` 中不能写注释，大家拷贝的时候记得删掉**\n\n## 释义\n* `:doodle` 选择器会创建一个`display: grid;` 的布局\n* `@grid`提供布局， 用法为 `@grid: 行 x 列 /  总宽高` \n* `@index` 返回当前单元格的索引\n* `hsla` 此色彩模式与HSL相同，只是在HSL模式上新增了Alpha透明度。\n  * H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  * S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  * L：Lightness(亮度)。取值为：0.0% - 100.0%\n  * A：Alpha透明度。取值0~1之间。\n* `@place-cell` 调整单元格相对于网格放置。\n* `@pick`： 从给定列表中随机选择一个值。\n* `turn`: 转、圈（Turns）。一个圆共1圈 ( 90deg = 100grad = 0.25turn ≈ 1.570796326794897rad )\n  * `1turn` 就是1圈\n\n\n\n\n\n\n## 完整的代码\n```HTML\n<css-doodle>\n  :doodle {\n    @grid: 1x10 / 61.8vmin;\n  }\n  @place-cell: center;\n  border-color: hsla(\n    calc(20 * @index()), 70%, 68%, calc(3 / @index() * 0.8)\n  );\n  border-width: calc(@index() * 10px);\n  @size: calc(@index() * 10%);\n  border-style: dashed;\n  border-radius: 50%;\n  --speed: @rand(20s, 40s);\n  --start: @rand(360deg);\n  --direction: calc(var(--start) + @pick(1turn, -1turn));\n  animation: demo var(--speed) cubic-bezier(0,.88,.42,.99)  infinite;\n\n  @keyframes demo {\n    form {\n      transform: rotate(var(--start));\n    }\n    to {\n      transform: rotate(var(--direction));\n    }\n  }\n</css-doodle>\n```","slug":"【css-doodle】css-web-component入门","published":1,"updated":"2019-03-22T13:49:25.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinmm0011awuwbmrr38pw"},{"title":"利用CSS混合模式更改图片颜色","date":"2019-03-16T10:34:26.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\nCSS3 新增了一个很有意思的属性 `mix-blend-mode` ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。\n\n混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。\n\n\n\n开始动手吧 ~\n\n## 尝试修改图片物体颜色\n\n首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）\n```HTML\n<body>\n  <input type=\"color\" />\n  <img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553336864&di=2f41edc8eedbf09fb1d106545acaed5f&imgtype=jpg&er=1&src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\" alt=\"\">\n</body>\n```\n\n然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式`mix-blend-mode: hue;` \n> 因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效\n\n\n```CSS\n<style>\nhtml,body, input, img {\n  width: 100%;\n  height: 100%;\n}\ninput{ \n  position: absolute;\n  top: 0;\n  left: 0;\n  mix-blend-mode: hue;\n}\n</style>\n```\n\n\n### 过程记录\n原图:\n![原图](http://img.nixiaolei.com/2019-03-16-18-43-09.png)\n\n添加上了混合模式(变灰是因为color选择器默认是黑色):\n![添加上了混合模式](http://img.nixiaolei.com/2019-03-16-18-44-01.png)\n\n切换颜色中:\n![切换颜色中](http://img.nixiaolei.com/2019-03-16-18-45-53.png)\n\n切换后: \n\n![切换后](http://img.nixiaolei.com/2019-03-16-18-46-30.png)\n\n虽然有点丑但我们成功了~\n\n\n## 更多可能性\n\n利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错\n\n\n## 参考文献\n> https://www.cnblogs.com/coco1s/p/6829372.html","source":"_posts/利用CSS混合模式更改图片颜色.md","raw":"---\ntitle: 利用CSS混合模式更改图片颜色\ndate: 2019-03-16 18:34:26\ncategories: CSS\ntags: [css]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\nCSS3 新增了一个很有意思的属性 `mix-blend-mode` ，其中 mix 和 blend 的中文意译均为混合，那么这个属性的作用直译过来就是混合混合模式，当然，我们我们通常称之为混合模式。\n\n混合模式最常见于 photoshop 中，是 PS 中十分强大的功能之一。当然，瞎用乱用混合模式谁都会，利用混合模式将多个图层混合得到一个新的效果，只是要用到恰到好处，或者说在 CSS 中利用混合模式制作出一些效果则需要对混合模式很深的理解及不断的尝试。\n\n\n\n开始动手吧 ~\n\n## 尝试修改图片物体颜色\n\n首先我们创建一个Input框和一个 Img标签（其实这里我选择的图片不是很好）\n```HTML\n<body>\n  <input type=\"color\" />\n  <img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553336864&di=2f41edc8eedbf09fb1d106545acaed5f&imgtype=jpg&er=1&src=http%3A%2F%2Fpic44.nipic.com%2F20140723%2F19276212_171901262000_2.jpg\" alt=\"\">\n</body>\n```\n\n然后我们将图片撑满屏幕， 将Input也撑满屏幕， 将input覆盖至图片之上， 然后为input 添加上混合模式`mix-blend-mode: hue;` \n> 因为input框自带颜色， 所以当用户切换颜色时也就能不依靠JS 即时生效\n\n\n```CSS\n<style>\nhtml,body, input, img {\n  width: 100%;\n  height: 100%;\n}\ninput{ \n  position: absolute;\n  top: 0;\n  left: 0;\n  mix-blend-mode: hue;\n}\n</style>\n```\n\n\n### 过程记录\n原图:\n![原图](http://img.nixiaolei.com/2019-03-16-18-43-09.png)\n\n添加上了混合模式(变灰是因为color选择器默认是黑色):\n![添加上了混合模式](http://img.nixiaolei.com/2019-03-16-18-44-01.png)\n\n切换颜色中:\n![切换颜色中](http://img.nixiaolei.com/2019-03-16-18-45-53.png)\n\n切换后: \n\n![切换后](http://img.nixiaolei.com/2019-03-16-18-46-30.png)\n\n虽然有点丑但我们成功了~\n\n\n## 更多可能性\n\n利用整个混合模式的特性， 我们还能做出更多的东西， 比如利用三原色实现彩色loading、 万花筒等等炫酷动画， 可以看看参考文献中的例子， 非常的不错\n\n\n## 参考文献\n> https://www.cnblogs.com/coco1s/p/6829372.html","slug":"利用CSS混合模式更改图片颜色","published":1,"updated":"2019-03-22T13:49:14.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinmo0016awuwmxhzwhi4"},{"title":"如何在伪元素中使用Iconfont","date":"2019-03-24T06:45:47.000Z","_content":"\n\n## 把iconfont 中的样式拷到 伪元素上\n```CSS\n.iconfont{\n  font-family:\"iconfont\" !important;\n  font-size:16px;font-style:normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n## 砍掉unicode 前面的字符\n\n## 如下 即可\n```CSS\n&::after{\n  content: '\\e60e';\n\n  font-family:\"iconfont\" !important;\n  font-size:16px;font-style:normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/如何在伪元素中使用Iconfont.md","raw":"---\ntitle: 如何在伪元素中使用Iconfont\ndate: 2019-03-24 14:45:47\ncategories: CSS\ntags: [css]\n---\n\n\n## 把iconfont 中的样式拷到 伪元素上\n```CSS\n.iconfont{\n  font-family:\"iconfont\" !important;\n  font-size:16px;font-style:normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n## 砍掉unicode 前面的字符\n\n## 如下 即可\n```CSS\n&::after{\n  content: '\\e60e';\n\n  font-family:\"iconfont\" !important;\n  font-size:16px;font-style:normal;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-stroke-width: 0.2px;\n  -moz-osx-font-smoothing: grayscale;\n}\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"如何在伪元素中使用Iconfont","published":1,"updated":"2019-03-24T06:46:39.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinmq0018awuwo7m9x7h3"},{"title":"工具目录","date":"2019-03-17T06:59:02.000Z","_content":"\n这里存放各种可能用到的用不到的东西， 真用到时方便查找😄\n\n当然平日里经常用到的， 耳熟能详的， 我就不放进来了， 主要是起个备忘录的作用\n\n\n***\n## CSS\n### 兼容查询\n* https://caniuse.com/ \n* https://cssdb.org/\n\n### 动画\n* 贝塞尔: http://cubic-bezier.com/#.17,.67,.83,.67\n\n\n## 可生成matrix的网站\n名称 | 网址\n---|---\nmatrix3d | http://ds-overdesign.com/transform/matrix3d.html\nCSS-Matrix3d | https://github.com/Zhangdroid/CSS-Matrix3d\nmatrix | http://meyerweb.com/eric/tools/matrix/\ntools  | http://www.f2e.name/case/css3/tools.html\n\n\n### 高逼格\n* web component CSS: https://css-doodle.com/\n\n### PostCss 值得收藏的插件\n功能 | 插件名 \n---|---\n运行时变量 | POSTCSS-CUSTOM-PROPERTIES \n与SCSS一致的变量实现 | POSTCSS-SIMPLE-VARS  \n实现类似SASS的@MIXIN的功能 | POSTCSS-MIXINS \n实现类似SASS的继承功能 | POSTCSS-EXTEND   \n实现类似SASS的IMPORT | POSTCSS-IMPORT \n面向未来 | CSSNext  \n修复过去（兼容IE，zomm、一像素留白等） | CSS Grace \n\n\n\n***\n\n## Node\n### 框架\n功能 | 插件名 | 周边生态\n---|---\n帮助实现DI的库 | Awilix |  awilix-koa\n实现控制反转&构造注入的框架 | InversifyJS |  inversify-koa-utils\n\n***\n\n## webpack4\n\n### 功能性能类\n\n功能 | 插件名\n---|---\n自动插入html及静态文件 | HtmlWebpackPlugin【配置自动注入loading（监测资源）】\n抽离css文件  | MiniCssExtractPlugin\n清空指定目录 | CleanWebpackPlugin\njs 深度 tree sharking 基于ES6模块 | webpack-deep-scope-plugin \ncss tree sharking   | PurifyCSSPlugin\n多核打包件 [需要babel]  |  uglifyjs-webpack-plugin[官方], happypack\n前端缓存负载【自动生成缓存文件】 |  Webpack Manifest Plugin\njs 压缩 以及 es压缩 多核压缩 | webpack-parallel-uglify-plugin, happypack\nhint css 多核压缩css | css-nano, optimize-css-assets-webpack-plugin \njs 转 ast静态语法分析树 | acorn , acorn-walk\n能对html进行hint 以及 fix 的插件 | html-minifier, html-minifier-lint\n搬运静态文件 | copy-webpack-plugin |\n\n\n\n### 优化体验类\n功能 | 插件名\n---|---\n监测 webpack 打包速度  | speed-measure-webpack-plugin\n打包成功通知  | webpack-build-notifier\n显示打包进度 | progress-bar-webpack-plugin\n信息面板优化 | webpack-dashboard[需要配置Pagejson]， webpack-jarvis[网页中浏览]\n修改cmd 标题 | node-bash-title[ github ][cmder 无效]\n\n### loader\n功能 | 插件名\n---|---\n缓存Loader结果 | cache-loader\n\n\n\n\n\n\n\n\n\n\n\n***\n\n## TypeScript\n\n### 运行工具\n功能 | 插件名 | 周边生态\n---|---\n在node中不用编译就运行 | ts-node |  ts-node-dev 热重启\n\n\n\n***\n\n\n## Linux\n### vim\n* 快速学习vim的网站: https://vim-adventures.com/\n\n***\n\n## 算法\n### 学习帮助\n* 算法过程可视化: https://algorithm-visualizer.org/branch-and-bound/binary-search\n\n","source":"_posts/工具目录.md","raw":"---\ntitle: 工具目录\ndate: 2019-03-17 14:59:02\ncategories: 目录\ntags: [目录]\n---\n\n这里存放各种可能用到的用不到的东西， 真用到时方便查找😄\n\n当然平日里经常用到的， 耳熟能详的， 我就不放进来了， 主要是起个备忘录的作用\n\n\n***\n## CSS\n### 兼容查询\n* https://caniuse.com/ \n* https://cssdb.org/\n\n### 动画\n* 贝塞尔: http://cubic-bezier.com/#.17,.67,.83,.67\n\n\n## 可生成matrix的网站\n名称 | 网址\n---|---\nmatrix3d | http://ds-overdesign.com/transform/matrix3d.html\nCSS-Matrix3d | https://github.com/Zhangdroid/CSS-Matrix3d\nmatrix | http://meyerweb.com/eric/tools/matrix/\ntools  | http://www.f2e.name/case/css3/tools.html\n\n\n### 高逼格\n* web component CSS: https://css-doodle.com/\n\n### PostCss 值得收藏的插件\n功能 | 插件名 \n---|---\n运行时变量 | POSTCSS-CUSTOM-PROPERTIES \n与SCSS一致的变量实现 | POSTCSS-SIMPLE-VARS  \n实现类似SASS的@MIXIN的功能 | POSTCSS-MIXINS \n实现类似SASS的继承功能 | POSTCSS-EXTEND   \n实现类似SASS的IMPORT | POSTCSS-IMPORT \n面向未来 | CSSNext  \n修复过去（兼容IE，zomm、一像素留白等） | CSS Grace \n\n\n\n***\n\n## Node\n### 框架\n功能 | 插件名 | 周边生态\n---|---\n帮助实现DI的库 | Awilix |  awilix-koa\n实现控制反转&构造注入的框架 | InversifyJS |  inversify-koa-utils\n\n***\n\n## webpack4\n\n### 功能性能类\n\n功能 | 插件名\n---|---\n自动插入html及静态文件 | HtmlWebpackPlugin【配置自动注入loading（监测资源）】\n抽离css文件  | MiniCssExtractPlugin\n清空指定目录 | CleanWebpackPlugin\njs 深度 tree sharking 基于ES6模块 | webpack-deep-scope-plugin \ncss tree sharking   | PurifyCSSPlugin\n多核打包件 [需要babel]  |  uglifyjs-webpack-plugin[官方], happypack\n前端缓存负载【自动生成缓存文件】 |  Webpack Manifest Plugin\njs 压缩 以及 es压缩 多核压缩 | webpack-parallel-uglify-plugin, happypack\nhint css 多核压缩css | css-nano, optimize-css-assets-webpack-plugin \njs 转 ast静态语法分析树 | acorn , acorn-walk\n能对html进行hint 以及 fix 的插件 | html-minifier, html-minifier-lint\n搬运静态文件 | copy-webpack-plugin |\n\n\n\n### 优化体验类\n功能 | 插件名\n---|---\n监测 webpack 打包速度  | speed-measure-webpack-plugin\n打包成功通知  | webpack-build-notifier\n显示打包进度 | progress-bar-webpack-plugin\n信息面板优化 | webpack-dashboard[需要配置Pagejson]， webpack-jarvis[网页中浏览]\n修改cmd 标题 | node-bash-title[ github ][cmder 无效]\n\n### loader\n功能 | 插件名\n---|---\n缓存Loader结果 | cache-loader\n\n\n\n\n\n\n\n\n\n\n\n***\n\n## TypeScript\n\n### 运行工具\n功能 | 插件名 | 周边生态\n---|---\n在node中不用编译就运行 | ts-node |  ts-node-dev 热重启\n\n\n\n***\n\n\n## Linux\n### vim\n* 快速学习vim的网站: https://vim-adventures.com/\n\n***\n\n## 算法\n### 学习帮助\n* 算法过程可视化: https://algorithm-visualizer.org/branch-and-bound/binary-search\n\n","slug":"工具目录","published":1,"updated":"2019-03-28T11:58:35.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinms001bawuwvz0myoy3"},{"title":"手摸手AngularJs入门教程","date":"2019-03-16T04:00:36.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\nAngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。\n\n这里我们用AngularJs7的练手吧\n\n## 起步\n> 请确保电脑已安装了`Node.js`\n\n首先是全局安装脚手架\n```shell\nnpm install -g @angular/cli\n```\n安装好后查看一下版本\n> ng --version\n\n![查看版本](http://img.nixiaolei.com/2019-03-17-15-54-41.png)\n\n\n确认`ng`命令存在后就可以开始创建我们的第一个 Angular 项目了\n```shell\n# 创建项目  project 替换为你的项目名称\nng new project\n```\n\n当你输入命令后他会问你需要的配置，  \n\n这里附上我的选择， 大家可以参照\n\n1. 你是否需要添加路由？ ---- yes\n2. 选择你喜欢的css 风格 ---- SCSS\n\n![选择配置](http://img.nixiaolei.com/2019-03-17-15-36-01.png)\n\n\n选择好后， 就会进入漫长的安装了\n![安装中](http://img.nixiaolei.com/2019-03-17-15-39-53.png)\n\n安装好后， cd 进入到项目所在的目录， 运行 `ng serve` 命令， 并打开`http://localhost:4200/` 查看我们第一个 `Angular`项目\n```shell\n# 进入你的项目目录\ncd project\n\n# 启动项目\nng serve\n\n# 如果你需要 可以生产环境运行\nng serve --prod --aot \n```\n\n## 基本的路由配置\n> 如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能\n因为之前我们在构建项目时就选择了加入`路由`， 因此也省去了很多配置过程， \n\n现在，我们来看看怎么用吧， \n\n首先想使用路由， 得需要再创建一个\"页面\"（这里指组件）， 这样才能通过切换看出是否实现了路由， \n\n**那如何创建一个组件呢？**\n\nAngular 给我们提供了非常多的创建命令， 组件也可以一键的生成\n\n我们来创建一个 `Demo` 组件\n> ng g c Demo\n\n等待片刻， 安装好后\n\n我们发现项目文件中的 `app` 目录下多了一个文件夹\n![Demo组件创建](http://img.nixiaolei.com/2019-03-17-17-01-55.png)\n\n里面有配套的\n* 模板文件\n* 样式文件\n* 测试文件\n* ts 脚本文件\n\n\n既然有了组件， 那我们现在需要为这个路由分配相应的访问路径\n\n进入 `app/app-routing.module.ts` 这个文件\n\n我们首先导入刚刚创建的`Demo`组件， 再 `routes`数组中，分配一个用于访问的`path`, 并和导入的`DemoComponent`关联上\n\n如下:\n\n```JavaScript\n// ------------新增区域------------\nimport { DemoComponent } from './demo/demo.component';\n// ------------新增区域------------\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  // -----------新增区域-------------\n  {\n    path: \"demo\",\n    component: DemoComponent\n  }\n  // ------------新增区域------------\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n\n然后进入 `app/app.component.html` 文件中找到 `<router-outlet></router-outlet>`\n\n刚才配置的路由就会显示在这个标签所在的位置，\n为了减少一点干扰，我们把没有用的信息删除\n\n!component19html\n切换后](http://img.nixiaolei.com/2019-03--17-17-27-25.png app.我只留了一张图片,\n\n然后我们进入 `app/demo/demo.component.html` 文件中\n\n原本是\n```HTML\n<p>\n  demo works!\n</p>\n```\n\n我们改成明显一点的内容\n> 千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息\n\n```HTML\n<div>\n  <h1>我是Demo 页面</h1>\n</div>\n```\n\n我们看看是否配置成功了\n\n\n首先，刚进入， 只有一张图片\n\n![根路由](http://img.nixiaolei.com/2019-03-17-17-34-37.png)\n\n\n让我们切换至`/demo`\n\n我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 `app/app.component.html` 中所做的配置一样\n\n![切换至demo](http://img.nixiaolei.com/2019-03-17-17-35-14.png)\n\n\n\n--------------------待完善-------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 常用的命令\n> 把 XXX 替换成你要的名字\n\n* ng g cl xxx // 创建一个新类\n* ng g c xxx // 创建一个新组件\n* ng g d xxx // 创建一个新指令\n* ng g e xxx // 创建一个新枚举\n* ng g m xxx // 创建一个新模块\n* ng g p xxx // 创建一个新管道\n* ng g s xxx // 创建一个新的指服务\n\n\n \n## 参考文献\n> https://github.com/angular/angular-cli/wiki\n\n","source":"_posts/手摸手AngularJs入门教程.md","raw":"---\ntitle: 手摸手AngularJs入门教程\ndate: 2019-03-16 12:00:36\ncategories: JavaScript\ntags: [Angular]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\nAngularJs 是一款来自Google 的前端JavaScript框架， 也是SPA框架。 AngularJs框架的体积非常小， 但是设计理念和功能却非常强大， 极大地简化前端开发的负担， 它快速成为了JavaScript的主流框架， 帮助开发者从事web开发。\n\n这里我们用AngularJs7的练手吧\n\n## 起步\n> 请确保电脑已安装了`Node.js`\n\n首先是全局安装脚手架\n```shell\nnpm install -g @angular/cli\n```\n安装好后查看一下版本\n> ng --version\n\n![查看版本](http://img.nixiaolei.com/2019-03-17-15-54-41.png)\n\n\n确认`ng`命令存在后就可以开始创建我们的第一个 Angular 项目了\n```shell\n# 创建项目  project 替换为你的项目名称\nng new project\n```\n\n当你输入命令后他会问你需要的配置，  \n\n这里附上我的选择， 大家可以参照\n\n1. 你是否需要添加路由？ ---- yes\n2. 选择你喜欢的css 风格 ---- SCSS\n\n![选择配置](http://img.nixiaolei.com/2019-03-17-15-36-01.png)\n\n\n选择好后， 就会进入漫长的安装了\n![安装中](http://img.nixiaolei.com/2019-03-17-15-39-53.png)\n\n安装好后， cd 进入到项目所在的目录， 运行 `ng serve` 命令， 并打开`http://localhost:4200/` 查看我们第一个 `Angular`项目\n```shell\n# 进入你的项目目录\ncd project\n\n# 启动项目\nng serve\n\n# 如果你需要 可以生产环境运行\nng serve --prod --aot \n```\n\n## 基本的路由配置\n> 如果你不知道路由是什么， 你只需要先理解路由帮助我们实现切换页面的功能\n因为之前我们在构建项目时就选择了加入`路由`， 因此也省去了很多配置过程， \n\n现在，我们来看看怎么用吧， \n\n首先想使用路由， 得需要再创建一个\"页面\"（这里指组件）， 这样才能通过切换看出是否实现了路由， \n\n**那如何创建一个组件呢？**\n\nAngular 给我们提供了非常多的创建命令， 组件也可以一键的生成\n\n我们来创建一个 `Demo` 组件\n> ng g c Demo\n\n等待片刻， 安装好后\n\n我们发现项目文件中的 `app` 目录下多了一个文件夹\n![Demo组件创建](http://img.nixiaolei.com/2019-03-17-17-01-55.png)\n\n里面有配套的\n* 模板文件\n* 样式文件\n* 测试文件\n* ts 脚本文件\n\n\n既然有了组件， 那我们现在需要为这个路由分配相应的访问路径\n\n进入 `app/app-routing.module.ts` 这个文件\n\n我们首先导入刚刚创建的`Demo`组件， 再 `routes`数组中，分配一个用于访问的`path`, 并和导入的`DemoComponent`关联上\n\n如下:\n\n```JavaScript\n// ------------新增区域------------\nimport { DemoComponent } from './demo/demo.component';\n// ------------新增区域------------\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  // -----------新增区域-------------\n  {\n    path: \"demo\",\n    component: DemoComponent\n  }\n  // ------------新增区域------------\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n\n然后进入 `app/app.component.html` 文件中找到 `<router-outlet></router-outlet>`\n\n刚才配置的路由就会显示在这个标签所在的位置，\n为了减少一点干扰，我们把没有用的信息删除\n\n!component19html\n切换后](http://img.nixiaolei.com/2019-03--17-17-27-25.png app.我只留了一张图片,\n\n然后我们进入 `app/demo/demo.component.html` 文件中\n\n原本是\n```HTML\n<p>\n  demo works!\n</p>\n```\n\n我们改成明显一点的内容\n> 千万注意dom结构别错了， dom结构错误会造成白屏，坑的是没有错误信息\n\n```HTML\n<div>\n  <h1>我是Demo 页面</h1>\n</div>\n```\n\n我们看看是否配置成功了\n\n\n首先，刚进入， 只有一张图片\n\n![根路由](http://img.nixiaolei.com/2019-03-17-17-34-37.png)\n\n\n让我们切换至`/demo`\n\n我们可以看到， 刚刚为demo组件编写的文字成功显示出来了， 并且是位于图片下方， 这跟我们之前 `app/app.component.html` 中所做的配置一样\n\n![切换至demo](http://img.nixiaolei.com/2019-03-17-17-35-14.png)\n\n\n\n--------------------待完善-------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 常用的命令\n> 把 XXX 替换成你要的名字\n\n* ng g cl xxx // 创建一个新类\n* ng g c xxx // 创建一个新组件\n* ng g d xxx // 创建一个新指令\n* ng g e xxx // 创建一个新枚举\n* ng g m xxx // 创建一个新模块\n* ng g p xxx // 创建一个新管道\n* ng g s xxx // 创建一个新的指服务\n\n\n \n## 参考文献\n> https://github.com/angular/angular-cli/wiki\n\n","slug":"手摸手AngularJs入门教程","published":1,"updated":"2019-03-20T14:55:14.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinmu001gawuwa47qn97a"},{"title":"面向对象设计原则之IOC控制反转","date":"2019-03-24T05:39:45.000Z","_content":"\n\n# IOC （控制反转）\n> Inversion of Control\n\nIoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。\n\n\n## 什么是控制反转\n\n控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。\n\n\n> DI是IOC的一种表现形式\n\n\n\n## 两种方式\n\n### 依赖查找\n容器提供回调接口和上下文条件给组件。\n\n### 依赖注入\n组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。\n\n\n\n\n## IOC概念图\n\n在未使用IOC的时候 各个 `Object` 之间的耦合度很高， 谁也离不开谁\n\n在使用 IOC 后， 各个 `Object` 之间通过 `IOC容器` 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度\n\n![IOC概念图](http://img.nixiaolei.com/2019-03-24-13-49-37.png)\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/面向对象设计原则之IOC控制反转.md","raw":"---\ntitle: 面向对象设计原则之IOC控制反转\ndate: 2019-03-24 13:39:45\ncategories: [编程思想]\ntags: [oop, IOC, 编程原则]\n---\n\n\n# IOC （控制反转）\n> Inversion of Control\n\nIoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚。\n\n\n## 什么是控制反转\n\n控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注⼊到对象中。\n\n\n> DI是IOC的一种表现形式\n\n\n\n## 两种方式\n\n### 依赖查找\n容器提供回调接口和上下文条件给组件。\n\n### 依赖注入\n组件不做定位查询， 需提供普通的方法让容器去决定依赖关系。\n\n\n\n\n## IOC概念图\n\n在未使用IOC的时候 各个 `Object` 之间的耦合度很高， 谁也离不开谁\n\n在使用 IOC 后， 各个 `Object` 之间通过 `IOC容器` 整个第三方角色来调度， 变成了可任意组装的模式， 谁需要的时候注入谁，  降低了耦合度\n\n![IOC概念图](http://img.nixiaolei.com/2019-03-24-13-49-37.png)\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"面向对象设计原则之IOC控制反转","published":1,"updated":"2019-03-24T05:57:42.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinmx001jawuwmjp0kytn"},{"title":"JavaScript事件机制","date":"2019-03-26T15:20:40.000Z","_content":"\n\n首先我们都知道JavaScript是单线程的， 当然现在浏览器中 HTML5 为我们提供了`Web-Worker`, 但JavaScript本质上还是一门单线程的语言，\n\n这也是为了保持JavaScript 的简单易学，并且这也和DOM有关，因为如果 JavaScript 是多线程的， 一个县城增加了 DOM，一个删除了DOM， 那该听哪个线程的\n\n所以JavaScript 放弃了多线程\n\n\n\n\n\n\n## 事件机制\n\n单线程当遇到比较费事的操作带来的后果就是浏览器卡死， 那怎么办？\n为了应对这些问题， JavaScript将事件分为了\n\n* 同步任务\n* 异步任务\n\n\n\n所有的事件任务都被加入到栈内,  栈的特点是先入后出， 如下图\n\n![js事件执行栈](http://img.nixiaolei.com/js-stack.gif)\n\n看图中， 最开始调用的函数被压在了最下面， 直到最后才出栈\n\n当我们递归书写不规范时， 就会撑爆函数的执行栈， 也就是`爆栈`\n\n\n\n\n\n## 微任务与宏任务的区别\n\n我们可以把事件处理机制想象成银行柜台的柜员， 柜员每次只能处理接待一个客户， 就和JS一样是单线程的， 每一次的事件循环就是一个来办理业务的客户， 这个客户就是宏任务， \n\n当前的客户结束之后， 柜员叫号，继续接待下一个客户， 也就是开始下一个宏任务\n\n能进入任务队列的都是已完成的异步操作， 当你注册了异步事件，但还未完成， 就好比你取了排队的票子， 但是人离开了，有可能先去吃饭，有可能先去逛街， 于是当轮到你的号码时， 银行柜员会先跳过你， 当你回来时， 你依旧需要重新排队\n\n在宏任务期间， 可以追加微任务的， 或者说微任务是可以插队的，  就像在柜台办理业务中， 一位大爷在办完自己的本来的业务后，  柜员通常都会问还有什么需要办理的业务， 这时老大爷想了一下：“最近P2P爆雷有点儿多，是不是要选择稳一些的理财呢”，然后告诉柜员说，要办一些理财的业务，这时候柜员肯定不能告诉老大爷说：“您再上后边取个号去，重新排队”。 \n\n所以本来快轮到你来办理业务，会因为老大爷临时添加的“理财业务”而往后推。 \n也许老大爷在办完理财以后还想 再办一个信用卡？或者 再买点儿纪念币？ \n无论是什么需求，只要是柜员能够帮她办理的，都会在处理你的业务之前来做这些事情，这些都可以认为是微任务。\n\n所以\n**在当前的微任务没有执行完成时，是不会执行下一个宏任务的**\n\n\n\n### 优先级\n\n不管是微任务还是宏任务， 都是异步任务， 当他们的事件处理完成后， 最终都是要归回到同步事件队列处理的， 也就是主进程， \n\n\n既然是主进程，主进程又要负责浏览器的渲染， 那这三者之间的优先级是什么呢\n\n\n因为微任务实际上是宏任务的其中一个步骤， 也就是下一次的宏任务到来之前必然得先执行完当前的宏任务的微任务, 所以可以这么看:\n> 浏览器渲染 > 微任务 > 宏任务\n\n微任务会插队， 插入每一次的执行栈末尾， 宏任务比较可怜， 只要存在微任务，就会被插队，顺序就会往后\n\n\n***\n\n看下图， 我们可以理解微任务和微任务分别维护着一个队列， 微任务的箭头指向靠前， 表示微任务会优先于宏任务加入事件队列，  宏任务会延迟加入\n\n理论上UI渲染的优先级是比较高的， 但实际上如果你的微任务或宏任务之内， 出现了死循环或大量计算的情况， UI渲染就会被阻塞住， 无法进行，也就是页面卡死状态， 毕竟js单线程\n\n\n![事件关系](http://img.nixiaolei.com/2019-03-29-22-31-43.png)\n\n\n\n\n## EventLoop\n\n每办理完一个业务，柜员就会问当前的客户，是否还有其他需要办理的业务。_（检查还有没有微任务需要处理）_ \n而客户明确告知说没有事情以后，柜员就去查看后边还有没有等着办理业务的人。_（结束本次宏任务、检查还有没有宏任务需要处理）_ \n这个检查的过程是持续进行的，每完成一个任务都会进行一次，而这样的操作就被称为Event Loop。_(这是个非常简易的描述了，实际上会复杂很多)_\n\n而且就如同上边所说的，一个柜员同一时间只能处理一件事情，即便这些事情是一个客户所提出的，所以可以认为微任务也存在一个队列，大致是这样的一个逻辑：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 宏任务例子\n| API        | 浏览器    |  Node  |\n| --------   | :-----:   | :----: |\n| I/O      | ✅     |  ✅  |\n| setTimeout        | ✅     |   ✅    |\n| setInterval        | ✅      |  ✅  |\n| setImmediate        |❌     |  ✅    |\n| requestAnimationFrame        | ✅     |  ❌  |\n\n\nI/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。\n\n\n有些地方会列出来UI Rendering，说这个也是宏任务，可是在读了[HTML规范文档](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model)以后，发现这很显然是和微任务平行的一个操作步骤 \n\n\n\nrequestAnimationFrame姑且也算是宏任务吧，requestAnimationFrame在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)的定义为，下次页面重绘前所执行的操作，而重绘也是作为宏任务的一个步骤来存在的，且该步骤晚于微任务的执行\n\n\n\n\n### 微任务例子\n| API        | 浏览器    |  Node  |\n| --------   | :-----:   | :----: |\n| process.nextTick      | ❌     |  ✅  |\n| MutationObserver        | ✅     |  ❌   |\n| Promise.then catch finally       | ✅      |  ✅  |\n\n\n\n\n## 浏览器中的情况\n\n在上边简单的说明了两种任务的差别，以及Event Loop的作用，那么在真实的浏览器中是什么表现呢？ \n首先要明确的一点是，宏任务必然是在微任务之后才执行的（因为微任务实际上是宏任务的其中一个步骤）\n\nI/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。\n\n假设有这样的一些DOM结构：\n```HTML\n<style>\n  #outer {\n    padding: 20px;\n    background: #616161;\n  }\n\n  #inner {\n    width: 100px;\n    height: 100px;\n    background: #757575;\n  }\n</style>\n<div id=\"outer\">\n  <div id=\"inner\"></div>\n</div>\n```\n\n```JavaScript\nconst $inner = document.querySelector('#inner')\nconst $outer = document.querySelector('#outer')\n\nfunction handler () {\n  console.log('click') // 直接输出\n\n  Promise.resolve().then(_ => console.log('promise')) // 注册微任务\n\n  setTimeout(_ => console.log('timeout')) // 注册宏任务\n\n  requestAnimationFrame(_ => console.log('animationFrame')) // 注册宏任务\n\n  $outer.setAttribute('data-random', Math.random()) // DOM属性修改，触发微任务\n}\n\nnew MutationObserver(_ => {\n  console.log('observer')\n}).observe($outer, {\n  attributes: true\n})\n\n$inner.addEventListener('click', handler)\n$outer.addEventListener('click', handler)\n\n```\n\n如果点击#inner，其执行顺序一定是：click -> promise -> observer -> click -> promise -> observer -> animationFrame -> animationFrame -> timeout -> timeout。\n\n因为一次I/O创建了一个宏任务，也就是说在这次任务中会去触发handler。 \n按照代码中的注释，在同步的代码已经执行完以后，这时就会去查看是否有微任务可以执行，然后发现了Promise和MutationObserver两个微任务，遂执行之。 \n因为click事件会冒泡，所以对应的这次I/O会触发两次handler函数(_一次在inner、一次在outer_)，所以会优先执行冒泡的事件(_早于其他的宏任务_)，也就是说会重复上述的逻辑。 \n在执行完同步代码与微任务以后，这时继续向后查找有木有宏任务。 \n需要注意的一点是，因为我们触发了setAttribute，实际上修改了DOM的属性，这会导致页面的重绘，而这个set的操作是同步执行的，也就是说requestAnimationFrame的回调会早于setTimeout所执行。\n\n\n## Node Js中的情况\nNode也是单线程，但是在处理Event Loop上与浏览器稍微有些不同，这里是[Node官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained)的地址。\n\n\n就单从API层面上来理解，Node新增了两个方法可以用来使用：微任务的process.nextTick以及宏任务的setImmediate。\n\n\n### 几个特殊的API\n1. SetTimeout和SetInterval 线程池不参与\n2. process.nextTick() 实现类似SetTimeout(function(){},0);每次调用放入队列中，在下一轮循环中取出。\n3. setImmediate();比process.nextTick()优先级低\n\n\n来看看这段代码\n\n```JavaScript\nsetTimeout(() => {\n  console.log(1)\n}, 0)\n\nsetImmediate(() => {\n  console.log(2)\n})\n\nprocess.nextTick(() => {\n  console.log(3)\n})\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(4)\n}).then(() => {\n  console.log(5)\n})\n\nconsole.log(6)\n```\n\n这道题目的答案是 463512\n\n这里有几个注意点， 第一就是 nextTick ，它的优先级比 promise.then 要高， 如下图， 它加入队列的方式属于插队行为, 它直接加入到了当前执行栈（同步队列）与 下一次的等待执行栈之间\n\n![nextTick](http://img.nixiaolei.com/2019-03-29-22-45-02.png)\n\n\n我们都知道 then 比 setTimeout 优先级高\n\n然后就是 setTimeout 和 setImmediate 的问题了，\n\nsetImmediate与setTimeout的区别，在官方文档中的定义，setImmediate为一次Event Loop执行完毕后调用。 setTimeout则是通过计算一个延迟时间后进行执行。\n\n但是在实际使用中， 当setTimeout 设置为0时， 他们都是放在队列最后,  所以执行顺序就是谁先写就先执行谁了， 但当setTimeout 设置的时间大于0 时（最低延迟会被忽略）， 情况就不一样了， setTmmediate 会先被执行\n\n![setImmediate](http://img.nixiaolei.com/2019-03-29-22-45-25.png)\n\n\n\n\n参考文献(原文写的不错， 所以我大部分是复制，方便之后自己回顾理解)\n* https://segmentfault.com/a/1190000016022069\n\n\n\n\n\n\n\n\n","source":"_posts/JavaScript事件机制.md","raw":"---\ntitle: JavaScript事件机制\ndate: 2019-03-26 23:20:40\ncategories: JavaScript\ntags: JavaScript\n---\n\n\n首先我们都知道JavaScript是单线程的， 当然现在浏览器中 HTML5 为我们提供了`Web-Worker`, 但JavaScript本质上还是一门单线程的语言，\n\n这也是为了保持JavaScript 的简单易学，并且这也和DOM有关，因为如果 JavaScript 是多线程的， 一个县城增加了 DOM，一个删除了DOM， 那该听哪个线程的\n\n所以JavaScript 放弃了多线程\n\n\n\n\n\n\n## 事件机制\n\n单线程当遇到比较费事的操作带来的后果就是浏览器卡死， 那怎么办？\n为了应对这些问题， JavaScript将事件分为了\n\n* 同步任务\n* 异步任务\n\n\n\n所有的事件任务都被加入到栈内,  栈的特点是先入后出， 如下图\n\n![js事件执行栈](http://img.nixiaolei.com/js-stack.gif)\n\n看图中， 最开始调用的函数被压在了最下面， 直到最后才出栈\n\n当我们递归书写不规范时， 就会撑爆函数的执行栈， 也就是`爆栈`\n\n\n\n\n\n## 微任务与宏任务的区别\n\n我们可以把事件处理机制想象成银行柜台的柜员， 柜员每次只能处理接待一个客户， 就和JS一样是单线程的， 每一次的事件循环就是一个来办理业务的客户， 这个客户就是宏任务， \n\n当前的客户结束之后， 柜员叫号，继续接待下一个客户， 也就是开始下一个宏任务\n\n能进入任务队列的都是已完成的异步操作， 当你注册了异步事件，但还未完成， 就好比你取了排队的票子， 但是人离开了，有可能先去吃饭，有可能先去逛街， 于是当轮到你的号码时， 银行柜员会先跳过你， 当你回来时， 你依旧需要重新排队\n\n在宏任务期间， 可以追加微任务的， 或者说微任务是可以插队的，  就像在柜台办理业务中， 一位大爷在办完自己的本来的业务后，  柜员通常都会问还有什么需要办理的业务， 这时老大爷想了一下：“最近P2P爆雷有点儿多，是不是要选择稳一些的理财呢”，然后告诉柜员说，要办一些理财的业务，这时候柜员肯定不能告诉老大爷说：“您再上后边取个号去，重新排队”。 \n\n所以本来快轮到你来办理业务，会因为老大爷临时添加的“理财业务”而往后推。 \n也许老大爷在办完理财以后还想 再办一个信用卡？或者 再买点儿纪念币？ \n无论是什么需求，只要是柜员能够帮她办理的，都会在处理你的业务之前来做这些事情，这些都可以认为是微任务。\n\n所以\n**在当前的微任务没有执行完成时，是不会执行下一个宏任务的**\n\n\n\n### 优先级\n\n不管是微任务还是宏任务， 都是异步任务， 当他们的事件处理完成后， 最终都是要归回到同步事件队列处理的， 也就是主进程， \n\n\n既然是主进程，主进程又要负责浏览器的渲染， 那这三者之间的优先级是什么呢\n\n\n因为微任务实际上是宏任务的其中一个步骤， 也就是下一次的宏任务到来之前必然得先执行完当前的宏任务的微任务, 所以可以这么看:\n> 浏览器渲染 > 微任务 > 宏任务\n\n微任务会插队， 插入每一次的执行栈末尾， 宏任务比较可怜， 只要存在微任务，就会被插队，顺序就会往后\n\n\n***\n\n看下图， 我们可以理解微任务和微任务分别维护着一个队列， 微任务的箭头指向靠前， 表示微任务会优先于宏任务加入事件队列，  宏任务会延迟加入\n\n理论上UI渲染的优先级是比较高的， 但实际上如果你的微任务或宏任务之内， 出现了死循环或大量计算的情况， UI渲染就会被阻塞住， 无法进行，也就是页面卡死状态， 毕竟js单线程\n\n\n![事件关系](http://img.nixiaolei.com/2019-03-29-22-31-43.png)\n\n\n\n\n## EventLoop\n\n每办理完一个业务，柜员就会问当前的客户，是否还有其他需要办理的业务。_（检查还有没有微任务需要处理）_ \n而客户明确告知说没有事情以后，柜员就去查看后边还有没有等着办理业务的人。_（结束本次宏任务、检查还有没有宏任务需要处理）_ \n这个检查的过程是持续进行的，每完成一个任务都会进行一次，而这样的操作就被称为Event Loop。_(这是个非常简易的描述了，实际上会复杂很多)_\n\n而且就如同上边所说的，一个柜员同一时间只能处理一件事情，即便这些事情是一个客户所提出的，所以可以认为微任务也存在一个队列，大致是这样的一个逻辑：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 宏任务例子\n| API        | 浏览器    |  Node  |\n| --------   | :-----:   | :----: |\n| I/O      | ✅     |  ✅  |\n| setTimeout        | ✅     |   ✅    |\n| setInterval        | ✅      |  ✅  |\n| setImmediate        |❌     |  ✅    |\n| requestAnimationFrame        | ✅     |  ❌  |\n\n\nI/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。\n\n\n有些地方会列出来UI Rendering，说这个也是宏任务，可是在读了[HTML规范文档](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model)以后，发现这很显然是和微任务平行的一个操作步骤 \n\n\n\nrequestAnimationFrame姑且也算是宏任务吧，requestAnimationFrame在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)的定义为，下次页面重绘前所执行的操作，而重绘也是作为宏任务的一个步骤来存在的，且该步骤晚于微任务的执行\n\n\n\n\n### 微任务例子\n| API        | 浏览器    |  Node  |\n| --------   | :-----:   | :----: |\n| process.nextTick      | ❌     |  ✅  |\n| MutationObserver        | ✅     |  ❌   |\n| Promise.then catch finally       | ✅      |  ✅  |\n\n\n\n\n## 浏览器中的情况\n\n在上边简单的说明了两种任务的差别，以及Event Loop的作用，那么在真实的浏览器中是什么表现呢？ \n首先要明确的一点是，宏任务必然是在微任务之后才执行的（因为微任务实际上是宏任务的其中一个步骤）\n\nI/O这一项感觉有点儿笼统，有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。\n\n假设有这样的一些DOM结构：\n```HTML\n<style>\n  #outer {\n    padding: 20px;\n    background: #616161;\n  }\n\n  #inner {\n    width: 100px;\n    height: 100px;\n    background: #757575;\n  }\n</style>\n<div id=\"outer\">\n  <div id=\"inner\"></div>\n</div>\n```\n\n```JavaScript\nconst $inner = document.querySelector('#inner')\nconst $outer = document.querySelector('#outer')\n\nfunction handler () {\n  console.log('click') // 直接输出\n\n  Promise.resolve().then(_ => console.log('promise')) // 注册微任务\n\n  setTimeout(_ => console.log('timeout')) // 注册宏任务\n\n  requestAnimationFrame(_ => console.log('animationFrame')) // 注册宏任务\n\n  $outer.setAttribute('data-random', Math.random()) // DOM属性修改，触发微任务\n}\n\nnew MutationObserver(_ => {\n  console.log('observer')\n}).observe($outer, {\n  attributes: true\n})\n\n$inner.addEventListener('click', handler)\n$outer.addEventListener('click', handler)\n\n```\n\n如果点击#inner，其执行顺序一定是：click -> promise -> observer -> click -> promise -> observer -> animationFrame -> animationFrame -> timeout -> timeout。\n\n因为一次I/O创建了一个宏任务，也就是说在这次任务中会去触发handler。 \n按照代码中的注释，在同步的代码已经执行完以后，这时就会去查看是否有微任务可以执行，然后发现了Promise和MutationObserver两个微任务，遂执行之。 \n因为click事件会冒泡，所以对应的这次I/O会触发两次handler函数(_一次在inner、一次在outer_)，所以会优先执行冒泡的事件(_早于其他的宏任务_)，也就是说会重复上述的逻辑。 \n在执行完同步代码与微任务以后，这时继续向后查找有木有宏任务。 \n需要注意的一点是，因为我们触发了setAttribute，实际上修改了DOM的属性，这会导致页面的重绘，而这个set的操作是同步执行的，也就是说requestAnimationFrame的回调会早于setTimeout所执行。\n\n\n## Node Js中的情况\nNode也是单线程，但是在处理Event Loop上与浏览器稍微有些不同，这里是[Node官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained)的地址。\n\n\n就单从API层面上来理解，Node新增了两个方法可以用来使用：微任务的process.nextTick以及宏任务的setImmediate。\n\n\n### 几个特殊的API\n1. SetTimeout和SetInterval 线程池不参与\n2. process.nextTick() 实现类似SetTimeout(function(){},0);每次调用放入队列中，在下一轮循环中取出。\n3. setImmediate();比process.nextTick()优先级低\n\n\n来看看这段代码\n\n```JavaScript\nsetTimeout(() => {\n  console.log(1)\n}, 0)\n\nsetImmediate(() => {\n  console.log(2)\n})\n\nprocess.nextTick(() => {\n  console.log(3)\n})\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(4)\n}).then(() => {\n  console.log(5)\n})\n\nconsole.log(6)\n```\n\n这道题目的答案是 463512\n\n这里有几个注意点， 第一就是 nextTick ，它的优先级比 promise.then 要高， 如下图， 它加入队列的方式属于插队行为, 它直接加入到了当前执行栈（同步队列）与 下一次的等待执行栈之间\n\n![nextTick](http://img.nixiaolei.com/2019-03-29-22-45-02.png)\n\n\n我们都知道 then 比 setTimeout 优先级高\n\n然后就是 setTimeout 和 setImmediate 的问题了，\n\nsetImmediate与setTimeout的区别，在官方文档中的定义，setImmediate为一次Event Loop执行完毕后调用。 setTimeout则是通过计算一个延迟时间后进行执行。\n\n但是在实际使用中， 当setTimeout 设置为0时， 他们都是放在队列最后,  所以执行顺序就是谁先写就先执行谁了， 但当setTimeout 设置的时间大于0 时（最低延迟会被忽略）， 情况就不一样了， setTmmediate 会先被执行\n\n![setImmediate](http://img.nixiaolei.com/2019-03-29-22-45-25.png)\n\n\n\n\n参考文献(原文写的不错， 所以我大部分是复制，方便之后自己回顾理解)\n* https://segmentfault.com/a/1190000016022069\n\n\n\n\n\n\n\n\n","slug":"JavaScript事件机制","published":1,"updated":"2019-03-29T15:02:30.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinuv003bawuwgpdues6u"},{"title":"TypeScript语法","date":"2019-03-24T06:47:50.000Z","_content":"\n\n\n## 初始化配置文件\n> tsc --init      \n> 修改` outDir`\n\n## 定义数组\n> 1\n\n```TypeScript\nvar arr:number[] = [1,2,3,4]\n```\n\n> 2\n\n```TypeScript\nvar arr:Array<number> = [3,4,56,7,8,9]\n```\n> 3\n\n```TypeScript\nvar arr:any[] = [1,'5515', false]\n```\n\n\n## 定义元组\n> 元组表示一个已知元素数量和类型的数组，各元素的类型不必相同。   \n> 1\n\n```TypeScript\nlet arr:[number, string] = [123, 'this is ts']\n```\n\n## 定义枚举\n> 用于处理非数值的数据\n\n```TypeScript\nenum Flag { success=1, error=2 };\nlet s:Flag=Flag.success\n\nconsole.log(s) // 1\n```\n\n## never 类型: \n> never类型表示的是那些永不存在的值的类型, 如null, undefind, error\n\n```TypeScript\nvar a:undefined\na = undefined\n```\n\n## 定义 symbol类型\n> symbol类型的值是通过Symbol构造函数创建的。\n\n```TypeScript\nlet sym1 = Symbol();\n```\n\n\n\n## 容许多个类型\n```TypeScript\nvar num:number | undefined;\n\nnum = 123;\nconsole.log(num)\n```\n\n## 有返回值类型\n> 函数声明\n\n```TypeScript\nfunction run():string {\n  return '32132132'\n}\n```\n\n> 函数表达式\n\n```TypeScript\nvar fun2 = function():number {\n  return 132\n}\n```\n\n\n## 无返回值类型\n```TypeScript\nfunction run():void{\n  console.log('run')\n}\n\n```\n\n\n## 可选参数、 默认参数 、剩余参数\n> 默认必传, 带‘?’可传可不传， 必须配置到参数的最后面\n\n```TypeScript\nfunction getInfo(name:string, age?:number):string {\n  return `${name} ---- ${age}`\n}\n```\n> 默认参数       \n> 写了默认参数就不再需要 '?' 标记\n\n```TypeScript\nfunction getInfo(name:string, age:number=250):string {\n  return `${name} ---- ${age}`\n}\n```\n\n> 剩余参数\n```\n\n```\n\n\n\n## json 属性约束\n```TypeScript\n// json属性约束\nfunction jsonCon(label) {\n    console.log(label.labelJson);\n}\njsonCon({ labelJson: '你好评' });\n\n```\n\n\n## 重载\n> 因为需要遵循js ， 所以无法像java一样实现重载， 实现的只能是变体， 自己判断typeof\n\n```TypeScript\nfunction getInfo(name:string):string;\n\nfunction getInfo(name:string, age:number):string;\n\nfunction getInfo(name:string, age?:any):string {\n  \n  // 判断类型用 typeof\n  if(age) {\n    return `姓名:${name}, 年龄${age}`\n  }else {\n    return `姓名:${name}`\n  }\n}\n\nconsole.log(getInfo('吴大龙'))\n```\n\n## 创建类\n```TypeScript\nclass Person{\n  name:string;  // 属性 ,前面省略了Public 关键词\n\n  constructor(name:string){    // 构造函数  实例化类的时候 触发的方法\n    this.name = name;\n  }\n  getName():string{\n    return this.name\n  }\n  setName(name:string):void{\n    this.name=name;\n  }\n} \nvar aa = new Person('栗色')\n\nconsole.log(aa.getName())\naa.setName('吴大龙')\nconsole.log(aa.getName())\n```\n> 使用类的 get 和 set\n\n```TypeScript\nclass Person{\n  private _name:string;\n  constructor(name:string, age:number){\n    this._name = name;\n  }\n  get name():string{\n    return this._name\n  }\n  set name(name:string){\n    this._name = name;\n  }\n}\nconst p = new Person('吴大龙', 112)\np.name = '吴强' // 赋值\nconsole.log(p.name)  // 取值\n```\n\n\n\n\n## 实现继承\n> 继承自上方类\n\n```TypeScript\nclass Web extends Person {\n  constructor(name:string){\n    super(name);\n  }\n}\n\nvar w=new Web('往');\nconsole.log(w.run())\n```\n## 类修饰符\n> 不加修饰符默认就是 Public  ,  ==外部的意思就是指不被内部函数里被调用, 而是被外部人为调用==    \n> public:  共有,  在类的里面, 子类, 类外部都可以访问\n\n> protected:  保护类型, 在类里面, 子类里面可以访问, 类外部无法访问\n\n> private:   私有, 在类里可以访问, 子类, 类外部都没法访问\n\n## 静态属性和静态方法\n> static  静态方法, 在没有 new 出实例前都可以调用      \n> ==但是没法直接调用类里面的属性==\n\n```TypeScript\nclass Person {\n  public nickname:string= '吴大龙';\n  \n  static speak():void{\n    console.log(`用户姓名:${this.nickname}`)\n  }\n}\n\nPerson.speak()  // 用户姓名:undefined\n```\n\n\n## 多态\n> 父类定义一个方法不去实现, 让继承它的子类去实现, 每一个子类有不同的表现       \n> 也是继承的一种表现, 子类实现或重写父类中的已有的方法， 这叫多态\n\n```TypeScript\n// 多态\nclass Animal {\n  name:string;\n  constructor(name:string){\n    this.name = name;\n  }\n  eat():void{\n    console.log(`${this.name}， 在吃屎`)\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name:string){\n    super(name)\n  }\n  // 子类重新定义 eat方法\n  eat():void {\n    console.log(this.name+'吃肉')\n  }\n}\n\nconst wuxiaohong = new Dog('吴晓红')\nwuxiaohong.eat()\n\n// 子类重新定义 eat方法\nclass Cat extends Animal {\n  constructor(name:string) {\n    super(name)\n  }\n  eat():void{\n    console.log(this.name+ '吃粮食')\n  }\n}\n\nvar cc = new Cat('吴强')\ncc.eat()\n```\n\n## 抽象类\n> 用abstract关键字定义抽象类和抽象方法， 是提供其他类继承的基类    \n> ==抽象方法只能放在抽象类里==      \n> 从抽象类继承的方法必须被子类重写, 重新实现\n\n```TypeScript\nabstract class Animal{\n  public name:string;\n  constructor(name:string){\n    this.name=name;\n  }\n  abstract eat():any;\n}\n\nclass Dog extends Animal{\n\n  constructor(name:any){\n    super(name)\n  }\n  eat(){\n    console.log(this.name + '吃粮食')\n  }\n}\n\nvar d = new Dog('小狗')\nd.eat()\n```\n\n## 接口\n* 也是一种定义标准. 类似抽象类, 抽象类只能规定方法， 接口可以规定属性， 函数， 索引和类\n\n> 批量属性接口， 可定义可选参数\n\n```TypeScript\n// 属性接口\ninterface FullName{\n  firstName: string;   //封号结束\n  secondName: string;\n}\nfunction printName (name: FullName) : void{\n  console.log(name.firstName +'====>' + name.secondName);\n}\nprintName({firstName: '吴', secondName: '大龙'})  // 吴====>大龙\n```\n> 数组类型接口\n```TypeScript\ninterface StringArray {\n  [index:number]:string\n}\nvar myArray:StringArray;\nmyArray = [\"iwen\", \"ime\"]\nalert(myArray[1])\n```\n\n\n\n> 函数类型接口,  对方法传入的参数， 以及返回值进行约束\n\n```TypeScript\n// 比如建一个md5加密的接口 的接口\ninterface encrypt{\n  (key:string, value:string):string;\n}\n\nvar md5:encrypt = function(key:string, value:string):string {\n  return key + value;\n}\nconsole.log(md5('name', '吴大龙'))\n```\n\n\n\n> 接口扩展， 接口可以继承接口\n\n```TypeScript\ninterface Animal{\n  eat():void;\n}\n// 继承上方接口\ninterface Person extends Animal {\n  work():void;\n}\n// 有个类 实现 这个接口\nclass Web implements Person {\n  public name:string;\n  constructor(name:string){\n    this.name=name\n  }\n  eat(){\n    console.log(this.name + '喜欢吃馒头')\n  }\n  work(){\n    console.log(this.name + '写代码')\n  }\n}\n\nvar w = new Web('小林')\nw.work()  // 小林写代码\n```\n> 接口多继承  &&  ==创建一个接口对象==\n```TypeScript\n//  多继承 并 创建一个接口对象\ninterface Shape {\n  color:string;\n}\n\ninterface PenStroke {\n  penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n  sideLength:number;\n}\n\n// 创建接口对象不需要 new  而是这样的语法\nvar s = <Square>{};\ns.color = \"blue\"\ns.penWidth = 10\ns.sideLength = 10\n```\n\n\n\n## 泛型\n* 用于创建可重用的组件， 让一个组件支持多种数据类型\n* ==泛型就是解决类 接口 方法的复用性、 以及对不特定数据类型的支持==\n\n> 基本使用 \n\n```TypeScript\n// 泛型 : 可以支持不特定的数据类型   要求： 传入的参数和返回的参数一致\nfunction getData<T>(value:T):T{    // T表示泛型\n  return value\n}\nconsole.log(getData<string>('我是泛型'))\n```\n> 多个泛型参数\n\n```TypeScript\nclass HelloNumber<T, S>{\n  Ten:T;\n  add:(x:T, y:T) => S;\n}\nvar myHelloNumber = new HelloNumber<number, string>()\nmyHelloNumber.Ten = 10;\nmyHelloNumber.add = function(x, y) {\n  return x+y+''\n}\nconsole.log(myHelloNumber.add(1, 2));\n```\n> lamb 表达式\n\n```TypeScript\nfunction Hello<T>(arg:T):T{\n  return arg;\n}\n// lamb 表达式只是表达具体 参数和返回类型, 需要重新赋值上真函数\nvar myHello:<K>(arg:K)=> K = <K>(arg:K):K => {\n  return arg\n}\nalert(myHello('hello'))\n```\n> 另一种写法， 对象形式\n\n```TypeScript\nfunction Hello<T>(arg:T){\n  return arg\n}\nvar myHello:{<T>(arg:T):T} = Hello;\nalert(myHello(\" Hello\"))\n```\n\n\n\n> 泛型接口\n\n```TypeScript\n// 泛型接口\ninterface ConfigFn{\n  <T>(value:T):T;\n}\nvar getData:ConfigFn = function<T>(value:T):T{\n  return value\n}\nconsole.log( getData<string>('你好') )\n```\n\n\n\n> 泛型小实战 ==需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现==\n\n```TypeScript\n// 泛型类: 比如有个最小堆算法， 需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现\n\nclass MinClass<T>{\n  list:T[]=[]\n  add(value:T):void{\n    this.list.push(value)\n  }\n  min():T{\n    var minNum = this.list[0]\n    for(var i=0;i<this.list.length;i++){\n      if(minNum > this.list[i]){\n        minNum=this.list[i]\n      }\n    }\n    return minNum;\n  }\n}\nvar m1 = new MinClass<string>();\nm1.add('1')\nm1.add('you')\nm1.add('love')\nconsole.log(m1.min())\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/TypeScript语法.md","raw":"---\ntitle: TypeScript语法\ndate: 2019-03-24 14:47:50\ncategories: TypeScript\ntags: [ JavaScript, TypeScript ]\n---\n\n\n\n## 初始化配置文件\n> tsc --init      \n> 修改` outDir`\n\n## 定义数组\n> 1\n\n```TypeScript\nvar arr:number[] = [1,2,3,4]\n```\n\n> 2\n\n```TypeScript\nvar arr:Array<number> = [3,4,56,7,8,9]\n```\n> 3\n\n```TypeScript\nvar arr:any[] = [1,'5515', false]\n```\n\n\n## 定义元组\n> 元组表示一个已知元素数量和类型的数组，各元素的类型不必相同。   \n> 1\n\n```TypeScript\nlet arr:[number, string] = [123, 'this is ts']\n```\n\n## 定义枚举\n> 用于处理非数值的数据\n\n```TypeScript\nenum Flag { success=1, error=2 };\nlet s:Flag=Flag.success\n\nconsole.log(s) // 1\n```\n\n## never 类型: \n> never类型表示的是那些永不存在的值的类型, 如null, undefind, error\n\n```TypeScript\nvar a:undefined\na = undefined\n```\n\n## 定义 symbol类型\n> symbol类型的值是通过Symbol构造函数创建的。\n\n```TypeScript\nlet sym1 = Symbol();\n```\n\n\n\n## 容许多个类型\n```TypeScript\nvar num:number | undefined;\n\nnum = 123;\nconsole.log(num)\n```\n\n## 有返回值类型\n> 函数声明\n\n```TypeScript\nfunction run():string {\n  return '32132132'\n}\n```\n\n> 函数表达式\n\n```TypeScript\nvar fun2 = function():number {\n  return 132\n}\n```\n\n\n## 无返回值类型\n```TypeScript\nfunction run():void{\n  console.log('run')\n}\n\n```\n\n\n## 可选参数、 默认参数 、剩余参数\n> 默认必传, 带‘?’可传可不传， 必须配置到参数的最后面\n\n```TypeScript\nfunction getInfo(name:string, age?:number):string {\n  return `${name} ---- ${age}`\n}\n```\n> 默认参数       \n> 写了默认参数就不再需要 '?' 标记\n\n```TypeScript\nfunction getInfo(name:string, age:number=250):string {\n  return `${name} ---- ${age}`\n}\n```\n\n> 剩余参数\n```\n\n```\n\n\n\n## json 属性约束\n```TypeScript\n// json属性约束\nfunction jsonCon(label) {\n    console.log(label.labelJson);\n}\njsonCon({ labelJson: '你好评' });\n\n```\n\n\n## 重载\n> 因为需要遵循js ， 所以无法像java一样实现重载， 实现的只能是变体， 自己判断typeof\n\n```TypeScript\nfunction getInfo(name:string):string;\n\nfunction getInfo(name:string, age:number):string;\n\nfunction getInfo(name:string, age?:any):string {\n  \n  // 判断类型用 typeof\n  if(age) {\n    return `姓名:${name}, 年龄${age}`\n  }else {\n    return `姓名:${name}`\n  }\n}\n\nconsole.log(getInfo('吴大龙'))\n```\n\n## 创建类\n```TypeScript\nclass Person{\n  name:string;  // 属性 ,前面省略了Public 关键词\n\n  constructor(name:string){    // 构造函数  实例化类的时候 触发的方法\n    this.name = name;\n  }\n  getName():string{\n    return this.name\n  }\n  setName(name:string):void{\n    this.name=name;\n  }\n} \nvar aa = new Person('栗色')\n\nconsole.log(aa.getName())\naa.setName('吴大龙')\nconsole.log(aa.getName())\n```\n> 使用类的 get 和 set\n\n```TypeScript\nclass Person{\n  private _name:string;\n  constructor(name:string, age:number){\n    this._name = name;\n  }\n  get name():string{\n    return this._name\n  }\n  set name(name:string){\n    this._name = name;\n  }\n}\nconst p = new Person('吴大龙', 112)\np.name = '吴强' // 赋值\nconsole.log(p.name)  // 取值\n```\n\n\n\n\n## 实现继承\n> 继承自上方类\n\n```TypeScript\nclass Web extends Person {\n  constructor(name:string){\n    super(name);\n  }\n}\n\nvar w=new Web('往');\nconsole.log(w.run())\n```\n## 类修饰符\n> 不加修饰符默认就是 Public  ,  ==外部的意思就是指不被内部函数里被调用, 而是被外部人为调用==    \n> public:  共有,  在类的里面, 子类, 类外部都可以访问\n\n> protected:  保护类型, 在类里面, 子类里面可以访问, 类外部无法访问\n\n> private:   私有, 在类里可以访问, 子类, 类外部都没法访问\n\n## 静态属性和静态方法\n> static  静态方法, 在没有 new 出实例前都可以调用      \n> ==但是没法直接调用类里面的属性==\n\n```TypeScript\nclass Person {\n  public nickname:string= '吴大龙';\n  \n  static speak():void{\n    console.log(`用户姓名:${this.nickname}`)\n  }\n}\n\nPerson.speak()  // 用户姓名:undefined\n```\n\n\n## 多态\n> 父类定义一个方法不去实现, 让继承它的子类去实现, 每一个子类有不同的表现       \n> 也是继承的一种表现, 子类实现或重写父类中的已有的方法， 这叫多态\n\n```TypeScript\n// 多态\nclass Animal {\n  name:string;\n  constructor(name:string){\n    this.name = name;\n  }\n  eat():void{\n    console.log(`${this.name}， 在吃屎`)\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name:string){\n    super(name)\n  }\n  // 子类重新定义 eat方法\n  eat():void {\n    console.log(this.name+'吃肉')\n  }\n}\n\nconst wuxiaohong = new Dog('吴晓红')\nwuxiaohong.eat()\n\n// 子类重新定义 eat方法\nclass Cat extends Animal {\n  constructor(name:string) {\n    super(name)\n  }\n  eat():void{\n    console.log(this.name+ '吃粮食')\n  }\n}\n\nvar cc = new Cat('吴强')\ncc.eat()\n```\n\n## 抽象类\n> 用abstract关键字定义抽象类和抽象方法， 是提供其他类继承的基类    \n> ==抽象方法只能放在抽象类里==      \n> 从抽象类继承的方法必须被子类重写, 重新实现\n\n```TypeScript\nabstract class Animal{\n  public name:string;\n  constructor(name:string){\n    this.name=name;\n  }\n  abstract eat():any;\n}\n\nclass Dog extends Animal{\n\n  constructor(name:any){\n    super(name)\n  }\n  eat(){\n    console.log(this.name + '吃粮食')\n  }\n}\n\nvar d = new Dog('小狗')\nd.eat()\n```\n\n## 接口\n* 也是一种定义标准. 类似抽象类, 抽象类只能规定方法， 接口可以规定属性， 函数， 索引和类\n\n> 批量属性接口， 可定义可选参数\n\n```TypeScript\n// 属性接口\ninterface FullName{\n  firstName: string;   //封号结束\n  secondName: string;\n}\nfunction printName (name: FullName) : void{\n  console.log(name.firstName +'====>' + name.secondName);\n}\nprintName({firstName: '吴', secondName: '大龙'})  // 吴====>大龙\n```\n> 数组类型接口\n```TypeScript\ninterface StringArray {\n  [index:number]:string\n}\nvar myArray:StringArray;\nmyArray = [\"iwen\", \"ime\"]\nalert(myArray[1])\n```\n\n\n\n> 函数类型接口,  对方法传入的参数， 以及返回值进行约束\n\n```TypeScript\n// 比如建一个md5加密的接口 的接口\ninterface encrypt{\n  (key:string, value:string):string;\n}\n\nvar md5:encrypt = function(key:string, value:string):string {\n  return key + value;\n}\nconsole.log(md5('name', '吴大龙'))\n```\n\n\n\n> 接口扩展， 接口可以继承接口\n\n```TypeScript\ninterface Animal{\n  eat():void;\n}\n// 继承上方接口\ninterface Person extends Animal {\n  work():void;\n}\n// 有个类 实现 这个接口\nclass Web implements Person {\n  public name:string;\n  constructor(name:string){\n    this.name=name\n  }\n  eat(){\n    console.log(this.name + '喜欢吃馒头')\n  }\n  work(){\n    console.log(this.name + '写代码')\n  }\n}\n\nvar w = new Web('小林')\nw.work()  // 小林写代码\n```\n> 接口多继承  &&  ==创建一个接口对象==\n```TypeScript\n//  多继承 并 创建一个接口对象\ninterface Shape {\n  color:string;\n}\n\ninterface PenStroke {\n  penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n  sideLength:number;\n}\n\n// 创建接口对象不需要 new  而是这样的语法\nvar s = <Square>{};\ns.color = \"blue\"\ns.penWidth = 10\ns.sideLength = 10\n```\n\n\n\n## 泛型\n* 用于创建可重用的组件， 让一个组件支持多种数据类型\n* ==泛型就是解决类 接口 方法的复用性、 以及对不特定数据类型的支持==\n\n> 基本使用 \n\n```TypeScript\n// 泛型 : 可以支持不特定的数据类型   要求： 传入的参数和返回的参数一致\nfunction getData<T>(value:T):T{    // T表示泛型\n  return value\n}\nconsole.log(getData<string>('我是泛型'))\n```\n> 多个泛型参数\n\n```TypeScript\nclass HelloNumber<T, S>{\n  Ten:T;\n  add:(x:T, y:T) => S;\n}\nvar myHelloNumber = new HelloNumber<number, string>()\nmyHelloNumber.Ten = 10;\nmyHelloNumber.add = function(x, y) {\n  return x+y+''\n}\nconsole.log(myHelloNumber.add(1, 2));\n```\n> lamb 表达式\n\n```TypeScript\nfunction Hello<T>(arg:T):T{\n  return arg;\n}\n// lamb 表达式只是表达具体 参数和返回类型, 需要重新赋值上真函数\nvar myHello:<K>(arg:K)=> K = <K>(arg:K):K => {\n  return arg\n}\nalert(myHello('hello'))\n```\n> 另一种写法， 对象形式\n\n```TypeScript\nfunction Hello<T>(arg:T){\n  return arg\n}\nvar myHello:{<T>(arg:T):T} = Hello;\nalert(myHello(\" Hello\"))\n```\n\n\n\n> 泛型接口\n\n```TypeScript\n// 泛型接口\ninterface ConfigFn{\n  <T>(value:T):T;\n}\nvar getData:ConfigFn = function<T>(value:T):T{\n  return value\n}\nconsole.log( getData<string>('你好') )\n```\n\n\n\n> 泛型小实战 ==需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现==\n\n```TypeScript\n// 泛型类: 比如有个最小堆算法， 需要同时支持返回数字和字符串两种类型， 通过类的泛型来实现\n\nclass MinClass<T>{\n  list:T[]=[]\n  add(value:T):void{\n    this.list.push(value)\n  }\n  min():T{\n    var minNum = this.list[0]\n    for(var i=0;i<this.list.length;i++){\n      if(minNum > this.list[i]){\n        minNum=this.list[i]\n      }\n    }\n    return minNum;\n  }\n}\nvar m1 = new MinClass<string>();\nm1.add('1')\nm1.add('you')\nm1.add('love')\nconsole.log(m1.min())\n```\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"TypeScript语法","published":1,"updated":"2019-03-24T06:51:15.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinuy003dawuwvec9zh54"},{"title":"TypeScript手册","date":"2019-03-18T14:41:51.000Z","_content":"\n\n\nTypeScript是JavaScript的超集\n\n## 开发环境搭建\n> 我的环境: window10 + vscode\n\n全局安装Ts\n> npm i -g typescript\n\n生成并配置`tsconfig.json`\n> tsc --init\n\n\n配置文件， 下面的配置中`ts`应存放在`src` 目录下， 并且会自动编译到dist文件夹下\n```JavaScript\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",                         // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'\n    \"module\": \"commonjs\",                       // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'\n    \"moduleResolution\": \"node\",                 // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)\n    \"emitDecoratorMetadata\": true,              // 为装饰器提供元数据的支持\n    \"experimentalDecorators\": true,             // 启用装饰器\n    \"allowSyntheticDefaultImports\": true,       // 允许从没有设置默认导出的模块中默认导入。\n    \"strict\": true,                             // 启用所有严格类型检查选项\n    \"noImplicitAny\": true,                      // 在表达式和声明上有隐含的 any类型时报错\n    \"alwaysStrict\": true,                       // 以严格模式检查没个模块，并在没个文件里加入 'use strict'\n    \"sourceMap\": true,\n    \"noEmit\": false,                            // 不生成输出文件\n    \"removeComments\": true,                     // 删除编译后的所有的注释\n    \"importHelpers\": true,                      // 从 tslib 导入辅助工具函数\n    \"strictNullChecks\": true,                   // 启用严格的 null 检查\n    \"lib\": [\"es2017\"],                          // 指定要包含在编译中的库文件\n    \"typeRoots\": [\"node_modules/@types\"],\n    \"types\": [\n      \"node\",\n    ],\n    \"outDir\": \"./dist\",                        // 编译后文件产出目录\n    \"rootDir\": \"./src\"                          // 你的ts文件目录\n  },\n  \"include\": [                                 // 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题\n    \"./src/*.ts\",\n    \"./src/**/*.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\",\n    \"**/*.test.ts\",\n    \"public\"\n  ]\n}\n```\n\n快速生成`package.json`\n> npm init -y\n\n\n运行命令， 开始监听\n> tsc -w\n\n\n是否有效呢？ 让我们来试一下\n\n\n进入src目录新建一个 `hello.ts`，记得是`.ts`， 不要写习惯了打成`.js`😅\n\n随便写点东西， 比如定义一个字符串类型:\n```TypeScript\nvar a:string = \"hello world\"\n```\n\n如果你配置没有问题的话， 我们就会看到他监听文件修改并编译\n\n这是ts文件与 编译后的js文件\n\n![编译前后](http://img.nixiaolei.com/2019-03-18-22-50-51.png)\n\n\n并且在他运行过程中， 我们可以按`F5`进行调试\n\n\n\n\n\n\n## 基本数据类型\n* Boolean\n* Number\n* String\n* Array\n* Enum\n* Any\n* Void\n\n\n简单的几种数据的定义\n```TypeScript\n// 定义一个Boolean\nvar a:boolean = true\n// 定义一个Number\nvar a:number = 13\n// 定义一个 String \nvar a:string = \"13\"\n```\n\n基本的数据结构定义\n```TypeScript\nvar list:number[] = [1,2,3]\n\n\n```\n\n\n## 接口\n> interfaces\n\n### 基础接口\n\n没有接口时我们如何规范参数类型\n```JavaScript\nfunction fn(dog:{name:string}) {\n  console.log(dog.name)\n}\nvar myObj = { name: \"Hello\" }\nfn(myObj)\n```\n\n有了接口， 我们就可以把参数规定与函数分离\n\n如何创建接口\n\n通过 `interface` 关键字来声明\n\n```JavaScript\ninterface dogValue {\n  name:string;\n}\n\n// 指定参数`dog`是接口类型\nfunction fn(dog: dogValue) {\n  console.log(dog.name)\n}\n\nvar myObj = { name: \"Hello\" }\nfn(myObj)  // 编译通过\n```\n\n### 接口的可选属性\n接口定义的参数不一定每一个都会被用到\n\n\n\n## 泛型\n\n什么是泛型?\n\n泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型\n\n一句话理解就是：  参数化类型（把类型当作是参数一样传递）\n\n使用泛型的好处:\n* 代码更加简洁【不用强制转换】\n* 程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】\n* 可读性和稳定性【在编写集合的时候，就限定了类型】\n\n\n指定一个最简单的泛型\n```TypeScript\nfunction Hello<T>(arg:T):T {\n  return arg;\n}\n```\n\n\n\n\n## Module 模块\n\nModule 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module\n\nModule 的好处\n1. 模块化\n2. 可重用\n3. 封装变量和函数\n\n\n\n来看看在ES6之前是如何书写的\n```JavaScript\n(function() {\n  // do somtiong\n}());\n```\n\n\n让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦\n\n使用Module之前\n```TypeScript\ninterface StringValidator {\n  // 接口定义的方法\n  isAcceptable(s:string):boolean;\n}\nvar lettersRegexp = /^[A-Za-z]+$]/;\nvar numberRegexp = /^[0-9]+$/;\n// 实现接口的方法\nclass LettersOnlyValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return lettersRegexp.test(s)\n  }\n} \nclass ZipCodeValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return s.length === 5 && numberRegexp.test(s)\n  }\n}\n```\n\n使用了Module 的书写方式后\n\n```TypeScript\nmodule Validation {\n  // 需要使用 export 来表示对外暴露\n  export interface StringValidator {\n    isAcceptable(s:string): boolean;\n  }\n\n  var lettersRegexp = /^[A-Za-z]+$]/;\n  var numberRegexp = /^[0-9]+$/;\n\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s:string) {\n      return lettersRegexp.test(s)\n    }\n  }\n  export class ZipCodeValidator implements StringValidator {\n    isAcceptable(s:string):boolean {\n      return s.length === 5 && numberRegexp.test(s)\n    }\n  }\n}\n```\n\n\nModule 与 类相结合使用\n```TypeScript\nmodule Person {\n  export class Student {\n    name: string;\n    constructor(name:string) {\n      this.name = name;\n    }\n    study() {\n      console.log(this.name + '在学习')\n    }\n    speak() {\n      console.log(this.name + '在说话')\n    }\n  }\n}\n\n// ----------- 使用时 -------------\n\nconst xiaoming = new Person.Student('小明')\nxiaoming.study()\n\n```\n\n\n\n## Namespaces\n\nNamespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module \n\n查看一下官方的示例\n\n```TypeScript\nnamespace Shapes {\n    export namespace Polygons {\n        export class Triangle { }\n        export class Square { }\n    }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square(); // Same as 'new Shapes.Polygons.Square()'\n```\n\n\n## 装饰器 < Decorators >\n\n如何定义一个装饰器\n\n其实装饰器就是一个普通的函数， 他接收一个参数`target` ，这个参数就是被装饰对象， 看下面的例子， `sealed` 装饰了`Dog`类， 并且在`sealed` 中打印了 `target` ， 让我们看看 `target`到底是什么？\n```TypeScript\nfunction sealed(target:any) {\n  // do something with 'target' ...\n  console.log(target)\n  return target\n}\n\n\n// 被装饰的对象 foo\n@sealed\nclass Dog {\n\n}\n```\n\n打印结果\n![使用装饰器](http://img.nixiaolei.com/2019-03-22-22-06-26.png)\n\n我们可以看到， 得到的正是 `Dog`这个类\n\n\n\n### 装饰器工厂< Decorator Factories >\n\n> 如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。\n\n\n装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果\n\n\n如何定义一个`装饰器工厂`\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any)  {\n    console.log(value)\n    console.log(target)    \n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  \n}\n```\n\n让我们来看看运行的结果\n\n![定义装饰器工厂](http://img.nixiaolei.com/2019-03-22-22-22-55.png)\n\n可以看到，我们传入的`test`字符串和 `Cat`类都被打印出来了，\n\n### 多装饰器的执行顺序\n使用多个装饰器时如何书写呢?\n\n当我们使用多个装饰器时有两种写法\n\n1. 写成一行\n```TypeScript\n@f @g x\n```\n2. 垂直书写\n```TypeScript\n@f\n@g\nx\n```\n**多个装饰器的执行顺序是如何的呢？**\n\n套用官网的说明\n1. 对每个装饰器的表达式进行自上而下的计算。\n2. 然后将结果作为自下而上的函数调用。\n\n\n其实真实的运行原理是\n```TypeScript\nf(g(x))\n```\n\n### 访问器修饰器\n\n访问器修饰器的接收的参数和方法修饰器接收的参数一样\n\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    this._x = x\n    this._y = y\n  }\n  // 访问器修饰器\n  @dec(true)\n  get  x() { return this._x }\n  @dec(false)\n  get  y() { return this._y }\n}\n```\n\n\n### 属性修饰器\n\n属性修饰器只有前两个参数\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    // 属性修饰器\n    @dec(false)\n    this._x = x\n    this._y = y\n  }\n}\n```\n\n### 参数修饰器\n参数修饰器也是三个参数， 但不同的是第三个参数接收\n\n**参数装饰器只能确认一个方法的参数是否被传入**\n\n\n前两个和其他的修饰器都相同， \n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. 参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数\n\n\n\n```TypeScript\nfunction require(value:boolean) {\n  return function (target:any, propertyKey: string, index: number)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  run(@require(true) name:string) {\n  }\n}\n```\n\n\n### 装饰器参数\n\n1. 类装饰器\n\n类装饰器的参数只接收一个， 那就是`target` 也就是这个类本身\n\n就和上面演示的那些例子一样\n\n\n2. 方法装饰器\n\n一般会传入三个参数\n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. descriptor 成员属性的描述符\n\n\n我们来验证下方法装饰器的参数\n\n让我们看看这段例子会输出什么\n```TypeScript\nfunction f(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n    console.log(arguments)\n    console.log(target)    \n  }\n}\n\nclass Tiger {\n  @f('tiger run')\n  run() {\n  }\n}\n```\n输入结果: \n\n![方法装饰器参数](http://img.nixiaolei.com/2019-03-23-11-35-28.png)\n\n\n在控制台输出， 我们看到了， \n第一个参数是 `tiger` 的实例对象（因为`run`是实例成员）\n\n第二个参数是成员名称， 也就是被装饰的`run`\n\n第三个参数是 `run` 的属性描述符\n\n\n## Mixins 混入\n除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。\n\n\nMixins 其实可以拆分为两个单词\n\nMix : 混合\n\nins : 是进入\n\n所以合在一起就是叫 `混入` 的意思的单词\n\n它想要表达的是一个对象中混入另一个对象的方法\n\n\n**让我们来实现一下Mixins**\n\n代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。\n\n```TypeScript\n// Disposable Mixin\nclass Disposable {\n    isDisposed: boolean;\n    dispose() {\n        this.isDisposed = true;\n    }\n\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive: boolean;\n    activate() {\n        this.isActive = true;\n    }\n    deactivate() {\n        this.isActive = false;\n    }\n}\n```\n创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：\n```TypeScript\n\nclass SmartObject implements Disposable, Activatable { }\n```\n这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。\n\n我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。\n\n也就是这样\n\n```TypeScript\nclass SmartObject implements Disposable, Activatable {\n  constructor() {\n      setInterval(() => console.log(this.isActive + \" : \" + this.isDisposed), 500);\n  }\n\n  interact() {\n      this.activate();\n  }\n\n  // Disposable\n  isDisposed: boolean = false;\n  dispose: () => void;\n  // Activatable\n  isActive: boolean = false;\n  activate: () => void;\n  deactivate: () => void;\n}\n```\n\n最后，把mixins混入定义的类，完成全部实现部分。\n```TypeScript\napplyMixins(SmartObject, [Disposable, Activatable]);\n```\n\n我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\n```TypeScript\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n          derivedCtor.prototype[name] = baseCtor.prototype[name];\n      })\n  });\n}\n```\n\n\n\n\n\n\n\n## 参考文献\n* https://segmentfault.com/a/1190000016305647\n\n\n-------------------------待完善——----------------------\n\n\n\n\n\n\n\n","source":"_posts/TypeScript手册.md","raw":"---\ntitle: TypeScript手册\ndate: 2019-03-18 22:41:51\ncategories: TypeScript\ntags: [ JavaScript, TypeScript ]\n---\n\n\n\nTypeScript是JavaScript的超集\n\n## 开发环境搭建\n> 我的环境: window10 + vscode\n\n全局安装Ts\n> npm i -g typescript\n\n生成并配置`tsconfig.json`\n> tsc --init\n\n\n配置文件， 下面的配置中`ts`应存放在`src` 目录下， 并且会自动编译到dist文件夹下\n```JavaScript\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",                         // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'\n    \"module\": \"commonjs\",                       // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'\n    \"moduleResolution\": \"node\",                 // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)\n    \"emitDecoratorMetadata\": true,              // 为装饰器提供元数据的支持\n    \"experimentalDecorators\": true,             // 启用装饰器\n    \"allowSyntheticDefaultImports\": true,       // 允许从没有设置默认导出的模块中默认导入。\n    \"strict\": true,                             // 启用所有严格类型检查选项\n    \"noImplicitAny\": true,                      // 在表达式和声明上有隐含的 any类型时报错\n    \"alwaysStrict\": true,                       // 以严格模式检查没个模块，并在没个文件里加入 'use strict'\n    \"sourceMap\": true,\n    \"noEmit\": false,                            // 不生成输出文件\n    \"removeComments\": true,                     // 删除编译后的所有的注释\n    \"importHelpers\": true,                      // 从 tslib 导入辅助工具函数\n    \"strictNullChecks\": true,                   // 启用严格的 null 检查\n    \"lib\": [\"es2017\"],                          // 指定要包含在编译中的库文件\n    \"typeRoots\": [\"node_modules/@types\"],\n    \"types\": [\n      \"node\",\n    ],\n    \"outDir\": \"./dist\",                        // 编译后文件产出目录\n    \"rootDir\": \"./src\"                          // 你的ts文件目录\n  },\n  \"include\": [                                 // 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题\n    \"./src/*.ts\",\n    \"./src/**/*.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\",\n    \"**/*.test.ts\",\n    \"public\"\n  ]\n}\n```\n\n快速生成`package.json`\n> npm init -y\n\n\n运行命令， 开始监听\n> tsc -w\n\n\n是否有效呢？ 让我们来试一下\n\n\n进入src目录新建一个 `hello.ts`，记得是`.ts`， 不要写习惯了打成`.js`😅\n\n随便写点东西， 比如定义一个字符串类型:\n```TypeScript\nvar a:string = \"hello world\"\n```\n\n如果你配置没有问题的话， 我们就会看到他监听文件修改并编译\n\n这是ts文件与 编译后的js文件\n\n![编译前后](http://img.nixiaolei.com/2019-03-18-22-50-51.png)\n\n\n并且在他运行过程中， 我们可以按`F5`进行调试\n\n\n\n\n\n\n## 基本数据类型\n* Boolean\n* Number\n* String\n* Array\n* Enum\n* Any\n* Void\n\n\n简单的几种数据的定义\n```TypeScript\n// 定义一个Boolean\nvar a:boolean = true\n// 定义一个Number\nvar a:number = 13\n// 定义一个 String \nvar a:string = \"13\"\n```\n\n基本的数据结构定义\n```TypeScript\nvar list:number[] = [1,2,3]\n\n\n```\n\n\n## 接口\n> interfaces\n\n### 基础接口\n\n没有接口时我们如何规范参数类型\n```JavaScript\nfunction fn(dog:{name:string}) {\n  console.log(dog.name)\n}\nvar myObj = { name: \"Hello\" }\nfn(myObj)\n```\n\n有了接口， 我们就可以把参数规定与函数分离\n\n如何创建接口\n\n通过 `interface` 关键字来声明\n\n```JavaScript\ninterface dogValue {\n  name:string;\n}\n\n// 指定参数`dog`是接口类型\nfunction fn(dog: dogValue) {\n  console.log(dog.name)\n}\n\nvar myObj = { name: \"Hello\" }\nfn(myObj)  // 编译通过\n```\n\n### 接口的可选属性\n接口定义的参数不一定每一个都会被用到\n\n\n\n## 泛型\n\n什么是泛型?\n\n泛型: 把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型\n\n一句话理解就是：  参数化类型（把类型当作是参数一样传递）\n\n使用泛型的好处:\n* 代码更加简洁【不用强制转换】\n* 程序更加健壮【只要编译时期没有警告，那么运行时期就不会出现ClassCastException异常】\n* 可读性和稳定性【在编写集合的时候，就限定了类型】\n\n\n指定一个最简单的泛型\n```TypeScript\nfunction Hello<T>(arg:T):T {\n  return arg;\n}\n```\n\n\n\n\n## Module 模块\n\nModule 模式是常见的JavaScript模式之一， 在ES6的模块话实现之前， 人们通常通过 IFEE 来实现Module\n\nModule 的好处\n1. 模块化\n2. 可重用\n3. 封装变量和函数\n\n\n\n来看看在ES6之前是如何书写的\n```JavaScript\n(function() {\n  // do somtiong\n}());\n```\n\n\n让我们来看一个例子， 使用 TS 的 Module 来防止调用多种 interface 时的麻烦\n\n使用Module之前\n```TypeScript\ninterface StringValidator {\n  // 接口定义的方法\n  isAcceptable(s:string):boolean;\n}\nvar lettersRegexp = /^[A-Za-z]+$]/;\nvar numberRegexp = /^[0-9]+$/;\n// 实现接口的方法\nclass LettersOnlyValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return lettersRegexp.test(s)\n  }\n} \nclass ZipCodeValidator implements StringValidator {\n  isAcceptable(s:string):boolean {\n    return s.length === 5 && numberRegexp.test(s)\n  }\n}\n```\n\n使用了Module 的书写方式后\n\n```TypeScript\nmodule Validation {\n  // 需要使用 export 来表示对外暴露\n  export interface StringValidator {\n    isAcceptable(s:string): boolean;\n  }\n\n  var lettersRegexp = /^[A-Za-z]+$]/;\n  var numberRegexp = /^[0-9]+$/;\n\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s:string) {\n      return lettersRegexp.test(s)\n    }\n  }\n  export class ZipCodeValidator implements StringValidator {\n    isAcceptable(s:string):boolean {\n      return s.length === 5 && numberRegexp.test(s)\n    }\n  }\n}\n```\n\n\nModule 与 类相结合使用\n```TypeScript\nmodule Person {\n  export class Student {\n    name: string;\n    constructor(name:string) {\n      this.name = name;\n    }\n    study() {\n      console.log(this.name + '在学习')\n    }\n    speak() {\n      console.log(this.name + '在说话')\n    }\n  }\n}\n\n// ----------- 使用时 -------------\n\nconst xiaoming = new Person.Student('小明')\nxiaoming.study()\n\n```\n\n\n\n## Namespaces\n\nNamespaces 的和Module 的用法相同，  在Ts 的1.5 版本后， 用 Namespaces 取代了 Module \n\n查看一下官方的示例\n\n```TypeScript\nnamespace Shapes {\n    export namespace Polygons {\n        export class Triangle { }\n        export class Square { }\n    }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square(); // Same as 'new Shapes.Polygons.Square()'\n```\n\n\n## 装饰器 < Decorators >\n\n如何定义一个装饰器\n\n其实装饰器就是一个普通的函数， 他接收一个参数`target` ，这个参数就是被装饰对象， 看下面的例子， `sealed` 装饰了`Dog`类， 并且在`sealed` 中打印了 `target` ， 让我们看看 `target`到底是什么？\n```TypeScript\nfunction sealed(target:any) {\n  // do something with 'target' ...\n  console.log(target)\n  return target\n}\n\n\n// 被装饰的对象 foo\n@sealed\nclass Dog {\n\n}\n```\n\n打印结果\n![使用装饰器](http://img.nixiaolei.com/2019-03-22-22-06-26.png)\n\n我们可以看到， 得到的正是 `Dog`这个类\n\n\n\n### 装饰器工厂< Decorator Factories >\n\n> 如果希望自定义如何将装饰器应用于声明，可以编写装饰器工厂。装饰器工厂只是一个函数，它返回将在运行时由装饰器调用的表达式。\n\n\n装饰器工厂和普通装饰器相比的好处就是更加的自定义了， 可以根据不同情况自定义效果\n\n\n如何定义一个`装饰器工厂`\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any)  {\n    console.log(value)\n    console.log(target)    \n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  \n}\n```\n\n让我们来看看运行的结果\n\n![定义装饰器工厂](http://img.nixiaolei.com/2019-03-22-22-22-55.png)\n\n可以看到，我们传入的`test`字符串和 `Cat`类都被打印出来了，\n\n### 多装饰器的执行顺序\n使用多个装饰器时如何书写呢?\n\n当我们使用多个装饰器时有两种写法\n\n1. 写成一行\n```TypeScript\n@f @g x\n```\n2. 垂直书写\n```TypeScript\n@f\n@g\nx\n```\n**多个装饰器的执行顺序是如何的呢？**\n\n套用官网的说明\n1. 对每个装饰器的表达式进行自上而下的计算。\n2. 然后将结果作为自下而上的函数调用。\n\n\n其实真实的运行原理是\n```TypeScript\nf(g(x))\n```\n\n### 访问器修饰器\n\n访问器修饰器的接收的参数和方法修饰器接收的参数一样\n\n\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    this._x = x\n    this._y = y\n  }\n  // 访问器修饰器\n  @dec(true)\n  get  x() { return this._x }\n  @dec(false)\n  get  y() { return this._y }\n}\n```\n\n\n### 属性修饰器\n\n属性修饰器只有前两个参数\n```TypeScript\nfunction dec(value:string) {\n  return function (target:any, propertyKey: string)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  private _x: number;\n  private _y: number;\n\n  constructor(x: number, y: number) {\n    // 属性修饰器\n    @dec(false)\n    this._x = x\n    this._y = y\n  }\n}\n```\n\n### 参数修饰器\n参数修饰器也是三个参数， 但不同的是第三个参数接收\n\n**参数装饰器只能确认一个方法的参数是否被传入**\n\n\n前两个和其他的修饰器都相同， \n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. 参数在所处函数的参数列表中的索引， 说人话就是告诉你他是第几个参数\n\n\n\n```TypeScript\nfunction require(value:boolean) {\n  return function (target:any, propertyKey: string, index: number)  {\n  }\n}\n\n// 在这里使用并传入自定义的参数\n@dec('test')\nclass Cat {\n  run(@require(true) name:string) {\n  }\n}\n```\n\n\n### 装饰器参数\n\n1. 类装饰器\n\n类装饰器的参数只接收一个， 那就是`target` 也就是这个类本身\n\n就和上面演示的那些例子一样\n\n\n2. 方法装饰器\n\n一般会传入三个参数\n\n1. target 对于静态成员是类的构造函数， 而对于实例成员是类的实例对象\n2. propertyKey 成员的名称\n3. descriptor 成员属性的描述符\n\n\n我们来验证下方法装饰器的参数\n\n让我们看看这段例子会输出什么\n```TypeScript\nfunction f(value:string) {\n  return function (target:any, propertyKey: string, descriptor: PropertyDescriptor)  {\n    console.log(arguments)\n    console.log(target)    \n  }\n}\n\nclass Tiger {\n  @f('tiger run')\n  run() {\n  }\n}\n```\n输入结果: \n\n![方法装饰器参数](http://img.nixiaolei.com/2019-03-23-11-35-28.png)\n\n\n在控制台输出， 我们看到了， \n第一个参数是 `tiger` 的实例对象（因为`run`是实例成员）\n\n第二个参数是成员名称， 也就是被装饰的`run`\n\n第三个参数是 `run` 的属性描述符\n\n\n## Mixins 混入\n除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。\n\n\nMixins 其实可以拆分为两个单词\n\nMix : 混合\n\nins : 是进入\n\n所以合在一起就是叫 `混入` 的意思的单词\n\n它想要表达的是一个对象中混入另一个对象的方法\n\n\n**让我们来实现一下Mixins**\n\n代码里首先定义两个类，它们将做为mixins。 可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。\n\n```TypeScript\n// Disposable Mixin\nclass Disposable {\n    isDisposed: boolean;\n    dispose() {\n        this.isDisposed = true;\n    }\n\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive: boolean;\n    activate() {\n        this.isActive = true;\n    }\n    deactivate() {\n        this.isActive = false;\n    }\n}\n```\n创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：\n```TypeScript\n\nclass SmartObject implements Disposable, Activatable { }\n```\n这里我们没有使用extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的。\n\n我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性。\n\n也就是这样\n\n```TypeScript\nclass SmartObject implements Disposable, Activatable {\n  constructor() {\n      setInterval(() => console.log(this.isActive + \" : \" + this.isDisposed), 500);\n  }\n\n  interact() {\n      this.activate();\n  }\n\n  // Disposable\n  isDisposed: boolean = false;\n  dispose: () => void;\n  // Activatable\n  isActive: boolean = false;\n  activate: () => void;\n  deactivate: () => void;\n}\n```\n\n最后，把mixins混入定义的类，完成全部实现部分。\n```TypeScript\napplyMixins(SmartObject, [Disposable, Activatable]);\n```\n\n我们同时也需要创建这个帮助函数， 帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\n```TypeScript\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n          derivedCtor.prototype[name] = baseCtor.prototype[name];\n      })\n  });\n}\n```\n\n\n\n\n\n\n\n## 参考文献\n* https://segmentfault.com/a/1190000016305647\n\n\n-------------------------待完善——----------------------\n\n\n\n\n\n\n\n","slug":"TypeScript手册","published":1,"updated":"2019-03-23T07:01:17.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinv1003fawuwr396qzsn"},{"title":"使用Jenkins构建前端持续集成","date":"2019-03-16T04:34:36.000Z","_content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n1. 安装JDK\n\n直接使用yum 安装的是 `openjdk` , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装\n\n\n```\nyum install -y java\n```\n\n2. 安装jenkins\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n\n```\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\nyum install -y jenkins\n```\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n```\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n```\n\n3. 配置jenkis的端口\n\njenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口\n\n```\nvim /etc/sysconfig/jenkins\n```\n\n找到修改端口号：\n\n> JENKINS_PORT=\"8080\" \n\n4. 启动jenkins \n\n\n```\nservice jenkins start/stop/restart\n```\n* 安装成功后Jenkins将作为一个守护进程随系统启动\n* 系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改`/var/log/jenkins`, `/var/lib/jenkins`, 和`/var/cache/jenkins`的所有者\n* 启动的时候将从/etc/sysconfig/jenkins获取配置参数\n* 默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置\n* Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo\n\n\n## 配置阶段\n安装好`jenkins` 后 ， 我们就可以根据刚才所设置的端口号访问 `jenkins` 服务了 \n\n比如进入 `127.0.0.1:8081` 访问`jenkins`\n\n首先会看到让我们输入初始密码\n\n它提示我们进入 `/var/lib/jenkins/secrets/initialAdminPassword ` 查看\n\n![输入初始密码](http://img.nixiaolei.com/2019-03-09-16-16-27.png)\n\n\n\n输入密码无误后， 就是提示我们安装对应的插件了，\n\n左边是推荐安装， 右边是自定义安装，  这里我们建议点击 `推荐安装`\n\n![选择推荐安装](http://img.nixiaolei.com/2019-03-09-16-17-31.png)\n\n\n\n\n安装过程可能稍长\n\n![等待安装完毕 ](http://img.nixiaolei.com/jenkins03.png)\n\n\n这时我们创建一个 `Jenkins` 账户， \n一定要牢记你的输入账号和密码， 用作之后的登录\n\n![创建账户](http://img.nixiaolei.com/2019-03-09-16-29-08.png)\n\n\n\n创建账户之后， 会显示一个 `jenkins` 的资源根路径， 一般不需要修改， 保持默认即可\n\n\n![资源路径](http://img.nixiaolei.com/2019-03-09-16-32-04.png)\n\n\n\n\n之后就是愉快的`jenkins` 之旅啦\n\n![开始使用Jenkins](http://img.nixiaolei.com/2019-03-09-16-32-37.png)\n\n\n## 补善插件阶段\n我们要做的前端持续集成， 所以 `jenkins` 默认安装的插件 并不能完全的满足我们的需求\n\n进入`jenkins` 主页面后， 找到插件管理\n\n![插件管理](http://img.nixiaolei.com/2019-03-09-16-36-26.png)\n\n\n\n首先查看我们必要的插件是否安装好了\n* NodeJs Plugin\n* Publish Over SSH\n* GitHub\n\n如果发现没有安装的就安装， 查漏补缺\n\n\n\n## 变量及远程服务器基本配置\n\n插件安装好后, 进入`系统设置` 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好\n\n![系统设置](http://img.nixiaolei.com/2019-03-09-17-36-54.png)\n\n\n管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱\n\n![邮件地址](http://img.nixiaolei.com/2019-03-09-17-42-24.png)\n\n(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上\n\n![github](http://img.nixiaolei.com/2019-03-09-17-43-51.png)\n\n\n比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址\n\n点击新增添加你的服务器\n\n![添加你的服务器](http://img.nixiaolei.com/2019-03-09-17-48-05.png)\n\n\n\n点击新增后, 这里有几个关键的参数,  需要注意\n\n![参数注意](http://img.nixiaolei.com/2019-03-09-17-51-39.png)\n\n连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录\n\n![配置免密](http://img.nixiaolei.com/2019-03-09-17-54-49.png)\n\n\n> 填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，\n\n\n![编路径错误](http://img.nixiaolei.com/2019-03-10-10-43-33.png)\n\n\n\n\n因为`jenkins `的在运行时会自动的创建一个名为`jenkins`的用户， 而这个用户的权限不够，无法访问你的目录\n\n![编运行身份](http://img.nixiaolei.com/2019-03-10-10-46-12.png)\n\n\n\n解决方案有两个:\n1. 把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限\n2. 把`jenkins` 的运行身份修改为 `root`, 但是会有点安全性问题\n\n本次实践以学习为目的， 所以这里我选择了第二钟\n\n> 相关操作文章: https://blog.csdn.net/jeikerxiao/article/details/80768949\n\n\nssh 免密配置成功后， 我们就可以开始创建一个自己的任务了\n\n\n\n## 创建任务阶段\n\n回到主页， 找到`新建任务`\n\n\n![编新建任务](http://img.nixiaolei.com/2019-03-10-10-55-02.png)\n\n\n\n进入新建任务后， 有几种不同的项目， 我们这里选择 `自由风格`， 并且输入项目名称\n\n![编自由风格](http://img.nixiaolei.com/2019-03-10-10-59-00.png)\n\n创建好项目后就会自动进入 当前项目的配置文件中\n\n\n首先我们看到`General`, 这是一些全局的配置， 在这里我们可以写上该项目的描述\n\n![编全局配置](http://img.nixiaolei.com/2019-03-10-11-02-26.png)\n\n\n`General`的后面几个类目是构建项目阶段几个比较大的步骤和流程\n\n\n如果你要配置的“github”项目， 可以在`Git`这里打上勾\n\n并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在`\tCredentials` 处新增配置\n\n\n![编github项目](http://img.nixiaolei.com/2019-03-10-11-11-35.png)\n\n\n接下来是看看构建触发器， 这里的填写根据你的工程需要， \n\n可以配置定时任务 或 多任务构建\n\n> 本次演示我并没有用到\n\n![编触发器](http://img.nixiaolei.com/2019-03-10-13-26-16.png)\n\n\n\n现在来到我们的重点`构建` ， \n\n我们可以添加步骤，我们可以看到能够支持 `Node`、`shell` 、`批处理`等等方式\n\n这些添加的步骤会按顺序执行， \n\n![编构建](http://img.nixiaolei.com/2019-03-10-13-30-56.png)\n\n\n我们需要`shell` 脚本来运行npm 命令\n\n所以我创建了 `shell`的操作步骤\n\n![编shell脚本](http://img.nixiaolei.com/2019-03-10-13-35-35.png)\n\n\n\n基于此， `jenkins` 就会自动帮我们做好 测试与打包的步骤，\n\n在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个`send files or execute commands over SSH` 步骤， \n\n\n![编overSSH](http://img.nixiaolei.com/2019-03-16-13-05-58.png)\n\n\n建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去\n\n> deploy文件参考\n\n![编deploy文件参考](http://img.nixiaolei.com/2019-03-16-13-08-32.png)\n\n\n\n## 你可能遇到的问题\n\n### 命令无效或不存在\n> 这里拿npm举例，  其他命令如:node ,都是同理\n\n![编无法使用npm命令](http://img.nixiaolei.com/2019-03-16-12-54-06.png)\n\n\n因为全局的命令需要设置`软连接` Jenkins 才可以访问的到\n\n如何设置:\n\n先查看一下你的 npm 在哪\n> whereis npm\n\n![编查看npm位置](http://img.nixiaolei.com/2019-03-16-12-57-08.png)\n\n这个`/usr/local/bin/npm` 就是你的npm所在位置 ( 使用带 `local` 的地址)\n\n我们来创建 `软连接`, 这里使用刚刚获取到的npm \n\n> ln -s /usr/local/bin/npm   /usr/bin\n \n\n如果出现无法修改的情况， 那我们就将他强制更改 😄\n\n> ln -sf /usr/local/bin/npm   /usr/bin\n\n\n再去构建一次Jenkins 任务\n\n看到控制台输出， 现在npm 可以正常运行了\n\n![编npm运行成功](http://img.nixiaolei.com/2019-03-10-18-56-51.png)\n\n\n\n\n\n\n## 持续集成的必要条件\n1. 必须有github 、svn或私有git服务器\n2. 完整的项目\n  1. test\n  2. 接口测试\n  3. 其他的测试内容\n3. CI 平台\n4. 项目代码要提交到Github、 svn等服务器上\n5. 保证代码在开发机的正常\n  1. bug\n  2. 运行环境 ( 引用的包要写入packa)\n6. 保证jenkins 环境一切正常\n7. 发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)\n8. 必要的静态资源服务器\n9. 配置jenkins的自动化处理流程\n\n\n\n\n参考文章:\n> https://www.cnblogs.com/loveyouyou616/p/8714544.html\n\n","source":"_posts/使用Jenkins构建前端持续集成.md","raw":"---\ntitle: 使用Jenkins构建前端持续集成\ndate: 2019-03-16 12:34:36\ncategories: CI\ntags: [CI, Jenkins, Centos, 前端持续集成]\n---\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n1. 安装JDK\n\n直接使用yum 安装的是 `openjdk` , 和sun 公司发布的jdk有略微区别， 但这里我们并不需要使用java,所以使用最快的方式安装\n\n\n```\nyum install -y java\n```\n\n2. 安装jenkins\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n\n```\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\nyum install -y jenkins\n```\n\n添加Jenkins库到yum库，Jenkins将从这里下载安装。\n```\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n```\n\n3. 配置jenkis的端口\n\njenkins 的默认端口为 8080 ， 为了避免和其他的应用程序冲突， 所以建议修改一下默认占用的端口\n\n```\nvim /etc/sysconfig/jenkins\n```\n\n找到修改端口号：\n\n> JENKINS_PORT=\"8080\" \n\n4. 启动jenkins \n\n\n```\nservice jenkins start/stop/restart\n```\n* 安装成功后Jenkins将作为一个守护进程随系统启动\n* 系统会创建一个“jenkins”用户来允许这个服务，如果改变服务所有者，同时需要修改`/var/log/jenkins`, `/var/lib/jenkins`, 和`/var/cache/jenkins`的所有者\n* 启动的时候将从/etc/sysconfig/jenkins获取配置参数\n* 默认情况下，Jenkins运行在8080端口，在浏览器中直接访问该端进行服务配置\n* Jenkins的RPM仓库配置被加到/etc/yum.repos.d/jenkins.repo\n\n\n## 配置阶段\n安装好`jenkins` 后 ， 我们就可以根据刚才所设置的端口号访问 `jenkins` 服务了 \n\n比如进入 `127.0.0.1:8081` 访问`jenkins`\n\n首先会看到让我们输入初始密码\n\n它提示我们进入 `/var/lib/jenkins/secrets/initialAdminPassword ` 查看\n\n![输入初始密码](http://img.nixiaolei.com/2019-03-09-16-16-27.png)\n\n\n\n输入密码无误后， 就是提示我们安装对应的插件了，\n\n左边是推荐安装， 右边是自定义安装，  这里我们建议点击 `推荐安装`\n\n![选择推荐安装](http://img.nixiaolei.com/2019-03-09-16-17-31.png)\n\n\n\n\n安装过程可能稍长\n\n![等待安装完毕 ](http://img.nixiaolei.com/jenkins03.png)\n\n\n这时我们创建一个 `Jenkins` 账户， \n一定要牢记你的输入账号和密码， 用作之后的登录\n\n![创建账户](http://img.nixiaolei.com/2019-03-09-16-29-08.png)\n\n\n\n创建账户之后， 会显示一个 `jenkins` 的资源根路径， 一般不需要修改， 保持默认即可\n\n\n![资源路径](http://img.nixiaolei.com/2019-03-09-16-32-04.png)\n\n\n\n\n之后就是愉快的`jenkins` 之旅啦\n\n![开始使用Jenkins](http://img.nixiaolei.com/2019-03-09-16-32-37.png)\n\n\n## 补善插件阶段\n我们要做的前端持续集成， 所以 `jenkins` 默认安装的插件 并不能完全的满足我们的需求\n\n进入`jenkins` 主页面后， 找到插件管理\n\n![插件管理](http://img.nixiaolei.com/2019-03-09-16-36-26.png)\n\n\n\n首先查看我们必要的插件是否安装好了\n* NodeJs Plugin\n* Publish Over SSH\n* GitHub\n\n如果发现没有安装的就安装， 查漏补缺\n\n\n\n## 变量及远程服务器基本配置\n\n插件安装好后, 进入`系统设置` 界面, 进行变量的相关配置, 这里就展示几个可以修改的参数, 大部分都可以不用动, 使用默认就好\n\n![系统设置](http://img.nixiaolei.com/2019-03-09-17-36-54.png)\n\n\n管理员邮件地址, 推荐填写,  当jenkins 工作完成后会把 构建信息发送至此邮箱\n\n![邮件地址](http://img.nixiaolei.com/2019-03-09-17-42-24.png)\n\n(这条选择填写) 可以选择配置 github 服务器, 并且可以配置多个, 因为你的项目代码有可能在多个服务器上\n\n![github](http://img.nixiaolei.com/2019-03-09-17-43-51.png)\n\n\n比较重要的就是这里了 ,  配置远程服务器, 也就是你的发布地址\n\n点击新增添加你的服务器\n\n![添加你的服务器](http://img.nixiaolei.com/2019-03-09-17-48-05.png)\n\n\n\n点击新增后, 这里有几个关键的参数,  需要注意\n\n![参数注意](http://img.nixiaolei.com/2019-03-09-17-51-39.png)\n\n连接目标服务器肯定需要登录,  下面几个参数就是对应的验证参数, 你可以输入固定的密码, 也可以告诉Jenkins 你的本地私钥路径或私钥的内容,  前提是你配置了 ssh 的免密登录\n\n![配置免密](http://img.nixiaolei.com/2019-03-09-17-54-49.png)\n\n\n> 填写密钥路径这里你很有可能会出现权限不够的错误， 如下图，\n\n\n![编路径错误](http://img.nixiaolei.com/2019-03-10-10-43-33.png)\n\n\n\n\n因为`jenkins `的在运行时会自动的创建一个名为`jenkins`的用户， 而这个用户的权限不够，无法访问你的目录\n\n![编运行身份](http://img.nixiaolei.com/2019-03-10-10-46-12.png)\n\n\n\n解决方案有两个:\n1. 把密钥切换至一个普通用户可以访问的目录， 并修改密钥的所属用户身份和访问权限\n2. 把`jenkins` 的运行身份修改为 `root`, 但是会有点安全性问题\n\n本次实践以学习为目的， 所以这里我选择了第二钟\n\n> 相关操作文章: https://blog.csdn.net/jeikerxiao/article/details/80768949\n\n\nssh 免密配置成功后， 我们就可以开始创建一个自己的任务了\n\n\n\n## 创建任务阶段\n\n回到主页， 找到`新建任务`\n\n\n![编新建任务](http://img.nixiaolei.com/2019-03-10-10-55-02.png)\n\n\n\n进入新建任务后， 有几种不同的项目， 我们这里选择 `自由风格`， 并且输入项目名称\n\n![编自由风格](http://img.nixiaolei.com/2019-03-10-10-59-00.png)\n\n创建好项目后就会自动进入 当前项目的配置文件中\n\n\n首先我们看到`General`, 这是一些全局的配置， 在这里我们可以写上该项目的描述\n\n![编全局配置](http://img.nixiaolei.com/2019-03-10-11-02-26.png)\n\n\n`General`的后面几个类目是构建项目阶段几个比较大的步骤和流程\n\n\n如果你要配置的“github”项目， 可以在`Git`这里打上勾\n\n并且填写上仓库地址 及 分支 即可， 如果需要填写账户密码， 则可在`\tCredentials` 处新增配置\n\n\n![编github项目](http://img.nixiaolei.com/2019-03-10-11-11-35.png)\n\n\n接下来是看看构建触发器， 这里的填写根据你的工程需要， \n\n可以配置定时任务 或 多任务构建\n\n> 本次演示我并没有用到\n\n![编触发器](http://img.nixiaolei.com/2019-03-10-13-26-16.png)\n\n\n\n现在来到我们的重点`构建` ， \n\n我们可以添加步骤，我们可以看到能够支持 `Node`、`shell` 、`批处理`等等方式\n\n这些添加的步骤会按顺序执行， \n\n![编构建](http://img.nixiaolei.com/2019-03-10-13-30-56.png)\n\n\n我们需要`shell` 脚本来运行npm 命令\n\n所以我创建了 `shell`的操作步骤\n\n![编shell脚本](http://img.nixiaolei.com/2019-03-10-13-35-35.png)\n\n\n\n基于此， `jenkins` 就会自动帮我们做好 测试与打包的步骤，\n\n在此之后， 我们需要将测试通过的项目代码推送到远程发布服务器上， 所以， 我们添加一个`send files or execute commands over SSH` 步骤， \n\n\n![编overSSH](http://img.nixiaolei.com/2019-03-16-13-05-58.png)\n\n\n建议新旧文件搞两个文件夹存放， 这样可以先删除掉旧文件再把新文件拷贝过去\n\n> deploy文件参考\n\n![编deploy文件参考](http://img.nixiaolei.com/2019-03-16-13-08-32.png)\n\n\n\n## 你可能遇到的问题\n\n### 命令无效或不存在\n> 这里拿npm举例，  其他命令如:node ,都是同理\n\n![编无法使用npm命令](http://img.nixiaolei.com/2019-03-16-12-54-06.png)\n\n\n因为全局的命令需要设置`软连接` Jenkins 才可以访问的到\n\n如何设置:\n\n先查看一下你的 npm 在哪\n> whereis npm\n\n![编查看npm位置](http://img.nixiaolei.com/2019-03-16-12-57-08.png)\n\n这个`/usr/local/bin/npm` 就是你的npm所在位置 ( 使用带 `local` 的地址)\n\n我们来创建 `软连接`, 这里使用刚刚获取到的npm \n\n> ln -s /usr/local/bin/npm   /usr/bin\n \n\n如果出现无法修改的情况， 那我们就将他强制更改 😄\n\n> ln -sf /usr/local/bin/npm   /usr/bin\n\n\n再去构建一次Jenkins 任务\n\n看到控制台输出， 现在npm 可以正常运行了\n\n![编npm运行成功](http://img.nixiaolei.com/2019-03-10-18-56-51.png)\n\n\n\n\n\n\n## 持续集成的必要条件\n1. 必须有github 、svn或私有git服务器\n2. 完整的项目\n  1. test\n  2. 接口测试\n  3. 其他的测试内容\n3. CI 平台\n4. 项目代码要提交到Github、 svn等服务器上\n5. 保证代码在开发机的正常\n  1. bug\n  2. 运行环境 ( 引用的包要写入packa)\n6. 保证jenkins 环境一切正常\n7. 发布服务器上也要存在基础的运行环境(不包括项目本身引用的包)\n8. 必要的静态资源服务器\n9. 配置jenkins的自动化处理流程\n\n\n\n\n参考文章:\n> https://www.cnblogs.com/loveyouyou616/p/8714544.html\n\n","slug":"使用Jenkins构建前端持续集成","published":1,"updated":"2019-03-20T14:52:16.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinv4003iawuw9mofj1y0"},{"title":"面向对象设计原则之S.O.L.I.D","date":"2019-03-24T01:39:12.000Z","_content":"\n\n作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步\n\n\n那编程里如何提升内功， 主要就是体现在编程思想上了，\n\n## 逐层提升你编程思想\n比如从一开始的最传统的面向对象 到 面向切面\n\n面向对象 -> 工厂模式 -> 面向切面\n\n\n从 \"oop 的静态抽象\" 演变为 \"aop的动态抽象\"\n\n![提升思想](http://img.nixiaolei.com/2019-03-24-09-45-24.png)\n\n\n## SOLID原则的基本概念\n\n让我们来看下 `SOLID` 的概念\n\n程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。\n\n\n## SOLID这几个字母代表什么意义？\n\n\n### S (单一一功能原则)\n> Single Responsibility Principle \n\n单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。\n换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。\n在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。\n单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。\n责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，\n从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。\n\n\n**缩减一下就是:**\n> 让每个函数和每个类都只做一件小事，职责单一，解耦和\n\n\n\n### O (开闭原则)\n> Open Close Principle\n\n开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。\n软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。\n\n对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。\n\n说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。\n\n\n让我们来看下一个简单的 `Ts` demo\n\n**糟糕的实现**\n```TypeScript\nclass Animal {\n\n  constructor(name: any) {\n    super(name)\n    this.name = name\n  }\n  eat() {\n    if(this.name == '小猫') {\n      console.log(this.name + '吃猫粮')\n    } else if( this.name == \"小狗\") {\n      console.log(this.name + '吃狗粮')\n    }\n  }\n}\n```\n\n这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背\n\n\n\n**利用 `OCP` 思想**\n```TypeScript\n// Animal 抽象类\nabstract class Animal {\n  public name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  abstract eat(): any;\n}\n\n// 实现Animal抽象类\nclass Dog extends Animal {\n  constructor(name: any) {\n    super(name)\n  }\n  eat() {\n    console.log(this.name + '吃狗粮')\n  }\n}\nvar d = new Dog('小狗')\nd.eat()\n```\n\n上面的代码中， 首先使用`abstract` 定义抽象类和抽象方法，提供其他类继承的基类\n我们定义只要是`Animal`就必须要有`eat`方法\n\n于是， 我们创建了一个`Dog` 继承`Animal` ,  \n这个`Dog`就不一般了， 它规定了必须重新实现 `eat` 方法， 并且可以扩展自己的方法\n\n当我们将来如果需要一只 `Cat`\n我们一样只需要让他继承`Animal`抽象类， 然后实现一个自己的`eat`方法\n\n\n\n### L (里⽒氏替换原则)\n> Liskov Substitution Principle\n\n里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。\n\n**子类必须能够替换他们的基类**。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现`if/else`之类对子类类型进行判断的条件。 里氏替换原则`LSP`使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， `LSP`则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。\n\n当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。\n\n\n\n\n**缩减一下就是:**\n> 老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系\n\n\n\n### I (接⼝隔离原则)\n> Interface Segregation Principle\n\n接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。\n\n不能强迫用户去依赖那些他们不能使用的接口。 换句话说， **使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。** 注意： 在代码中应用 `ISP` 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。\n\n这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， `ISP`原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。\n\n\n\n**缩减一下就是:**\n> 每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口\n\n\n\n\n### D (依赖反转原则)\n> Dependency Inversion Principle\n\n依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。\n\n**高层模块不应该依赖于底层模块， 二者都应该依赖于抽象**\n**抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)**\n\n类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。\n\n\n**举个例子:**\n\n你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。\n\n此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品\n\n\n\n#### 依赖反转原则\n\n**依赖注入**\n\n当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。\n\n**注⼊入过程**\n\n如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊\n\n\n**依赖反转有两种方式**\n1. 设值注入（在类上方设置字段）\n2. 构造注入 （在`constructor`中接收需要地参数）\n\n![依赖反转原则](http://img.nixiaolei.com/2019-03-24-13-25-50.png)\n\n\n#### DI（依赖注⼊入）\n> 依赖注⼊入（Dependency Injection）\n\n为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。\n\n\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/面向对象设计原则之SOLID.md","raw":"---\ntitle: 面向对象设计原则之S.O.L.I.D\ndate: 2019-03-24 09:39:12\ncategories: 编程思想\ntags: [oop, SOLID, 编程原则]\n---\n\n\n作为一名优秀的工程师，最重要的不是招式， 而是内功， 像武侠小说里的高手， 一旦有了几十年的内功， 学什么武功都能快人一步\n\n\n那编程里如何提升内功， 主要就是体现在编程思想上了，\n\n## 逐层提升你编程思想\n比如从一开始的最传统的面向对象 到 面向切面\n\n面向对象 -> 工厂模式 -> 面向切面\n\n\n从 \"oop 的静态抽象\" 演变为 \"aop的动态抽象\"\n\n![提升思想](http://img.nixiaolei.com/2019-03-24-09-45-24.png)\n\n\n## SOLID原则的基本概念\n\n让我们来看下 `SOLID` 的概念\n\n程序设计领域， SOLID (单一一功能、开闭原则、⾥里里⽒氏替换、接⼝口隔离以及依赖反转)是由罗伯特·C·⻢马丁在21世纪早期 引⼊入的记忆术⾸首字⺟母缩略略字，指代了了⾯面向对象编程和⾯面向对象设计的五个基本原则。当这些原则被一一起应⽤用时，它们使得一一个程序员开发一一个容易易进⾏行行软件维护和扩展的系统变得更更加可能SOLID被典型的应⽤用在测试驱动开发上，并且是敏敏捷开发以及⾃自适应软件开发的基本原则的重要组成部分。\n\n\n## SOLID这几个字母代表什么意义？\n\n\n### S (单一一功能原则)\n> Single Responsibility Principle \n\n单一一功能原则 ：单一一功能原则 认为对象应该仅具有一一种单一一功能的概念。\n换句句话说就是让一一个类只做一一种类型责任，当这个类需要承担其他类型的责任的时候，就需要分解这个类。\n在所有的SOLID原则中，这是⼤大多数开发⼈人员感到最能完全理理解的一一条。严格来说，这也可能是违反最频繁的一一条原则了了。\n单一一责任原则可以看作是低耦合、⾼内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。\n责任过多，可能引起它变化的原因就越多，这将导致责任依赖，相互之间就产⽣生影响，\n从⽽而极⼤大的损伤其内聚性和耦合度。单一一责任，通常意味着单一一的功能，因此不不要为一一个模块实 现过多的功能点，以保证实体只有一一个引起它变化的原因。\n\n\n**缩减一下就是:**\n> 让每个函数和每个类都只做一件小事，职责单一，解耦和\n\n\n\n### O (开闭原则)\n> Open Close Principle\n\n开闭原则(ocp) 认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。\n软件实体应该是可扩展，而不不可修改的。也就是说，对扩展是开放的，而对修改是封闭的（“开”指的就是类、模块、函数都应该具有可扩展性，“闭”指的是它们不不应该被修改。也就是说你可以新增功能但不能去修改源码。）。这个原则是诸多面向对象编程原则中最抽象、最难理理解的一个。\n\n对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独⽴立完成其⼯工作，⽽而不要对类进⾏行行任何修改。可以使用变化和不变来说明：封装不变部分，开放变化部分，一般使用接口继承实现⽅方式来实现“开放”应对变化。\n\n说大白话就是：你不不是要变化吗？，那么我就让你继承实现一个对象，用一个接口来抽象你的职责，你变化越多，继承实现的子类就越多。\n\n\n让我们来看下一个简单的 `Ts` demo\n\n**糟糕的实现**\n```TypeScript\nclass Animal {\n\n  constructor(name: any) {\n    super(name)\n    this.name = name\n  }\n  eat() {\n    if(this.name == '小猫') {\n      console.log(this.name + '吃猫粮')\n    } else if( this.name == \"小狗\") {\n      console.log(this.name + '吃狗粮')\n    }\n  }\n}\n```\n\n这种糟糕的实现不但使程序的可扩展性降低， 而且每次新增一种动物都需要修改之前的代码， 容易造成隐患， 这和编程思想极大的违背\n\n\n\n**利用 `OCP` 思想**\n```TypeScript\n// Animal 抽象类\nabstract class Animal {\n  public name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  abstract eat(): any;\n}\n\n// 实现Animal抽象类\nclass Dog extends Animal {\n  constructor(name: any) {\n    super(name)\n  }\n  eat() {\n    console.log(this.name + '吃狗粮')\n  }\n}\nvar d = new Dog('小狗')\nd.eat()\n```\n\n上面的代码中， 首先使用`abstract` 定义抽象类和抽象方法，提供其他类继承的基类\n我们定义只要是`Animal`就必须要有`eat`方法\n\n于是， 我们创建了一个`Dog` 继承`Animal` ,  \n这个`Dog`就不一般了， 它规定了必须重新实现 `eat` 方法， 并且可以扩展自己的方法\n\n当我们将来如果需要一只 `Cat`\n我们一样只需要让他继承`Animal`抽象类， 然后实现一个自己的`eat`方法\n\n\n\n### L (里⽒氏替换原则)\n> Liskov Substitution Principle\n\n里氏替换原则: 里氏替换原则认为“程序中的对象应该是可以在不改变程序正确性的前提下提前被它的子类所替换的”的概念。\n\n**子类必须能够替换他们的基类**。即： 子类应该可以替换任何基类能够出现的地方， 并且经过替换以后， 代码还能正常工作。 另外， 不应该在代码中出现`if/else`之类对子类类型进行判断的条件。 里氏替换原则`LSP`使使代码符合开闭原则的一个重要保证。 正是由于子类的替换性才使得父类型的模块在无需修改的情况下就可以扩展。在很多情况下， 在设计初期我们类之间的关系不是很明确， `LSP`则给了我们一个判断和设计类之间关系的基准: 需不需要继承， 以及怎样设计继承关系。\n\n当一个子类的实例应该能够替换任何其超类的实例时， 它们之间才具有is-A关系。 继承对于OCP， 就相当于多态性对于里氏替换原则。子类可以代替基类， 客户使用基类， 他们不需要知道派生类所做的事情。这是一个针对行为职责可替代的原则， 如果S是T的子类型， 那么S对象就应该在不改变任何抽象属性情况下替换所有T对象。\n\n\n\n\n**缩减一下就是:**\n> 老爸能干的事， 儿子必须都能干， 并且还要干的能多， 只要有儿子在， 老爸不在现场都没关系\n\n\n\n### I (接⼝隔离原则)\n> Interface Segregation Principle\n\n接口隔离原则: 接口隔离原则认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。\n\n不能强迫用户去依赖那些他们不能使用的接口。 换句话说， **使用多个专门的接口比使用单一的总接口总要好(JavaScript几乎没有接口的概念， 所以使用ts)。** 注意： 在代码中应用 `ISP` 并不一定意味着服务就是绝对安全的。 仍然需要采用良好的编码实践， 以确保正确的验证与授权。\n\n这个原则起源于施乐公司， 他们需要建立了一个新的打印机系统， 可以执行诸如装订的印刷品一套，传真多种任务。此系统软件创建从底层开始编制， 并实现了这些任务功能， 但是不断增长的软件功能却使软件本身越来越难适应变化和维护。 每一次改变，即使是最小的变化， 有人可能需要近一个小时的重新编译和重新部署。这几乎不可能再继续发展， 所以他们聘请罗伯特(Robert)帮助他们。他们首先设计了一个主要类Job,几乎能够用于实现所有任务功能。 只要调用Job类的一个方法就可以实现一个功能， Job类就变动非常大， 是一个胖模型啊， 对于客户端如果只需要一个打印功能， 但是其他无关打印的方法功能也和其耦合， `ISP`原则建议在客户端和Job类之间增加一个接口层， 对于不同功能有不同的接口， 比如打印功能就是Print接口， 然后将大的Job类切分为继承不同接口的子类， 这样有一个Print Job类 等等。\n\n\n\n**缩减一下就是:**\n> 每一个业务都要准备一个接口， 每个不同功能的接口再继承自公共的基础接口\n\n\n\n\n### D (依赖反转原则)\n> Dependency Inversion Principle\n\n依赖倒置原则（Dependency Inversion Principle， DIP）规定： 代码应当取决于抽象概念， 而不是具体实现。\n\n**高层模块不应该依赖于底层模块， 二者都应该依赖于抽象**\n**抽象不应该依赖于细节， 细节应该依赖于抽象(总结解耦)**\n\n类可能依赖于其他类来执行其工作， 但是， 他们不应当依赖于该类的特定具体实现， 而应当是它的抽象。 这个原则实在是太重要了， 社会的分工化， 标准化都是这个设计原则的体现。显然， 这一概念会大大提高系统的灵活性。 如果类只是关心他们支持特定锲约而不是特定类型的组件， 就可以快速而轻松地修改这些低级服务的功能， 同时最大限度地降低对系统其余部分地影响。\n\n\n**举个例子:**\n\n你家里需要洗衣机， 不可能把整个洗衣机的生产流程都给实现了， 搬到自己家里， 当然时去超市商场购买一台洗衣机。 你需要电饭煲，也不可能把电饭煲地生产工艺实现了， 也是去商场买现成地。\n\n此时商场就是一个容器， 商场帮我们去各个工厂采购这些商品，  当我们需要某件物品时就可以去商场购买现成地商品\n\n\n\n#### 依赖反转原则\n\n**依赖注入**\n\n当某个⻆角⾊色要另一个角色协助时，通常由调用者来创建被调用者的实例。现在创建实例由容器来完成然后注⼊调用者。\n\n**注⼊入过程**\n\n如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注⼊\n\n\n**依赖反转有两种方式**\n1. 设值注入（在类上方设置字段）\n2. 构造注入 （在`constructor`中接收需要地参数）\n\n![依赖反转原则](http://img.nixiaolei.com/2019-03-24-13-25-50.png)\n\n\n#### DI（依赖注⼊入）\n> 依赖注⼊入（Dependency Injection）\n\n为一个方法应该遵从“依赖于抽象而不是一个实例” 的概念。依赖注⼊是该原则的一种实现⽅方式。\n\n\n\n\n\n\n\n\n<div style='display: none;'>\n谢谢最可爱的贝玺\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"面向对象设计原则之SOLID","published":1,"updated":"2019-03-24T05:57:53.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjinv7003kawuwo2jk6q36"},{"title":"【Vue】源码解析","date":"2019-03-18T01:50:34.000Z","_content":"\n现在三大框架风起云涌， `JQuery`老大哥的光辉不再， 使前端成为了各路诸侯的兵家必争之地， \n\n当然作为一名优质的前端，光跟风学框架是肯定不行的， 要知其然而知其所以然\n\n要了解`MVVM`的本质原理， `virtual Dom`和 `Diff`算法解决的问题\n\n拒绝盲目跟风\n\n\n## 🍎diffDom优劣\n现在很多人都说 `Vue`, `React` 多牛， `Diff`算法快，不用操作`Dom`。\n\n只能无语。\n\n`Diff`算法不是不需要操作`Dom`,  而是不需要开发者去操作`Dom`了， `Diff`算法其实不快， 就算使用了`virtual Dom`,  还得花实现把真实`Dom` 转换为 `virtual Dom` 再去比对， 这远远没有`js`直接 `getElementById`直达目标来的快\n\n那Diff算法不快为什么还要用呢?\n\n`Diff`算法其实是给那些比较随意的新手开发者准备的\n\n看这个例子\n\n```HTML\n<!-- 原本的dom -->\n<ul id=\"ul\">\n  <li>a</li>\n  <li>a</li>\n  <li>a</li>\n</ul>\n```\n```JavaScript\n// 拿到结果不管三七二十一把旧dom全替换了\n$.get('/api', (res) => {\n  var _HTML = \"\"\n  for(var i=0; i< res.length; i++){\n    _HTML = \"<li>\" + res[i] +\"</li>\"\n  }\n  $(\"#ul\").html(_HTML)\n})\n```\n\n如果是原始的`Dom`操作， 有很多小白会像这个例子一样， 不管`Dom`需不需要更新， 他都把`ajax`返回的请求全部跑一边，生成`HTML`模板， 然后把原本的所有`li`都删了，  再把新的模板放进去， `Dom`少还看不出来， 如果`Dom`多了呢， 上千的`Dom`， 这顿操作一下就玩炸了。\n\n况且网站优化原则就是尽量减小`Dom`操作， 如果是有经验的开发者， 会选择找到有变化的位置，使用`append`插入\n\n\n\n## 📄Vue架构目录\n去[Vue官网](https://github.com/vuejs/vue)下载`Vue`源码看看，\n\n打开里面会有一个 `src`目录， 里面就是整个的`Vue`源码\n\n目前有6个目录， 作用分别如下\n\n![Vue目录](http://img.nixiaolei.com/2019-03-30-10-44-35.png)\n\n\n`Vue.js` 的组成是由 `core` + 对应的 '平台' 补充代码构成（独立构建和运行时构建只是 `platforms` 下 `web` 平台的两种选择）\n\n`Vue`的核心原理就在`core`文件夹中， 让我们进入 `core` 文件夹看看\n\n![core文件夹](http://img.nixiaolei.com/2019-03-30-10-57-26.png)\n\n了解了目录，接下来我们就来研究`Vue`的双向绑定\n\n## 🔗双向绑定（响应式原理） 所涉及到的技术\n* ✅ **Obejct.defineProperty** _【提供getter 和 setter】_\n* ✅ **Observer** _【提供getter 和 setter】_\n* ✅ **watcher**  _【提供getter 和 setter】_\n* ✅ **Dep** _【负责收集watcher】_\n* ✅ **Directive** _【处理Vue模板指令】_\n\n\n### Obejct.defineProperty\n\n\n`Obejct.defineProperty` 是整个`Vue`的灵魂， \n\n来看一下`Obejct.defineProperty` 如何使用\n```JavaScript\nvar obj = {}\nvar c;\nObject.defineProperty(obj, 'a', {\n  get() {\n    console.log('getter')\n    return a\n  },\n  set(newVal) {\n    console.log('setter')\n    c = newVal\n    this.a = newVal\n  }\n})\n\nobj.a = '234'\nconsole.log(c) // 234\nconsole.log(obj.a) // 234\n```\n\n\n它帮助`Vue`实现了双向绑定, 但也因为这个， `Vue`也只能舍弃了对低版本浏览器的支持。\n\n\n![defineProperty兼容](http://img.nixiaolei.com/2019-03-30-11-48-41.png)\n\n它只能兼容到`IE9` ， 并且市面上的`polyfill`实现的也并不是很好\n\n那低版本如何代替`Obejct.defineProperty` ， 难道真没了它就不行吗？\n\n\n**当然有**：\n\n1. 👆 > IE 7\n\n实际上在`IE7`的时候就已经有暴露了 `__defineGetter__` 方法，\n![__defineGetter__](http://img.nixiaolei.com/2019-03-30-12-57-56.png)\n\n具体用法如下\n```JavaScript\nvar random = {};\nrandom.__defineGetter__('ten', function() { \n    return Math.floor(Math.random()*10); });\nrandom.__defineGetter__('hundred', function() { \n    return Math.floor(Math.random()*100); });\n\nrandom.ten // 随机的一个值\n```\n\n2.  👇 < IE 7\n\n早年间的`IE` 是支持`VBScript`,  [VBScript](http://www.w3school.com.cn/vbscript/index.asp) 就可以直接写类， 并且也支持`get`，`set`方法\n\n```JavaScript\nclass Test {\n  get name () {\n    \n  }\n  set name() {\n\n  }\n}\n```\n\n### 🐶霸道的IE\n说了这么多`IE`的坏， 这里也带一嘴`IE`的好，\n\n`IE`能够调用`EXE`程序, 比如`JS`无法设置打印机的宽高，就可以利用`ActiveObjectX`来做到, 甚至可以修改`word`格式等等  , 所以办公类的项目离不开`IE`\n\n\n\n\n\n## 😕MVVM 双向数据绑定流程\n\n\nMVVM: Model–view–viewmodel\n\n那怎么区分这些层呢\n\n* 🚀**Model**: `Observer`\n* ✈️**view** : `directive`\n* 🚚**viewmodel**: `Watcher` && `Dep`  _【用于连接 Model 和 view】_\n\n\n![双向数据绑定](http://img.nixiaolei.com/2019-03-30-11-51-42.png)\n\n\n\n先看`Directive`, 这就是我们平时写的`vue`指令， 如上面举例得的`v-text=\"times\"`, 这就是一个指令， 一个`Directive`会分配一个`Watcher`\n\n\n\n### Observer\n\n观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。订阅者模式涉及三个对象：发布者、主题对象、订阅者，三个对象间的是一对多的关系，每当主题对象状态发生改变时，其相关依赖对象都会得到通知，并被自动更新。\n\n简单的描述就是:\n\n你想买漫画， 但是问了报刊亭的大爷， 大爷说现在没有， 还没到货， 然后你回去了， 第二天你又去问， 大爷还是说没有， 如果你每天这样问， 大爷估计会嫌你烦。 如果这时候你把你的电话给大爷， 大爷记录到他的**本子**上,  当大爷的漫画到货的时候电话通知你。\n\n这时你就是`订阅者`, 大爷就是`发布者`, 你们就存在一个发布订阅者的关系\n\n\n\n**Vue 中的Observer**\n\nObserver会观察两种类型的数据，`Object` 与 `Array`\n对于`Array`类型的数据，由于 `JavaScript` 的限制， `Vue` 不能检测变化,会先重写操作数组的原型方法，重写后能达到两个目的，\n\n当数组发生变化时，触发 `notify` 如果是 `push`，`unshift`，`splice` 这些添加新元素的操作，则会使用`observer`观察新添加的数据重写完原型方法后，遍历拿到数组中的每个数据 使用`observer`观察它而对于`Object`类型的数据，则遍历它的每个`key`，使用 `defineProperty` 设置 `getter` 和 `setter`，当触发`getter`的时候，`observer`则开始收集依赖，而触发`setter`的时候，`observer`则触发`notify`。\n\n\n#### 对 Object 的处理\n`Observer` 对象的标志就是`__ob__` 这个属性，这个属性保存了 `Observer` 对象自己本身。对象在转化为 `Observer` 对象的过程中是一个递归的过程，对象的子元素如果是对象或数组的话，也会转化为 `Observer` 对象\n\n\n#### 对数组的处理\n\n其实 `observeArray` 方法就是对数组进行遍历，递归调用 `observe` 方法，最终都会走入 `walk` 方监控单个元素。而 `walk` 方法就是遍历对象，结合 defineReactive 方法递归将属性转化为 `getter` 和 `setter`\n\n\n### Watcher\n`Watcher` 是将模板和 `Observer` 对象结合在一起的纽带。`Watcher` 是订阅者模式中的订阅者。`Watcher` 的两个参数： `expOrFn` 最终会被转换为 `getter` 函数， cb 是更新时执行的回调。依赖收集的入口就是get函数。\n\n> getter 函数是用来连接监控属性与 `Watcher` 的关键\n\n\n只有通过`watcher` 触发的getter 会收集依赖，而所谓的被收集的依赖就是当前`watcher`.初始化时传入的参数 expOrFn 中涉及到的每一项数据，然后触发该数据项的 getter 函数；getter 函数中就是通过判断 Dep.target的有无来判断是 `Watcher` 初始化时调用的还是普通数据读取，如果有则进行依赖收集\n\n\n### Dep\n\n这个方法是在响应式的过程中调用的，用户修改数据触发 setter 函数，函数的最后一行就是调用 dep.notify 去通知订阅者更新视图。\n\n### Directive\n\n![Directive](http://img.nixiaolei.com/2019-03-30-14-50-38.png)\n\n\n关于编译这块vue分了两种类型，一种是文本节点，一种是元素节点\n\n\nvue内置了这么多的指令，这些指令都会抛出两个接口bind 和 update，这两个接口的作用是，编译的最后一步是执行所有用到的指令的bind方法，而 update 方法则是当watcher 触发 update 时，Directive会触发指令的update方法\n\n\nobserve -> 触发setter -> watcher -> 触发update -> Directive -> 触发update -> 指令\n\n\n\n\n\n## 💥源码分析\nVue的完全版源码有很多判断以及其他的逻辑， 对于观看源码的人，会造成极大的困难，\n\n因此准备了这版仿照Vue流程实现的 实现了双向绑定的[简版Vue](https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue), 方便学习理解\n\n通过这版对[Vue源码的简易翻版](https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue)， 我们来快速理解Vue原理\n\n### ✨ new Vue\n\n首先看一下，我们的 new Vue, 这是所有操作的入口\n\n```JavaScript\nnew Vue({\n  data: {\n    nickname: '张三',\n    email: \"123123@qq.com\"\n  },\n  el: '#app'\n})\n```\n相信使用过`Vue `的小伙伴都明白， 这里定义了一个`data`， 用于存放变量， el是目标`dom`的选择器\n\n### 🔥 new Vue 执行时做了什么\n\n```JavaScript\nfunction Vue(option) {\n  var data = option.data \n  this.data = data\n  // 挂载 getter 和 setter\n  observe(data, this)\n  var id = option.el\n  // 编译 模板\n  var dom = new Compile(document.querySelector(id), this)\n  // 把编译好的模板挂载到 #app 上\n  document.querySelector(id).appendChild(dom)\n}\n```\n\n我们可以看到， Vue其实是一个构造函数， 它接收了一个参数`option`， 这个`option`就是我们`new Vue`传入的那个对象\n因此我们可以通过`option` 拿到`data`和`el`两个变量， 当然这是js基础哈， 我就不再说了\n\n拿到`data`后， 我们可以看到它调用了一个 `observe`方法, 将data和this传入( 此时this时Vue实例 )\n\n接下来又根据`el`来获取`dom`， 同样的将获取到的`dom`和`this`传入了 `Compile`中，  并且还接收了一个返回值， 然后又将这个返回值挂到了 `#app`上\n\n是不是感觉， 什么鬼？, 这顿操作是啥\n\n首先看一下疑惑的 `observe`， 传入了 `data`， `this`, 然后就没动静了， 既然如此， 我们就进入`observe`看看\n\n找到`Observe`的构造函数\n```JavaScript\nfunction observe(obj, vm) {\n  Object.keys(obj).forEach(key => {\n    defineReactive(vm, key, obj[key])\n  })\n}\n```\n可以看到，它接收一个`obj`和 `vm`， 哦， 这里就一一对应上了， 就是我们刚才传入的 `data`和`this` \n\n来看看它做了什么， \n\n它把`obj`枚举了一遍， 并将每一次的  `vm`, `key`,`value` 都传入一个叫 `defineReactive`的方法\n\n\n好，那就让来看`defineReactive`做了什么\n\n```JavaScript\nfunction defineReactive(vm, key, val) {\n  // 为每个变量分配一个 dep实例\n  var dep = new Dep()\n  // 配置getter和setter并且挂载到vm上\n  Object.defineProperty(vm, key, {\n    get() {\n      if ( Dep.target ) {\n        // JS的浏览器单线程特性， 保证整个全局变量在同一时间内， 只有一个监听器使用\n        dep.addSub(Dep.target)\n      }\n      return val\n    },\n    set(newVal) {\n      if ( newVal == val ) return;\n      val = newVal;\n      // 作为发布者发出通知\n      dep.notify()\n    }\n  })\n}\n```\n\n我们看到， 它`new`了一个`Dep`， 这个`Dep`就是报刊亭大爷的电话本， 用来收集所有想买报纸或杂志的人的电话， 等到到货时就好挨个通知\n\n然后我们看到了灵魂函数 `Object.defineProperty`,  \n\n嗷那我们应该就明白了， 这里的一顿操作就是为了给`data`里的每个属性都挂载上 `getter`，`setter`, 并且将这些属性直接转移到了`vm`上（Vue实例）\n\n那既然如此， \n\n🤪让我们看看 `getter`方法做了什么， \n\n首先它判断了一下`Dep.target`，  如果`Dep.target`为`true` , 就调用`dep`的`addSub`方法， 这里`Dep.target`是啥我们先不管， 留个印象即可\n\n然后它直接`return`了`val`\n\n😵再来看看`setter`方法\n\n`setter`方法接收一个新值，  首先就是判断了新值和原本的值是否相等， 如果相等就不做处理了， 如果不相等， 它将新值赋给`val`\n\n然后调用`dep`实例上的`notify`方法， `notify` 看着名字也知道是通知， 也就是大爷挨个打电话的一个操作\n\n\n好, 这一块我们理顺了， 是为了挂上`getter`和`setter`， 但又遇到了新问题`dep`， `dep`到底在干什么， 为什么被`getter`，`setter`都使用了 \n\n\n找到`Dep`的构造函数\n```JavaScript\nfunction Dep() {\n  // 存放watcher\n  this.subs = []\n}\n\nDep.prototype = {\n  // 添加watcher, 也就是添加订阅\n  addSub(sub) {\n    this.subs.push(sub)\n  },\n  // 通知所有watcher\n  notify() {\n    this.subs.forEach(sub => {\n      sub.update()\n    })\n  }\n}\n```\n\n我们可以看到， `Dep`构造函数中维护了一个 `subs`数组， 并且下面的在`prototype`上定义了几个方法， `addSub` 和`notify`，\n这不就是刚刚`observe`里调用的两个方法吗， \n哦，明白了， `addSub`原来是将`getter`中传入的 `Dep.target`追加到每个`Dep`实例都单独维护的一个`subs`数组中呀， `notify`就是遍历整个数组，挨个调用`update`方法（先不管update的具体实现）\n\n\n好， 解决了`observe`方法，那我们就回到最初的`Vue`构造函数中,  继续往下走, 攻克剩余的绿色区域\n\n![Compile](http://img.nixiaolei.com/2019-03-31-11-36-41.png)\n\n\n我们可以看到，它通过`el` 获取到了`dom`, 并在`new Compile` 将`dom` 传入\n\n那我们就找到`Compile`的构造函数一探究竟\n```JavaScript\nfunction Compile(node, vm) {\n  if(node) {\n    this.$frag = this.nodeToFragment(node, vm)\n    return this.$frag\n  }\n}\n```\n\n可以看到， 它接收了一个`node`， 和一个`vm` , 并且判断了一下`node`是否存在， \n\n并将`node`和`vm`，传入了`this.nodeToFragment`方法， 又将其的返回结果`return`出去， 也就是`new Compile`之后返回的值 ，如下\n\n![Compile02](http://img.nixiaolei.com/2019-03-31-11-49-23.png)\n\n\n那`this.nodeToFragment`这个方法做了什么， 让我们找到他\n```JavaScript\nCompile.prototype = {\n  nodeToFragment(node, vm) {\n    var _this = this\n    // 创建文档片段\n    var frag = document.createDocumentFragment()\n    var child;\n    while ( child = node.firstChild ) {\n      // 替换变量\n      _this.compileElement(child, vm)\n      // 剪贴子元素\n      frag.append(child)\n    }\n    return frag\n  },\n  compileElement(node, vm) {\n    var reg = /\\{\\{(.*)\\}\\}/;\n    // 节点类型为元素, 根据nodeType来判断\n    if ( node.nodeType === 1 ) {\n      // 获取自定义属性\n      var attr = node.attributes\n      for (var i = 0; i < attr.length; i++) {\n        if (attr[i].nodeName == \"v-model\") {\n          // 获取v-model 绑定的属性名\n          var name = attr[i].nodeValue\n          // 双向绑定\n          node.addEventListener('input', function(e) {\n            // 给相应的data属性赋值， 进而触发该属性的set方法\n            // 再批处理渲染元素\n            vm[name] = e.target.value \n          })\n          // 把this ，节点， 还有v-model绑定的变量交给watcher\n          new Watcher(vm, node, name, \"value\")\n        }\n      }\n    }\n\n    // 节点类型为text\n    if ( node.nodeType === 3 ) {\n      if ( reg.test(node.nodeValue) ) {\n        var name = RegExp.$1; // 获取匹配到的字符串\n        name = name.trim()\n         // 把this ，节点， 还有{{}}中使用的变量交给watcher\n        new Watcher(vm, node, name, 'nodeValue')\n      }\n    }\n  }\n}\n```\n\n我们看到它在`Compile`原型上挂了`nodeToFragment`, `compileElement`两个方法，  `nodeToFragment`方法接收 `node`, `vm`参数\n\n先保存了一下`this`指向,  然后使用`document.createDocumentFragment()`方法创建了一个文档片段， 并将在`while`循环中传入的`node`节点的第一个元素赋值给 `child`变量，\n然后使用`compileElement(child, vm)` 将`child`和`vm` 传入, 然后将`child` 追加给创建好的文档片段`frag`, 你肯定会觉得这是个死循环, 其实不是的， 这个`append`对`dom`有剪切的效果，\n所以他会一直抽离`node`的第一个节点，直至`node`空了， 吸干他\n\n完成了这顿操作后， 再将`frag`文档片段返回\n\n然后我们来看看它在`while`中调用的`compileElement`方法做了什么\n\n它同样接收`node`和`vm` , 首先就是定义一个正则， 这是用来匹配`{{ }}`双括号的， 也就是我们平时的变量写法\n\n然后它判断了一下这个 `node`的节点类型,  如果`nodeType == 1`, 那就说明是元素，  如果`nodeType == 3` 那就说明节点类型是`text`\n      \n如果节点类型是元素， 就利用`attributes` 方法，获取到该元素身上的属性,  查看是否存在`v-model`这样一个属性， 如果有，就获取到`v-model`填写的变量，交给变量`name`,\n然后监听该元素的`input`事件， \n\n所以每当改元素发生`input`时间时，就将元素上的`value`根据`v-model`上获取到的`name`作为`vm`的`key`去修改`vm`实例上的对应的值， 因为`vm`上的变量已经被挂载此来触发`vm`\n\n最后还创建了一个`Watcher`实例,  传入`vm, node ,name, \"value\"`这几个参数，\n\n`Watcher`的具体实现我们待会去看\n\n接下来就是判断`node.nodeType == 3`， 也就是text类型的节点， 如果是此类节点， 就先用正则去匹配一下`{{ }}`语法， 看看有没有使用到某个变量， \n如果匹配到了， 则通过`RegExp.$1`获取到被匹配到的值， 然后去除左右的空格， 交给变量`name`\n最后，同样的创建了一个`Watcher`实例,  传入`vm, node ,name, \"value\"`这几个参数，\n\n出现两次`Watcher`， 什么情况， 到底干了啥\n那， 现在就来让我们看看神秘的`Watcher`构造函数\n\n找到`Watcher`的构造函数\n```JavaScript\nlet uid = 0;\n\nfunction Watcher(vm, node, name, type) {\n  // 单例， 使用原因未知\n  Dep.target = this\n  // 姓名\n  this.name = name;\n  // 呵呵哒 uid\n  this.id = ++uid;\n  // 与变量相关的Node节点\n  this.node = node;\n  // vm 实例\n  this.vm = vm;\n  // 变量类型  nodeValue  || value\n  this.type = type;\n  // 触发自己原型上的update方法\n  this.update()\n  // Watcher 实例创建结束就把单例置空\n  Dep.target = null\n}\n```\n\n此时我们发现了一个关键的东西`Dep.target` ， 这个鬼东西原来在这里， 它被赋值为了`Watcher`的实例， 然后在`Watcher`实例上挂载了`name`，也就是用到的变量， 还使用了一个`uid`， 不过这`uid`也是呵呵了，用数字作为`uid`, `Vue`的真实源码就这么干的， 为每个`Watcher`都配分一个`uid`， 这会造成数组空间的不连续， 引发内存泄漏\n\n接着说， 然后他将传入的`node`节点， `vm`实例， 还有`type`( 'nodeValue' 和 'value' ), 都挂到了实例上面， 并且还在调用了`update`方法后， 将`Dep.target`设为`null`\n\n那我们来看下`update`做了啥\n\n```JavaScript\nWatcher.prototype = {\n  update() {\n    this.get()\n    if(!batcher) {\n      // bastcher 单例\n      batcher = new Batcher()\n    }\n    // 加入队列\n    batcher.push(this)\n  },\n  // 获取新值挂到自己的实例上\n  get() {\n    this.value = this.vm[this.name]  // 触发getter\n  }\n}\n```\n\n看到`update`方法， 首先调用了一下`get`方法， 这个`get`呢就是根据`this.name`从 `vm`实例上取一次值， 并挂到`Watcher`实例上的`value`属性上, 并且他还会触发一次`getter`方法，将自己加入到`dep`中， 也就是加入到报刊亭大爷的电话本中， 便于之后的通知\n\n然后判断了一下`window.batcher`是否存在， 如果不存在就创建一个， 保证其是一个单例模式,\n如果存在， 就将自己(`watcher`实例)，通过`push`方法传入\n\n看到这里，又晕了， 什么时候又冒出来一个`Batcher`\n\n我们又找到`Batcher`的构造函数好好分析下，\n```JavaScript\n// 批处理构造函数\nfunction Batcher() {\n  //  重置  has  queue waiting\n  this.reset()\n}\n\nBatcher.prototype.reset = function () {\n  this.has = {}\n  this.queue = []\n  this.waiting = false\n} \n\n// 将watcher 添加到队列中\nBatcher.prototype.push = function (job) {\n  let id = job.id\n  // 先根据 对象的key 看看是否已经有了这个watcher\n  if (!this.has[id]) {\n    // console.log(batcher)\n    this.queue.push(job)\n    // 将watcher 的key的设为true\n    this.has[id] = true\n\n    // 延迟执行\n    if (!this.waiting ) {\n      this.waiting = true\n      if ( \"Promise\" in window ) {\n        Promise.resolve().then(() => {\n          this.flush()\n        })\n      } else {\n        setTimeout(() => {\n          this.flush()\n        }, 0)\n      }\n    }\n  }\n}\n\n\n// 执行并情况事件队列\nBatcher.prototype.flush = function() {\n  this.queue.forEach(job => {\n    job.cb()\n  })\n  this.reset()\n}\n\n\n```\n\n`Batcher`的构造函数很简单， 就调用了一下自己的`reset`方法， 但好像事情远没有这么简单，我们不是在 `Watcher`的`update`方法中调用了`batcher.push`吗， 我也可以在这原型上找的这个方法， 首先它接收一个`job`参数， 也就是`Watcher`实例， \n\n获取到该`watcher`的`id`, 然后使用这个`id`,去`has`这个对象上访问一下， 看看是否存在，\n如果不存在，在证明之前没有添加进来过， 然后将该`watcher`实例加到`queue`队列中， \n并将`has`对象中`id`对应的值设为`true`, 以防止重复加入队列\n\n并且判断一下`waiting`，得知当前是否处于等待状态， 如果不是， 就将`waiting`改为`true`, 然后就是判断当前浏览器的支持情况， 将处理的任务扔到异步队列中，\n\n它这里这么做是为了，只批处理一次， 你一瞬间加入多个`watcher`, 很容易造成重复执行， 利用`Watcher`的`id`来过滤， 并且利用异步， 等你要加的`watcher`都加完了， 我再给你统一的去执行所有`Watcher`\n\n也就是异步任务结束后调用的`flush`方法， 它在内部会遍历`queue`队列， 挨个的调用`Watcher`的`cb`方法\n在这一切都执行完成之后， 又调用了一次`reset`方法， 将`bascher`的三个属性重置为初始状态\n\n此时关注点又回到了`Watcher`身上， 它的`cb`方法又做了什么\n```JavaScript\nWatcher.prototype = {\n  // ...省略其他方法\n\n  // 给dom赋值\n  cb() {\n    // 最终实际虚拟dom 处理结果， 只处理一次\n    // 虚拟dom -> diff( 虚拟dom ) -> 局部更新 -> createElement(vNode) -> render\n    this.node[this.type] = this.value\n  },\n}\n```\n\n可以看到`cb`方法做的事情很简单那， 就是**根据元素的值类型去修改元素对象的值**， 而这个`this.value`早在之前调用 `Watcher`的`get`方法时就被赋上了\n\n到这里，整个流程就走完了， 相信你还是一头雾水， 我们把整个流程来串一下\n\n1. new Vue\n2. 将`data`中的值挂上 `getter`和`setter` 的相应方法， 然后暂且搁置，因为此时还无人调用`getter`和`setter`\n3. 通过 `Compile`解析模板， 挨个递归`#app`下的`dom`, 判断元素类型， 如果是元素，并且使用了`v-model`， 就绑定一个`input`事件,  如果是文本类型节点,就去匹配是使用了`{{ }}`语法， 最后为他们都创建了一个`watcher`\n4. 每个`watcher` 用来保存相关的元素对象， `vm`实例，使用的`变量` 以及元素值类型, 并将自己的实例交给， `Dep.target`， 并触发自己的`update`方法，`update`方法又会调用`get`方法， `get`方法又会触发该变量的`getter`， 这也就使得`getter`中可以将该`watcher`放入`dep`实例中， 最后将自己也放入`Bacher`中，用以批处理以及将`Dep.target`置空\n5. `Batcher`是个单例， 根据`Watcher`的`id`, 它用来过滤重复传入的`Watcher`, 保证一个`Watcher`只触发一次, 并将更新事件丢入异步，等当前的连续操作执行完成后去调用`Watcher`的`cb`方法更新`dom`\n6. 之后用户修改了变量, `setter`又会调用`dep`这个发布者来发出通知， 相关的`Watcher`的`update`方法再次被调用， 又会加入`batcher` , `batcher`等待异步完成后又调用`Watcher`的`cb`方法更新`dom`\n\n\n**到这里就整个串完了，但是感觉废话还是有点多， 再简化一点流程**:\n\nnew Vue --> `Observe` 挂载 `setter` 和 `getter` -->  `Compile` 编译模板 --> 为每个指令分配一个`watcher` --> 创建时会调用一次`watcher.update` 将自己加入到`batcher`的队列 -->\n并且此时会触发 `getter` 将`watcher`加入`dep` -->  `batcher` 统一来处理`watcher`后初始化自己 -->  当用户修改某个变量时 --> `dep`通知`watcher` --> `watcher`又被加入`batcher`处理 --> `watcher` 更新`dom`\n\n\n😕好了， 神秘的`Vue`源码已被揭开面纱， 但这仅仅是简易版的实现， 真实的`Vue`非常庞大， 还有更多的内容， 这里只是让大家明白`MVVM`的核心原理\n\n\n项目源码:\n> https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\n\n优质文献: \n* [汤姆大叔的观察者模式](http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html)","source":"_posts/【Vue】源码解析.md","raw":"---\ntitle: 【Vue】源码解析\ndate: 2019-03-18 09:50:34\ncategories: Vue\ntags: Vue\n---\n\n现在三大框架风起云涌， `JQuery`老大哥的光辉不再， 使前端成为了各路诸侯的兵家必争之地， \n\n当然作为一名优质的前端，光跟风学框架是肯定不行的， 要知其然而知其所以然\n\n要了解`MVVM`的本质原理， `virtual Dom`和 `Diff`算法解决的问题\n\n拒绝盲目跟风\n\n\n## 🍎diffDom优劣\n现在很多人都说 `Vue`, `React` 多牛， `Diff`算法快，不用操作`Dom`。\n\n只能无语。\n\n`Diff`算法不是不需要操作`Dom`,  而是不需要开发者去操作`Dom`了， `Diff`算法其实不快， 就算使用了`virtual Dom`,  还得花实现把真实`Dom` 转换为 `virtual Dom` 再去比对， 这远远没有`js`直接 `getElementById`直达目标来的快\n\n那Diff算法不快为什么还要用呢?\n\n`Diff`算法其实是给那些比较随意的新手开发者准备的\n\n看这个例子\n\n```HTML\n<!-- 原本的dom -->\n<ul id=\"ul\">\n  <li>a</li>\n  <li>a</li>\n  <li>a</li>\n</ul>\n```\n```JavaScript\n// 拿到结果不管三七二十一把旧dom全替换了\n$.get('/api', (res) => {\n  var _HTML = \"\"\n  for(var i=0; i< res.length; i++){\n    _HTML = \"<li>\" + res[i] +\"</li>\"\n  }\n  $(\"#ul\").html(_HTML)\n})\n```\n\n如果是原始的`Dom`操作， 有很多小白会像这个例子一样， 不管`Dom`需不需要更新， 他都把`ajax`返回的请求全部跑一边，生成`HTML`模板， 然后把原本的所有`li`都删了，  再把新的模板放进去， `Dom`少还看不出来， 如果`Dom`多了呢， 上千的`Dom`， 这顿操作一下就玩炸了。\n\n况且网站优化原则就是尽量减小`Dom`操作， 如果是有经验的开发者， 会选择找到有变化的位置，使用`append`插入\n\n\n\n## 📄Vue架构目录\n去[Vue官网](https://github.com/vuejs/vue)下载`Vue`源码看看，\n\n打开里面会有一个 `src`目录， 里面就是整个的`Vue`源码\n\n目前有6个目录， 作用分别如下\n\n![Vue目录](http://img.nixiaolei.com/2019-03-30-10-44-35.png)\n\n\n`Vue.js` 的组成是由 `core` + 对应的 '平台' 补充代码构成（独立构建和运行时构建只是 `platforms` 下 `web` 平台的两种选择）\n\n`Vue`的核心原理就在`core`文件夹中， 让我们进入 `core` 文件夹看看\n\n![core文件夹](http://img.nixiaolei.com/2019-03-30-10-57-26.png)\n\n了解了目录，接下来我们就来研究`Vue`的双向绑定\n\n## 🔗双向绑定（响应式原理） 所涉及到的技术\n* ✅ **Obejct.defineProperty** _【提供getter 和 setter】_\n* ✅ **Observer** _【提供getter 和 setter】_\n* ✅ **watcher**  _【提供getter 和 setter】_\n* ✅ **Dep** _【负责收集watcher】_\n* ✅ **Directive** _【处理Vue模板指令】_\n\n\n### Obejct.defineProperty\n\n\n`Obejct.defineProperty` 是整个`Vue`的灵魂， \n\n来看一下`Obejct.defineProperty` 如何使用\n```JavaScript\nvar obj = {}\nvar c;\nObject.defineProperty(obj, 'a', {\n  get() {\n    console.log('getter')\n    return a\n  },\n  set(newVal) {\n    console.log('setter')\n    c = newVal\n    this.a = newVal\n  }\n})\n\nobj.a = '234'\nconsole.log(c) // 234\nconsole.log(obj.a) // 234\n```\n\n\n它帮助`Vue`实现了双向绑定, 但也因为这个， `Vue`也只能舍弃了对低版本浏览器的支持。\n\n\n![defineProperty兼容](http://img.nixiaolei.com/2019-03-30-11-48-41.png)\n\n它只能兼容到`IE9` ， 并且市面上的`polyfill`实现的也并不是很好\n\n那低版本如何代替`Obejct.defineProperty` ， 难道真没了它就不行吗？\n\n\n**当然有**：\n\n1. 👆 > IE 7\n\n实际上在`IE7`的时候就已经有暴露了 `__defineGetter__` 方法，\n![__defineGetter__](http://img.nixiaolei.com/2019-03-30-12-57-56.png)\n\n具体用法如下\n```JavaScript\nvar random = {};\nrandom.__defineGetter__('ten', function() { \n    return Math.floor(Math.random()*10); });\nrandom.__defineGetter__('hundred', function() { \n    return Math.floor(Math.random()*100); });\n\nrandom.ten // 随机的一个值\n```\n\n2.  👇 < IE 7\n\n早年间的`IE` 是支持`VBScript`,  [VBScript](http://www.w3school.com.cn/vbscript/index.asp) 就可以直接写类， 并且也支持`get`，`set`方法\n\n```JavaScript\nclass Test {\n  get name () {\n    \n  }\n  set name() {\n\n  }\n}\n```\n\n### 🐶霸道的IE\n说了这么多`IE`的坏， 这里也带一嘴`IE`的好，\n\n`IE`能够调用`EXE`程序, 比如`JS`无法设置打印机的宽高，就可以利用`ActiveObjectX`来做到, 甚至可以修改`word`格式等等  , 所以办公类的项目离不开`IE`\n\n\n\n\n\n## 😕MVVM 双向数据绑定流程\n\n\nMVVM: Model–view–viewmodel\n\n那怎么区分这些层呢\n\n* 🚀**Model**: `Observer`\n* ✈️**view** : `directive`\n* 🚚**viewmodel**: `Watcher` && `Dep`  _【用于连接 Model 和 view】_\n\n\n![双向数据绑定](http://img.nixiaolei.com/2019-03-30-11-51-42.png)\n\n\n\n先看`Directive`, 这就是我们平时写的`vue`指令， 如上面举例得的`v-text=\"times\"`, 这就是一个指令， 一个`Directive`会分配一个`Watcher`\n\n\n\n### Observer\n\n观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。订阅者模式涉及三个对象：发布者、主题对象、订阅者，三个对象间的是一对多的关系，每当主题对象状态发生改变时，其相关依赖对象都会得到通知，并被自动更新。\n\n简单的描述就是:\n\n你想买漫画， 但是问了报刊亭的大爷， 大爷说现在没有， 还没到货， 然后你回去了， 第二天你又去问， 大爷还是说没有， 如果你每天这样问， 大爷估计会嫌你烦。 如果这时候你把你的电话给大爷， 大爷记录到他的**本子**上,  当大爷的漫画到货的时候电话通知你。\n\n这时你就是`订阅者`, 大爷就是`发布者`, 你们就存在一个发布订阅者的关系\n\n\n\n**Vue 中的Observer**\n\nObserver会观察两种类型的数据，`Object` 与 `Array`\n对于`Array`类型的数据，由于 `JavaScript` 的限制， `Vue` 不能检测变化,会先重写操作数组的原型方法，重写后能达到两个目的，\n\n当数组发生变化时，触发 `notify` 如果是 `push`，`unshift`，`splice` 这些添加新元素的操作，则会使用`observer`观察新添加的数据重写完原型方法后，遍历拿到数组中的每个数据 使用`observer`观察它而对于`Object`类型的数据，则遍历它的每个`key`，使用 `defineProperty` 设置 `getter` 和 `setter`，当触发`getter`的时候，`observer`则开始收集依赖，而触发`setter`的时候，`observer`则触发`notify`。\n\n\n#### 对 Object 的处理\n`Observer` 对象的标志就是`__ob__` 这个属性，这个属性保存了 `Observer` 对象自己本身。对象在转化为 `Observer` 对象的过程中是一个递归的过程，对象的子元素如果是对象或数组的话，也会转化为 `Observer` 对象\n\n\n#### 对数组的处理\n\n其实 `observeArray` 方法就是对数组进行遍历，递归调用 `observe` 方法，最终都会走入 `walk` 方监控单个元素。而 `walk` 方法就是遍历对象，结合 defineReactive 方法递归将属性转化为 `getter` 和 `setter`\n\n\n### Watcher\n`Watcher` 是将模板和 `Observer` 对象结合在一起的纽带。`Watcher` 是订阅者模式中的订阅者。`Watcher` 的两个参数： `expOrFn` 最终会被转换为 `getter` 函数， cb 是更新时执行的回调。依赖收集的入口就是get函数。\n\n> getter 函数是用来连接监控属性与 `Watcher` 的关键\n\n\n只有通过`watcher` 触发的getter 会收集依赖，而所谓的被收集的依赖就是当前`watcher`.初始化时传入的参数 expOrFn 中涉及到的每一项数据，然后触发该数据项的 getter 函数；getter 函数中就是通过判断 Dep.target的有无来判断是 `Watcher` 初始化时调用的还是普通数据读取，如果有则进行依赖收集\n\n\n### Dep\n\n这个方法是在响应式的过程中调用的，用户修改数据触发 setter 函数，函数的最后一行就是调用 dep.notify 去通知订阅者更新视图。\n\n### Directive\n\n![Directive](http://img.nixiaolei.com/2019-03-30-14-50-38.png)\n\n\n关于编译这块vue分了两种类型，一种是文本节点，一种是元素节点\n\n\nvue内置了这么多的指令，这些指令都会抛出两个接口bind 和 update，这两个接口的作用是，编译的最后一步是执行所有用到的指令的bind方法，而 update 方法则是当watcher 触发 update 时，Directive会触发指令的update方法\n\n\nobserve -> 触发setter -> watcher -> 触发update -> Directive -> 触发update -> 指令\n\n\n\n\n\n## 💥源码分析\nVue的完全版源码有很多判断以及其他的逻辑， 对于观看源码的人，会造成极大的困难，\n\n因此准备了这版仿照Vue流程实现的 实现了双向绑定的[简版Vue](https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue), 方便学习理解\n\n通过这版对[Vue源码的简易翻版](https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue)， 我们来快速理解Vue原理\n\n### ✨ new Vue\n\n首先看一下，我们的 new Vue, 这是所有操作的入口\n\n```JavaScript\nnew Vue({\n  data: {\n    nickname: '张三',\n    email: \"123123@qq.com\"\n  },\n  el: '#app'\n})\n```\n相信使用过`Vue `的小伙伴都明白， 这里定义了一个`data`， 用于存放变量， el是目标`dom`的选择器\n\n### 🔥 new Vue 执行时做了什么\n\n```JavaScript\nfunction Vue(option) {\n  var data = option.data \n  this.data = data\n  // 挂载 getter 和 setter\n  observe(data, this)\n  var id = option.el\n  // 编译 模板\n  var dom = new Compile(document.querySelector(id), this)\n  // 把编译好的模板挂载到 #app 上\n  document.querySelector(id).appendChild(dom)\n}\n```\n\n我们可以看到， Vue其实是一个构造函数， 它接收了一个参数`option`， 这个`option`就是我们`new Vue`传入的那个对象\n因此我们可以通过`option` 拿到`data`和`el`两个变量， 当然这是js基础哈， 我就不再说了\n\n拿到`data`后， 我们可以看到它调用了一个 `observe`方法, 将data和this传入( 此时this时Vue实例 )\n\n接下来又根据`el`来获取`dom`， 同样的将获取到的`dom`和`this`传入了 `Compile`中，  并且还接收了一个返回值， 然后又将这个返回值挂到了 `#app`上\n\n是不是感觉， 什么鬼？, 这顿操作是啥\n\n首先看一下疑惑的 `observe`， 传入了 `data`， `this`, 然后就没动静了， 既然如此， 我们就进入`observe`看看\n\n找到`Observe`的构造函数\n```JavaScript\nfunction observe(obj, vm) {\n  Object.keys(obj).forEach(key => {\n    defineReactive(vm, key, obj[key])\n  })\n}\n```\n可以看到，它接收一个`obj`和 `vm`， 哦， 这里就一一对应上了， 就是我们刚才传入的 `data`和`this` \n\n来看看它做了什么， \n\n它把`obj`枚举了一遍， 并将每一次的  `vm`, `key`,`value` 都传入一个叫 `defineReactive`的方法\n\n\n好，那就让来看`defineReactive`做了什么\n\n```JavaScript\nfunction defineReactive(vm, key, val) {\n  // 为每个变量分配一个 dep实例\n  var dep = new Dep()\n  // 配置getter和setter并且挂载到vm上\n  Object.defineProperty(vm, key, {\n    get() {\n      if ( Dep.target ) {\n        // JS的浏览器单线程特性， 保证整个全局变量在同一时间内， 只有一个监听器使用\n        dep.addSub(Dep.target)\n      }\n      return val\n    },\n    set(newVal) {\n      if ( newVal == val ) return;\n      val = newVal;\n      // 作为发布者发出通知\n      dep.notify()\n    }\n  })\n}\n```\n\n我们看到， 它`new`了一个`Dep`， 这个`Dep`就是报刊亭大爷的电话本， 用来收集所有想买报纸或杂志的人的电话， 等到到货时就好挨个通知\n\n然后我们看到了灵魂函数 `Object.defineProperty`,  \n\n嗷那我们应该就明白了， 这里的一顿操作就是为了给`data`里的每个属性都挂载上 `getter`，`setter`, 并且将这些属性直接转移到了`vm`上（Vue实例）\n\n那既然如此， \n\n🤪让我们看看 `getter`方法做了什么， \n\n首先它判断了一下`Dep.target`，  如果`Dep.target`为`true` , 就调用`dep`的`addSub`方法， 这里`Dep.target`是啥我们先不管， 留个印象即可\n\n然后它直接`return`了`val`\n\n😵再来看看`setter`方法\n\n`setter`方法接收一个新值，  首先就是判断了新值和原本的值是否相等， 如果相等就不做处理了， 如果不相等， 它将新值赋给`val`\n\n然后调用`dep`实例上的`notify`方法， `notify` 看着名字也知道是通知， 也就是大爷挨个打电话的一个操作\n\n\n好, 这一块我们理顺了， 是为了挂上`getter`和`setter`， 但又遇到了新问题`dep`， `dep`到底在干什么， 为什么被`getter`，`setter`都使用了 \n\n\n找到`Dep`的构造函数\n```JavaScript\nfunction Dep() {\n  // 存放watcher\n  this.subs = []\n}\n\nDep.prototype = {\n  // 添加watcher, 也就是添加订阅\n  addSub(sub) {\n    this.subs.push(sub)\n  },\n  // 通知所有watcher\n  notify() {\n    this.subs.forEach(sub => {\n      sub.update()\n    })\n  }\n}\n```\n\n我们可以看到， `Dep`构造函数中维护了一个 `subs`数组， 并且下面的在`prototype`上定义了几个方法， `addSub` 和`notify`，\n这不就是刚刚`observe`里调用的两个方法吗， \n哦，明白了， `addSub`原来是将`getter`中传入的 `Dep.target`追加到每个`Dep`实例都单独维护的一个`subs`数组中呀， `notify`就是遍历整个数组，挨个调用`update`方法（先不管update的具体实现）\n\n\n好， 解决了`observe`方法，那我们就回到最初的`Vue`构造函数中,  继续往下走, 攻克剩余的绿色区域\n\n![Compile](http://img.nixiaolei.com/2019-03-31-11-36-41.png)\n\n\n我们可以看到，它通过`el` 获取到了`dom`, 并在`new Compile` 将`dom` 传入\n\n那我们就找到`Compile`的构造函数一探究竟\n```JavaScript\nfunction Compile(node, vm) {\n  if(node) {\n    this.$frag = this.nodeToFragment(node, vm)\n    return this.$frag\n  }\n}\n```\n\n可以看到， 它接收了一个`node`， 和一个`vm` , 并且判断了一下`node`是否存在， \n\n并将`node`和`vm`，传入了`this.nodeToFragment`方法， 又将其的返回结果`return`出去， 也就是`new Compile`之后返回的值 ，如下\n\n![Compile02](http://img.nixiaolei.com/2019-03-31-11-49-23.png)\n\n\n那`this.nodeToFragment`这个方法做了什么， 让我们找到他\n```JavaScript\nCompile.prototype = {\n  nodeToFragment(node, vm) {\n    var _this = this\n    // 创建文档片段\n    var frag = document.createDocumentFragment()\n    var child;\n    while ( child = node.firstChild ) {\n      // 替换变量\n      _this.compileElement(child, vm)\n      // 剪贴子元素\n      frag.append(child)\n    }\n    return frag\n  },\n  compileElement(node, vm) {\n    var reg = /\\{\\{(.*)\\}\\}/;\n    // 节点类型为元素, 根据nodeType来判断\n    if ( node.nodeType === 1 ) {\n      // 获取自定义属性\n      var attr = node.attributes\n      for (var i = 0; i < attr.length; i++) {\n        if (attr[i].nodeName == \"v-model\") {\n          // 获取v-model 绑定的属性名\n          var name = attr[i].nodeValue\n          // 双向绑定\n          node.addEventListener('input', function(e) {\n            // 给相应的data属性赋值， 进而触发该属性的set方法\n            // 再批处理渲染元素\n            vm[name] = e.target.value \n          })\n          // 把this ，节点， 还有v-model绑定的变量交给watcher\n          new Watcher(vm, node, name, \"value\")\n        }\n      }\n    }\n\n    // 节点类型为text\n    if ( node.nodeType === 3 ) {\n      if ( reg.test(node.nodeValue) ) {\n        var name = RegExp.$1; // 获取匹配到的字符串\n        name = name.trim()\n         // 把this ，节点， 还有{{}}中使用的变量交给watcher\n        new Watcher(vm, node, name, 'nodeValue')\n      }\n    }\n  }\n}\n```\n\n我们看到它在`Compile`原型上挂了`nodeToFragment`, `compileElement`两个方法，  `nodeToFragment`方法接收 `node`, `vm`参数\n\n先保存了一下`this`指向,  然后使用`document.createDocumentFragment()`方法创建了一个文档片段， 并将在`while`循环中传入的`node`节点的第一个元素赋值给 `child`变量，\n然后使用`compileElement(child, vm)` 将`child`和`vm` 传入, 然后将`child` 追加给创建好的文档片段`frag`, 你肯定会觉得这是个死循环, 其实不是的， 这个`append`对`dom`有剪切的效果，\n所以他会一直抽离`node`的第一个节点，直至`node`空了， 吸干他\n\n完成了这顿操作后， 再将`frag`文档片段返回\n\n然后我们来看看它在`while`中调用的`compileElement`方法做了什么\n\n它同样接收`node`和`vm` , 首先就是定义一个正则， 这是用来匹配`{{ }}`双括号的， 也就是我们平时的变量写法\n\n然后它判断了一下这个 `node`的节点类型,  如果`nodeType == 1`, 那就说明是元素，  如果`nodeType == 3` 那就说明节点类型是`text`\n      \n如果节点类型是元素， 就利用`attributes` 方法，获取到该元素身上的属性,  查看是否存在`v-model`这样一个属性， 如果有，就获取到`v-model`填写的变量，交给变量`name`,\n然后监听该元素的`input`事件， \n\n所以每当改元素发生`input`时间时，就将元素上的`value`根据`v-model`上获取到的`name`作为`vm`的`key`去修改`vm`实例上的对应的值， 因为`vm`上的变量已经被挂载此来触发`vm`\n\n最后还创建了一个`Watcher`实例,  传入`vm, node ,name, \"value\"`这几个参数，\n\n`Watcher`的具体实现我们待会去看\n\n接下来就是判断`node.nodeType == 3`， 也就是text类型的节点， 如果是此类节点， 就先用正则去匹配一下`{{ }}`语法， 看看有没有使用到某个变量， \n如果匹配到了， 则通过`RegExp.$1`获取到被匹配到的值， 然后去除左右的空格， 交给变量`name`\n最后，同样的创建了一个`Watcher`实例,  传入`vm, node ,name, \"value\"`这几个参数，\n\n出现两次`Watcher`， 什么情况， 到底干了啥\n那， 现在就来让我们看看神秘的`Watcher`构造函数\n\n找到`Watcher`的构造函数\n```JavaScript\nlet uid = 0;\n\nfunction Watcher(vm, node, name, type) {\n  // 单例， 使用原因未知\n  Dep.target = this\n  // 姓名\n  this.name = name;\n  // 呵呵哒 uid\n  this.id = ++uid;\n  // 与变量相关的Node节点\n  this.node = node;\n  // vm 实例\n  this.vm = vm;\n  // 变量类型  nodeValue  || value\n  this.type = type;\n  // 触发自己原型上的update方法\n  this.update()\n  // Watcher 实例创建结束就把单例置空\n  Dep.target = null\n}\n```\n\n此时我们发现了一个关键的东西`Dep.target` ， 这个鬼东西原来在这里， 它被赋值为了`Watcher`的实例， 然后在`Watcher`实例上挂载了`name`，也就是用到的变量， 还使用了一个`uid`， 不过这`uid`也是呵呵了，用数字作为`uid`, `Vue`的真实源码就这么干的， 为每个`Watcher`都配分一个`uid`， 这会造成数组空间的不连续， 引发内存泄漏\n\n接着说， 然后他将传入的`node`节点， `vm`实例， 还有`type`( 'nodeValue' 和 'value' ), 都挂到了实例上面， 并且还在调用了`update`方法后， 将`Dep.target`设为`null`\n\n那我们来看下`update`做了啥\n\n```JavaScript\nWatcher.prototype = {\n  update() {\n    this.get()\n    if(!batcher) {\n      // bastcher 单例\n      batcher = new Batcher()\n    }\n    // 加入队列\n    batcher.push(this)\n  },\n  // 获取新值挂到自己的实例上\n  get() {\n    this.value = this.vm[this.name]  // 触发getter\n  }\n}\n```\n\n看到`update`方法， 首先调用了一下`get`方法， 这个`get`呢就是根据`this.name`从 `vm`实例上取一次值， 并挂到`Watcher`实例上的`value`属性上, 并且他还会触发一次`getter`方法，将自己加入到`dep`中， 也就是加入到报刊亭大爷的电话本中， 便于之后的通知\n\n然后判断了一下`window.batcher`是否存在， 如果不存在就创建一个， 保证其是一个单例模式,\n如果存在， 就将自己(`watcher`实例)，通过`push`方法传入\n\n看到这里，又晕了， 什么时候又冒出来一个`Batcher`\n\n我们又找到`Batcher`的构造函数好好分析下，\n```JavaScript\n// 批处理构造函数\nfunction Batcher() {\n  //  重置  has  queue waiting\n  this.reset()\n}\n\nBatcher.prototype.reset = function () {\n  this.has = {}\n  this.queue = []\n  this.waiting = false\n} \n\n// 将watcher 添加到队列中\nBatcher.prototype.push = function (job) {\n  let id = job.id\n  // 先根据 对象的key 看看是否已经有了这个watcher\n  if (!this.has[id]) {\n    // console.log(batcher)\n    this.queue.push(job)\n    // 将watcher 的key的设为true\n    this.has[id] = true\n\n    // 延迟执行\n    if (!this.waiting ) {\n      this.waiting = true\n      if ( \"Promise\" in window ) {\n        Promise.resolve().then(() => {\n          this.flush()\n        })\n      } else {\n        setTimeout(() => {\n          this.flush()\n        }, 0)\n      }\n    }\n  }\n}\n\n\n// 执行并情况事件队列\nBatcher.prototype.flush = function() {\n  this.queue.forEach(job => {\n    job.cb()\n  })\n  this.reset()\n}\n\n\n```\n\n`Batcher`的构造函数很简单， 就调用了一下自己的`reset`方法， 但好像事情远没有这么简单，我们不是在 `Watcher`的`update`方法中调用了`batcher.push`吗， 我也可以在这原型上找的这个方法， 首先它接收一个`job`参数， 也就是`Watcher`实例， \n\n获取到该`watcher`的`id`, 然后使用这个`id`,去`has`这个对象上访问一下， 看看是否存在，\n如果不存在，在证明之前没有添加进来过， 然后将该`watcher`实例加到`queue`队列中， \n并将`has`对象中`id`对应的值设为`true`, 以防止重复加入队列\n\n并且判断一下`waiting`，得知当前是否处于等待状态， 如果不是， 就将`waiting`改为`true`, 然后就是判断当前浏览器的支持情况， 将处理的任务扔到异步队列中，\n\n它这里这么做是为了，只批处理一次， 你一瞬间加入多个`watcher`, 很容易造成重复执行， 利用`Watcher`的`id`来过滤， 并且利用异步， 等你要加的`watcher`都加完了， 我再给你统一的去执行所有`Watcher`\n\n也就是异步任务结束后调用的`flush`方法， 它在内部会遍历`queue`队列， 挨个的调用`Watcher`的`cb`方法\n在这一切都执行完成之后， 又调用了一次`reset`方法， 将`bascher`的三个属性重置为初始状态\n\n此时关注点又回到了`Watcher`身上， 它的`cb`方法又做了什么\n```JavaScript\nWatcher.prototype = {\n  // ...省略其他方法\n\n  // 给dom赋值\n  cb() {\n    // 最终实际虚拟dom 处理结果， 只处理一次\n    // 虚拟dom -> diff( 虚拟dom ) -> 局部更新 -> createElement(vNode) -> render\n    this.node[this.type] = this.value\n  },\n}\n```\n\n可以看到`cb`方法做的事情很简单那， 就是**根据元素的值类型去修改元素对象的值**， 而这个`this.value`早在之前调用 `Watcher`的`get`方法时就被赋上了\n\n到这里，整个流程就走完了， 相信你还是一头雾水， 我们把整个流程来串一下\n\n1. new Vue\n2. 将`data`中的值挂上 `getter`和`setter` 的相应方法， 然后暂且搁置，因为此时还无人调用`getter`和`setter`\n3. 通过 `Compile`解析模板， 挨个递归`#app`下的`dom`, 判断元素类型， 如果是元素，并且使用了`v-model`， 就绑定一个`input`事件,  如果是文本类型节点,就去匹配是使用了`{{ }}`语法， 最后为他们都创建了一个`watcher`\n4. 每个`watcher` 用来保存相关的元素对象， `vm`实例，使用的`变量` 以及元素值类型, 并将自己的实例交给， `Dep.target`， 并触发自己的`update`方法，`update`方法又会调用`get`方法， `get`方法又会触发该变量的`getter`， 这也就使得`getter`中可以将该`watcher`放入`dep`实例中， 最后将自己也放入`Bacher`中，用以批处理以及将`Dep.target`置空\n5. `Batcher`是个单例， 根据`Watcher`的`id`, 它用来过滤重复传入的`Watcher`, 保证一个`Watcher`只触发一次, 并将更新事件丢入异步，等当前的连续操作执行完成后去调用`Watcher`的`cb`方法更新`dom`\n6. 之后用户修改了变量, `setter`又会调用`dep`这个发布者来发出通知， 相关的`Watcher`的`update`方法再次被调用， 又会加入`batcher` , `batcher`等待异步完成后又调用`Watcher`的`cb`方法更新`dom`\n\n\n**到这里就整个串完了，但是感觉废话还是有点多， 再简化一点流程**:\n\nnew Vue --> `Observe` 挂载 `setter` 和 `getter` -->  `Compile` 编译模板 --> 为每个指令分配一个`watcher` --> 创建时会调用一次`watcher.update` 将自己加入到`batcher`的队列 -->\n并且此时会触发 `getter` 将`watcher`加入`dep` -->  `batcher` 统一来处理`watcher`后初始化自己 -->  当用户修改某个变量时 --> `dep`通知`watcher` --> `watcher`又被加入`batcher`处理 --> `watcher` 更新`dom`\n\n\n😕好了， 神秘的`Vue`源码已被揭开面纱， 但这仅仅是简易版的实现， 真实的`Vue`非常庞大， 还有更多的内容， 这里只是让大家明白`MVVM`的核心原理\n\n\n项目源码:\n> https://github.com/nxl3477/note/tree/master/Javascript/Vue/%E5%AE%9E%E7%8E%B0vue\n\n优质文献: \n* [汤姆大叔的观察者模式](http://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html)","slug":"【Vue】源码解析","published":1,"updated":"2019-03-31T06:24:49.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtwjio030048awuwbg0mjzhx"}],"PostAsset":[],"PostCategory":[{"post_id":"cjtwjinl90002awuw9qoul8ke","category_id":"cjtwjinlh0004awuwhbb29tqj","_id":"cjtwjinm0000dawuw8a96kkj3"},{"post_id":"cjtwjinle0003awuw22s0jo8x","category_id":"cjtwjinlt0009awuwrmjxj3l4","_id":"cjtwjinm8000jawuwgmvqctac"},{"post_id":"cjtwjinlk0006awuw13ll6rx2","category_id":"cjtwjinlt0009awuwrmjxj3l4","_id":"cjtwjinmd000oawuwo7f2x7f2"},{"post_id":"cjtwjinlo0007awuwh1kvgx16","category_id":"cjtwjinm7000iawuwp72wk05g","_id":"cjtwjinmi000wawuwnex47jwv"},{"post_id":"cjtwjinmb000nawuw1mbnwapl","category_id":"cjtwjinlt0009awuwrmjxj3l4","_id":"cjtwjinml000zawuwhfsptote"},{"post_id":"cjtwjinme000sawuwhotz9smy","category_id":"cjtwjinlt0009awuwrmjxj3l4","_id":"cjtwjinmn0012awuwhalg67bq"},{"post_id":"cjtwjinlr0008awuw362976te","category_id":"cjtwjinlt0009awuwrmjxj3l4","_id":"cjtwjinmp0017awuw7j9lxqv4"},{"post_id":"cjtwjinmj000yawuwhp0rw0is","category_id":"cjtwjinlt0009awuwrmjxj3l4","_id":"cjtwjinmr0019awuwfxlz6oly"},{"post_id":"cjtwjinlv000bawuwgahzxoeu","category_id":"cjtwjinmh000vawuwbagatktw","_id":"cjtwjinmu001eawuwfhsv33sq"},{"post_id":"cjtwjinmm0011awuwbmrr38pw","category_id":"cjtwjinlt0009awuwrmjxj3l4","_id":"cjtwjinmw001hawuw1qzneaqw"},{"post_id":"cjtwjinmo0016awuwmxhzwhi4","category_id":"cjtwjinlt0009awuwrmjxj3l4","_id":"cjtwjinn0001mawuw5v4i5ald"},{"post_id":"cjtwjinmq0018awuwo7m9x7h3","category_id":"cjtwjinlt0009awuwrmjxj3l4","_id":"cjtwjinn1001oawuw3u3a1dx9"},{"post_id":"cjtwjinly000cawuwg7ivo6u6","category_id":"cjtwjinmo0014awuwa33wikwq","_id":"cjtwjinn4001sawuwheba2yna"},{"post_id":"cjtwjinmu001gawuwa47qn97a","category_id":"cjtwjinmh000vawuwbagatktw","_id":"cjtwjinn4001tawuwfzyqhgre"},{"post_id":"cjtwjinm3000gawuwe4iygyow","category_id":"cjtwjinmo0014awuwa33wikwq","_id":"cjtwjinn5001vawuwulmyj8hn"},{"post_id":"cjtwjinm6000hawuw05522u5a","category_id":"cjtwjinmo0014awuwa33wikwq","_id":"cjtwjinn6001yawuwjlj2lv56"},{"post_id":"cjtwjinm9000lawuw0sbzi5a0","category_id":"cjtwjinn2001qawuwtqt6hac5","_id":"cjtwjinn70021awuwkh7y31d8"},{"post_id":"cjtwjinmg000uawuwan78yh65","category_id":"cjtwjinn5001uawuwi3hqeup0","_id":"cjtwjinna0024awuw1dsl96rp"},{"post_id":"cjtwjinms001bawuwvz0myoy3","category_id":"cjtwjinn70020awuw236fbeaa","_id":"cjtwjinnc0027awuwe5owqg2x"},{"post_id":"cjtwjinmx001jawuwmjp0kytn","category_id":"cjtwjinn2001qawuwtqt6hac5","_id":"cjtwjinnd002aawuwc2dbppv4"},{"post_id":"cjtwjinuv003bawuwgpdues6u","category_id":"cjtwjinmh000vawuwbagatktw","_id":"cjtwjinv5003jawuw7hsq6ktu"},{"post_id":"cjtwjinv7003kawuwo2jk6q36","category_id":"cjtwjinn2001qawuwtqt6hac5","_id":"cjtwjinvc003pawuw9rls4lcx"},{"post_id":"cjtwjinuy003dawuwvec9zh54","category_id":"cjtwjinv3003gawuw6fpnu38f","_id":"cjtwjinvd003tawuwt8qlnbgc"},{"post_id":"cjtwjinv1003fawuwr396qzsn","category_id":"cjtwjinv3003gawuw6fpnu38f","_id":"cjtwjinve003vawuwohtlrsp2"},{"post_id":"cjtwjinv4003iawuw9mofj1y0","category_id":"cjtwjinvc003qawuwzrzwhrqx","_id":"cjtwjinvf003xawuwrli1o0a3"},{"post_id":"cjtwjio030048awuwbg0mjzhx","category_id":"cjtwjinmo0014awuwa33wikwq","_id":"cjtwjio08004aawuw4g8f62u5"}],"PostTag":[{"post_id":"cjtwjinl90002awuw9qoul8ke","tag_id":"cjtwjinlj0005awuw797e95qv","_id":"cjtwjinma000mawuwgnv5zx4e"},{"post_id":"cjtwjinl90002awuw9qoul8ke","tag_id":"cjtwjinlu000aawuwy79twahe","_id":"cjtwjinmd000pawuwqxu2qcoo"},{"post_id":"cjtwjinl90002awuw9qoul8ke","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinmg000tawuwhbs453xl"},{"post_id":"cjtwjinle0003awuw22s0jo8x","tag_id":"cjtwjinm8000kawuwgm7yc4np","_id":"cjtwjinml0010awuwbs2nw9br"},{"post_id":"cjtwjinle0003awuw22s0jo8x","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinmn0013awuw9e4rozua"},{"post_id":"cjtwjinmo0016awuwmxhzwhi4","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinmr001aawuw0stnssp6"},{"post_id":"cjtwjinmq0018awuwo7m9x7h3","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinmu001fawuwjhba69my"},{"post_id":"cjtwjinlk0006awuw13ll6rx2","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinmw001iawuwysktzvy1"},{"post_id":"cjtwjinlk0006awuw13ll6rx2","tag_id":"cjtwjinmo0015awuwvw307nuk","_id":"cjtwjinn0001nawuwsiijj6j9"},{"post_id":"cjtwjinlo0007awuwh1kvgx16","tag_id":"cjtwjinmt001dawuwi3agr5fb","_id":"cjtwjinn1001pawuwkmieea3i"},{"post_id":"cjtwjinlr0008awuw362976te","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinn6001xawuwi7uksr86"},{"post_id":"cjtwjinlr0008awuw362976te","tag_id":"cjtwjinn3001rawuwkk84op23","_id":"cjtwjinn6001zawuw051scfxi"},{"post_id":"cjtwjinlv000bawuwgahzxoeu","tag_id":"cjtwjinm8000kawuwgm7yc4np","_id":"cjtwjinn90023awuwlsvcamub"},{"post_id":"cjtwjinly000cawuwg7ivo6u6","tag_id":"cjtwjinn80022awuwbkwc1h73","_id":"cjtwjinnd0029awuw2d0hxt87"},{"post_id":"cjtwjinly000cawuwg7ivo6u6","tag_id":"cjtwjinnb0026awuwrocr9bm9","_id":"cjtwjinne002bawuwiun1jvee"},{"post_id":"cjtwjinm3000gawuwe4iygyow","tag_id":"cjtwjinnb0026awuwrocr9bm9","_id":"cjtwjinnf002dawuw1xghrif9"},{"post_id":"cjtwjinm6000hawuw05522u5a","tag_id":"cjtwjinnb0026awuwrocr9bm9","_id":"cjtwjinnh002fawuwo3wkhluo"},{"post_id":"cjtwjinm9000lawuw0sbzi5a0","tag_id":"cjtwjinng002eawuw74vwwzn5","_id":"cjtwjinnj002iawuw9yfq29ne"},{"post_id":"cjtwjinm9000lawuw0sbzi5a0","tag_id":"cjtwjinni002gawuwdtoilujm","_id":"cjtwjinnj002jawuwmwyv8mwp"},{"post_id":"cjtwjinmb000nawuw1mbnwapl","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinnk002lawuw4yslzho6"},{"post_id":"cjtwjinmb000nawuw1mbnwapl","tag_id":"cjtwjinni002hawuw15royl1g","_id":"cjtwjinnk002mawuwt74g015w"},{"post_id":"cjtwjinme000sawuwhotz9smy","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinnl002oawuw0qzxst2t"},{"post_id":"cjtwjinme000sawuwhotz9smy","tag_id":"cjtwjinnj002kawuwz5kz1ze6","_id":"cjtwjinnl002pawuwamr2cc6z"},{"post_id":"cjtwjinmg000uawuwan78yh65","tag_id":"cjtwjinnk002nawuwl43opgx2","_id":"cjtwjinnm002rawuwx68i7plt"},{"post_id":"cjtwjinmg000uawuwan78yh65","tag_id":"cjtwjinm8000kawuwgm7yc4np","_id":"cjtwjinnm002sawuw4z8fsjlq"},{"post_id":"cjtwjinmj000yawuwhp0rw0is","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinnn002uawuwlbr5ww41"},{"post_id":"cjtwjinmj000yawuwhp0rw0is","tag_id":"cjtwjinmo0015awuwvw307nuk","_id":"cjtwjinnn002vawuwq1ql99tj"},{"post_id":"cjtwjinmm0011awuwbmrr38pw","tag_id":"cjtwjinm1000fawuwypduo39b","_id":"cjtwjinno002yawuwr2vu4pir"},{"post_id":"cjtwjinmm0011awuwbmrr38pw","tag_id":"cjtwjinnm002tawuw1xe45bn0","_id":"cjtwjinnp002zawuwq3l0y045"},{"post_id":"cjtwjinmm0011awuwbmrr38pw","tag_id":"cjtwjinnn002wawuw71awcm24","_id":"cjtwjinnp0031awuwhraowyo4"},{"post_id":"cjtwjinms001bawuwvz0myoy3","tag_id":"cjtwjinno002xawuwz26ves9n","_id":"cjtwjinnp0032awuwlqbzg98f"},{"post_id":"cjtwjinmu001gawuwa47qn97a","tag_id":"cjtwjinnp0030awuwiretpf72","_id":"cjtwjinnq0034awuwrogtwlqo"},{"post_id":"cjtwjinmx001jawuwmjp0kytn","tag_id":"cjtwjinnq0033awuw6tzdkvi8","_id":"cjtwjinnr0037awuwsy31350s"},{"post_id":"cjtwjinmx001jawuwmjp0kytn","tag_id":"cjtwjinnq0035awuw4wwqejxa","_id":"cjtwjinnr0038awuwmj828foe"},{"post_id":"cjtwjinmx001jawuwmjp0kytn","tag_id":"cjtwjinnr0036awuwre2ezq8r","_id":"cjtwjinns0039awuwl8kcvcqa"},{"post_id":"cjtwjinuv003bawuwgpdues6u","tag_id":"cjtwjinm8000kawuwgm7yc4np","_id":"cjtwjinv1003eawuwymdbtusd"},{"post_id":"cjtwjinuy003dawuwvec9zh54","tag_id":"cjtwjinm8000kawuwgm7yc4np","_id":"cjtwjinvb003nawuwfw8p5r7l"},{"post_id":"cjtwjinuy003dawuwvec9zh54","tag_id":"cjtwjinv4003hawuw3qzbbbvw","_id":"cjtwjinvc003oawuwtb0bjzjq"},{"post_id":"cjtwjinv1003fawuwr396qzsn","tag_id":"cjtwjinm8000kawuwgm7yc4np","_id":"cjtwjinvd003sawuw0mheyuo7"},{"post_id":"cjtwjinv1003fawuwr396qzsn","tag_id":"cjtwjinv4003hawuw3qzbbbvw","_id":"cjtwjinve003uawuwaedu83lm"},{"post_id":"cjtwjinv4003iawuw9mofj1y0","tag_id":"cjtwjinvc003rawuwo2u254gg","_id":"cjtwjinvj0041awuwr614zqfw"},{"post_id":"cjtwjinv4003iawuw9mofj1y0","tag_id":"cjtwjinve003wawuwmmjr47a2","_id":"cjtwjinvj0042awuw5q926omu"},{"post_id":"cjtwjinv4003iawuw9mofj1y0","tag_id":"cjtwjinvg003yawuw6ha65qpj","_id":"cjtwjinvl0043awuwspi4ynwk"},{"post_id":"cjtwjinv4003iawuw9mofj1y0","tag_id":"cjtwjinvh003zawuw4bxlyfw3","_id":"cjtwjinvl0044awuwaq6ujrcw"},{"post_id":"cjtwjinv7003kawuwo2jk6q36","tag_id":"cjtwjinnq0033awuw6tzdkvi8","_id":"cjtwjinvm0045awuwoh4blh2x"},{"post_id":"cjtwjinv7003kawuwo2jk6q36","tag_id":"cjtwjinvi0040awuw73mg97zg","_id":"cjtwjinvn0046awuw0lmid9qf"},{"post_id":"cjtwjinv7003kawuwo2jk6q36","tag_id":"cjtwjinnr0036awuwre2ezq8r","_id":"cjtwjinvo0047awuwcjqnt02p"},{"post_id":"cjtwjio030048awuwbg0mjzhx","tag_id":"cjtwjinnb0026awuwrocr9bm9","_id":"cjtwjio070049awuwc6097ljn"}],"Tag":[{"name":"学习技巧","_id":"cjtwjinlj0005awuw797e95qv"},{"name":"学习渠道","_id":"cjtwjinlu000aawuwy79twahe"},{"name":"css","_id":"cjtwjinm1000fawuwypduo39b"},{"name":"JavaScript","_id":"cjtwjinm8000kawuwgm7yc4np"},{"name":"PostCss","_id":"cjtwjinmo0015awuwvw307nuk"},{"name":"hexo","_id":"cjtwjinmt001dawuwi3agr5fb"},{"name":"命名规范","_id":"cjtwjinn3001rawuwkk84op23"},{"name":"适配","_id":"cjtwjinn80022awuwbkwc1h73"},{"name":"Vue","_id":"cjtwjinnb0026awuwrocr9bm9"},{"name":"AOP","_id":"cjtwjinng002eawuw74vwwzn5"},{"name":"编程范式","_id":"cjtwjinni002gawuwdtoilujm"},{"name":"3D","_id":"cjtwjinni002hawuw15royl1g"},{"name":"矩阵","_id":"cjtwjinnj002kawuwz5kz1ze6"},{"name":"NodeJs","_id":"cjtwjinnk002nawuwl43opgx2"},{"name":"web-component","_id":"cjtwjinnm002tawuw1xe45bn0"},{"name":"特效","_id":"cjtwjinnn002wawuw71awcm24"},{"name":"目录","_id":"cjtwjinno002xawuwz26ves9n"},{"name":"Angular","_id":"cjtwjinnp0030awuwiretpf72"},{"name":"oop","_id":"cjtwjinnq0033awuw6tzdkvi8"},{"name":"IOC","_id":"cjtwjinnq0035awuw4wwqejxa"},{"name":"编程原则","_id":"cjtwjinnr0036awuwre2ezq8r"},{"name":"TypeScript","_id":"cjtwjinv4003hawuw3qzbbbvw"},{"name":"CI","_id":"cjtwjinvc003rawuwo2u254gg"},{"name":"Jenkins","_id":"cjtwjinve003wawuwmmjr47a2"},{"name":"Centos","_id":"cjtwjinvg003yawuw6ha65qpj"},{"name":"前端持续集成","_id":"cjtwjinvh003zawuw4bxlyfw3"},{"name":"SOLID","_id":"cjtwjinvi0040awuw73mg97zg"}]}}